import { euclidean } from '../metrics/index';
import { Heap } from '../datastructure/index';
import { Randomizer } from '../util/index';

/**
 * @class
 * @alias HNSW
 */
export class HNSW {
    /**
     * Hierarchical navigable small world graph. Efficient and robust approximate nearest neighbor search.
     * @constructor
     * @memberof module:knn
     * @alias HNSW
     * @param {*} metric metric to use: (a, b) => distance
     * @param {*} heuristic use heuristics or naive selection
     * @param {*} m max number of connections
     * @param {*} ef size of candidate list
     * @param {*} m0 max number of connections for ground layer 
     * @see {@link https://arxiv.org/abs/1603.09320}
     */
    constructor(metric = euclidean, heuristic = true, m = 5, ef = 200, m0 = null, mL = null, seed = 1987) {
        this._metric = metric;
        this._select = heuristic ? this._select_heuristic : this._select_simple;
        this._m = m;
        this._ef = ef;
        this._m0 = m0 || 2 * m;
        this._graph = [];
        this._ep = null;
        this._L = null;
        this._mL = mL || 1 / Math.log2(m);
        this._randomizer = new Randomizer(seed);
    }

    addOne(element) {
        this.add([element])
    }

    /**
     * 
     * @param {Array} elements - new elements.
     * @returns {HNSW}
     */
    add(elements) {
        const m = this._m;
        const ef = this._ef;
        const m0 = this._m0;
        const mL = this._mL;
        const randomizer = this._randomizer;
        const graph = this._graph;
        for (const element of elements) {
            let ep = this._ep ? this._ep.slice() : null;
            let W = [];
            let L = this._L;
            const rand = Math.min(randomizer.random + 1e-8, 1);
            let l = Math.floor(-Math.log(rand * mL))
            let min_L_l = Math.min(L, l);

            if (L) {
                for (let l_c = graph.length - 1; l_c > min_L_l; --l_c) {
                    ep = this._search_layer(element, ep, 1, l_c);
                }
                for (let l_c = min_L_l; l_c >= 0; --l_c) {
                    const layer_c = graph[l_c];
                    layer_c.points.push(element)
                    W = this._search_layer(element, ep, ef, l_c);
                    const neighbors = l_c > 3 ? this._select(element, W, m, l_c) : this._select_simple(element, W, m);
                    for (const p of neighbors) {
                        if (p !== element) {
                            //let distance = metric(p, element);
                            layer_c.edges.push({
                                "idx1": p, 
                                "idx2": element, 
                                ///distance: distance
                            });
                            layer_c.edges.push({
                                "idx1": element, 
                                "idx2": p, 
                                //distance: distance
                            });
                        }
                    }
                    const max = (l_c === 0 ? m0 : m);
                    for (const e of neighbors) {
                        const e_conn = layer_c.edges
                            .filter(edge => edge.idx1 === e)
                            .map(edge => edge.idx2);
                        if (e_conn.length > max) {
                            const neighborhood = this._select(e, e_conn, max, l_c);
                            layer_c.edges = layer_c.edges
                                .filter(edge => edge.idx1 !== e);
                            for (const neighbor of neighborhood) {
                                if (e !== neighbor) {
                                    //let distance = metric(e, neighbor);
                                    layer_c.edges.push({
                                        "idx1": e, 
                                        "idx2": neighbor, 
                                        //distance: distance
                                    });
                                }
                            }
                        }
                    }
                    ep = W;
                }
            }
            if (graph.length < l || l > L) {
                for (let i = graph.length; i <= l; ++i) {
                    const new_layer = {
                        "l_c": i, 
                        "points": [element], 
                        "edges": [],
                    };
                    graph.push(new_layer);
                    if (i === l) {
                        this._ep = [element];
                        this._L = l;
                    }
                }
                //graph = graph.sort((a, b) => a.l_c - b.l_c);
            }
        }
        return this;
    }

    /**
     * 
     * @param {*} q - base element.
     * @param {*} candidates - candidate elements.
     * @param {*} M - number of neighbors to return.
     * @param {*} l_c - layer number.
     * @param {*} extend_candidates - flag indicating wheter or not to extend candidate list.
     * @param {*} keep_pruned_connections - flag indicating wheter or not to add discarded elements.
     * @returns M elements selected by the heuristic.
     */
    _select_heuristic(q, candidates, M, l_c, extend_candidates = true, keep_pruned_connections = true) {
        if (l_c > this._graph.length - 1) return candidates
        const metric = this._metric;
        const randomizer = this._randomizer;
        const layer = this._graph[l_c];
        let R = [];
        let W_set = new Set(candidates);
        if (extend_candidates) {
            for (const c of candidates) {
                const edges = layer.edges.filter(edge => edge.idx1 === c)
                for (const {idx2: c_adj} of edges) {
                    W_set.add(c_adj)
                }
            }
        }
        let W = new Heap(W_set, d => metric(d, q), "min")
        let W_d = new Heap(null, d => metric(d, q), "min");
        while (!W.empty && R.length < M) {
            let e = W.pop()
            let random_r = randomizer.random_int % R.length;
            if (R.length === 0 || e.value < metric(R[random_r], q)) {
                R.push(e.element);
            } else {
                W_d.push(e.element)
            }
        }
        if (keep_pruned_connections) {
            while (!W_d.empty && R.length < M) {
                R.push(W_d.pop().element)
            }
        }
        return R
    }

    /**
     * 
     * @param {*} q - base element.
     * @param {*} C - candidate elements.
     * @param {*} M - number of neighbors to return.
     * @returns M nearest elements from C to q.
     */
    _select_simple(q, C, M) {
        const metric = this._metric;
        let res = C.sort((a,b) => metric(a, q) - metric(b, q)).slice(0,M);
        return res
    }

    /**
     * 
     * @param {*} q - query element.
     * @param {*} ep - enter points.
     * @param {*} ef - number of nearest to {@link q} elements to return.
     * @param {*} l_c - layer number.
     * @returns ef closest neighbors to q.
     */
    _search_layer(q, ep, ef, l_c) {
        const metric = this._metric;
        const layer = this._graph[l_c];
        if (layer.edges.length === 0) return ep;
        const v = new Set(ep);
        const C = new Heap(v, d => metric(d, q), "min");
        const W = new Heap(v, d => metric(d, q), "max");
        while (!C.empty) {
            const c = C.pop();
            const f = W.first;
            if (c.value > f.value) {
                break;
            }
            const edges = layer.edges.filter(e => e.idx1 === c.element)
            for (const {idx2: e} of edges) {
                if (!v.has(e)) {
                    v.add(e);
                    if (metric(e, q) < metric(f.element, q) || W.length < ef) {
                        C.push(e);
                        W.push(e);
                        if (W.length > ef) {
                            W.pop();
                        }
                    }
                }
            }
            console.log(W.toArray(), C.toArray())
        }
        return W.toArray()//.reverse().slice(0, ef);
    }

    /**
     * 
     * @param {*} q - query element.
     * @param {*} K - number of nearest neighbors to return.
     * @param {*} ef - size of the dynamic cnadidate list.
     * @returns K nearest elements to q.
     */
    search(q, K, ef = 1) {
        let ep = this._ep.slice();
        let L = this._L;
        for (let l_c = L; l_c > 0; --l_c) {
            ep = this._search_layer(q, ep, ef, l_c);
        }
        ep = this._search_layer(q, ep, K, 0);
        return ep;
    }

    * search_iter(q, K, ef = 1) {
        let ep = this._ep.slice();
        let L = this._L;
        yield{"l_c": L, "ep": [q]}
        for (let l_c = L; l_c > 0; --l_c) {
            yield {"l_c": l_c, "ep": ep}
            ep = this._search_layer(q, ep, ef, l_c);
            yield {"l_c": l_c, "ep": ep}
        }
        yield {"l_c": 0, "ep": ep}
        ep = this._search_layer(q, ep, K, 0);
        yield {"l_c": 0, "ep": ep}
    }
}