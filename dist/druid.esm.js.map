{"version":3,"file":"druid.esm.js","sources":["../metrics/euclidean.js","../numerical/kahan_sum.js","../numerical/neumair_sum.js","../metrics/euclidean_squared.js","../metrics/cosine.js","../metrics/manhattan.js","../metrics/chebyshev.js","../metrics/canberra.js","../metrics/jaccard.js","../metrics/hamming.js","../metrics/sokal_michener.js","../metrics/yule.js","../matrix/k_nearest_neighbors.js","../matrix/distance_matrix.js","../matrix/linspace.js","../matrix/norm.js","../matrix/normalize.js","../linear_algebra/qr.js","../linear_algebra/qr_householder.js","../linear_algebra/simultaneous_poweriteration.js","../linear_algebra/inner_product.js","../matrix/Matrix.js","../util/randomizer.js","../util/max.js","../util/min.js","../datastructure/Heap.js","../datastructure/DisjointSet.js","../knn/BallTree.js","../knn/KNN.js","../dimred/DR.js","../dimred/PCA.js","../dimred/MDS.js","../dimred/ISOMAP.js","../dimred/FASTMAP.js","../dimred/LDA.js","../dimred/LLE.js","../dimred/LTSA.js","../dimred/TSNE.js","../optimization/powell.js","../dimred/UMAP.js","../dimred/TriMap.js","../clustering/Hierarchical_Clustering.js","../clustering/KMeans.js","../clustering/KMedoids.js","../clustering/OPTICS.js","../dimred/LSP.js","../dimred/TopoMap.js","../dimred/SAMMON.js","../dimred/SQDMDS.js"],"sourcesContent":["import { euclidean_squared } from \"../metrics/index.js\";\n/**\n * Computes the euclidean distance (<code>l<sub>2</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    return Math.sqrt(euclidean_squared(a, b));\n}\n","/**\n * Numerical stable summation with the Kahan summation algorithm.\n * @memberof module:numerical\n * @alias kahan_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n    let y, t;\n\n    for (let i = 0; i < n; ++i) {\n        y = summands[i] - compensation;\n        t = sum + y;\n        compensation = t - sum - y;\n        sum = t;\n    }\n    return sum;\n}\n","/**\n * Numerical stable summation with the Neumair summation algorithm.\n * @memberof module:numerical\n * @alias neumair_sum\n * @param {Number[]} summands - Array of values to sum up.\n * @returns {Number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements}\n */\nexport default function (summands) {\n    const n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n\n    for (let i = 0; i < n; ++i) {\n        const summand = summands[i];\n        const t = sum + summand;\n        if (Math.abs(sum) >= Math.abs(summand)) {\n            compensation += sum - t + summand;\n        } else {\n            compensation += summand - t + sum;\n        }\n        sum = t;\n    }\n    return sum + compensation;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n/**\n * Computes the squared euclidean distance (l<sub>2</sub><sup>2</sup>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean_squared\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the squared euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    const s = new Float64Array(n);\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        const x_y = x - y;\n        s[i] = x_y * x_y;\n    }\n    return neumair_sum(s);\n}\n","/**\n * Computes the cosine distance (not similarity) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias cosine\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} The cosine distance between {@link a} and {@link b}.\n * \n * @example\n * import * as druid from \"@saehrimnir/druidjs\";\n * \n * druid.cosine([1,0],[1,1]) == 0.7853981633974484 == π/4;\n * \n */\nexport default function (a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    let sum_a = 0;\n    let sum_b = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += a[i] * b[i];\n        sum_a += a[i] * a[i];\n        sum_b += b[i] * b[i];\n    }\n    return Math.acos(sum / (Math.sqrt(sum_a) * Math.sqrt(sum_b)));\n}\n","/**\n * Computes the manhattan distance (<code>l<sub>1</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias manhattan\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the manhattan distance between <code>a</code> and <code>b</code>.\n */ \nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += Math.abs(a[i] - b[i]);\n    }\n    return sum;\n}\n","/**\n * Computes the chebyshev distance (L<sub>∞</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias chebyshev\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the chebyshev distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let res = [];\n    for (let i = 0; i < n; ++i) {\n        res.push(Math.abs(a[i] - b[i]));\n    }\n    return Math.max(...res);\n}\n","/**\n * Computes the canberra distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias canberra\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the canberra distance between <code>a</code> and <code>b</code>.\n * @see {@link https://en.wikipedia.org/wiki/Canberra_distance}\n */\nexport default function(a, b) {\n    if (a.length !== b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += (Math.abs(a[i] - b[i]) / (Math.abs(a[i]) + Math.abs(b[i])))\n    }\n    return sum;\n}","/**\n * Computes the jaccard distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias jaccard\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the jaccard distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_non_zero = 0;\n    let num_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_non_zero += x || y;\n        num_equal += x && y;\n    }\n    return (num_non_zero - num_equal) / num_non_zero;\n}\n","/**\n * Computes the hamming distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias hamming\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the hamming distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let disagree = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        disagree += x != y;\n    }\n    return disagree / n;\n}\n","/**\n * Computes the Sokal-Michener distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias sokal_michener\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the Sokal-Michener distance between <code>a</code> and <code>b</code>.  \n */\nexport default function(a, b) {\n    if (a.length != b.length) return undefined\n    const n = a.length;\n    let num_not_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_not_equal += x != y;\n    }\n    return (2 * num_not_equal) / (n + num_not_equal);\n}","/**\n * Computes the yule distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias yule\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the yule distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_true_true = 0;\n    let num_true_false = 0;\n    let num_false_true = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_true_true += x && y;\n        num_true_false += x && !y;\n        num_false_true += !x && x;\n    }\n    const num_false_false = n - num_true_true - num_true_false - num_false_true;\n    return num_true_false == 0 || num_false_true == 0 ? 0 : (2 * num_true_false * num_false_true) / (num_true_true * num_false_false + num_true_false * num_false_true);\n}\n","import { distance_matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Computes the k-nearest neighbors of each row of {@link A}.\n * @memberof module:matrix\n * @alias k_nearest_neigbhors\n * @param {Matrix} A - Either the data matrix, or a distance matrix.\n * @param {Number} k - The number of neighbors to compute.\n * @param {Function|\"precomputed\"} [metric=euclidean]\n * @returns {Array<Object>} -\n */\nexport default function (A, k, metric = euclidean) {\n    const rows = A.shape[0];\n    let D = metric == \"precomputed\" ? A : distance_matrix(A, metric);\n    let nN = new Array(rows);\n    for (let row = 0; row < rows; ++row) {\n        nN[row] = Array.from(D.row(row))\n            .map((distance, col) => {\n                return {\n                    i: row,\n                    j: col,\n                    distance: distance,\n                };\n            })\n            .sort((a, b) => a.distance - b.distance)\n            .slice(1, k + 1);\n    }\n    return nN;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"./index.js\";\n\n/**\n * Computes the distance matrix of datamatrix {@link A}.\n * @memberof module:matrix\n * @alias distance_matrix\n * @param {Matrix} A - Matrix.\n * @param {Function} [metric=euclidean] - The diistance metric.\n * @returns {Matrix} D - The distance matrix of {@link A}.\n */\nexport default function (A, metric = euclidean) {\n    let n = A.shape[0];\n    const D = new Matrix(n, n);\n    for (let i = 0; i < n; ++i) {\n        const A_i = A.row(i);\n        for (let j = i + 1; j < n; ++j) {\n            const dist = metric(A_i, A.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n        }\n    }\n    return D;\n}\n","/**\n * Creates an Array containing {@link number} numbers from {@link start} to {@link end}.\n * If <code>{@link number} = null</null>.\n * @memberof module:matrix\n * @alias linspace\n * @param {Number} start - Start value.\n * @param {Number} end - End value.\n * @param {Number} [number = null] - Number of number between {@link start} and {@link end}.\n * @returns {Array} - An array with {@link number} entries, beginning at {@link start} ending at {@link end}.\n */\nexport default function (start, end, number = null) {\n    if (!number) {\n        number = Math.max(Math.round(end - start) + 1, 1);\n    }\n    if (number < 2) {\n        return number === 1 ? [start] : [];\n    }\n    let result = new Array(number);\n    number -= 1;\n    for (let i = number; i >= 0; --i) {\n        result[i] = (i * end + (number - i) * start) / number;\n    }\n    return result;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n//import { neumair_sum } from \"../numerical/index\";\n\n/**\n * Computes the norm of a vector, by computing its distance to **0**.\n * @memberof module:matrix\n * @alias norm\n * @param {Matrix|Array<Number>|Float64Array} v - Vector.\n * @param {Function} [metric = euclidean] - Which metric should be used to compute the norm.\n * @returns {Number} - The norm of {@link v}.\n */\nexport default function (v, metric = euclidean) {\n    let vector = null;\n    if (v instanceof Matrix) {\n        let [rows, cols] = v.shape;\n        if (rows === 1) vector = v.row(0);\n        else if (cols === 1) vector = v.col(0);\n        else throw new Error(\"Matrix must be 1d!\");\n    } else {\n        vector = v;\n    }\n    const n = vector.length;\n    const zeros = new Float64Array(n);\n    return metric(vector, zeros);\n}\n","import { norm } from \"./index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Normalizes Vector {@link v}.\n * @memberof module:matrix\n * @alias normalize\n * @param {Array<Number>|Float64Array} v - Vector\n * @param {Function} metric \n * @returns {Array<Number>|Float64Array} - The normalized vector with length 1.\n */\nexport default function(v, metric = euclidean)  {\n    const v_norm = norm(v, metric);\n    return v.map(value => value / v_norm);\n}","import { Matrix, norm } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} using Gram-Schmidt process.\n * @memberof module:linear_algebra\n * @alias qr\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_the_Gram%E2%80%93Schmidt_process}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, cols, \"identity\");\n    const R = new Matrix(cols, cols, 0);\n\n    for (let j = 0; j < cols; ++j) {\n        let v = A.col(j);\n        for (let i = 0; i < j; ++i) {\n            const q = Q.col(i);\n            const q_dot_v = neumair_sum(q.map((q_, k) => q_ * v[k]));\n            R.set_entry(i, j, q_dot_v);\n            v = v.map((v_, k) => v_ - q_dot_v * q[k]);\n        }\n        const v_norm = norm(v, euclidean);\n        for (let k = 0; k < rows; ++k) {\n            Q.set_entry(k, j, v[k] / v_norm);\n        }\n        R.set_entry(j, j, v_norm);\n    }\n    return { R, Q };\n}\n","import { Matrix, norm } from \"../matrix/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} with householder transformations.\n * @memberof module:linear_algebra\n * @alias qr_householder\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_Householder_reflections}\n * @see {@link http://mlwiki.org/index.php/Householder_Transformation}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, rows, \"I\");\n    const R = A.clone();\n\n    for (let j = 0; j < cols; ++j) {\n        const x = Matrix.from(R.col(j).slice(j));\n        const x_norm = norm(x);\n        const x0 = x.entry(0, 0);\n        const rho = -Math.sign(x0);\n        const u1 = x0 - rho * x_norm;\n        const u = x.divide(u1).set_entry(0, 0, 1);\n        const beta = (-rho * u1) / x_norm;\n\n        const u_outer_u = u.outer(u);\n        const R_block = R.get_block(j, 0);\n        const new_R = R_block.sub(u_outer_u.dot(R_block).mult(beta));\n        const Q_block = Q.get_block(0, j);\n        const new_Q = Q_block.sub(Q_block.dot(u_outer_u).mult(beta));\n        R.set_block(j, 0, new_R);\n        Q.set_block(0, j, new_Q);\n    }\n    return { R, Q };\n}\n","import { qr as qr_gramschmidt } from \"./index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\n\n/**\n * Computes the {@link k} biggest Eigenvectors and Eigenvalues from Matrix {@link A} with the QR-Algorithm.\n * @memberof module:linear_algebra\n * @alias simultaneous_poweriteration\n * @param {Matrix} A - The Matrix\n * @param {Number} k - The number of eigenvectors and eigenvalues to compute.\n * @param {Object} parameters - Object containing parameterization of the simultanious poweriteration method.\n * @param {Number} [parameters.max_iterations=100] - The number of maxiumum iterations the algorithm should run.\n * @param {Number|Randomizer} [parameters.seed=1212] - The seed value or a randomizer used in the algorithm.\n * @param {Function} [parameters.qr=qr_gramschmidt] - The QR technique to use.\n * @param {Number} [parameters.tol=1e-8] - Allowed error for stopping criteria\n * @returns {{eigenvalues: Array, eigenvectors: Array}} - The {@link k} biggest eigenvectors and eigenvalues of Matrix {@link A}.\n */\nexport default function (A, k = 2, {seed = 1212, max_iterations = 100, qr = qr_gramschmidt, tol = 1e-8} = {}) {\n    const randomizer = seed instanceof Randomizer ? seed : new Randomizer(seed);\n    if (!(A instanceof Matrix)) A = Matrix.from(A);\n    const n = A.shape[0];\n    let { Q, R } = qr(new Matrix(n, k, () => (randomizer.random - .5) * 2));\n    while (max_iterations--) {\n        const oldQ = Q.clone();\n        const Z = A.dot(Q);\n        const QR = qr(Z);\n        Q = QR.Q;\n        R = QR.R;\n        const error = euclidean_squared(Q.values, oldQ.values);\n        if (error < tol) {\n            break;\n        }\n    }\n\n    const eigenvalues = R.diag;\n    const eigenvectors = Q.to2dArray;\n    return { eigenvalues, eigenvectors };\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the inner product between two arrays of the same length.\n * @memberof module:linear_algebra\n * @alias inner_product\n * @param {Array|Float64Array} a - Array a\n * @param {Array|Float64Array} b - Array b\n * @returns The inner product between {@link a} and {@link b}\n */\nexport default function (a, b) {\n    const N = a.length;\n    if (N != b.length) {\n        throw new Error(\"Array a and b must have the same length!\")\n    }\n    let sum = 0;\n    for (let i = 0; i < N; ++i) {\n        sum += a * b;\n    }\n    return sum;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n/**\n * @class\n * @alias Matrix\n * @requires module:numerical/neumair_sum\n */\nexport class Matrix {\n    /**\n     * creates a new Matrix. Entries are stored in a Float64Array.\n     * @memberof module:matrix\n     * @param {number} rows - The amount of rows of the matrix.\n     * @param {number} cols - The amount of columns of the matrix.\n     * @param {(function|string|number)} value=0 - Can be a function with row and col as parameters, a number, or \"zeros\", \"identity\" or \"I\", or \"center\".\n     *  - **function**: for each entry the function gets called with the parameters for the actual row and column.\n     *  - **string**: allowed are\n     *      - \"zero\", creates a zero matrix.\n     *      - \"identity\" or \"I\", creates an identity matrix.\n     *      - \"center\", creates an center matrix.\n     *  - **number**: create a matrix filled with the given value.\n     * @example\n     *\n     * let A = new Matrix(10, 10, () => Math.random()); //creates a 10 times 10 random matrix.\n     * let B = new Matrix(3, 3, \"I\"); // creates a 3 times 3 identity matrix.\n     * @returns {Matrix} returns a {@link rows} times {@link cols} Matrix filled with {@link value}.\n     */\n    constructor(rows = null, cols = null, value = null) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = null;\n        if (rows && cols) {\n            if (!value) {\n                this._data = new Float64Array(rows * cols);\n                return this;\n            }\n            if (typeof value === \"function\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value(row, col);\n                    }\n                }\n                return this;\n            }\n            if (typeof value === \"string\") {\n                if (value === \"zeros\") {\n                    return new Matrix(rows, cols, 0);\n                }\n                if (value === \"identity\" || value === \"I\") {\n                    this._data = new Float64Array(rows * cols);\n                    for (let row = 0; row < rows; ++row) {\n                        this._data[row * cols + row] = 1;\n                    }\n                    return this;\n                }\n                if (value === \"center\" && rows == cols) {\n                    this._data = new Float64Array(rows * cols);\n                    value = (i, j) => (i === j ? 1 : 0) - 1 / rows;\n                    for (let row = 0; row < rows; ++row) {\n                        for (let col = 0; col < cols; ++col) {\n                            this._data[row * cols + col] = value(row, col);\n                        }\n                    }\n                    return this;\n                }\n            }\n            if (typeof value === \"number\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value;\n                    }\n                }\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Creates a Matrix out of {@link A}.\n     * @param {(Matrix|Array|Float64Array|number)} A - The matrix, array, or number, which should converted to a Matrix.\n     * @param {\"row\"|\"col\"|\"diag\"} [type = \"row\"] - If {@link A} is a Array or Float64Array, then type defines if it is a row- or a column vector.\n     * @returns {Matrix}\n     *\n     * @example\n     * let A = Matrix.from([[1, 0], [0, 1]]); //creates a two by two identity matrix.\n     * let S = Matrix.from([1, 2, 3], \"diag\"); // creates a 3 by 3 matrix with 1, 2, 3 on its diagonal. [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n     */\n    static from(A, type = \"row\") {\n        if (A instanceof Matrix) {\n            return A.clone();\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let m = A.length;\n            if (m === 0) throw new Error(\"Array is empty\");\n            // 1d\n            if (!Array.isArray(A[0]) && !(A[0] instanceof Float64Array)) {\n                if (type === \"row\") {\n                    return new Matrix(1, m, (_, j) => A[j]);\n                } else if (type === \"col\") {\n                    return new Matrix(m, 1, (i) => A[i]);\n                } else if (type === \"diag\") {\n                    return new Matrix(m, m, (i, j) => (i == j ? A[i] : 0));\n                } else {\n                    throw new Error(\"1d array has NaN entries\");\n                }\n                // 2d\n            } else if (Array.isArray(A[0]) || A[0] instanceof Float64Array) {\n                let n = A[0].length;\n                for (let row = 0; row < m; ++row) {\n                    if (A[row].length !== n) {\n                        throw new Error(\"various array lengths\");\n                    }\n                }\n                return new Matrix(m, n, (i, j) => A[i][j]);\n            }\n        } else if (typeof A === \"number\") {\n            return new Matrix(1, 1, A);\n        } else {\n            throw new Error(\"error\");\n        }\n    }\n\n    /**\n     * Returns the {@link row}<sup>th</sup> row from the Matrix.\n     * @param {Number} row\n     * @returns {Float64Array}\n     */\n    row(row) {\n        const data = this.values;\n        const cols = this._cols;\n        return data.subarray(row * cols, (row + 1) * cols);\n    }\n\n    /**\n     * Returns an generator yielding each row of the Matrix.\n     * @yields {Float64Array}\n     */\n    *iterate_rows() {\n        const cols = this._cols;\n        const rows = this._rows;\n        const data = this.values;\n        for (let row = 0; row < rows; ++row) {\n            yield data.subarray(row * cols, (row + 1) * cols);\n        }\n    }\n\n    /**\n     * Makes a {@link Matrix} object an iterable object.\n     * @yields {Float64Array}\n     */\n    *[Symbol.iterator]() {\n        for (const row of this.iterate_rows()) {\n            yield row;\n        }\n    }\n\n    /**\n     * Sets the entries of {@link row}<sup>th</sup> row from the Matrix to the entries from {@link values}.\n     * @param {Number} row\n     * @param {Array} values\n     * @returns {Matrix}\n     */\n    set_row(row, values) {\n        const cols = this._cols;\n        if ((Array.isArray(values) || values instanceof Float64Array) && values.length === cols) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values[col];\n            }\n        } else if (values instanceof Matrix && values.shape[1] === cols && values.shape[0] === 1) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values._data[col];\n            }\n        } else {\n            throw new Error(\"Values not valid! Needs to be either an Array, a Float64Array, or a fitting Matrix!\")\n        }\n        return this;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> column from the Matrix.\n     * @param {Number} col\n     * @returns {Array}\n     */\n    col(col) {\n        const result_col = new Float64Array(this._rows);\n        for (let row = 0; row < this._rows; ++row) {\n            result_col[row] = this.values[row * this._cols + col];\n        }\n        return result_col;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @returns {float64}\n     */\n    entry(row, col) {\n        return this.values[row * this._cols + col];\n    }\n\n    /**\n     * Sets the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix to the given {@link value}.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    set_entry(row, col, value) {\n        this.values[row * this._cols + col] = value;\n        return this;\n    }\n\n    /**\n     * Returns a new transposed Matrix.\n     * @returns {Matrix}\n     */\n    transpose() {\n        let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n        return B;\n    }\n\n    /**\n     * Returns a new transposed Matrix. Short-form of {@function transpose}.\n     * @returns {Matrix}\n     */\n    get T() {\n        return this.transpose();\n    }\n\n    /**\n     * Returns the inverse of the Matrix.\n     * @returns {Matrix}\n     */\n    inverse() {\n        const rows = this._rows;\n        const cols = this._cols;\n        let B = new Matrix(rows, 2 * cols, (i, j) => {\n            if (j >= cols) {\n                return i === j - cols ? 1 : 0;\n            } else {\n                return this.entry(i, j);\n            }\n        });\n        let h = 0;\n        let k = 0;\n        while (h < rows && k < cols) {\n            var i_max = 0;\n            let max_val = -Infinity;\n            for (let i = h; i < rows; ++i) {\n                let val = Math.abs(B.entry(i, k));\n                if (max_val < val) {\n                    i_max = i;\n                    max_val = val;\n                }\n            }\n            if (B.entry(i_max, k) == 0) {\n                k++;\n            } else {\n                // swap rows\n                for (let j = 0; j < 2 * cols; ++j) {\n                    let h_val = B.entry(h, j);\n                    let i_val = B.entry(i_max, j);\n                    B.set_entry(h, j, h_val);\n                    B.set_entry(i_max, j, i_val);\n                }\n                for (let i = h + 1; i < rows; ++i) {\n                    let f = B.entry(i, k) / B.entry(h, k);\n                    B.set_entry(i, k, 0);\n                    for (let j = k + 1; j < 2 * cols; ++j) {\n                        B.set_entry(i, j, B.entry(i, j) - B.entry(h, j) * f);\n                    }\n                }\n                h++;\n                k++;\n            }\n        }\n\n        for (let row = 0; row < rows; ++row) {\n            let f = B.entry(row, row);\n            for (let col = row; col < 2 * cols; ++col) {\n                B.set_entry(row, col, B.entry(row, col) / f);\n            }\n        }\n\n        for (let row = rows - 1; row >= 0; --row) {\n            let B_row_row = B.entry(row, row);\n            for (let i = 0; i < row; i++) {\n                let B_i_row = B.entry(i, row);\n                let f = B_i_row / B_row_row;\n                for (let j = i; j < 2 * cols; ++j) {\n                    let B_i_j = B.entry(i, j);\n                    let B_row_j = B.entry(row, j);\n                    B_i_j = B_i_j - B_row_j * f;\n                    B.set_entry(i, j, B_i_j);\n                }\n            }\n        }\n\n        return new Matrix(rows, cols, (i, j) => B.entry(i, j + cols));\n    }\n\n    /**\n     * Returns the dot product. If {@link B} is an Array or Float64Array then an Array gets returned. If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            if (A.shape[1] !== B.shape[0]) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix: \n                A has ${A.shape[1]} cols and B ${B.shape[0]} rows. \n                Must be equal!`);\n            }\n            let I = A.shape[1];\n            let C = new Matrix(A.shape[0], B.shape[1], (row, col) => {\n                const A_i = A.row(row);\n                const B_i = B.col(col);\n                let sum = 0;\n                for (let i = 0; i < I; ++i) {\n                    sum += A_i[i] * B_i[i];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Array.isArray(B) || B instanceof Float64Array) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Computes the outer product from {@link this} and {@link B}.\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    outer(B) {\n        let A = this;\n        let l = A._data.length;\n        let r = B._data.length;\n        if (l != r) return undefined;\n        let C = new Matrix();\n        C.shape = [\n            l,\n            l,\n            (i, j) => {\n                if (i <= j) {\n                    return A._data[i] * B._data[j];\n                } else {\n                    return C.entry(j, i);\n                }\n            },\n        ];\n        return C;\n    }\n\n    /**\n     * Appends matrix {@link B} to the matrix.\n     * @param {Matrix} B - matrix to append.\n     * @param {\"horizontal\"|\"vertical\"|\"diag\"} [type = \"horizontal\"] - type of concatenation.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 1], [1, 1]]); // 2 by 2 matrix filled with ones.\n     * let B = Matrix.from([[2, 2], [2, 2]]); // 2 by 2 matrix filled with twos.\n     *\n     * A.concat(B, \"horizontal\"); // 2 by 4 matrix. [[1, 1, 2, 2], [1, 1, 2, 2]]\n     * A.concat(B, \"vertical\"); // 4 by 2 matrix. [[1, 1], [1, 1], [2, 2], [2, 2]]\n     * A.concat(B, \"diag\"); // 4 by 4 matrix. [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 2, 2], [0, 0, 2, 2]]\n     */\n    concat(B, type = \"horizontal\") {\n        const A = this;\n        const [rows_A, cols_A] = A.shape;\n        const [rows_B, cols_B] = B.shape;\n        if (type == \"horizontal\") {\n            if (rows_A != rows_B) {\n                throw new Error(`A.concat(B, \"horizontal\"): A and B need same number of rows, A has ${rows_A} rows, B has ${rows_B} rows.`);\n            }\n            const X = new Matrix(rows_A, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(0, cols_A, B);\n            return X;\n        } else if (type == \"vertical\") {\n            if (cols_A != cols_B) {\n                throw new Error(`A.concat(B, \"vertical\"): A and B need same number of columns, A has ${cols_A} columns, B has ${cols_B} columns.`);\n            }\n            const X = new Matrix(rows_A + rows_B, cols_A, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, 0, B);\n            return X;\n        } else if (type == \"diag\") {\n            const X = new Matrix(rows_A + rows_B, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, cols_A, B);\n            return X;\n        } else {\n            throw new Error(`type must be \"horizontal\" or \"vertical\", but type is ${type}!`);\n        }\n    }\n\n    /**\n     * Writes the entries of B in A at an offset position given by {@link offset_row} and {@link offset_col}.\n     * @param {int} offset_row\n     * @param {int} offset_col\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    set_block(offset_row, offset_col, B) {\n        let [rows, cols] = B.shape;\n        for (let row = 0; row < rows; ++row) {\n            if (row > this._rows) {\n                continue;\n            }\n            for (let col = 0; col < cols; ++col) {\n                if (col > this._cols) {\n                    continue;\n                }\n                this.set_entry(row + offset_row, col + offset_col, B.entry(row, col));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Extracts the entries from the {@link start_row}<sup>th</sup> row to the {@link end_row}<sup>th</sup> row, the {@link start_col}<sup>th</sup> column to the {@link end_col}<sup>th</sup> column of the matrix.\n     * If {@link end_row} or {@link end_col} is empty, the respective value is set to {@link this.rows} or {@link this.cols}.\n     * @param {Number} start_row\n     * @param {Number} start_col\n     * @param {Number} [end_row = null]\n     * @param {Number} [end_col = null]\n     * @returns {Matrix} Returns a end_row - start_row times end_col - start_col matrix, with respective entries from the matrix.\n     * @example\n     *\n     * let A = Matrix.from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // a 3 by 3 matrix.\n     *\n     * A.get_block(1, 1); // [[5, 6], [8, 9]]\n     * A.get_block(0, 0, 1, 1); // [[1]]\n     * A.get_block(1, 1, 2, 2); // [[5]]\n     * A.get_block(0, 0, 2, 2); // [[1, 2], [4, 5]]\n     */\n    get_block(start_row, start_col, end_row = null, end_col = null) {\n        const [rows, cols] = this.shape;\n        end_row = end_row ?? rows;\n        end_col = end_col ?? cols;\n        if (end_row <= start_row || end_col <= start_col) {\n            throw new Error(`\n                end_row must be greater than start_row, and \n                end_col must be greater than start_col, but\n                end_row = ${end_row}, start_row = ${start_row}, end_col = ${end_col}, and start_col = ${start_col}!`);\n        }\n        const X = new Matrix(end_row - start_row, end_col - start_col, \"zeros\");\n        for (let row = start_row, new_row = 0; row < end_row; ++row, ++new_row) {\n            for (let col = start_col, new_col = 0; col < end_col; ++col, ++new_col) {\n                X.set_entry(new_row, new_col, this.entry(row, col));\n            }\n        }\n        return X;\n        //return new Matrix(end_row - start_row, end_col - start_col, (i, j) => this.entry(i + start_row, j + start_col));\n    }\n\n    /**\n     * Returns a new array gathering entries defined by the indices given by argument.\n     * @param {Array<Number>} row_indices - Array consists of indices of rows for gathering entries of this matrix\n     * @param {Array<Number>} col_indices  - Array consists of indices of cols for gathering entries of this matrix\n     * @returns {Matrix}\n     */\n    gather(row_indices, col_indices) {\n        const N = row_indices.length;\n        const D = col_indices.length;\n\n        const R = new Matrix(N, D);\n        for (let i = 0; i < N; ++i) {\n            const row_index = row_indices[i];\n            for (let j = 0; j < N; ++j) {\n                const col_index = col_indices[j];\n                R.set_entry(i, j, this.entry(row_index, col_index));\n            }\n        }\n\n        return R;\n    }\n\n    /**\n     * Applies a function to each entry of the matrix.\n     * @private\n     * @param {Function} f function takes 2 parameters, the value of the actual entry and a value given by the function {@link v}. The result of {@link f} gets writen to the Matrix.\n     * @param {Function} v function takes 2 parameters for row and col, and returns a value witch should be applied to the colth entry of the rowth row of the matrix.\n     */\n    _apply_array(f, v) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let row = 0; row < rows; ++row) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                const i = offset + col;\n                data[i] = f(data[i], v(row, col));\n            }\n        }\n        return this;\n    }\n\n    _apply_rowwise_array(values, f) {\n        return this._apply_array(f, (_, j) => values[j]);\n    }\n\n    _apply_colwise_array(values, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let row = 0; row < rows; ++row) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                const i = offset + col;\n                data[i] = f(data[i], values[row]);\n            }\n        }\n        return this;\n    }\n\n    _apply(value, f) {\n        let data = this.values;\n        if (value instanceof Matrix) {\n            let [value_rows, value_cols] = value.shape;\n            let [rows, cols] = this.shape;\n            if (value_rows === 1) {\n                if (cols !== value_cols) {\n                    throw new Error(`cols !== value_cols`);\n                }\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(0, col));\n                    }\n                }\n            } else if (value_cols === 1) {\n                if (rows !== value_rows) {\n                    throw new Error(`rows !== value_rows`);\n                }\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(row, 0));\n                    }\n                }\n            } else if (rows == value_rows && cols == value_cols) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(row, col));\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else if (Array.isArray(value)) {\n            let rows = this._rows;\n            let cols = this._cols;\n            if (value.length === rows) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value[row]);\n                    }\n                }\n            } else if (value.length === cols) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value[col]);\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else {\n            for (let i = 0, n = this._rows * this._cols; i < n; ++i) {\n                data[i] = f(data[i], value);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Clones the Matrix.\n     * @returns {Matrix}\n     */\n    clone() {\n        let B = new Matrix();\n        B._rows = this._rows;\n        B._cols = this._cols;\n        B._data = this.values.slice(0);\n        return B;\n    }\n\n    /**\n     * Entrywise multiplication with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies multiplication to the element, otherwise it creates first a copy and applies the multiplication on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.mult(2); // [[2, 4], [6, 8]];\n     * A.mult(B); // [[1, 4], [9, 16]];\n     */\n    mult(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a * b);\n    }\n\n    /**\n     * Entrywise division with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies division to the element, otherwise it creates first a copy and applies the division on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.divide(2); // [[0.5, 1], [1.5, 2]];\n     * A.divide(B); // [[1, 1], [1, 1]];\n     */\n    divide(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a / b);\n    }\n\n    /**\n     * Entrywise addition with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies addition to the element, otherwise it creates first a copy and applies the addition on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.add(2); // [[3, 4], [5, 6]];\n     * A.add(B); // [[2, 4], [6, 8]];\n     */\n    add(value, {inline = false} = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a + b);\n    }\n\n    /**\n     * Entrywise subtraction with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies subtraction to the element, otherwise it creates first a copy and applies the subtraction on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.sub(2); // [[-1, 0], [1, 2]];\n     * A.sub(B); // [[0, 0], [0, 0]];\n     */\n    sub(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a - b);\n    }\n\n    /**\n     * Returns the number of rows and columns of the Matrix.\n     * @returns {Array} An Array in the form [rows, columns].\n     */\n    get shape() {\n        return [this._rows, this._cols];\n    }\n\n    /**\n     * Returns the matrix in the given shape with the given function which returns values for the entries of the matrix.\n     * @param {Array} parameter - takes an Array in the form [rows, cols, value], where rows and cols are the number of rows and columns of the matrix, and value is a function which takes two parameters (row and col) which has to return a value for the colth entry of the rowth row.\n     * @returns {Matrix}\n     */\n    set shape([rows, cols, value = () => 0]) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = new Float64Array(rows * cols);\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n                this._data[row * cols + col] = value(row, col);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Float64Arrays.\n     * @returns {Array<Float64Array>}\n     */\n    get to2dArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(row);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Arrays.\n     * @returns {Array<Array>}\n     */\n    get asArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(Array.from(row));\n        }\n        return result;\n    }\n\n    /**\n     * Returns the diagonal of the Matrix.\n     * @returns {Float64Array}\n     */\n    get diag() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const min_row_col = Math.min(rows, cols);\n        let result = new Float64Array(min_row_col);\n        for (let i = 0; i < min_row_col; ++i) {\n            result[i] = this.entry(i, i);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the mean of all entries of the Matrix.\n     * @returns {Number}\n     */\n    get mean() {\n        const sum = this.sum;\n        const n = this._rows * this._cols;\n        return sum / n;\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Number}\n     */\n    get sum() {\n        const data = this.values;\n        return neumair_sum(data);\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Float64Array}\n     */\n    get values() {\n        const data = this._data;\n        return data;\n    }\n\n    /**\n     * Returns the mean of each row of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanRows() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: rows });\n        for (let row = 0; row < rows; ++row) {\n            result[row] = 0;\n            for (let col = 0; col < cols; ++col) {\n                result[row] += data[row * cols + col];\n            }\n            result[row] /= cols;\n        }\n        return result;\n    }\n\n    /** Returns the mean of each column of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanCols() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: cols });\n        for (let col = 0; col < cols; ++col) {\n            result[col] = 0;\n            for (let row = 0; row < rows; ++row) {\n                result[col] += data[row * cols + col];\n            }\n            result[col] /= rows;\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b} using the conjugate gradient method. Returns the result x.\n     * @param {Matrix} A - Matrix\n     * @param {Matrix} b - Matrix\n     * @param {Randomizer} [randomizer=null]\n     * @param {Number} [tol=1e-3]\n     * @returns {Matrix}\n     */\n    static solve_CG(A, b, randomizer, tol = 1e-3) {\n        if (randomizer === null) {\n            randomizer = new Randomizer();\n        }\n        const rows = A.shape[0];\n        const cols = b.shape[1];\n        let result = new Matrix(rows, 0);\n        for (let i = 0; i < cols; ++i) {\n            const b_i = Matrix.from(b.col(i)).T;\n            let x = new Matrix(rows, 1, () => randomizer.random);\n            let r = b_i.sub(A.dot(x));\n            let d = r.clone();\n            do {\n                const z = A.dot(d);\n                const alpha = r.T.dot(r).entry(0, 0) / d.T.dot(z).entry(0, 0);\n                x = x.add(d.mult(alpha));\n                const r_next = r.sub(z.mult(alpha));\n                const beta = r_next.T.dot(r_next).entry(0, 0) / r.T.dot(r).entry(0, 0);\n                d = r_next.add(d.mult(beta));\n                r = r_next;\n            } while (Math.abs(r.mean) > tol);\n            result = result.concat(x, \"horizontal\");\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b}. Returns the result x.\n     * @param {Matrix} A - Matrix or LU Decomposition\n     * @param {Matrix} b - Matrix\n     * @returns {Matrix}\n     */\n    static solve(A, b) {\n        let { L: L, U: U } = \"L\" in A && \"U\" in A ? A : Matrix.LU(A);\n        let rows = L.shape[0];\n        let x = b.clone();\n\n        // forward\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < row - 1; ++col) {\n                x.set_entry(0, row, x.entry(0, row) - L.entry(row, col) * x.entry(1, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / L.entry(row, row));\n        }\n\n        // backward\n        for (let row = rows - 1; row >= 0; --row) {\n            for (let col = rows - 1; col > row; --col) {\n                x.set_entry(0, row, x.entry(0, row) - U.entry(row, col) * x.entry(0, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / U.entry(row, row));\n        }\n\n        return x;\n    }\n\n    /**\n     * {@link L}{@link U} decomposition of the Matrix {@link A}. Creates two matrices, so that the dot product LU equals A.\n     * @param {Matrix} A\n     * @returns {{L: Matrix, U: Matrix}} result - Returns the left triangle matrix {@link L} and the upper triangle matrix {@link U}.\n     */\n    static LU(A) {\n        const rows = A.shape[0];\n        const L = new Matrix(rows, rows, \"zeros\");\n        const U = new Matrix(rows, rows, \"identity\");\n\n        for (let j = 0; j < rows; ++j) {\n            for (let i = j; i < rows; ++i) {\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(i, k) * U.entry(k, j);\n                }\n                L.set_entry(i, j, A.entry(i, j) - sum);\n            }\n            for (let i = j; i < rows; ++i) {\n                if (L.entry(j, j) === 0) {\n                    return undefined;\n                }\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(j, k) * U.entry(k, i);\n                }\n                U.set_entry(j, i, (A.entry(j, i) - sum) / L.entry(j, j));\n            }\n        }\n\n        return { L: L, U: U };\n    }\n\n    /**\n     * Computes the determinante of {@link A}, by using the LU decomposition of {@link A}.\n     * @param {Matrix} A\n     * @returns {Number} det - Returns the determinate of the Matrix {@link A}.\n     */\n    static det(A) {\n        const rows = A.shape[0];\n        const { L, U } = Matrix.LU(A);\n        const L_diag = L.diag;\n        const U_diag = U.diag;\n        let det = L_diag[0] * U_diag[0];\n        for (let row = 1; row < rows; ++row) {\n            det *= L_diag[row] * U_diag[row];\n        }\n        return det;\n    }\n\n    /**\n     * Computes the {@link k} components of the SVD decomposition of the matrix {@link M}\n     * @param {Matrix} M\n     * @param {int} [k=2]\n     * @returns {{U: Matrix, Sigma: Matrix, V: Matrix}}\n     */\n    static SVD(M, k = 2) {\n        const MT = M.T;\n        let MtM = MT.dot(M);\n        let MMt = M.dot(MT);\n        let { eigenvectors: V, eigenvalues: Sigma } = simultaneous_poweriteration(MtM, k);\n        let { eigenvectors: U } = simultaneous_poweriteration(MMt, k);\n        return { U: U, Sigma: Sigma.map((sigma) => Math.sqrt(sigma)), V: V };\n\n        //Algorithm 1a: Householder reduction to bidiagonal form:\n        /* const [m, n] = A.shape;\n        let U = new Matrix(m, n, (i, j) => i == j ? 1 : 0);\n        console.log(U.to2dArray)\n        let V = new Matrix(n, m, (i, j) => i == j ? 1 : 0);\n        console.log(V.to2dArray)\n        let B = Matrix.bidiagonal(A.clone(), U, V);\n        console.log(U,V,B)\n        return { U: U, \"Sigma\": B, V: V }; */\n    }\n}\n","import { linspace, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @memberof module:utils\n * @alias Randomizer\n */\nexport class Randomizer {\n    /**\n     * Mersenne Twister random number generator.\n     * @constructor\n     * @param {Number} [_seed=new Date().getTime()] - The seed for the random number generator. If <code>_seed == null</code> then the actual time gets used as seed.\n     * @see https://github.com/bmurray7/mersenne-twister-examples/blob/master/javascript-mersenne-twister.js\n     */\n    constructor(_seed) {\n        this._N = 624;\n        this._M = 397;\n        this._MATRIX_A = 0x9908b0df;\n        this._UPPER_MASK = 0x80000000;\n        this._LOWER_MASK = 0x7fffffff;\n        this._mt = new Array(this._N);\n        this._mti = this.N + 1;\n\n        this.seed = _seed || new Date().getTime();\n        return this;\n    }\n\n    set seed(_seed) {\n        this._seed = _seed;\n        let mt = this._mt;\n\n        mt[0] = _seed >>> 0;\n        for (this._mti = 1; this._mti < this._N; this._mti += 1) {\n            let mti = this._mti;\n            let s = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n            mt[mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + mti;\n            mt[mti] >>>= 0;\n        }\n    }\n\n    /**\n     * Returns the seed of the random number generator.\n     * @returns {Number} - The seed.\n     */\n    get seed() {\n        return this._seed;\n    }\n\n    /**\n     * Returns a float between 0 and 1.\n     * @returns {Number} - A random number between [0, 1]\n     */\n    get random() {\n        return this.random_int * (1.0 / 4294967296.0);\n    }\n\n    /**\n     * Returns an integer between 0 and MAX_INTEGER.\n     * @returns {Integer} - A random integer.\n     */\n    get random_int() {\n        let y,\n            mag01 = new Array(0x0, this._MATRIX_A);\n        if (this._mti >= this._N) {\n            let kk;\n\n            /* if (this._mti == this._N + 1) {\n                this.seed = 5489;\n            } */\n\n            let N_M = this._N - this._M;\n            let M_N = this._M - this._N;\n\n            for (kk = 0; kk < N_M; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + this._M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (; kk < this._N - 1; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + M_N] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            y = (this._mt[this._N - 1] & this._UPPER_MASK) | (this._mt[0] & this._LOWER_MASK);\n            this._mt[this._N - 1] = this._mt[this._M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this._mti = 0;\n        }\n\n        y = this._mt[(this._mti += 1)];\n        y ^= y >>> 11;\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= y >>> 18;\n\n        return y >>> 0;\n    }\n\n    /**\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    choice(A, n) {\n        if (A instanceof Matrix) {\n            let rows = A.shape[0];\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A.row(d));\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let rows = A.length;\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A[d]);\n        }\n    }\n\n    /**\n     * @static\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @param {Number} seed - The seed for the random number generator.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    static choice(A, n, seed = 1212) {\n        const R = new Randomizer(seed);\n        return R.choice(A, n);\n        /* let rows = A.shape[0];\n        if (n > rows) {\n            throw new Error(\"n bigger than A!\");\n        }\n        let rand = new Randomizer(seed);\n        let sample = new Array(n);\n        let index_list = linspace(0, rows - 1);\n        for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n            let random_index = rand.random_int % l;\n            sample[i] = index_list.splice(random_index, 1)[0];\n        }\n        //return result;\n        //return new Matrix(n, cols, (row, col) => A.entry(sample[row], col))\n        return sample.map((d) => A.row(d)); */\n    }\n}\n","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias max\n * @param {Array} values \n * @returns {Number}\n */\nexport default function (values) {\n    let max;\n    for (const value of values) {\n        if (value != null && (max < value || (max === undefined && value >= value))) {\n            max = value;\n        }\n    }\n    return max;\n}","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias min\n * @param {Array} values\n * @returns {Number}\n */\nexport default function (values) {\n    let min;\n    for (const value of values) {\n        if (value != null && (min > value || (min === undefined && value <= value))) {\n            min = value;\n        }\n    }\n    return min;\n}","/**\n * @class\n * @alias Heap\n */\nexport class Heap {\n    /**\n     * A heap is a datastructure holding its elements in a specific way, so that the top element would be the first entry of an ordered list.\n     * @constructor\n     * @memberof module:datastructure\n     * @alias Heap\n     * @param {Array=} elements - Contains the elements for the Heap. {@link elements} can be null.\n     * @param {Function} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(\"min\"|\"max\"|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     * @see {@link https://en.wikipedia.org/wiki/Binary_heap}\n     */\n    constructor(elements = null, accessor = d => d, comparator = \"min\") {\n        if (elements) {\n            return Heap.heapify(elements, accessor, comparator);\n        } else {\n            this._accessor = accessor;\n            this._container = [];\n            if (comparator == \"min\") {\n                this._comparator = (a, b) => a < b;\n            } else if (comparator == \"max\") {\n                this._comparator = (a, b) => a > b;\n            } else {\n                this._comparator = comparator;\n            }\n            return this\n        }\n    }\n\n    /**\n     * Creates a Heap from an Array\n     * @param {Array|Set} elements - Contains the elements for the Heap.\n     * @param {Function=} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(String=|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     */\n    static heapify(elements, accessor = d => d, comparator = \"min\") {\n        const heap = new Heap(null, accessor, comparator);\n        const container = heap._container;\n        for (const e of elements) {\n            container.push({\n                \"element\": e,\n                \"value\": accessor(e),\n            });\n        }\n        for (let i = Math.floor((elements.length / 2) - 1); i >= 0; --i) {\n            heap._heapify_down(i);\n        }\n        return heap;\n    }\n\n    /**\n     * Swaps elements of container array.\n     * @private\n     * @param {Number} index_a \n     * @param {Number} index_b \n     */\n    _swap(index_a, index_b) {\n        const container = this._container;\n        [container[index_b], container[index_a]] = [container[index_a], container[index_b]];\n        return;\n    }\n\n    /**\n     * @private\n     */\n    _heapify_up() {\n        const container = this._container;\n        let index = container.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (!this._comparator(container[index].value, container[parentIndex].value)) {\n                break;\n            } else {\n            this._swap(parentIndex, index)\n            index = parentIndex;\n            }\n        }\n    }\n\n    /**\n     * Pushes the element to the heap.\n     * @param {} element\n     * @returns {Heap}\n     */\n    push(element) {\n        const value = this._accessor(element);\n        //const node = new Node(element, value);\n        const node = {\"element\": element, \"value\": value};\n        this._container.push(node);\n        this._heapify_up();\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} [start_index = 0] \n     */\n    _heapify_down(start_index=0) {\n        const container = this._container;\n        const comparator = this._comparator;\n        const length = container.length;\n        let left = 2 * start_index + 1;\n        let right = 2 * start_index + 2;\n        let index = start_index;\n        if (index > length) throw \"index higher than length\"\n        if (left < length && comparator(container[left].value, container[index].value)) {\n            index = left;\n        }\n        if (right < length && comparator(container[right].value, container[index].value)) {\n            index = right;\n        }\n        if (index !== start_index) {\n            this._swap(start_index, index);\n            this._heapify_down(index);\n        }\n    }\n\n    /**\n     * Removes and returns the top entry of the heap.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    pop() {\n        const container = this._container;\n        if (container.length === 0) {\n            return null;\n        } else if (container.length === 1) {\n            return container.pop();\n        }\n        this._swap(0, container.length - 1);\n        const item = container.pop();\n        this._heapify_down();\n        return item;\n    }\n\n    /**\n     * Returns the top entry of the heap without removing it.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    get first() {\n        return this._container.length > 0 ? this._container[0] : null;\n    }\n\n\n    /**\n     * Yields the raw data\n     * @yields {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    * iterate() {\n        for (let i = 0, n = this._container.length; i < n; ++i) {\n            yield this._container[i].element;\n        }\n    }\n\n    /**\n     * Returns the heap as ordered array.\n     * @returns {Array} Array consisting the elements ordered by {@link comparator}.\n     */\n    toArray() {\n        return this.data()\n            .sort((a,b) => this._comparator(a, b) ? -1 : 0)\n    }\n\n    /**\n     * Returns elements of container array.\n     * @returns {Array} Array consisting the elements.\n     */\n    data() {\n        return this._container\n            .map(d => d.element)\n    }\n\n    /**\n     * Returns the container array.\n     * @returns {Array} The container array.\n     */\n    raw_data() {\n        return this._container;\n    }\n\n    /**\n     * The size of the heap.\n     * @returns {Number}\n     */\n    get length() {\n        return this._container.length;\n    }\n\n    /**\n     * Returns false if the the heap has entries, true if the heap has no entries.\n     * @returns {Boolean}\n     */\n    get empty() {\n        return this.length === 0;\n    }\n}","/**\n * @class\n * @alias DisjointSet\n * @see {@link https://en.wikipedia.org/wiki/Disjoint-set_data_structure}\n */\nexport class DisjointSet {\n    /**\n     * @constructor\n     * @alias DisjointSet\n     * @memberof module:datastructure\n     * @param {Array=} elements \n     * @returns {DisjointSet}\n     */\n    constructor(elements = null) {\n        this._list = new Set();\n        if (elements) {\n            for (const e of elements) {\n                this.make_set(e);\n            }\n        }\n        return this;\n    }\n\n    make_set(x) {\n        const list = this._list;\n        if (!list.has(x)) {\n            list.add(x);\n            x.__disjoint_set = {};\n            x.__disjoint_set.parent = x;\n            x.__disjoint_set.children = new Set([x]);\n            x.__disjoint_set.size = 1;\n        }\n        return this;\n    }\n\n    find(x) {\n        const list = this._list;\n        if (list.has(x)) {\n            if (x.__disjoint_set.parent !== x) {\n                x.__disjoint_set.children.add(...x);\n                x.__disjoint_set.parent = this.find(x.__disjoint_set.parent);\n                return x.__disjoint_set.parent;\n            } else {\n                return x;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    union(x, y) {\n        let node_x = this.find(x);\n        let node_y = this.find(y);\n\n        if (node_x === node_y) return this;\n        if (node_x.__disjoint_set.size < node_y.__disjoint_set.size) [node_x, node_y] = [node_y, node_x];\n\n        node_y.__disjoint_set.parent = node_x;\n        // keep track of children?\n        node_y.__disjoint_set.children.forEach(node_x.__disjoint_set.children.add, node_x.__disjoint_set.children);\n        node_x.__disjoint_set.size += node_y.__disjoint_set.size;\n\n        return this;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n/**\n * @class\n * @alias BallTree\n */\nexport class BallTree {\n    /**\n     * Generates a BallTree with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias BallTree\n     * @param {Array=} elements - Elements which should be added to the BallTree\n     * @param {Function} [metric = euclidean] metric to use: (a, b) => distance\n     * @see {@link https://en.wikipedia.org/wiki/Ball_tree}\n     * @see {@link https://github.com/invisal/noobjs/blob/master/src/tree/BallTree.js}\n     * @returns {BallTree}\n     */\n    constructor(elements = null, metric = euclidean) {\n        this._Node = class {\n            constructor(pivot, child1=null, child2=null, radius=null) {\n                this.pivot = pivot;\n                this.child1 = child1;\n                this.child2 = child2;\n                this.radius = radius;\n            }\n        }\n        this._Leaf = class {\n            constructor(points) {\n                this.points = points;\n            }\n        }\n        this._metric = metric;\n        if (elements) {\n            this.add(elements);\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @param {Array<*>} elements - new elements.\n     * @returns {BallTree}\n     */\n    add(elements) {\n        elements = elements.map((element, index) => {\n            return {index: index, element: element}\n        })\n        this._root = this._construct(elements);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Array<*>} elements \n     * @returns {Node} root of balltree.\n     */\n    _construct(elements) {\n        if (elements.length === 1) {\n            return new this._Leaf(elements);\n        } else {\n            let c = this._greatest_spread(elements);\n            let sorted_elements = elements.sort((a, b) => a.element[c] - b.element[c]);\n            let n = sorted_elements.length;\n            let p_index = Math.floor(n / 2);\n            let p = elements[p_index];\n            let L = sorted_elements.slice(0, p_index);\n            let R = sorted_elements.slice(p_index, n);\n            let radius = Math.max(...elements.map(d => this._metric(p.element, d.element)));\n            let B\n            if (L.length > 0 && R.length > 0) {         \n                B = new this._Node(p, this._construct(L), this._construct(R), radius);\n            } else {\n                B = new this._Leaf(elements);\n            }\n            return B;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Node} B \n     * @returns {Number}\n     */\n    _greatest_spread(B) {\n        let d = B[0].element.length;\n        let start = new Array(d);\n\n        for (let i = 0; i < d; ++i) {\n            start[i] = [Infinity, -Infinity];\n        }\n\n        let spread = B.reduce((acc, current) => {\n            for (let i = 0; i < d; ++i) {\n                acc[i][0] = Math.min(acc[i][0], current.element[i]);\n                acc[i][1] = Math.max(acc[i][1], current.element[i]);\n            }\n            return acc;\n        }, start);\n        spread = spread.map(d => d[1] - d[0]);\n        \n        let c = 0;\n        for (let i = 0; i < d; ++i) {\n            c = spread[i] > spread[c] ? i : c;\n        }\n        return c;\n    }\n\n    /**\n     * \n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        return this._search(t, k, new Heap(null, d => this._metric(d.element, t), \"max\"), this._root);\n    }\n\n    /**\n     * @private\n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @param {Heap} Q - Heap consists of the currently found {@link k} nearest neighbors.\n     * @param {Node|Leaf} B \n     */\n    _search(t, k, Q, B) {\n        // B is Node\n        if (Q.length >= k && B.pivot && B.radius && this._metric(t, B.pivot.element) - B.radius >= Q.first.value) {\n            return Q;\n        } \n        if (B.child1) this._search(t, k, Q, B.child1);\n        if (B.child2) this._search(t, k, Q, B.child2);\n        \n        // B is leaf\n        if (B.points) {\n            for (let i = 0, n = B.points.length; i < n; ++i) {\n                let p = B.points[i];\n                if (k > Q.length) {\n                    Q.push(p);\n                } else {\n                    Q.push(p);\n                    Q.pop();\n                }\n            }\n        }\n        return Q;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KNN\n */\nexport class KNN {\n    /**\n     * Generates a KNN list with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias KNN\n     * @param {Array=} elements - Elements which should be added to the KNN list\n     * @param {Function|\"precomputed\"} [metric = euclidean] metric is either precomputed or a function to use: (a, b) => distance\n     * @returns {KNN}\n     */\n    constructor(elements=null, metric=euclidean) {\n        this._metric = metric;\n        this._elements = elements instanceof Matrix ? elements : Matrix.from(elements);\n        const N = this._elements.shape[0];\n        if (metric === \"precomputed\") {\n            this._D = this._elements.clone();\n        } else {\n            this._D = distance_matrix(this._elements, metric);\n        }\n        this.KNN = [];\n        for (let row = 0; row < N; ++row) {\n            const distances = this._D.row(row);\n            const H = new Heap(null, d => d.value, \"min\");\n            for (let j = 0; j < N; ++j) {\n                H.push({\n                    value: distances[j],\n                    index: j,\n                });\n            }\n            this.KNN.push(H);\n        }\n    }\n\n    /**\n     * \n     * @param {Array|Number} t - query element or index.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        const metric = this._metric;\n        const KNN = this.KNN;\n        let H;\n        if (Array.isArray(t)) {\n            if (this._metric == \"precomputed\") {\n                throw \"Search by query element is only possible when not using a precomputed distance matrix!\"\n            } \n            const elements = this._elements;\n            const N = KNN.length;\n            let nearest_element_index = null;\n            let nearest_dist = Infinity;\n            for (let i = 0; i < N; ++i) {\n                const element = elements.row(i);\n                const dist = metric(t, element);\n                if (dist < nearest_dist) {\n                    nearest_element_index = i;\n                    nearest_dist = dist;\n                }\n            }\n            H = KNN[nearest_element_index];\n        } else if (Number.isInteger(t)) {\n            H = KNN[t]\n        }\n\n        let result = []\n        for (let i = 0; i < k; ++i) {\n            result.push(H.pop())\n        }\n        result.forEach(res => H.push(res.element))\n        return result\n    }    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n\n/**\n * @class\n * @alias DR\n * @borrows DR#parameter as DR#para\n * @borrows DR#parameter as DR#p\n */\nexport class DR {\n    /**\n     * Takes the default parameters and seals them, remembers the type of input {@link X}, and initializes the random number generator.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias DR\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed value for the random number generator.\n     * @returns {DR}\n     */\n    constructor(X, default_parameters, parameters) {\n        this._parameters = Object.assign(Object.seal(default_parameters), parameters);\n        if (Array.isArray(X)) {\n            this._type = \"array\";\n            this.X = Matrix.from(X);\n        } else if (X instanceof Matrix) {\n            this._type = \"matrix\";\n            this.X = X;\n        } else {\n            throw new Error(\"No valid type for X!\");\n        }\n        [this._N, this._D] = this.X.shape;\n        this._randomizer = new Randomizer(this._parameters.seed);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * Set and get parameters\n     * @param {String} [name = null] - Name of the parameter. If not given then returns all parameters as an Object.\n     * @param {any} [value = null] - Value of the parameter to set. If <code>name</code> is set and <code>value</code> is not given, returns the value of the respective parameter.\n     * @returns {DR|any|Object} \n     * On setting a parameter, this function returns the DR object. \n     * If <code>name</code> is set and <code>value == null</code> then return actual parameter value.\n     * If <code>name</code> is not given, then returns all parameters as an Object.\n     * \n     * @example\n     * '''\n     * const DR = new druid.TSNE(X, {d: 3}); // creates a new DR object, with parameter for <code>d</code> = 3.\n     * DR.parameter(\"d\"); // returns 3,\n     * DR.parameter(\"d\", 2); // sets parameter <code>d</code> to 2 and returns <code>DR</code>.\n     * '''\n     */\n    parameter(name = null, value = null) {\n        if (name === null) {\n            return Object.assign({}, this._parameters);\n        }\n        if (!this._parameters.hasOwnProperty(name)) {\n            throw new Error(`${name} is not a valid parameter!`);\n        }\n        if (value !== null) {\n            this._parameters[name] = value;\n            this._is_initialized = false;\n            return this;\n        } else {\n            return this._parameters[name];\n        }\n    }\n\n    para(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    p(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} the projection.\n     */\n    transform() {\n        this.check_init();\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @yields {Matrix|Number[][]} the intermediate steps of the projection.\n     */\n    *generator() {\n        return this.transform();\n    }\n\n    /**\n     * If the respective DR method has an <code>init</code> function, call it before <code>transform</code>.\n     * @returns {DR}\n     */\n    check_init() {\n        if (!this._is_initialized && typeof this.init === \"function\") {\n            this.init();\n            this._is_initialized = true;\n        }\n        return this;\n    }\n\n    /**\n     * @returns {Matrix|Number[][]} the projection in the type of input <code>X</code>.\n     */\n    get projection() {\n        if (this.hasOwnProperty(\"Y\")) {\n            this.check_init();\n            return this._type === \"matrix\" ? this.Y : this.Y.to2dArray;\n        } else {\n            throw new Error(\"The dataset is not transformed yet!\");\n        }\n    }\n\n    /**\n     * Computes the projection.\n     * @param  {...unknown} args - Arguments the transform method of the respective DR method takes.\n     * @returns {Promise<Matrix|Number[][]>} the dimensionality reduced dataset.\n     */\n    async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Matrix|Array} the dimensionality reduced dataset.\n     */\n    static transform(...args) {\n        let dr = new this(...args);\n        return dr.transform();\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Promise} a promise yielding the dimensionality reduced dataset.\n     */\n    static async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Generator} a generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    static *generator(...args) {\n        const dr = new this(...args);\n        const generator = dr.generator();\n        for (const result of generator) {\n            yield result;\n        }\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias PCA\n * @augments DR\n */\nexport class PCA extends DR {\n    /**\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias PCA\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @returns {PCA}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}. If parameter {@link A} is given, then project {@link A} with the principal components of {@link X}.\n     * @param {null|Matrix|Array} [A = null] - If given, the data to project.\n     * @returns {Matrix|Array} - The projected data.\n     */\n    transform(A = null) {\n        const V = this.principal_components();\n        if (A == null) {\n            const X = this.X;\n            this.Y = X.dot(V);\n            return this.projection;\n        } else if (Array.isArray(A)) {\n            return Matrix.from(A).dot(V).asArray;\n        } else if (A instanceof Matrix) {\n            return A.dot(V);\n        } else {\n            throw new Error(\"No valid type for A!\");\n        }\n    }\n\n    /**\n     * Computes the {@link d} principal components of Matrix {@link X}.\n     * @returns {Matrix}\n     */\n    principal_components() {\n        if (this.V) {\n            return this.V;\n        }\n        const { d, eig_args } = this._parameters;\n        const X = this.X;\n        const means = Matrix.from(X.meanCols);\n        const X_cent = X.sub(means);\n        const C = X_cent.transpose().dot(X_cent);\n        const { eigenvectors: V } = simultaneous_poweriteration(C, d, eig_args);\n        this.V = Matrix.from(V).transpose();\n        return this.V;\n    }\n\n    static principal_components(X, parameters) {\n        const dr = new this(X, parameters);\n        return dr.principal_components();\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias MDS\n * @extends DR\n */\nexport class MDS extends DR {\n    /**\n     * Classical MDS.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias MDS\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}.\n     * @returns {Matrix|Array}\n     */\n    transform() {\n        const X = this.X;\n        const rows = X.shape[0];\n        const { d, metric, eig_args } = this._parameters;\n        const A = metric === \"precomputed\" ? X : distance_matrix(X, metric);\n        const ai_ = A.meanCols;\n        const a_j = A.meanRows;\n        const a__ = A.mean;\n\n        this._d_X = A;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n\n        return this.projection;\n    }\n\n    /**\n     * @returns {Number} - the stress of the projection.\n     */\n    stress() {\n        const N = this.X.shape[0];\n        const Y = this.Y;\n        const d_X = this._d_X;\n        const d_Y = new Matrix();\n        d_Y.shape = [\n            N,\n            N,\n            (i, j) => {\n                return i < j ? euclidean(Y.row(i), Y.row(j)) : d_Y.entry(j, i);\n            },\n        ];\n        let top_sum = 0;\n        let bottom_sum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                top_sum += Math.pow(d_X.entry(i, j) - d_Y.entry(i, j), 2);\n                bottom_sum += Math.pow(d_X.entry(i, j), 2);\n            }\n        }\n        return Math.sqrt(top_sum / bottom_sum);\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { DR } from \"./DR.js\";\nimport euclidean from \"../metrics/euclidean.js\";\n\n/**\n * @class\n * @alias ISOMAP\n * @extends DR\n */\nexport class ISOMAP extends DR {\n    /**\n     * Isometric feature mapping (ISOMAP).\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias ISOMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link ISOMAP} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2319}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this.X.shape[0] / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const X = this.X;\n        const rows = this._N;\n        const { d, metric, eig_args, neighbors } = this._parameters;\n        // TODO: make knn extern and parameter for constructor or transform?\n        const D = new Matrix();\n        D.shape = [rows, rows, (i, j) => (i <= j ? metric(X.row(i), X.row(j)) : D.entry(j, i))];\n        const kNearestNeighbors = [];\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < rows; ++j) {\n                row.push({\n                    index: j,\n                    distance: D.entry(i, j),\n                });\n            }\n            const H = new Heap(row, (d) => d.distance, \"min\");\n            kNearestNeighbors.push(H.toArray().slice(1, neighbors + 1));\n        }\n\n        /*D = dijkstra(kNearestNeighbors);*/\n        // compute shortest paths\n        // TODO: make extern\n        /** @see {@link https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm} */\n        const G = new Matrix(rows, rows, (i, j) => {\n            const other = kNearestNeighbors[i].find((n) => n.index === j);\n            return other ? other.distance : Infinity;\n        });\n\n        for (let i = 0; i < rows; ++i) {\n            for (let j = 0; j < rows; ++j) {\n                for (let k = 0; k < rows; ++k) {\n                    G.set_entry(i, j, Math.min(G.entry(i, j), G.entry(i, k) + G.entry(k, j)));\n                }\n            }\n        }\n\n        let ai_ = new Float64Array(rows);\n        let a_j = new Float64Array(rows);\n        let a__ = 0;\n        const A = new Matrix(rows, rows, (i, j) => {\n            let val = G.entry(i, j);\n            val = val === Infinity ? 0 : val;\n            ai_[i] += val;\n            a_j[j] += val;\n            a__ += val;\n            return val;\n        });\n\n        ai_ = ai_.map((v) => v / rows);\n        a_j = a_j.map((v) => v / rows);\n        a__ /= rows ** 2;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        // compute d eigenvectors\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n/**\n * @class\n * @alias FASTMAP\n * @extends DR\n */\nexport class FASTMAP extends DR {\n    /**\n     * FastMap: a fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias FASTMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the dimensionality of the projection.\n     * @returns {FASTMAP}\n     * @see {@link https://doi.org/10.1145/223784.223812}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     * Chooses two points which are the most distant in the actual projection.\n     * @private\n     * @param {Function} dist\n     * @returns {Array} An array consisting of first index, second index, and distance between the two points.\n     */\n    _choose_distant_objects(dist) {\n        const X = this.X;\n        const N = X.shape[0];\n        let a_index = (this._randomizer.random_int % N) - 1;\n        let b_index = null;\n        let max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_ai = dist(a_index, i);\n            if (d_ai > max_dist) {\n                max_dist = d_ai;\n                b_index = i;\n            }\n        }\n        max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_bi = dist(b_index, i);\n            if (d_bi > max_dist) {\n                max_dist = d_bi;\n                a_index = i;\n            }\n        }\n        return [a_index, b_index, max_dist];\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} The {@link d}-dimensional projection of the data matrix {@link X}.\n     */\n    transform() {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric } = this._parameters;\n        const Y = new Matrix(N, d, 0);\n        let dist = (a, b) => metric(X.row(a), X.row(b));\n\n        for (let _col = 0; _col < d; ++_col) {\n            let old_dist = dist;\n            // choose pivot objects\n            const [a_index, b_index, d_ab] = this._choose_distant_objects(dist);\n            if (d_ab !== 0) {\n                // project the objects on the line (O_a, O_b)\n                for (let i = 0; i < N; ++i) {\n                    const d_ai = dist(a_index, i);\n                    const d_bi = dist(b_index, i);\n                    const y_i = (d_ai ** 2 + d_ab ** 2 - d_bi ** 2) / (2 * d_ab);\n                    Y.set_entry(i, _col, y_i);\n                }\n                // consider the projections of the objects on a\n                // hyperplane perpendicluar to the line (a, b);\n                // the distance function D'() between two\n                // projections is given by Eq.4\n                dist = (a, b) => Math.sqrt(old_dist(a, b) ** 2 - (Y.entry(a, _col) - Y.entry(b, _col)) ** 2);\n            }\n        }\n        // return embedding.\n        this.Y = Y;\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LDA\n * @extends DR\n */\nexport class LDA extends DR {\n    /**\n     * Linear Discriminant Analysis.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LDA\n     * @param {Matrix} X - The high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Array} parameters.labels - The labels / classes for each data point.\n     * @param {number} [parameters.d = 2] - The dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://onlinelibrary.wiley.com/doi/10.1111/j.1469-1809.1936.tb02137.x}\n     */\n    constructor(X, parameters) {\n        super(X, { labels: null, d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, cols] = X.shape;\n        const { d, labels, eig_args } = this._parameters;\n        if (labels === null || labels.length != rows) {\n            throw new Error(\"LDA needs parameter label to every datapoint to work!\");\n        }\n        const unique_labels = {};\n        let label_id = 0;\n        labels.forEach((l, i) => {\n            if (l in unique_labels) {\n                unique_labels[l].count++;\n                unique_labels[l].rows.push(X.row(i));\n            } else {\n                unique_labels[l] = {\n                    id: label_id++,\n                    count: 1,\n                    rows: [X.row(i)],\n                };\n            }\n        });\n\n        // create X_mean and vector means;\n        const X_mean = X.mean;\n        const V_mean = new Matrix(label_id, cols);\n        for (const label in unique_labels) {\n            const V = Matrix.from(unique_labels[label].rows);\n            const v_mean = V.meanCols;\n            for (let j = 0; j < cols; ++j) {\n                V_mean.set_entry(unique_labels[label].id, j, v_mean[j]);\n            }\n        }\n        // scatter_between\n        let S_b = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j] - X_mean);\n            const N = unique_labels[label].count;\n            S_b = S_b.add(m.dot(m.transpose()).mult(N));\n        }\n\n        // scatter_within\n        let S_w = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j]);\n            const R = unique_labels[label].rows;\n            for (let i = 0, n = unique_labels[label].count; i < n; ++i) {\n                const row_v = new Matrix(cols, 1, (j, _) => R[i][j] - m.entry(j, 0));\n                S_w = S_w.add(row_v.dot(row_v.transpose()));\n            }\n        }\n\n        let { eigenvectors: V } = simultaneous_poweriteration(S_w.inverse().dot(S_b), d, eig_args);\n        V = Matrix.from(V).transpose();\n        this.Y = X.dot(V);\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { k_nearest_neighbors } from \"../matrix/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LLE\n * @extends DR\n */\nexport class LLE extends DR {\n    /**\n     * Locally Linear Embedding.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LLE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} neighbors - the label / class of each data point.\n     * @param {Number} [d = 2] - the dimensionality of the projection.\n     * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [seed = 1212] - the dimensionality of the projection.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2323}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const rows = this._N;\n        const cols = this._D;\n        const { neighbors, d, eig_args, metric } = this._parameters;\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        const O = new Matrix(neighbors, 1, 1);\n        const W = new Matrix(rows, rows);\n\n        for (let row = 0; row < rows; ++row) {\n            const nN_row = nN[row];\n            const Z = new Matrix(neighbors, cols, (i, j) => X.entry(nN_row[i].j, j) - X.entry(row, j));\n            const C = Z.dot(Z.T);\n            if (neighbors > cols) {\n                const C_trace = neumair_sum(C.diag) / 1000;\n                for (let j = 0; j < neighbors; ++j) {\n                    C.set_entry(j, j, C.entry(j, j) + C_trace);\n                }\n            }\n            // reconstruct;\n            let w = Matrix.solve_CG(C, O, this._randomizer);\n            w = w.divide(w.sum);\n            for (let j = 0; j < neighbors; ++j) {\n                W.set_entry(row, nN_row[j].j, w.entry(j, 0));\n            }\n        }\n        // comp embedding\n        const I = new Matrix(rows, rows, \"identity\");\n        const IW = I.sub(W);\n        const M = IW.T.dot(IW);\n        const { eigenvectors: V } = simultaneous_poweriteration(M.T.inverse(), d + 1, eig_args);\n        this.Y = Matrix.from(V.slice(1, 1 + d)).T;\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix, k_nearest_neighbors } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LTSA\n * @extends DR\n */\nexport class LTSA extends DR {\n    /**\n     * Local Tangent Space Alignment\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LTSA\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link LTSA} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://epubs.siam.org/doi/abs/10.1137/S1064827502419154}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        if (this._D <= this.parameter(\"d\")) {\n            throw new Error(`Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${this.parameter(\"d\")})!`);\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, D] = X.shape;\n        const { d, neighbors, metric, eig_args } = this._parameters;\n        // 1.1 determine k nearest neighbors\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        // center matrix\n        const O = new Matrix(D, D, \"center\");\n        const B = new Matrix(rows, rows, 0);\n\n        for (let row = 0; row < rows; ++row) {\n            // 1.2 compute the d largest eigenvectors of the correlation matrix\n            const I_i = [row, ...nN[row].map((n) => n.j)];\n            let X_i = Matrix.from(I_i.map((n) => X.row(n)));\n            // center X_i\n            X_i = X_i.dot(O);\n            // correlation matrix\n            const C = X_i.dot(X_i.transpose());\n            const { eigenvectors: g } = simultaneous_poweriteration(C, d, eig_args);\n            //g.push(linspace(0, k).map(_ => 1 / Math.sqrt(k + 1)));\n            const G_i_t = Matrix.from(g);\n            // 2. Constructing alignment matrix\n            const W_i = G_i_t.transpose()\n                .dot(G_i_t)\n                .add(1 / Math.sqrt(neighbors + 1));\n            for (let i = 0; i < neighbors + 1; ++i) {\n                for (let j = 0; j < neighbors + 1; ++j) {\n                    B.set_entry(I_i[i], I_i[j], B.entry(I_i[i], I_i[j]) - (i === j ? 1 : 0) + W_i.entry(i, j));\n                }\n            }\n        }\n\n        // 3. Aligning global coordinates\n        const { eigenvectors: Y } = simultaneous_poweriteration(B, d + 1, eig_args);\n        this.Y = Matrix.from(Y.slice(1)).transpose();\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TSNE\n * @extends DR\n */\nexport class TSNE extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TSNE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.perplexity = 50] - perplexity.\n     * @param {Number} [parameters.epsilon = 10] - learning parameter.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TSNE}\n     */\n    constructor(X, parameters) {\n        super(X, { perplexity: 50, epsilon: 10, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._iter = 0;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => this._randomizer.random);\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TSNE}\n     */\n    init() {\n        // init\n        const Htarget = Math.log(this.parameter(\"perplexity\"));\n        const N = this._N;\n        const D = this._D;\n        const {metric} = this._parameters;\n        const X = this.X;\n        let Delta;\n        if (metric ==\"precomputed\") {\n            Delta = druid.Matrix.from(X);\n        } else {\n            Delta = new Matrix(N, N);\n            for (let i = 0; i < N; ++i) {\n                const X_i = X.row(i);\n                for (let j = i + 1; j < N; ++j) {\n                    const distance = metric(X_i, X.row(j));\n                    Delta.set_entry(i, j, distance);\n                    Delta.set_entry(j, i, distance);\n                }\n            }\n        }\n\n        const P = new Matrix(N, N, \"zeros\");\n\n        this._ystep = new Matrix(N, D, \"zeros\");\n        this._gains = new Matrix(N, D, 1);\n\n        // search for fitting sigma\n        let prow = new Float64Array(N)\n        const tol = 1e-4;\n        const maxtries = 50;\n        for (let i = 0; i < N; ++i) {\n            let betamin = -Infinity;\n            let betamax = Infinity;\n            let beta = 1;\n            let done = false;\n\n            let num = 0;\n            while (!done) {\n                let psum = 0;\n                for (let j = 0; j < N; ++j) {\n                    let pj = Math.exp(-Delta.entry(i, j) * beta);\n                    if (i === j) pj = 0;\n                    prow[j] = pj;\n                    psum += pj;\n                }\n                let Hhere = 0;\n                for (let j = 0; j < N; ++j) {\n                    let pj = psum === 0 ? 0 : prow[j] / psum;\n                    prow[j] = pj;\n                    if (pj > 1e-7) {\n                        Hhere -= pj * Math.log(pj);\n                    }\n                }\n                if (Hhere > Htarget) {\n                    betamin = beta;\n                    beta = betamax === Infinity ? beta * 2 : (beta + betamax) / 2;\n                } else {\n                    betamax = beta;\n                    beta = betamin === -Infinity ? beta / 2 : (beta + betamin) / 2;\n                }\n                ++num;\n                if (Math.abs(Hhere - Htarget) < tol) done = true;\n                if (num >= maxtries) done = true;\n            }\n\n            for (let j = 0; j < N; ++j) {\n                P.set_entry(i, j, prow[j]);\n            }\n        }\n\n        //compute probabilities\n        const Pout = new Matrix(N, N, \"zeros\");\n        const N2 = N * 2;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i; j < N; ++j) {\n                const p = Math.max((P.entry(i, j) + P.entry(j, i)) / N2, 1e-100);\n                Pout.set_entry(i, j, p);\n                Pout.set_entry(j, i, p);\n            }\n        }\n        this._P = Pout;\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - Number of iterations.\n     * @returns {Matrix|Number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Number[][]} - the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * performs a optimization step\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const P = this._P;\n        const ystep = this._ystep;\n        const gains = this._gains;\n        const N = this._N;\n        const { d: dim, epsilon} = this._parameters;\n        let Y = this.Y;\n\n        //calc cost gradient;\n        const pmul = iter < 100 ? 4 : 1;\n\n        // compute Q dist (unnormalized)\n        const Qu = new Matrix(N, N, \"zeros\");\n        let qsum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dsum = 0;\n                for (let d = 0; d < dim; ++d) {\n                    const dhere = Y.entry(i, d) - Y.entry(j, d);\n                    dsum += dhere * dhere;\n                }\n                const qu = 1 / (1 + dsum);\n                Qu.set_entry(i, j, qu);\n                Qu.set_entry(j, i, qu);\n                qsum += 2 * qu;\n            }\n        }\n\n        // normalize Q dist\n        const Q = new Matrix(N, N, 0);\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                const val = Math.max(Qu.entry(i, j) / qsum, 1e-100);\n                Q.set_entry(i, j, val);\n                Q.set_entry(j, i, val);\n            }\n        }\n\n        const grad = new Matrix(N, dim, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            for (let j = 0; j < N; ++j) {\n                const premult = 4 * (pmul * P.entry(i, j) - Q.entry(i, j)) * Qu.entry(i, j);\n                for (let d = 0; d < dim; ++d) {\n                    grad.set_entry(i, d, grad.entry(i, d) + premult * (Y.entry(i, d) - Y.entry(j, d)));\n                }\n            }\n        }\n\n        // perform gradient step\n        let ymean = new Float64Array(dim);\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const gid = grad.entry(i, d);\n                const sid = ystep.entry(i, d);\n                const gainid = gains.entry(i, d);\n\n                let newgain = Math.sign(gid) === Math.sign(sid) ? gainid * 0.8 : gainid + 0.2;\n                if (newgain < 0.01) newgain = 0.01;\n                gains.set_entry(i, d, newgain);\n\n                const momval = iter < 250 ? 0.5 : 0.8;\n                const newsid = momval * sid - epsilon * newgain * gid;\n                ystep.set_entry(i, d, newsid);\n\n                Y.set_entry(i, d, Y.entry(i, d) + newsid);\n                ymean[d] += Y.entry(i, d);\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < 2; ++d) {\n                Y.set_entry(i, d, Y.entry(i, d) - ymean[d] / N);\n            }\n        }\n\n        return this.Y;\n    }\n}\n","/**\n *\n * @memberof module:optimization\n * @alias powell\n * @param {Function} f\n * @param {Array} x0\n * @param {Number} [max_iter = 300]\n * @returns {Array}\n * @see http://optimization-js.github.io/optimization-js/optimization.js.html#line438\n */\nexport default function (f, x0, max_iter = 300) {\n    const epsilon = 1e-2;\n    const n = x0.length;\n    let alpha = 1e-3;\n    let pfx = 10000;\n    let x = x0.slice();\n    let fx = f(x);\n    let convergence = false;\n\n    while (max_iter-- >= 0 && !convergence) {\n        convergence = true;\n        for (let i = 0; i < n; ++i) {\n            x[i] += 1e-6;\n            let fxi = f(x);\n            x[i] -= 1e-6;\n            let dx = (fxi - fx) / 1e-6;\n            if (Math.abs(dx) > epsilon) {\n                convergence = false;\n            }\n            x[i] -= alpha * dx;\n            fx = f(x);\n        }\n        alpha *= pfx >= fx ? 1.05 : 0.4;\n        pfx = fx;\n    }\n    return x;\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { linspace } from \"../matrix/index.js\";\nimport { powell } from \"../optimization/index.js\";\nimport { DR } from \"./DR.js\";\nimport { max } from \"../util/index.js\";\nimport { KNN } from \"../knn/index.js\";\n\n/**\n * @class\n * @alias UMAP\n * @extends DR\n */\nexport class UMAP extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias UMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.n_neighbors = 15] - size of the local neighborhood.\n     * @param {Number} [parameters.local_connectivity = 1] - number of nearest neighbors connected in the local neighborhood.\n     * @param {Number} [parameters.min_dist = 1] - controls how tightly points get packed together.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points in the high-dimensional space.\n     * @param {Number} [parameters._spread = 1] - The effective scale of embedded points. (In combination with {@link parameters.min_dist})\n     * @param {Number} [parameters._set_op_mix_ratio = 1] - Interpolate between union and intersection.\n     * @param {Number} [parameters._repulsion_strength = 1]  - Weighting applied to negative samples.\n     * @param {Number} [parameters._negative_sample_rate = 5] - The number of negative samples per positive sample.\n     * @param {Number} [parameters._n_epochs = 350] - The number of training epochs.\n     * @param {Number} [parameter._initial_alpha = 1] - The initial learning rate for the optimization.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {UMAP}\n     */\n    constructor(X, parameters) {\n        super(X, { n_neighbors: 15, local_connectivity: 1, min_dist: 1, d: 2, metric: euclidean, seed: 1212, _spread: 1, _set_op_mix_ratio: 1, _repulsion_strength: 1, _negative_sample_rate: 5, _n_epochs: 350, _initial_alpha: 1 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        /* let n_neighbors = Math.min(this._N - 1, parameters.n_neighbors);\n        this.parameter(\"n_neighbors\", n_neighbors);\n        this.parameter(\"local_connectivity\", Math.min(this.parameter(\"local_connectivity\"), n_neighbors - 1)); */\n        if (this.parameter(\"n_neighbors\") > this._N) {\n            throw new Error(`Parameter n_neighbors (=${this.parameter(\"n_neighbors\")}) needs to be smaller than dataset size (N=${this._N})!`);\n        }\n        if (this.parameter(\"local_connectivity\") > this.parameter(\"n_neighbors\")) {\n            throw new Error(`Parameter local_connectivity (=${this.parameter(\"local_connectivity\")}) needs to be smaller than parameter n_neighbors (=${this.parameter(\"n_neighbors\")})`);\n        }\n        this._iter = 0;\n        const randomizer = this._randomizer;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => randomizer.random);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} spread\n     * @param {Number} min_dist\n     * @returns {Array}\n     */\n    _find_ab_params(spread, min_dist) {\n        const curve = (x, a, b) => 1 / (1 + a * Math.pow(x, 2 * b));\n        const xv = linspace(0, spread * 3, 300);\n        const yv = linspace(0, spread * 3, 300);\n\n        for (let i = 0, n = xv.length; i < n; ++i) {\n            const xv_i = xv[i];\n            yv[i] = xv_i < min_dist ? 1 : Math.exp(-(xv_i - min_dist) / spread);\n        }\n\n        const err = (p) => {\n            const error = linspace(1, 300).map((_, i) => yv[i] - curve(xv[i], p[0], p[1]));\n            return Math.sqrt(neumair_sum(error.map((e) => e * e)));\n        };\n\n        return powell(err, [1, 1]);\n    }\n\n    /**\n     * @private\n     * @param {Array<Array>} distances\n     * @param {Array<Number>} sigmas\n     * @param {Array<Number>} rhos\n     * @returns {Array}\n     */\n    _compute_membership_strengths(distances, sigmas, rhos) {\n        for (let i = 0, n = distances.length; i < n; ++i) {\n            for (let j = 0, m = distances[i].length; j < m; ++j) {\n                const v = distances[i][j].value - rhos[i];\n                distances[i][j].value = v > 0 ? Math.exp(-v / sigmas[i]) : 1;\n            }\n        }\n        return distances;\n    }\n\n    /**\n     * @private\n     * @param {KNN|BallTree} knn\n     * @param {Number} k\n     * @returns {Object}\n     */\n    _smooth_knn_dist(knn, k) {\n        const SMOOTH_K_TOLERANCE = 1e-5;\n        const MIN_K_DIST_SCALE = 1e-3;\n        const n_iter = 64;\n        const { local_connectivity, metric } = this._parameters;\n        const target = Math.log2(k);\n        const rhos = [];\n        const sigmas = [];\n        const X = this.X;\n        const N = X.shape[0];\n        //const distances = [...X].map(x_i => knn.search(x_i, k).raw_data().reverse());\n\n        const distances = [];\n        if (metric === \"precomputed\") {\n            for (let i = 0; i < N; ++i) {\n                distances.push(knn.search(i, k).reverse());\n            }\n        } else {\n            for (const x_i of X) {\n                distances.push(knn.search(x_i, k).raw_data().reverse());\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            let lo = 0;\n            let hi = Infinity;\n            let mid = 1;\n\n            const search_result = distances[i];\n            const non_zero_dist = search_result.filter((d) => d.value > 0);\n            const non_zero_dist_length = non_zero_dist.length;\n            if (non_zero_dist_length >= local_connectivity) {\n                const index = Math.floor(local_connectivity);\n                const interpolation = local_connectivity - index;\n                if (index > 0) {\n                    rhos.push(non_zero_dist[index - 1]);\n                    if (interpolation > SMOOTH_K_TOLERANCE) {\n                        rhos[i].value += interpolation * (non_zero_dist[index].value - non_zero_dist[index - 1]);\n                    }\n                } else {\n                    rhos[i].value = interpolation * non_zero_dist[0].value;\n                }\n            } else if (non_zero_dist_length > 0) {\n                rhos[i] = non_zero_dist[non_zero_dist_length - 1].value;\n            }\n            for (let x = 0; x < n_iter; ++x) {\n                let psum = 0;\n                for (let j = 0; j < k; ++j) {\n                    const d = search_result[j].value - rhos[i];\n                    psum += d > 0 ? Math.exp(-(d / mid)) : 1;\n                }\n                if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n                    break;\n                }\n                if (psum > target) {\n                    [hi, mid] = [mid, (lo + hi) / 2];\n                } else {\n                    if (hi === Infinity) {\n                        [lo, mid] = [mid, mid * 2];\n                    } else {\n                        [lo, mid] = [mid, (lo + hi) / 2];\n                    }\n                }\n            }\n            sigmas[i] = mid;\n\n            const mean_ithd = search_result.reduce((a, b) => a + b.value, 0) / search_result.length;\n            //let mean_d = null;\n            if (rhos[i] > 0) {\n                if (sigmas[i] < MIN_K_DIST_SCALE * mean_ithd) {\n                    sigmas[i] = MIN_K_DIST_SCALE * mean_ithd;\n                }\n            } else {\n                const mean_d = distances.reduce((acc, res) => acc + res.reduce((a, b) => a + b.value, 0) / res.length);\n                if (sigmas[i] > MIN_K_DIST_SCALE * mean_d) {\n                    sigmas[i] = MIN_K_DIST_SCALE * mean_d;\n                }\n            }\n        }\n        return {\n            distances: distances,\n            sigmas: sigmas,\n            rhos: rhos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Matrix} X\n     * @param {Number} n_neighbors\n     * @returns {Matrix}\n     */\n    _fuzzy_simplicial_set(X, n_neighbors) {\n        const N = X.shape[0];\n        const { metric, _set_op_mix_ratio } = this._parameters;\n        const knn = metric === \"precomputed\" ? new KNN(X, \"precomputed\") : new BallTree(X.to2dArray, metric);\n        let { distances, sigmas, rhos } = this._smooth_knn_dist(knn, n_neighbors);\n        distances = this._compute_membership_strengths(distances, sigmas, rhos);\n        const result = new Matrix(N, N, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            const distances_i = distances[i];\n            for (let j = 0; j < distances_i.length; ++j) {\n                result.set_entry(i, distances_i[j].element.index, distances_i[j].value);\n            }\n        }\n\n        const transposed_result = result.T;\n        const prod_matrix = result.mult(transposed_result);\n        return result\n            .add(transposed_result)\n            .sub(prod_matrix)\n            .mult(_set_op_mix_ratio)\n            .add(prod_matrix.mult(1 - _set_op_mix_ratio));\n    }\n\n    /**\n     * @private\n     * @param {Number} n_epochs\n     * @returns {Array}\n     */\n    _make_epochs_per_sample(n_epochs) {\n        const weights = this._weights;\n        const result = new Float32Array(weights.length).fill(-1);\n        const weights_max = max(weights);\n        const n_samples = weights.map((w) => n_epochs * (w / weights_max));\n        for (let i = 0; i < result.length; ++i) if (n_samples[i] > 0) result[i] = Math.round(n_epochs / n_samples[i]);\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Matrix} graph\n     * @returns {Object}\n     */\n    _tocoo(graph) {\n        const rows = [];\n        const cols = [];\n        const data = [];\n        const [rows_n, cols_n] = graph.shape;\n        for (let row = 0; row < rows_n; ++row) {\n            for (let col = 0; col < cols_n; ++col) {\n                const entry = graph.entry(row, col);\n                if (entry !== 0) {\n                    rows.push(row);\n                    cols.push(col);\n                    data.push(entry);\n                }\n            }\n        }\n        return {\n            rows: rows,\n            cols: cols,\n            data: data,\n        };\n    }\n\n    /**\n     * Computes all necessary\n     * @returns {UMAP}\n     */\n    init() {\n        const { _spread, min_dist, n_neighbors, _n_epochs, _negative_sample_rate } = this._parameters;\n        const [a, b] = this._find_ab_params(_spread, min_dist);\n        this._a = a;\n        this._b = b;\n        this._graph = this._fuzzy_simplicial_set(this.X, n_neighbors);\n        const { rows, cols, data: weights } = this._tocoo(this._graph);\n        this._head = rows;\n        this._tail = cols;\n        this._weights = weights;\n        this._epochs_per_sample = this._make_epochs_per_sample(_n_epochs);\n        this._epochs_per_negative_sample = this._epochs_per_sample.map((d) => d * _negative_sample_rate);\n        this._epoch_of_next_sample = this._epochs_per_sample.slice();\n        this._epoch_of_next_negative_sample = this._epochs_per_negative_sample.slice();\n        return this;\n    }\n\n    graph() {\n        this.check_init();\n        return { cols: this._head, rows: this._tail, weights: this._weights };\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    transform(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    *generator(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * @private\n     * @param {Number} x\n     * @returns {Number}\n     */\n    _clip(x) {\n        if (x > 4) return 4;\n        if (x < -4) return -4;\n        return x;\n    }\n\n    /**\n     * performs the optimization step.\n     * @private\n     * @param {Matrix} head_embedding\n     * @param {Matrix} tail_embedding\n     * @param {Matrix} head\n     * @param {Matrix} tail\n     * @returns {Matrix}\n     */\n    _optimize_layout(head_embedding, tail_embedding, head, tail) {\n        const randomizer = this._randomizer;\n        const { _repulsion_strength, d: dim } = this._parameters;\n        const { _alpha: alpha, _a: a, _b: b, _epochs_per_sample: epochs_per_sample, _epochs_per_negative_sample: epochs_per_negative_sample, _epoch_of_next_negative_sample: epoch_of_next_negative_sample, _epoch_of_next_sample: epoch_of_next_sample, _clip: clip } = this;\n        const tail_length = tail.length;\n\n        for (let i = 0, n = epochs_per_sample.length; i < n; ++i) {\n            if (epoch_of_next_sample[i] <= this._iter) {\n                const j = head[i];\n                const k = tail[i];\n                const current = head_embedding.row(j);\n                const other = tail_embedding.row(k);\n                const dist = euclidean_squared(current, other);\n                let grad_coeff = 0;\n                if (dist > 0) {\n                    grad_coeff = (-2 * a * b * Math.pow(dist, b - 1)) / (a * Math.pow(dist, b) + 1);\n                }\n                for (let d = 0; d < dim; ++d) {\n                    const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                    const c = current[d] + grad_d;\n                    const o = other[d] - grad_d;\n                    current[d] = c;\n                    other[d] = o;\n                    head_embedding.set_entry(j, d, c);\n                    tail_embedding.set_entry(k, d, o);\n                }\n                epoch_of_next_sample[i] += epochs_per_sample[i];\n                const n_neg_samples = (this._iter - epoch_of_next_negative_sample[i]) / epochs_per_negative_sample[i];\n                for (let p = 0; p < n_neg_samples; ++p) {\n                    const k = randomizer.random_int % tail_length;\n                    const other = tail_embedding.row(tail[k]);\n                    const dist = euclidean_squared(current, other);\n                    let grad_coeff = 0;\n                    if (dist > 0) {\n                        grad_coeff = (2 * _repulsion_strength * b) / ((0.01 + dist) * (a * Math.pow(dist, b) + 1));\n                    } else if (j === k) {\n                        continue;\n                    }\n                    for (let d = 0; d < dim; ++d) {\n                        const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                        const c = current[d] + grad_d;\n                        const o = other[d] - grad_d;\n                        current[d] = c;\n                        other[d] = o;\n                        head_embedding.set_entry(j, d, c);\n                        tail_embedding.set_entry(tail[k], d, o);\n                    }\n                }\n                epoch_of_next_negative_sample[i] += n_neg_samples * epochs_per_negative_sample[i];\n            }\n        }\n        return head_embedding;\n    }\n\n    /**\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const Y = this.Y;\n        const { _initial_alpha, _n_epochs } = this._parameters;\n        this._alpha = _initial_alpha * (1 - iter / _n_epochs);\n        this.Y = this._optimize_layout(Y, Y, this._head, this._tail);\n\n        return this.Y;\n    }\n}\n","import { Matrix, linspace } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { PCA } from \"./PCA.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TriMap\n * @extends DR\n */\nexport class TriMap extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TriMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.weight_adj = 500] - scaling factor.\n     * @param {Number} [parameters.c = 5] - number of triplets multiplier.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.tol = 1e-8] -\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TriMap}\n     * @see {@link https://arxiv.org/pdf/1910.00204v1.pdf}\n     * @see {@link https://github.com/eamid/trimap}\n     */\n    constructor(X, parameters) {\n        super(X, { weight_adj: 500, c: 5, d: 2, metric: euclidean, tol: 1e-8, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} [pca = null] - Initial Embedding (if null then PCA gets used).\n     * @param {KNN} [knn = null] - KNN Object (if null then BallTree gets used).\n     */\n    init(pca = null, knn = null) {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric, c } = this._parameters;\n        this.n_inliers = 2 * c;\n        this.n_outliers = 1 * c;\n        this.n_random = 1 * c;\n        this.Y = pca || new PCA(X, d).transform();\n        this.knn = knn || new BallTree(X.to2dArray, metric);\n        const { triplets, weights } = this._generate_triplets(this.n_inliers, this.n_outliers, this.n_random);\n        this.triplets = triplets;\n        this.weights = weights;\n        this.lr = (1000 * N) / triplets.shape[0];\n        this.C = Infinity;\n        this.vel = new Matrix(N, d, 0);\n        this.gain = new Matrix(N, d, 1);\n        return this;\n    }\n\n    /**\n     * Generates {@link n_inliers} x {@link n_outliers} x {@link n_random} triplets.\n     * @param {Number} n_inliers\n     * @param {Number} n_outliers\n     * @param {Number} n_random\n     */\n    _generate_triplets(n_inliers, n_outliers, n_random) {\n        const { metric, weight_adj } = this._parameters;\n        const X = this.X;\n        const N = X.shape[0];\n        const knn = this.knn;\n        const n_extra = Math.min(n_inliers + 20, N);\n        const nbrs = new Matrix(N, n_extra);\n        const knn_distances = new Matrix(N, n_extra);\n        for (let i = 0; i < N; ++i) {\n            knn.search(X.row(i), n_extra + 1)\n                .raw_data()\n                .filter((d) => d.value != 0)\n                .sort((a, b) => a.value - b.value)\n                .forEach((d, j) => {\n                    nbrs.set_entry(i, j, d.element.index);\n                    knn_distances.set_entry(i, j, d.value);\n                });\n        }\n        // scale parameter\n        const sig = new Float64Array(N);\n        for (let i = 0; i < N; ++i) {\n            sig[i] = Math.max((knn_distances.entry(i, 3) + knn_distances.entry(i, 4) + knn_distances.entry(i, 5) + knn_distances.entry(i, 6)) / 4, 1e-10);\n        }\n\n        const P = this._find_p(knn_distances, sig, nbrs);\n\n        let triplets = this._sample_knn_triplets(P, nbrs, n_inliers, n_outliers);\n        let n_triplets = triplets.shape[0];\n        const outlier_distances = new Float64Array(n_triplets);\n        for (let i = 0; i < n_triplets; ++i) {\n            const j = triplets.entry(i, 0);\n            const k = triplets.entry(i, 2);\n            outlier_distances[i] = metric(X.row(j), X.row(k));\n        }\n        let weights = this._find_weights(triplets, P, nbrs, outlier_distances, sig);\n\n        if (n_random > 0) {\n            const { random_triplets, random_weights } = this._sample_random_triplets(X, n_random, sig);\n            triplets = triplets.concat(random_triplets, \"vertical\");\n            weights = Float64Array.from([...weights, ...random_weights]);\n        }\n        n_triplets = triplets.shape[0];\n        let max_weight = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            if (isNaN(weights[i])) {\n                weights[i] = 0;\n            }\n            if (max_weight < weights[i]) max_weight = weights[i];\n        }\n        let max_weight_2 = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight;\n            weights[i] += 0.0001;\n            weights[i] = Math.log(1 + weight_adj * weights[i]);\n            if (max_weight_2 < weights[i]) max_weight_2 = weights[i];\n        }\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight_2;\n        }\n        return {\n            triplets: triplets,\n            weights: weights,\n        };\n    }\n\n    /**\n     * Calculates the similarity matrix P\n     * @private\n     * @param {Matrix} knn_distances - matrix of pairwise knn distances\n     * @param {Float64Array} sig - scaling factor for the distances\n     * @param {Matrix} nbrs - nearest neighbors\n     * @returns {Matrix} pairwise similarity matrix\n     */\n    _find_p(knn_distances, sig, nbrs) {\n        const [N, n_neighbors] = knn_distances.shape;\n        return new Matrix(N, n_neighbors, (i, j) => {\n            return Math.exp(-(knn_distances.entry(i, j) ** 2 / sig[i] / sig[nbrs.entry(i, j)]));\n        });\n    }\n\n    /**\n     * Sample nearest neighbors triplets based on the similarity values given in P.\n     * @private\n     * @param {Matrix} P - Matrix of pairwise similarities between each point and its neighbors given in matrix nbrs.\n     * @param {Matrix} nbrs - Nearest neighbors indices for each point. The similarity values are given in matrix {@link P}. Row i corresponds to the i-th point.\n     * @param {Number} n_inliers - Number of inlier points.\n     * @param {Number} n_outliers - Number of outlier points.\n     *\n     */\n    _sample_knn_triplets(P, nbrs, n_inliers, n_outliers) {\n        const N = nbrs.shape[0];\n        const triplets = new Matrix(N * n_inliers * n_outliers, 3);\n        for (let i = 0; i < N; ++i) {\n            let n_i = i * n_inliers * n_outliers;\n            const sort_indices = this.__argsort(P.row(i).map((d) => -d));\n            for (let j = 0; j < n_inliers; ++j) {\n                let n_j = j * n_outliers;\n                const sim = nbrs.entry(i, sort_indices[j]);\n                const samples = this._rejection_sample(n_outliers, N, sort_indices.slice(0, j + 1));\n                for (let k = 0; k < n_outliers; ++k) {\n                    const index = n_i + n_j + k;\n                    const out = samples[k];\n                    triplets.set_entry(index, 0, i);\n                    triplets.set_entry(index, 1, sim);\n                    triplets.set_entry(index, 2, out);\n                }\n            }\n        }\n        return triplets;\n    }\n\n    /**\n     * Should do the same as np.argsort()\n     * @private\n     * @param {Array} A\n     */\n    __argsort(A) {\n        return A.map((d, i) => {\n            return { d: d, i: i };\n        })\n            .sort((a, b) => a.d - b.d)\n            .map((d) => d.i);\n    }\n\n    /**\n     * Samples {@link n_samples} integers from a given interval [0, {@link max_int}] while rejection the values that are in the {@link rejects}.\n     * @private\n     * @param {*} n_samples\n     * @param {*} max_int\n     * @param {*} rejects\n     */\n    _rejection_sample(n_samples, max_int, rejects) {\n        const randomizer = this._randomizer;\n        const interval = linspace(0, max_int - 1).filter((d) => rejects.indexOf(d) < 0);\n        return randomizer.choice(interval, Math.min(n_samples, interval.length - 2));\n    }\n\n    /**\n     * Calculates the weights for the sampled nearest neighbors triplets\n     * @private\n     * @param {Matrix} triplets - Sampled Triplets.\n     * @param {Matrix} P - Pairwise similarity matrix.\n     * @param {Matrix} nbrs - nearest Neighbors\n     * @param {Float64Array} outlier_distances - Matrix of pairwise outlier distances\n     * @param {Float64Array} sig - scaling factor for the distances.\n     */\n    _find_weights(triplets, P, nbrs, outlier_distances, sig) {\n        const n_triplets = triplets.shape[0];\n        const weights = new Float64Array(n_triplets);\n        for (let t = 0; t < n_triplets; ++t) {\n            const i = triplets.entry(t, 0);\n            const sim = nbrs.row(i).indexOf(triplets.entry(t, 1));\n            const p_sim = P.entry(i, sim);\n            let p_out = Math.exp(-(outlier_distances[t] ** 2 / (sig[i] * sig[triplets.entry(t, 2)])));\n            if (p_out < 1e-20) p_out = 1e-20;\n            weights[t] = p_sim / p_out;\n        }\n        return weights;\n    }\n\n    /**\n     * Sample uniformly ranom triplets\n     * @private\n     * @param {Matrix} X - Data matrix.\n     * @param {Number} n_random - Number of random triplets per point\n     * @param {Float64Array} sig - Scaling factor for the distances\n     */\n    _sample_random_triplets(X, n_random, sig) {\n        const metric = this.parameter(\"metric\");\n        const randomizer = this._randomizer;\n        const N = X.shape[0];\n        const random_triplets = new Matrix(N * n_random, 3);\n        const random_weights = new Float64Array(N * n_random);\n        for (let i = 0; i < N; ++i) {\n            const n_i = i * n_random;\n            const indices = [...linspace(0, i - 1), ...linspace(i + 1, N - 1)];\n            for (let j = 0; j < n_random; ++j) {\n                let [sim, out] = randomizer.choice(indices, 2);\n                let p_sim = Math.exp(-(metric(X.row(i), X.row(sim)) ** 2 / (sig[i] * sig[sim])));\n                if (p_sim < 1e-20) p_sim = 1e-20;\n                let p_out = Math.exp(-(metric(X.row(i), X.row(out)) ** 2 / (sig[i] * sig[out])));\n                if (p_out < 1e-20) p_out = 1e-20;\n\n                if (p_sim < p_out) {\n                    [sim, out] = [out, sim];\n                    [p_sim, p_out] = [p_out, p_sim];\n                }\n                const index = n_i + j;\n                random_triplets.set_entry(index, 0, i);\n                random_triplets.set_entry(index, 1, sim);\n                random_triplets.set_entry(index, 2, out);\n                random_weights[index] = p_sim / p_out;\n            }\n        }\n        return {\n            random_triplets: random_triplets,\n            random_weights: random_weights,\n        };\n    }\n\n    /**\n     * Computes the gradient for updating the embedding.\n     * @param {Matrix} Y - The embedding\n     */\n    _grad(Y) {\n        const n_inliers = this.n_inliers;\n        const n_outliers = this.n_outliers;\n        const triplets = this.triplets;\n        const weights = this.weights;\n        const [N, dim] = Y.shape;\n        const n_triplets = triplets.shape[0];\n        const grad = new Matrix(N, dim, 0);\n        let y_ij = new Float64Array(dim);\n        let y_ik = new Float64Array(dim);\n        let d_ij = 1;\n        let d_ik = 1;\n        let n_viol = 0;\n        let loss = 0;\n        const n_knn_triplets = N * n_inliers * n_outliers;\n\n        for (let t = 0; t < n_triplets; ++t) {\n            const [i, j, k] = triplets.row(t);\n            // update y_ij, y_ik, d_ij, d_ik\n            if (t % n_outliers == 0 || t >= n_knn_triplets) {\n                d_ij = 1;\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_jd = Y.entry(j, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ij[d] = Y_id - Y_jd;\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ij += y_ij[d] ** 2;\n                    d_ik += y_ik[d] ** 2;\n                }\n                // update y_ik and d_ik only\n            } else {\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ik += y_ik[d] ** 2;\n                }\n            }\n\n            if (d_ij > d_ik) ++n_viol;\n            loss += weights[t] / (1 + d_ik / d_ij);\n            const w = (weights[t] / (d_ij + d_ik)) ** 2;\n            for (let d = 0; d < dim; ++d) {\n                const gs = y_ij[d] * d_ik * w;\n                const go = y_ik[d] * d_ij * w;\n                grad.set_entry(i, d, grad.entry(i, d) + gs - go);\n                grad.set_entry(j, d, grad.entry(j, d) - gs);\n                grad.set_entry(k, d, grad.entry(k, d) + go);\n            }\n        }\n        return { grad, loss, n_viol };\n    }\n\n    /**\n     *\n     * @param {Number} max_iteration\n     */\n    transform(max_iteration = 400) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n        }\n        return this.projection;\n    }\n\n    /**\n     * @param {Number} max_iteration\n     * @yields {Matrix}\n     * @returns {Matrix}\n     */\n    *generator(max_iteration = 800) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Does the iteration step.\n     * @private\n     * @param {Number} iter\n     */\n    _next(iter) {\n        const gamma = iter > 150 ? 0.5 : 0.3;\n        const old_C = this.C;\n        const vel = this.vel;\n        const Y = this.Y.add(vel.mult(gamma));\n        const { grad, loss, n_viol } = this._grad(Y);\n        this.C = loss;\n        this.Y = this._update_embedding(Y, iter, grad);\n        this.lr *= old_C > loss + this._parameters.tol ? 1.01 : 0.9;\n        return this.Y;\n    }\n\n    /**\n     * Updates the embedding.\n     * @private\n     * @param {Matrix} Y\n     * @param {Number} iter\n     * @param {Matrix} grad\n     */\n    _update_embedding(Y, iter, grad) {\n        const [N, dim] = Y.shape;\n        const gamma = iter > 150 ? 0.9 : 0.5; // moment parameter\n        const min_gain = 0.01;\n        const gain = this.gain;\n        const vel = this.vel;\n        const lr = this.lr;\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const new_gain = Math.sign(vel.entry(i, d)) != Math.sign(grad.entry(i, d)) ? gain.entry(i, d) + 0.2 : Math.max(gain.entry(i, d) * 0.8, min_gain);\n                gain.set_entry(i, d, new_gain);\n                vel.set_entry(i, d, gamma * vel.entry(i, d) - lr * gain.entry(i, d) * grad.entry(i, d));\n                Y.set_entry(i, d, Y.entry(i, d) + vel.entry(i, d));\n            }\n        }\n        return Y;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n/**\n * @class\n * @alias Hierarchical_Clustering\n */\nexport class Hierarchical_Clustering {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias Hierarchical_Clustering\n     * @todo needs restructuring.\n     * @param {Matrix} - Data or distance matrix if metric is 'precomputed'\n     * @param {(\"single\"|\"complete\"|\"average\")} [linkage = \"complete\"]\n     * @param {Function|\"precomputed\"} [metric = euclidean]\n     * @returns {Hierarchical_Clustering}\n     */\n    constructor(matrix, linkage = \"complete\", metric = euclidean) {\n        this._id = 0;\n        this._matrix = matrix instanceof Matrix ? matrix : Matrix.from(matrix);\n        this._metric = metric;\n        this._linkage = linkage;\n        if (metric === \"precomputed\" && this._matrix.shape[0] !== this._matrix.shape[1]) {\n            throw new Error(\"If metric is 'precomputed', then matrix has to be square!\");\n        }\n        this.init();\n        this.root = this.do();\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} value - value where to cut the tree.\n     * @param {(\"distance\"|\"depth\")} [type = \"distance\"] - type of value.\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters(value, type = \"distance\") {\n        let clusters = [];\n        let accessor;\n        switch (type) {\n            case \"distance\":\n                accessor = (d) => d.dist;\n                break;\n            case \"depth\":\n                accessor = (d) => d.depth;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        this._traverse(this.root, accessor, value, clusters);\n        return clusters;\n    }\n\n    /**\n     * @private\n     * @param {} node\n     * @param {*} f\n     * @param {*} value\n     * @param {*} result\n     */\n    _traverse(node, f, value, result) {\n        if (f(node) <= value) {\n            result.push(node.leaves());\n        } else {\n            this._traverse(node.left, f, value, result);\n            this._traverse(node.right, f, value, result);\n        }\n    }\n\n    /**\n     * computes the tree.\n     */\n    init() {\n        const metric = this._metric;\n        const A = this._matrix;\n        const n = (this._n = A.shape[0]);\n        const d_min = (this._d_min = new Float64Array(n));\n        let distance_matrix;\n        if (metric !== \"precomputed\") {\n            distance_matrix = new Matrix(n, n, 0); //new Array(n);\n            for (let i = 0; i < n; ++i) {\n                d_min[i] = 0;\n                //distance_matrix[i] = new Float64Array(n);\n                for (let j = 0; j < n; ++j) {\n                    distance_matrix.set_entry(i, j, i === j ? Infinity : metric(A.row(i), A.row(j)));\n                    if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        } else {\n            distance_matrix = this._matrix.clone();\n            for (let i = 0; i < n; ++i) {\n                for (let j = 0; j < n; ++j) {\n                    if (i === j) {\n                        distance_matrix.set_entry(i, j, Infinity);\n                    } else if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        }\n        this._distance_matrix = distance_matrix;\n        const clusters = (this._clusters = new Array(n));\n        const c_size = (this._c_size = new Uint16Array(n));\n        for (let i = 0; i < n; ++i) {\n            clusters[i] = [];\n            clusters[i][0] = new Cluster(this._id++, null, null, 0, A.row(i), i, 1, 0);\n            c_size[i] = 1;\n        }\n        return this;\n    }\n\n    /**\n     * computes the tree.\n     */\n    do() {\n        const n = this._n;\n        const d_min = this._d_min;\n        const D = this._distance_matrix;\n        const clusters = this._clusters;\n        const c_size = this._c_size;\n        const linkage = this._linkage;\n        let root = null;\n        for (let p = 0, p_max = n - 1; p < p_max; ++p) {\n            let c1 = 0;\n            for (let i = 0; i < n; ++i) {\n                let D_i_min = D.entry(i, d_min[i]);\n                for (let j = i + 1; j < n; ++j) {\n                    if (D_i_min > D.entry(i, j)) {\n                        d_min[i] = j;\n                        D_i_min = D.entry(i, d_min[i]);\n                    }\n                }\n            }\n            for (let i = 0; i < n; ++i) {\n                if (D.entry(i, d_min[i]) < D.entry(c1, d_min[c1])) {\n                    c1 = i;\n                }\n            }\n            let c2 = d_min[c1];\n            let c1_cluster = clusters[c1][0];\n            let c2_cluster = clusters[c2][0];\n            let c1_cluster_indices = c1_cluster.isLeaf ? [c1_cluster.index] : c1_cluster.index;\n            let c2_cluster_indices = c2_cluster.isLeaf ? [c2_cluster.index] : c2_cluster.index;\n            let indices = c1_cluster_indices.concat(c2_cluster_indices);\n            let new_cluster = new Cluster(this._id++, c1_cluster, c2_cluster, D.entry(c1, c2), null, indices);\n            c1_cluster.parent = new_cluster;\n            c2_cluster.parent = new_cluster;\n            clusters[c1].unshift(new_cluster);\n            c_size[c1] += c_size[c2];\n            for (let j = 0; j < n; ++j) {\n                const D_c1_j = D.entry(c1, j);\n                const D_c2_j = D.entry(c2, j);\n                let value;\n                switch (linkage) {\n                    case \"single\":\n                        value = Math.min(D_c1_j, D_c2_j);\n                        break;\n                    case \"complete\":\n                        value = Math.max(D_c1_j, D_c2_j);\n                        break;\n                    case \"average\":\n                        value = (c_size[c1] * D_c1_j + c_size[c2] * D_c2_j) / (c_size[c1] + c_size[j]);\n                        break;\n                }\n                D.set_entry(j, c1, value);\n                D.set_entry(c1, j, value);\n            }\n\n            D.set_entry(c1, c1, Infinity);\n            for (let i = 0; i < n; ++i) {\n                D.set_entry(i, c2, Infinity);\n                D.set_entry(c2, i, Infinity);\n            }\n\n            /* for (let j = 0; j < n; ++j) {\n                if (d_min[j] === c2) {\n                    d_min[j] = c1;\n                }\n                if (D.entry(c1, j) < D.entry(c1, d_min[c1])) {\n                    d_min[c1] = j;\n                }\n            } */\n            root = new_cluster;\n        }\n        return root;\n    }\n}\n\nclass Cluster {\n    constructor(id, left, right, dist, centroid, index, size, depth) {\n        this.id = id;\n        this.left = left;\n        this.right = right;\n        this.dist = dist;\n        this.index = index;\n        this.size = size ?? left.size + right.size;\n        this.depth = depth ?? 1 + Math.max(left.depth, right.depth);\n        this.centroid = centroid ?? this._calculate_centroid(left, right);\n        this.parent = null;\n        return this;\n    }\n\n    _calculate_centroid(left, right) {\n        const l_size = left.size;\n        const r_size = right.size;\n        const l_centroid = left.centroid;\n        const r_centroid = right.centroid;\n        const size = this.size;\n        const n = left.centroid.length;\n        const new_centroid = new Float64Array(n);\n        for (let i = 0; i < n; ++i) {\n            new_centroid[i] = (l_size * l_centroid[i] + r_size * r_centroid[i]) / size;\n        }\n        return new_centroid;\n    }\n\n    get isLeaf() {\n        return this.depth === 0;\n    }\n\n    leaves() {\n        if (this.isLeaf) return [this];\n        const left = this.left;\n        const right = this.right;\n        return (left.isLeaf ? [left] : left.leaves()).concat(right.isLeaf ? [right] : right.leaves());\n    }\n\n    descendants() {\n        if (this.isLeaf) return [this];\n        const left_descendants = this.left.descendants();\n        const right_descendants = this.right.descendants();\n        return left_descendants.concat(right_descendants).concat([this]);\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { linspace } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KMeans\n */\nexport class KMeans {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMeans\n     * @todo needs restructuring. \n     * @param {Matrix} matrix \n     * @param {Numbers} K \n     * @param {Function} [metric = euclidean] \n     * @param {Number} [seed = 1987]\n     * @param {Boolean} [init = true]\n     * @returns {KMeans}\n     */\n    constructor(matrix, K, metric = euclidean, seed=1987, init = true) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_centroids = this._get_random_centroids(K);\n        if (init) this.init(K, this._cluster_centroids);\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const clusters = this._clusters;\n        const result = new Array(K).fill().map(() => new Array());\n        clusters.forEach((c, i) => result[c].push(i));\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Array} points \n     * @param {Array} candidates \n     */\n    _furthest_point(points, candidates) {\n        const A = this._matrix;\n        const metric = this._metric;\n        let i = points.length;\n        let H = Heap.heapify(\n            candidates, \n            (d) => {\n                const Ad = A.row(d)\n                let sum = 0;\n                for (let j = 0; j < i; ++j) {\n                    sum += metric(Ad, points[j])\n                }\n                return sum;\n            }, \n            \"max\"\n        )\n        return H.pop().element;\n    }\n\n    _get_random_centroids(K) {\n        const N = this._N;\n        const randomizer = this._randomizer;\n        const A = this._matrix;\n        const cluster_centroids = new Array(K).fill()\n        const indices = linspace(0, N - 1);\n        const random_point = randomizer.random_int % (N - 1);\n        cluster_centroids[0] = A.row(random_point);\n        const init_points = [random_point];\n        const sample_size = Math.floor((N - K) / K);// / K\n        for (let i = 1; i < K; ++i) {\n            // sampling + kmeans++ improvement?\n            const sample = randomizer.choice(indices.filter(d => init_points.indexOf(d) == -1), sample_size);\n            const furthest_point = this._furthest_point(cluster_centroids.slice(0, i), sample);\n            init_points.push(furthest_point);\n            cluster_centroids[i] = A.row(furthest_point);\n        }\n        return cluster_centroids;\n    }\n\n    _iteration(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const metric = this._metric;\n        const clusters = this._clusters;\n        let clusters_changed = false;\n        // find nearest cluster centroid.\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i)\n            let min_dist = Infinity;\n            let min_cluster = null;\n            for (let j = 0; j < K; ++j) {\n                let d = metric(cluster_centroids[j], Ai);\n                if (d < min_dist) {\n                    min_dist = d;\n                    min_cluster = j; \n                }\n            }\n            if (clusters[i] !== min_cluster) {\n                clusters_changed = true;\n            }\n            clusters[i] = min_cluster;\n        }\n        // update cluster centroid\n        // reset cluster centroids to 0\n        for (let i = 0; i < K; ++i) {\n            const centroid = cluster_centroids[i];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] = 0;\n            }\n        }\n        // compute centroid\n        this._compute_centroid(cluster_centroids);\n\n        return {   \n            \"clusters_changed\": clusters_changed,\n            \"cluster_centroids\": cluster_centroids\n        };\n    }\n\n    _compute_centroid(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const clusters = this._clusters;\n        const cluster_counter = new Array(K).fill(0);\n\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i);\n            const ci = clusters[i];\n            cluster_counter[ci]++;\n            const centroid = cluster_centroids[ci];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] += Ai[j];\n            }\n        }\n        for (let i = 0; i < K; ++i) {\n            const n = cluster_counter[i];\n            cluster_centroids[i] = cluster_centroids[i].map(c => c / n);\n        }\n        \n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_centroids) {\n        if (!K) K = this._K;\n        if (!cluster_centroids) cluster_centroids = this._get_random_centroids(K);\n        let clusters_changed = false;\n        do {\n            const iteration_result = this._iteration(cluster_centroids)\n            cluster_centroids = iteration_result.cluster_centroids;\n            clusters_changed = iteration_result.clusters_changed;\n        } while (clusters_changed)\n    }\n    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { linspace, Matrix } from \"../matrix/index.js\";\nimport { min } from \"../util/index.js\";\n/**\n * @class\n * @alias KMedoids\n */\nexport class KMedoids {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMedoids\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - data matrix\n     * @param {Numbers} K - number of clusters\n     * @param {number} [max_iter=null] - maximum number of iterations. Default is 10 * Math.log10(N)\n     * @param {Function} [metric = euclidean] - metric defining the dissimilarity \n     * @param {Number} [seed = 1212] - seed value for random number generator\n     * @returns {KMedoids}\n     * @see {@link https://link.springer.com/chapter/10.1007/978-3-030-32047-8_16} Faster k-Medoids Clustering: Improving the PAM, CLARA, and CLARANS Algorithms\n     */\n    constructor(matrix, K, max_iter=null, metric = euclidean, seed=1212) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._A = this._matrix.to2dArray;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        this._max_iter = max_iter || 10 * Math.log10(N) \n        this._distance_matrix = new Matrix(N, N, \"zeros\");\n        /* for (let i = 1; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dist = metric(this._A[i], this._A[j]);\n                this._distance_matrix.set_entry(i, j, dist);\n                this._distance_matrix.set_entry(j, i, dist)\n            }\n        } */\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_medoids = this._get_random_medoids(K);\n        //if (init) this.init(K, this._cluster_medoids);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const A = this._A;\n        if (!this._is_initialized) {\n            this.init(K, this._cluster_medoids);\n        }\n        const result = new Array(K).fill().map(() => new Array());\n        A.forEach((x_j, j) => {\n            result[this._nearest_medoid(x_j, j).index_nearest].push(j);\n        })\n        result.medoids = this._cluster_medoids;\n        return result;\n    }\n\n    async* generator() {\n        const max_iter = this._max_iter;\n        yield this.get_clusters()\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n            yield this.get_clusters();\n        } while (!finish && ++i < max_iter)\n    }\n\n    /**\n     * Algorithm 1. FastPAM1: Improved SWAP algorithm\n     */\n    /* _iteration_1() {\n        const A = this._A;\n        const N = this._N;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        let DeltaTD = 0;\n        let m0 = null;\n        let x0 = null;\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const nearest_medoid = this._nearest_medoid(x_j, j);\n                const d_j = nearest_medoid.distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    // disance to new medoid\n                    const d_oj = this._get_distance(o, j, x_o, x_j);\n                    const {\n                        \"index_nearest\": n,\n                        \"distance_nearest\": d_n,\n                        \"distance_second\": d_s,\n                    } = this._nearest_medoid(x_o, o); \n                    this._clusters[o] = n; // cached values\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change\n                    if (d_oj < d_n) { // reassignment check\n                        deltaTD.forEach((d_i, i) => {\n                            if (n !== i) {\n                                deltaTD[i] = d_i + d_oj - d_n; // update loss change\n                            }\n                        });\n                    }\n                });\n                // choose best medoid i;\n                const i = deltaTD\n                    .map((d, i) => [d, i])\n                    .sort((d1, d2) => d1[0] - d2[0])[0][1];\n                const deltaTD_i = deltaTD[i];\n                // store\n                if (deltaTD_i < DeltaTD) {\n                    DeltaTD = deltaTD_i;\n                    m0 = i;\n                    x0 = j;\n                }\n            }\n        });\n\n        if (DeltaTD >= 0) {\n            return true // break loop if DeltaTD >= 0\n        }\n        // swap roles of medoid m and non-medoid x;\n        medoids[m0] = x0;\n        this._cluster_medoids = medoids;\n        return false\n    } */\n\n    /** Algorithm 2. FastPAM2: SWAP with multiple candidates\n     * \n     */\n    _iteration() {\n        const A = this._A;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        const cache = A.map((x_o, o) => this._nearest_medoid(x_o, o));\n        // empty best candidates array\n        const DeltaTD = new Array(K).fill(0);\n        const xs = new Array(K).fill(null);\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const d_j = cache[j].distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    if (j === o) return;\n                    const d_oj = this._get_distance(o, j, x_o, x_j); // distance to new medoid\n                    const {\"index_nearest\": n, \"distance_nearest\": d_n, \"distance_second\": d_s} = cache[o]; // cached\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change for x_o\n                    // Reassignment check\n                    if (d_oj < d_n) { \n                        // update loss change\n                        for (let i = 0; i < K; ++i) {\n                            if (i !== n) deltaTD[i] += d_oj - d_n;\n                        }\n                    }\n                });\n                // remember best swap for i;\n                deltaTD\n                    .map((d, i) => [d, i])\n                    .filter(([d, i]) => d < DeltaTD[i])\n                    .forEach(([d, i]) => {\n                        if (d < DeltaTD[i]) {\n                            DeltaTD[i] = d;\n                            xs[i] = j;\n                        }\n                    })\n            }\n        })\n        // stop if no improvements were found\n        if (min(DeltaTD) >= 0) return true; \n\n        // execute all improvements\n        while (min(DeltaTD) < 0) {\n            // swap roles of medoid m_i and non_medoid xs_i\n            const i = DeltaTD\n                .map((d, i) => [d, i])\n                .sort(([a], [b]) => a - b)[0][1];\n            if (medoids.filter(m => m == xs[i]).length == 0) {\n                medoids[i] = xs[i];\n            }\n            // disable the swap just performed\n            DeltaTD[i] = 0; \n            // recompute TD for remaining swap candidates\n            DeltaTD\n                .map((d_j, j) => [d_j, j])\n                .filter(([d_j]) => d_j < 0)\n                .forEach(([_, j]) => {\n                    const x_j = A[j];\n                    let sum = 0;\n                    A.forEach((x_o, o) => {\n                        if (medoids.findIndex(m => m != j && m == o) >= 0) return;\n                        if (i == j) return;\n                        if (cache[o].index_nearest === medoids[j])\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j), cache[o].distance_second) - cache[o].distance_nearest); \n                        else {\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j) - cache[o].distance_nearest, 0));\n                        }\n                    });\n                    DeltaTD[j] = sum;\n                })\n        }\n        this._cluster_medoids = medoids;\n        return false;\n    }\n\n    _get_distance(i, j, x_i=null, x_j=null) {\n        if (i === j) return 0;\n        const D = this._distance_matrix;\n        const A = this._A;\n        const metric = this._metric;\n        let d_ij = D.entry(i, j);\n        if (d_ij === 0) {\n            d_ij = metric(x_i || A[i], x_j || A[j]);\n            D.set_entry(i, j, d_ij);\n            D.set_entry(j, i, d_ij);\n        }\n        return d_ij;\n    }\n\n    _nearest_medoid(x_j, j) {\n        const medoids = this._cluster_medoids;\n        const A = this._A;\n        const [nearest, second] = medoids\n            .map((m, i) => {\n                const x_m = A[m]; \n                return [this._get_distance(j, m, x_j, x_m), i];\n            })\n            .sort((m1, m2) => m1[0] - m2[0]);\n        \n        return { \n            \"distance_nearest\": nearest[0], \n            \"index_nearest\": nearest[1],\n            \"distance_second\": second[0],\n            \"index_second\": second[1],\n        };\n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_medoids) {\n        if (!K) K = this._K;\n        if (!cluster_medoids) cluster_medoids = this._get_random_medoids(K);\n        const max_iter = this._max_iter;\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n        } while (!finish && ++i < max_iter)\n        return this;\n    }\n\n    /**\n     * Algorithm 3. FastPAM LAB: Linear Approximate BUILD initialization.\n     * @param {number} K - number of clusters\n     * \n     */\n    _get_random_medoids(K) {\n        const N = this._N;\n        const A = this._A;\n        const indices = linspace(0, N - 1);\n        const randomizer = this._randomizer;\n        const n = Math.min(N, 10 + Math.ceil(Math.sqrt(N)));\n        const TD = new Array(n).fill(Infinity);\n        const medoids = [];\n        // first medoid\n        let TD0 = Infinity;\n        let S = randomizer.choice(indices, n);\n        for (let j = 0; j < n; ++j) {\n            const S_j = S[j];\n            const x_j = A[S_j];\n            for (let o = 0; o < n; ++o) {\n                if (o === j) continue;\n                const x_o = A[S[o]];\n                TD[j] += this._get_distance(j, o, x_j, x_o);\n            }\n            if (TD[j] < TD0) {\n                TD0 = TD[j]; // smallest distance sum\n                medoids.push(S_j);\n            }\n        }\n        // other medoids\n        for (let i = 1; i < K; ++i) {\n            let DeltaTD = Infinity;\n            S = randomizer.choice(indices.filter(index => medoids.findIndex(d => d === index) < 0), n);\n            for (let j = 0; j < n; ++j) {\n                let deltaTD = 0;\n                const S_j = S[j];\n                const x_j = A[S_j];\n                for (let o = 0; o < n; ++o) {\n                    if (o === j) continue;\n                    const S_o = S[o];\n                    const x_o = A[S_o];\n                    let delta = this._get_distance(S_j, S_o, x_j, x_o) - min(medoids.map(m => this._get_distance(S_o, m, x_o)));\n                    if (delta < 0) {\n                        deltaTD = deltaTD + delta;\n                    }\n                }\n                // best reduction\n                if (deltaTD < DeltaTD) {\n                    DeltaTD = deltaTD;\n                    medoids.push(S_j);\n                }\n            }\n            TD0 += DeltaTD;\n        }\n        return medoids.slice(0, K);\n    }\n    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias OPTICS\n */\nexport class OPTICS {\n    /**\n     * **O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure.\n     * @constructor\n     * @memberof module:clustering\n     * @alias OPTICS\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - the data.\n     * @param {Number} epsilon - the minimum distance which defines whether a point is a neighbor or not.\n     * @param {Number} min_points - the minimum number of points which a point needs to create a cluster. (Should be higher than 1, else each point creates a cluster.)\n     * @param {Function} [metric = euclidean] - the distance metric which defines the distance between two points of the {@link matrix}.\n     * @returns {OPTICS}\n     * @see {@link https://www.dbs.ifi.lmu.de/Publikationen/Papers/OPTICS.pdf}\n     * @see {@link https://en.wikipedia.org/wiki/OPTICS_algorithm}\n     */\n    constructor(matrix, epsilon, min_points, metric = euclidean) {\n        this._matrix = matrix;\n        this._epsilon = epsilon;\n        this._min_points = min_points;\n        this._metric = metric;\n\n        this._ordered_list = [];\n        this._clusters = [];\n        this._DB = new Array(matrix.shape[0]).fill();\n        this.init();\n        return this;\n    }\n\n    /**\n     * Computes the clustering.\n     */\n    init() {\n        const ordered_list = this._ordered_list;\n        const matrix = this._matrix;\n        const N = matrix.shape[0];\n        const DB = this._DB;\n        const clusters = this._clusters;\n        let cluster_index = this._cluster_index = 0;\n\n        for (let i = 0; i < N; ++i) {\n            DB[i] = {\n                \"element\": matrix.row(i),\n                \"index\": i,\n                \"reachability_distance\": undefined,\n                \"processed\": false,\n            }\n        }\n        for (const p of DB) {\n            if (p.processed) continue;\n            p.neighbors = this._get_neighbors(p);\n            p.processed = true;\n            clusters.push([p.index])\n            cluster_index = clusters.length - 1;\n            ordered_list.push(p);\n            if (this._core_distance(p) != undefined) {\n                const seeds = new Heap(null, d => d.reachability_distance, \"min\")\n                this._update(p, seeds);\n                this._expand_cluster(seeds, clusters[cluster_index]);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Array} An array consisting of the {@link epsilon}-neighborhood of {@link p}.\n     */\n    _get_neighbors(p) {\n        if (\"neighbors\" in p) return p.neighbors;\n        const DB = this._DB;\n        const metric = this._metric;\n        const epsilon = this._epsilon;\n        const neighbors = [];\n        for (const q of DB) {\n            if (q.index == p.index) continue;\n            if (metric(p.element, q.element) < epsilon) {\n                neighbors.push(q);\n            }\n        }\n        return neighbors;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Number} The distance to the {@link min_points}-th nearest point of {@link p}, or undefined if the {@link epsilon}-neighborhood has fewer elements than {@link min_points}.\n     */\n    _core_distance(p) {\n        const min_points = this._min_points;\n        const metric = this._metric;\n        if (p.neighbors && p.neighbors.length <= min_points) {\n            return undefined;\n        }\n        return metric(p.element, p.neighbors[min_points].element);\n    }\n\n    /**\n     * Updates the reachability distance of the points.\n     * @private\n     * @param {Object} p \n     * @param {Heap} seeds \n     */\n    _update(p, seeds) {\n        const metric = this._metric;\n        const core_distance = this._core_distance(p);\n        const neighbors = this._get_neighbors(p);//p.neighbors;\n        for (const q of neighbors) {\n            if (q.processed) continue;\n            const new_reachability_distance = Math.max(core_distance, metric(p.element, q.element));\n            //if (q.reachability_distance == undefined) { // q is not in seeds\n            if (seeds.raw_data().findIndex(d => d.element == q) < 0) {\n                q.reachability_distance = new_reachability_distance;\n                seeds.push(q);\n            } else { // q is in seeds\n                if (new_reachability_distance < q.reachability_distance) {\n                    q.reachability_distance = new_reachability_distance;\n                    seeds = Heap.heapify(seeds.data(), d => d.reachability_distance, \"min\"); // seeds change key =/\n                }\n            }\n        }\n    }\n\n    /**\n     * Expands the {@link cluster} with points in {@link seeds}.\n     * @private\n     * @param {Heap} seeds \n     * @param {Array} cluster \n     */\n    _expand_cluster(seeds, cluster) {\n        const ordered_list = this._ordered_list;\n        while (!seeds.empty) {\n            const q = seeds.pop().element;\n            q.neighbors = this._get_neighbors(q);\n            q.processed = true;\n            cluster.push(q.index);\n            ordered_list.push(q);\n            if (this._core_distance(q) != undefined) {\n                this._update(q, seeds);\n                this._expand_cluster(seeds, cluster);\n            }\n        }\n    }\n\n    /**\n     * Returns an array of clusters.\n     * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters() {\n        const clusters = [];\n        const outliers = [];\n        const min_points = this._min_points;\n        for (const cluster of this._clusters) {\n            if (cluster.length < min_points) {\n                outliers.push(...cluster);\n            } else {\n                clusters.push(cluster);\n            }\n        }\n        clusters.push(outliers);\n        return clusters;\n    }\n\n    /**\n     * @returns {Array} Returns an array, where the ith entry defines the cluster affirmation of the ith point of {@link matrix}. (-1 stands for outlier)\n     */\n    get_cluster_affirmation() {\n        const N = this._matrix.shape[0];\n        const result = new Array(N).fill();\n        const clusters = this.get_clusters();\n        for (let i = 0, n = clusters.length; i < n; ++i) {\n            const cluster = clusters[i]\n            for (const index of cluster) {\n                result[index] = (i < n - 1) ? i : -1;\n            }\n        }\n        return result;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\nimport { MDS } from \"./MDS.js\";\nimport { KMedoids } from \"../clustering/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\n/**\n * @class\n * @alias LSP\n * @extends DR\n */\nexport class LSP extends DR {\n    /**\n     * Least Squares Projection.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LSP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.neighbors = Math.max(Math.floor(N / 10), 2)] - number of neighbors to consider.\n     * @param {Number} [parameters.control_points = Math.ceil(Math.sqrt(N))] - number of controlpoints\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {LSP}\n     * @see {@link https://ieeexplore.ieee.org/document/4378370}\n     * @todo accept precomputed distance matrix.\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, control_points: undefined, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        this.parameter(\"control_points\", Math.min(parameters.control_points ?? Math.ceil(Math.sqrt(this._N)), this._N - 1));\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     *\n     * @param {DR} DR - method used for position control points.\n     * @param {Object} DR_parameters - Object containing parameters for the DR method which projects the control points\n     * @returns {LSP}\n     */\n    init(DR = MDS, DR_parameters = {}, KNN = BallTree) {\n        if (this._is_initialized) return this;\n        const X = this.X;\n        const N = this._N;\n        const K = this.parameter(\"neighbors\");\n        const d = this.parameter(\"d\");\n        const seed = this.parameter(\"seed\");\n        const metric = this.parameter(\"metric\");\n        DR_parameters = Object.assign({d, metric, seed }, DR_parameters);\n        const nc = this.parameter(\"control_points\");\n        const control_points = new KMedoids(X, nc, null, metric).get_clusters().medoids;\n        const C = new Matrix(nc, N, \"zeros\");\n        control_points.forEach((c_i, i) => {\n            C.set_entry(i, c_i, 1);\n        });\n        const Y_C = new DR(Matrix.from(control_points.map((c_i) => X.row(c_i))), DR_parameters).transform();\n\n        const XA = X.to2dArray;\n        const knn = new KNN(XA, metric);\n        const L = new Matrix(N, N, \"I\");\n        const alpha = -1 / K;\n        XA.forEach((x_i, i) => {\n            for (const { index: j } of knn.search(x_i, K).iterate()) {\n                if (i === j) continue;\n                L.set_entry(i, j, alpha);\n            }\n        });\n        const A = L.concat(C, \"vertical\");\n\n        const z = new Matrix(N, d, \"zeros\");\n        const b = z.concat(Y_C, \"vertical\");\n\n        this._A = A;\n        this._b = b;\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const A = this._A;\n        const AT = A.T;\n        const b = this._b;\n        const ATA = AT.dot(A);\n        const ATb = AT.dot(b);\n        this.Y = Matrix.solve_CG(ATA, ATb, this._randomizer);\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { DisjointSet } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias TopoMap\n * @memberof module:dimensionality_reduction\n * @extends DR\n */\nexport class TopoMap extends DR {\n    /**\n     * TopoMap: A 0-dimensional Homology Preserving Projection of High-Dimensional Data.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TopoMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TopoMap}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._distance_matrix = new Matrix(this._N, this._N, 0);\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    __lazy_distance_matrix(i, j, metric) {\n        const D = this._distance_matrix;\n        const X = this.X;\n        const D_ij = D.entry(i, j);\n        if (D_ij === 0) {\n            let dist = metric(X.row(i), X.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n            return dist;\n        }\n        return D_ij;\n    }\n\n    /**\n     * Computes the minimum spanning tree, using a given metric\n     * @private\n     * @param {Function} metric\n     * @see {@link https://en.wikipedia.org/wiki/Kruskal%27s_algorithm}\n     */\n    _make_minimum_spanning_tree(metric = euclidean) {\n        const N = this._N;\n        const X = [...this.X];\n\n        let disjoint_set = new DisjointSet(X);\n        const F = [];\n        let E = [];\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                E.push([i, j, this.__lazy_distance_matrix(i, j, metric)]);\n            }\n        }\n        E = E.sort((a, b) => a[2] - b[2]);\n\n        for (const [u, v, w] of E) {\n            const set_u = disjoint_set.find(X[u]);\n            const set_v = disjoint_set.find(X[v]);\n            if (set_u !== set_v) {\n                F.push([u, v, w]);\n                disjoint_set.union(set_u, set_v);\n            }\n        }\n\n        return F.sort((a, b) => a[2] - b[2]);\n    }\n\n    /**\n     * initializes TopoMap. Sets all projcted points to zero, and computes a minimum spanning tree.\n     */\n    init() {\n        const { metric} = this._parameters\n        this.Y = new Matrix(this._N, 2, 0);\n        this._Emst = this._make_minimum_spanning_tree(metric);\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Returns true if Point C is left of line AB.\n     * @private\n     * @param {Array} PointA - Point A of line AB\n     * @param {Array} PointB - Point B of line AB\n     * @param {Array} PointC - Point C\n     * @returns {Boolean}\n     */\n    __hull_cross([ax, ay], [bx, by], [sx, sy]) {\n        return (bx - ax) * (sy - ay) - (by - ay) * (sx - ax) <= 0;\n    }\n\n    /**\n     * Computes the convex hull of the set of Points S\n     * @private\n     * @param {Array} S - Set of Points.\n     * @see {@link https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript}\n     * @returns {Array} convex hull of S. Starts at the bottom-most point and continues counter-clockwise.\n     */\n    __hull(S) {\n        const points = S.sort(([x1, y1], [x2, y2]) => y1 - y2 || x1 - x2);\n        const N = points.length;\n        if (N <= 2) return points;\n\n        const lower = [];\n        for (let i = 0; i < N; ++i) {\n            while (lower.length >= 2 && this.__hull_cross(lower[lower.length - 2], lower[lower.length - 1], points[i])) {\n                lower.pop();\n            }\n            lower.push(points[i]);\n        }\n        const upper = [];\n        for (let i = N - 1; i >= 0; --i) {\n            while (upper.length >= 2 && this.__hull_cross(upper[upper.length - 2], upper[upper.length - 1], points[i])) {\n                upper.pop();\n            }\n            upper.push(points[i]);\n        }\n        upper.pop();\n        lower.pop();\n        return lower.concat(upper);\n    }\n\n    /**\n     * Finds the angle to rotate Point A and B to lie on a line parallel to the x-axis.\n     * @private\n     * @param {Array} PointA\n     * @param {Array} PointB\n     * @return {Object} Object containing the sinus- and cosinus-values for a rotation.\n     */\n    __findAngle([p1x, p1y], [p2x, p2y]) {\n        const n = euclidean([p1x, p1y], [p2x, p2y]);\n        if (n === 0)\n            return {\n                sin: 0,\n                cos: 1,\n            };\n        const vec = [(p2x - p1x) / n, (p2y - p1y) / n];\n        const cos = vec[0];\n        let sin = Math.sqrt(1 - cos * cos);\n        sin = vec[1] >= 0 ? -sin : sin;\n        return {\n            sin: sin,\n            cos: cos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Array} hull\n     * @param {Array} p\n     * @param {Bool} topEdge\n     */\n    __align_hull(hull, p, topEdge) {\n        let v = -1;\n        let d2;\n        for (let i = 0; i < hull.length; ++i) {\n            const d = euclidean(hull[i], p);\n            if (v === -1) {\n                d2 = d;\n                v = i;\n            } else {\n                if (d2 > d) {\n                    d2 = d;\n                    v = i;\n                }\n            }\n        }\n\n        let v1;\n        let v2;\n        if (topEdge) {\n            v1 = hull[v];\n            v2 = hull[(v + 1) % hull.length];\n        } else {\n            if (v == 0) v = hull.length - 1;\n            v1 = hull[v];\n            v2 = hull[(v - 1) % hull.length];\n        }\n\n        const transformation = {\n            tx: -hull[v][0],\n            ty: -hull[v][1],\n        };\n\n        if (hull.length >= 2) {\n            const { sin, cos } = this.__findAngle(v1, v2);\n            transformation.sin = sin;\n            transformation.cos = cos;\n        } else {\n            transformation.sin = 0;\n            transformation.cos = 1;\n        }\n\n        return transformation;\n    }\n\n    /**\n     * @private\n     * @param {Array} Point - The point which should get transformed.\n     * @param {Object} Transformation - contains the values for translation and rotation.\n     */\n    __transform([px, py], { tx, ty, sin, cos }) {\n        let x = px + tx;\n        let y = py + ty;\n        let xx = x * cos - y * sin;\n        let yy = x * sin + y * cos;\n        return [xx, yy];\n    }\n\n    /**\n     * Calls {@link __transform} for each point in Set C\n     * @private\n     * @param {Array} C - Set of points.\n     * @param {Object} t - Transform object.\n     * @param {Number} yOffset - value to offset set C.\n     */\n    __transform_component(C, t, yOffset) {\n        const N = C.length;\n        for (let i = 0; i < N; ++i) {\n            const c = C[i];\n            const [cx, cy] = this.__transform(c, t);\n            c[0] = cx;\n            c[1] = cy + yOffset;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Array} u - point u\n     * @param {Array} v - point v\n     * @param {Number} w - edge weight w\n     */\n    __align_components(u, v, w) {\n        const points_u = [...u.__disjoint_set.children];\n        const points_v = [...v.__disjoint_set.children];\n\n        const hull_u = this.__hull(points_u);\n        const hull_v = this.__hull(points_v);\n\n        const t_u = this.__align_hull(hull_u, u, false);\n        const t_v = this.__align_hull(hull_v, v, true);\n\n        this.__transform_component(points_u, t_u, 0);\n        this.__transform_component(points_v, t_v, w);\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality 2.\n     */\n    transform() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n        }\n        return this.projection;\n    }\n\n    *generator() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA, MDS } from \"./index.js\";\nimport { distance_matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias SAMMON\n * @extends DR\n */\nexport class SAMMON extends DR {\n    /**\n     * SAMMON's Mapping\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias SAMMON\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {\"PCA\"|\"MDS\"|\"random\"} [parameters.init = \"random\"] - Either \"PCA\" or \"MDS\", with which SAMMON initialiates the projection. With \"random\" a random matrix gets used as starting point.\n     * @param {Object} [parameters.init_parameters] - Parameters for the {@link init}-DR method.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {SAMMON}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { magic: 0.1, d: 2, metric: euclidean, seed: 1212, init_DR: \"random\", init_parameters: {} }, parameters);\n        return this;\n    }\n\n    /**\n     * initializes the projection.\n     * @private\n     */\n    init() {\n        const N = this.X.shape[0];\n        const { d, metric, init_DR: init_DR, init_parameters: DR_parameters } = this._parameters;\n        if (init_DR === \"random\") {\n            const randomizer = this._randomizer;\n            this.Y = new Matrix(N, d, () => randomizer.random);\n        } else if ([\"PCA\", \"MDS\"].includes(init_DR)) {\n            this.Y = Matrix.from(init_DR == \"PCA\" ? PCA.transform(this.X, DR_parameters) : MDS.transform(this.X, DR_parameters));\n        } else {\n            throw new Error('init_DR needs to be either \"random\" or a DR method!')\n        }\n        this.distance_matrix = metric == \"precomputed\" ? Matrix.from(this.X) : distance_matrix(this.X, metric);\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Matrix|Array} - The projection of {@link X}.\n     */\n    transform(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n        }\n        return this.projection;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Generator} - A generator yielding the intermediate steps of the projection of {@link X}.\n     */\n    *generator(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n            yield this.projection;\n        }\n\n        return this.projection;\n    }\n\n    _step() {\n        const MAGIC = this.parameter(\"magic\");\n        const D = this.distance_matrix;\n        const N = this.X.shape[0];\n        const { d, metric } = this._parameters;\n        let Y = this.Y;\n\n        let G = new Matrix(N, d, 0);\n\n        let sum = new Float64Array(d);\n        for (let i = 0; i < N; ++i) {\n            let e1 = new Float64Array(d);\n            let e2 = new Float64Array(d);\n            const Yi = Y.row(i);\n            for (let j = 0; j < N; ++j) {\n                if (i === j) continue;\n                const Yj = Y.row(j);\n                const delta = new Float64Array(d);\n                for (let k = 0; k < d; ++k) {\n                    delta[k] = Yi[k] - Yj[k];\n                }\n                const dY = metric(Yi, Yj);\n                const dX = D.entry(i, j);\n                const dq = dX - dY;\n                const dr = Math.max(dX * dY, 1e-2);\n                for (let k = 0; k < d; ++k) {\n                    e1[k] += (delta[k] * dq) / dr;\n                    e2[k] += (dq - (Math.pow(delta[k], 2) * (1 + dq / dY)) / dY) / dr;\n                }\n            }\n            for (let k = 0; k < d; ++k) {\n                const val = Y.entry(i, k) + ((MAGIC * e1[k]) / Math.abs(e2[k]) || 0);\n                G.set_entry(i, k, val);\n                sum[k] += val;\n            }\n        }\n        for (let k = 0; k < d; ++k) {\n            sum[k] /= N;\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let k = 0; k < d; ++k) {\n                Y.set_entry(i, k, G.entry(i, k) - sum[k]);\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix, linspace, norm } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA } from \"./index.js\";\n\nexport class SQDMDS extends DR {\n    /**\n     * SQuadMDS: a lean Stochastic Quartet MDS improving global structure preservation in neighbor embedding like t-SNE and UMAP.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @param {Matrix|Number[][]} X\n     * @param {Object} [parameters]\n     * @param {Number} [parameters.d=2]\n     * @param {Function} [parameters.metric = euclidean]\n     * @param {Number} [parameters.decay_start = 0.1] - Percentage of iterations using exaggeration phase. If random init: it is recommended to start the decay later to give the time for the global config to adjust with big steps.\n     * @param {Number} [parameters.decay_cte = 0.34] - Controls the decay of the learning parameter.\n     * @param {Object} [parameters.init_DR]\n     * @returns {SQDMDS}\n     * @see {@link https://arxiv.org/pdf/2202.12087.pdf}\n     */\n    constructor(X, parameters) {\n        super(\n            X,\n            {\n                d: 2,\n                metric: euclidean,\n                seed: 1212,\n                decay_start: 0.1,\n                decay_cte: 0.34, // 0.34\n                init_DR: {type: \"random\"}\n            },\n            parameters\n        );\n\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    init() {\n        const N = this._N;\n        const d = this.parameter(\"d\");\n\n        // initialize helpers.\n        this._add = this.__add(d);\n        this._sub_div = this.__sub_div(d);\n        this._minus = this.__minus(d);\n        this._mult = this.__mult(d);\n        this._LR_init = Math.max(2, 0.005 * N);\n        this._LR = this._LR_init;\n        this._offset = -Math.exp(-1 / this.parameter(\"decay_cte\"));\n        this._momentums = new Matrix(N, d, 0);\n        this._grads = new Matrix(N, d, 0);\n        this._indices = linspace(0, N - 1);\n        // initialize projection.\n        const R = this._randomizer;\n        this.Y = new Matrix(N, d, () => R.random - 0.5);\n\n        // preparing metric for optimization.\n        const this_metric = this.parameter(\"metric\");\n        if (this_metric === \"precomputed\") {\n            this._HD_metric = function (i, j, X) {\n                return X.entry(i, j);\n            };\n            this._HD_metric_exaggeration = function (i, j, X) {\n                return Math.pow(X.entry(i, j), 2);\n            };\n        } else {\n            this._HD_metric = function (i, j, X) {\n                return this_metric(X.row(i), X.row(j));\n            };\n            if (this_metric == euclidean) {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return euclidean_squared(X.row(i), X.row(j));\n                };\n            } else {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return Math.pow(this_metric(X.row(i), X.row(j)), 2);\n                };\n            }\n        }\n        return;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {Number} [iterations=500] - Number of iterations.\n     * @returns {Matrix|Number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n        }\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Number[][]} the intermediate steps of the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Performs an optimization step.\n     * @private\n     * @param {Number} i - Acutal iteration.\n     * @param {Number} iterations - Number of iterations.\n     */\n    _step(i, iterations) {\n        const decay_start = this._decay_start;\n        if (i > decay_start) {\n            const decay_cte = this.parameter(\"decay_cte\");\n            const offset = this._offset;\n            const ratio = (i - decay_start) / (iterations - decay_start);\n            this._LR = this._LR_init * (Math.exp(-(ratio * ratio) / decay_cte) + offset);\n            this._distance_exaggeration = false;\n        } else {\n            this._distance_exaggeration = true;\n        }\n        this._nestrov_iteration(this._distance_exaggeration);\n    }\n\n    /**\n     * Creates quartets of non overlapping indices.\n     * @private\n     * @returns {Number[][]}\n     */\n    __quartets() {\n        const N = this._N;\n        const max_N = N - (N % 4);\n        const R = this._randomizer;\n        const shuffled_indices = R.choice(this._indices, max_N);\n        const result = [];\n        for (let i = 0; i < max_N; i += 4) {\n            result.push(Uint32Array.of(shuffled_indices[i], shuffled_indices[i + 1], shuffled_indices[i + 2], shuffled_indices[i + 3]));\n        }\n        return result;\n    }\n\n    /**\n     * Computes and applies gradients, and updates momentum.\n     * @private\n     * @param {Boolean} distance_exaggeration\n     */\n    _nestrov_iteration(distance_exaggeration) {\n        const momentums = this._momentums.mult(0.99, { inline: true });\n        const LR = this._LR;\n        const grads = this._fill_MDS_grads(this.Y.add(momentums), this._grads, distance_exaggeration);\n        const [n, d] = momentums.shape;\n        for (let i = 0; i < n; ++i) {\n            const g_i = grads.row(i);\n            const g_i_norm = norm(g_i);\n            if (g_i_norm == 0) continue;\n            const mul = LR / g_i_norm;\n            const m_i = momentums.row(i);\n            for (let j = 0; j < d; ++j) {\n                m_i[j] -= mul * g_i[j];\n            }\n        } // momentums -= (LR / norm) * grads\n        this.Y.add(momentums, { inline: true });\n    }\n\n    /**\n     * Computes the gradients.\n     * @param {Matrix} Y - The Projection.\n     * @param {Matrix} grads - The gradients.\n     * @param {Boolean} [exaggeration = false] - Whether or not to use early exaggeration.\n     * @param {Boolean} [zero_grad = true] - Whether or not to reset the gradient in the beginning.\n     * @returns {Matrix} the gradients.\n     */\n    _fill_MDS_grads(Y, grads, exaggeration = false, zero_grad = true) {\n        if (zero_grad) {\n            // compute new gradients\n            grads.values.fill(0);\n        }\n        const add = this._add;\n        const X = this.X;\n        let HD_metric;\n        if (exaggeration == true) {\n            HD_metric = this._HD_metric_exaggeration;\n        } else {\n            HD_metric = this._HD_metric;\n        }\n\n        const D_quartet = new Float64Array(6);\n        const quartets = this.__quartets();\n        for (const [i, j, k, l] of quartets) {\n            // compute quartet's HD distances.\n            D_quartet[0] = HD_metric(i, j, X);\n            D_quartet[1] = HD_metric(i, k, X);\n            D_quartet[2] = HD_metric(i, l, X);\n            D_quartet[3] = HD_metric(j, k, X);\n            D_quartet[4] = HD_metric(j, l, X);\n            D_quartet[5] = HD_metric(k, l, X);\n\n            const D_quartet_sum = neumair_sum(D_quartet);\n\n            if (D_quartet_sum > 0) {\n                for (let i = 0; i < 6; ++i) {\n                    D_quartet[i] /= D_quartet_sum;\n                    D_quartet[i] += 1e-11;\n                }\n            }\n            const [gi, gj, gk, gl] = this._compute_quartet_grads(Y, [i, j, k, l], D_quartet);\n\n            // add is inline, row acces the matrix\n            add(grads.row(i), gi);\n            add(grads.row(j), gj);\n            add(grads.row(k), gk);\n            add(grads.row(l), gl);\n        }\n        return grads;\n    }\n\n    /**\n     * Quartet gradients for a projection.\n     * @private\n     * @param {Matrix} Y - The acutal projection.\n     * @param {Number[]} quartet - The indices of the quartet.\n     * @param {Number[]} D_hd - The high-dimensional distances of the quartet.\n     * @returns {Number[][]} the gradients for the quartet.\n     */\n    _compute_quartet_grads(Y, quartet, [p_ab, p_ac, p_ad, p_bc, p_bd, p_cd]) {\n        const [a, b, c, d] = quartet.map((index) => Y.row(index));\n        // LD distances, add a small number just in case\n        const d_ab = euclidean(a, b) + 1e-12;\n        const d_ac = euclidean(a, c) + 1e-12;\n        const d_ad = euclidean(a, d) + 1e-12;\n        const d_bc = euclidean(b, c) + 1e-12;\n        const d_bd = euclidean(b, d) + 1e-12;\n        const d_cd = euclidean(c, d) + 1e-12;\n        const sum_LD_dist = neumair_sum([d_ab, d_ac, d_ad, d_bc, d_bd, d_cd]);\n\n        // for each element of the sum: use the same gradient function and just permute the points given in input.\n        const [gA1, gB1, gC1, gD1] = this._ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist);\n        const [gA2, gC2, gB2, gD2] = this._ABCD_grads(a, c, b, d, d_ac, d_ab, d_ad, d_bc, d_cd, d_bd, p_ac, sum_LD_dist);\n        const [gA3, gD3, gC3, gB3] = this._ABCD_grads(a, d, c, b, d_ad, d_ac, d_ab, d_cd, d_bd, d_bc, p_ad, sum_LD_dist);\n        const [gB4, gC4, gA4, gD4] = this._ABCD_grads(b, c, a, d, d_bc, d_ab, d_bd, d_ac, d_cd, d_ad, p_bc, sum_LD_dist);\n        const [gB5, gD5, gA5, gC5] = this._ABCD_grads(b, d, a, c, d_bd, d_ab, d_bc, d_ad, d_cd, d_ac, p_bd, sum_LD_dist);\n        const [gC6, gD6, gA6, gB6] = this._ABCD_grads(c, d, a, b, d_cd, d_ac, d_bc, d_ad, d_bd, d_ab, p_cd, sum_LD_dist);\n\n        const add = this._add;\n        const gA = add(gA1, gA2, gA3, gA4, gA5, gA6);\n        const gB = add(gB1, gB2, gB3, gB4, gB5, gB6);\n        const gC = add(gC1, gC2, gC3, gC4, gC5, gC6);\n        const gD = add(gD1, gD2, gD3, gD4, gD5, gD6);\n\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Gradients for one element of the loss function's sum.\n     * @private\n     */\n    _ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist) {\n        const ratio = d_ab / sum_LD_dist;\n        const twice_ratio = 2 * ((p_ab - ratio) / sum_LD_dist);\n        const minus = this._minus;\n        const add = this._add;\n        const mult = this._mult;\n        const sub_div = this._sub_div;\n        // no side effects because sub_div creates new arrays, and the inline functions work on this new created arrays.\n        const gA = mult(minus(mult(add(sub_div(a, b, d_ab), sub_div(a, c, d_ac), sub_div(a, d, d_ad)), ratio), sub_div(a, b, d_ab)), twice_ratio);\n        const gB = mult(minus(mult(add(sub_div(b, a, d_ab), sub_div(b, c, d_bc), sub_div(b, d, d_bd)), ratio), sub_div(b, a, d_ab)), twice_ratio);\n        const gC = mult(add(sub_div(c, a, d_ac), sub_div(c, b, d_bc), sub_div(c, d, d_cd)), ratio * twice_ratio);\n        const gD = mult(add(sub_div(d, a, d_ad), sub_div(d, b, d_bd), sub_div(d, c, d_cd)), ratio * twice_ratio);\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Inline!\n     */\n    __minus(d) {\n        return (a, b) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] -= b[i];\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __add(d) {\n        return (...summands) => {\n            const n = summands.length;\n            const s1 = summands[0];\n            for (let j = 1; j < n; ++j) {\n                const summand = summands[j];\n                for (let i = 0; i < d; ++i) {\n                    s1[i] += summand[i];\n                }\n            }\n            return s1;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __mult(d) {\n        return (a, v) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] *= v;\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Creates a new array <code>(x - y) / div</code>\n     */\n    __sub_div(d) {\n        return (x, y, div) => {\n            return Float64Array.from({ length: d }, (_, i) => (x[i] - y[i]) / div);\n        };\n    }\n}\n"],"names":["a","b","Math","sqrt","euclidean_squared","summands","y","t","n","length","sum","compensation","i","summand","abs","s","Float64Array","x_y","neumair_sum","sum_a","sum_b","acos","res","push","max","num_non_zero","num_equal","x","disagree","num_not_equal","num_true_true","num_true_false","num_false_true","A","k","metric","euclidean","rows","shape","D","distance_matrix","nN","Array","row","from","map","distance","col","j","sort","slice","Matrix","A_i","dist","set_entry","start","end","number","round","result","v","vector","cols","Error","v_norm","norm","value","Q","R","q","q_dot_v","q_","v_","clone","x_norm","x0","entry","rho","sign","u1","u","divide","beta","u_outer_u","outer","R_block","get_block","new_R","sub","dot","mult","Q_block","new_Q","set_block","seed","max_iterations","qr","qr_gramschmidt","tol","randomizer","Randomizer","random","oldQ","QR","values","eigenvalues","diag","eigenvectors","to2dArray","N","constructor","this","_rows","_cols","_data","static","type","isArray","m","_","data","subarray","iterate_rows","Symbol","iterator","set_row","offset","result_col","transpose","T","inverse","B","h","i_max","max_val","Infinity","val","h_val","i_val","f","B_row_row","B_i_j","join","I","B_i","C","e","l","concat","rows_A","cols_A","rows_B","cols_B","X","offset_row","offset_col","start_row","start_col","end_row","end_col","new_row","new_col","gather","row_indices","col_indices","row_index","col_index","_apply_array","_apply_rowwise_array","_apply_colwise_array","_apply","value_rows","value_cols","inline","add","asArray","min_row_col","min","mean","meanRows","meanCols","b_i","r","d","z","alpha","r_next","L","U","LU","L_diag","U_diag","det","M","MT","MtM","MMt","V","Sigma","simultaneous_poweriteration","sigma","_seed","_N","_M","_MATRIX_A","_UPPER_MASK","_LOWER_MASK","_mt","_mti","Date","getTime","mt","mti","random_int","mag01","kk","N_M","M_N","choice","sample","index_list","linspace","random_index","splice","undefined","Heap","elements","accessor","comparator","heapify","_accessor","_container","_comparator","heap","container","element","floor","_heapify_down","_swap","index_a","index_b","_heapify_up","index","parentIndex","node","start_index","left","right","pop","item","first","iterate","toArray","raw_data","empty","DisjointSet","_list","Set","make_set","list","has","__disjoint_set","parent","children","size","find","union","node_x","node_y","forEach","BallTree","_Node","pivot","child1","child2","radius","_Leaf","points","_metric","_root","_construct","c","_greatest_spread","sorted_elements","p_index","p","spread","reduce","acc","current","search","_search","KNN","_elements","_D","distances","H","nearest_element_index","nearest_dist","Number","isInteger","DR","default_parameters","parameters","_parameters","Object","assign","seal","_type","_randomizer","_is_initialized","parameter","name","hasOwnProperty","para","transform","check_init","projection","generator","init","Y","async","args","PCA","super","eig_args","principal_components","means","X_cent","MDS","ai_","a_j","a__","_d_X","stress","d_X","d_Y","top_sum","bottom_sum","pow","ISOMAP","neighbors","kNearestNeighbors","G","other","FASTMAP","_choose_distant_objects","a_index","b_index","max_dist","d_ai","d_bi","_col","old_dist","d_ab","y_i","LDA","labels","unique_labels","label_id","count","id","X_mean","V_mean","label","v_mean","S_b","S_w","row_v","LLE","k_nearest_neighbors","O","W","nN_row","Z","C_trace","w","solve_CG","IW","LTSA","I_i","X_i","g","G_i_t","W_i","TSNE","perplexity","epsilon","_iter","Htarget","log","Delta","druid","P","_ystep","_gains","prow","betamin","betamax","done","num","psum","pj","exp","Hhere","Pout","N2","_P","iterations","next","iter","ystep","gains","dim","pmul","Qu","qsum","dsum","dhere","qu","grad","premult","ymean","gid","sid","gainid","newgain","newsid","max_iter","pfx","fx","convergence","fxi","dx","UMAP","n_neighbors","local_connectivity","min_dist","_spread","_set_op_mix_ratio","_repulsion_strength","_negative_sample_rate","_n_epochs","_initial_alpha","_find_ab_params","xv","yv","xv_i","powell","error","_compute_membership_strengths","sigmas","rhos","_smooth_knn_dist","knn","SMOOTH_K_TOLERANCE","MIN_K_DIST_SCALE","target","log2","reverse","x_i","lo","hi","mid","search_result","non_zero_dist","filter","non_zero_dist_length","interpolation","mean_ithd","mean_d","_fuzzy_simplicial_set","distances_i","transposed_result","prod_matrix","_make_epochs_per_sample","n_epochs","weights","_weights","Float32Array","fill","weights_max","n_samples","_tocoo","graph","rows_n","cols_n","_a","_b","_graph","_head","_tail","_epochs_per_sample","_epochs_per_negative_sample","_epoch_of_next_sample","_epoch_of_next_negative_sample","_clip","_optimize_layout","head_embedding","tail_embedding","head","tail","_alpha","epochs_per_sample","epochs_per_negative_sample","epoch_of_next_negative_sample","epoch_of_next_sample","clip","tail_length","grad_coeff","grad_d","o","n_neg_samples","TriMap","weight_adj","pca","n_inliers","n_outliers","n_random","triplets","_generate_triplets","lr","vel","gain","n_extra","nbrs","knn_distances","sig","_find_p","_sample_knn_triplets","n_triplets","outlier_distances","_find_weights","random_triplets","random_weights","_sample_random_triplets","max_weight","isNaN","max_weight_2","n_i","sort_indices","__argsort","n_j","sim","samples","_rejection_sample","out","max_int","rejects","interval","indexOf","p_sim","p_out","indices","_grad","y_ij","y_ik","d_ij","d_ik","n_viol","loss","n_knn_triplets","Y_id","Y_jd","Y_kd","gs","go","max_iteration","_next","gamma","old_C","_update_embedding","new_gain","Hierarchical_Clustering","matrix","linkage","_id","_matrix","_linkage","root","do","get_clusters","clusters","depth","_traverse","leaves","_n","d_min","_d_min","_distance_matrix","_clusters","c_size","_c_size","Uint16Array","Cluster","p_max","c1","D_i_min","c2","c1_cluster","c2_cluster","c1_cluster_indices","isLeaf","c2_cluster_indices","new_cluster","unshift","D_c1_j","D_c2_j","centroid","_calculate_centroid","l_size","r_size","l_centroid","r_centroid","new_centroid","descendants","left_descendants","right_descendants","KMeans","K","_K","_cluster_centroids","_get_random_centroids","_furthest_point","candidates","Ad","cluster_centroids","random_point","init_points","sample_size","furthest_point","_iteration","clusters_changed","Ai","min_cluster","_compute_centroid","cluster_counter","ci","iteration_result","KMedoids","_A","_max_iter","log10","_cluster_medoids","_get_random_medoids","x_j","_nearest_medoid","index_nearest","medoids","finish","cache","x_o","DeltaTD","xs","findIndex","d_j","distance_nearest","deltaTD","d_oj","_get_distance","d_n","distance_second","d_s","nearest","second","x_m","m1","m2","index_second","cluster_medoids","ceil","TD","TD0","S","S_j","S_o","delta","OPTICS","min_points","_epsilon","_min_points","_ordered_list","_DB","ordered_list","DB","cluster_index","_cluster_index","reachability_distance","processed","_get_neighbors","_core_distance","seeds","_update","_expand_cluster","core_distance","new_reachability_distance","cluster","outliers","get_cluster_affirmation","LSP","control_points","DR_parameters","nc","c_i","Y_C","XA","AT","ATA","ATb","TopoMap","__lazy_distance_matrix","D_ij","_make_minimum_spanning_tree","disjoint_set","F","E","set_u","set_v","_Emst","__hull_cross","ax","ay","bx","by","sx","sy","__hull","x1","y1","x2","y2","lower","upper","__findAngle","p1x","p1y","p2x","p2y","sin","cos","vec","__align_hull","hull","topEdge","d2","v1","v2","transformation","tx","ty","__transform","px","py","__transform_component","yOffset","cx","cy","__align_components","points_u","points_v","hull_u","hull_v","t_u","t_v","Emst","components","component_u","component_v","SAMMON","magic","init_DR","init_parameters","includes","_step","MAGIC","e1","e2","Yi","Yj","dY","dX","dq","dr","SQDMDS","decay_start","decay_cte","_add","__add","_sub_div","__sub_div","_minus","__minus","_mult","__mult","_LR_init","_LR","_offset","_momentums","_grads","_indices","this_metric","_HD_metric","_HD_metric_exaggeration","_decay_start","ratio","_distance_exaggeration","_nestrov_iteration","__quartets","max_N","shuffled_indices","Uint32Array","of","distance_exaggeration","momentums","LR","grads","_fill_MDS_grads","g_i","g_i_norm","mul","m_i","exaggeration","zero_grad","HD_metric","D_quartet","quartets","D_quartet_sum","gi","gj","gk","gl","_compute_quartet_grads","quartet","p_ab","p_ac","p_ad","p_bc","p_bd","p_cd","d_ac","d_ad","d_bc","d_bd","d_cd","sum_LD_dist","gA1","gB1","gC1","gD1","_ABCD_grads","gA2","gC2","gB2","gD2","gA3","gD3","gC3","gB3","gB4","gC4","gA4","gD4","gB5","gD5","gA5","gC5","gC6","gD6","gA6","gB6","twice_ratio","minus","sub_div","s1","div"],"mappings":"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"}