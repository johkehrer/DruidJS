{"version":3,"file":"druid.esm.js","sources":["../metrics/euclidean.js","../numerical/kahan_sum.js","../numerical/neumair_sum.js","../metrics/euclidean_squared.js","../metrics/cosine.js","../metrics/manhattan.js","../metrics/chebyshev.js","../metrics/canberra.js","../metrics/jaccard.js","../metrics/hamming.js","../metrics/sokal_michener.js","../metrics/yule.js","../matrix/k_nearest_neighbors.js","../matrix/distance_matrix.js","../matrix/linspace.js","../matrix/norm.js","../matrix/normalize.js","../linear_algebra/qr.js","../linear_algebra/qr_householder.js","../linear_algebra/simultaneous_poweriteration.js","../linear_algebra/inner_product.js","../matrix/Matrix.js","../util/randomizer.js","../util/max.js","../util/min.js","../datastructure/Heap.js","../datastructure/DisjointSet.js","../knn/BallTree.js","../knn/KNN.js","../dimred/DR.js","../dimred/PCA.js","../dimred/MDS.js","../dimred/ISOMAP.js","../dimred/FASTMAP.js","../dimred/LDA.js","../dimred/LLE.js","../dimred/LTSA.js","../dimred/TSNE.js","../optimization/powell.js","../dimred/UMAP.js","../dimred/TriMap.js","../clustering/Hierarchical_Clustering.js","../clustering/KMeans.js","../clustering/KMedoids.js","../clustering/OPTICS.js","../dimred/LSP.js","../dimred/TopoMap.js","../dimred/SAMMON.js"],"sourcesContent":["import { euclidean_squared } from \"../metrics/index.js\";\n/**\n * Computes the euclidean distance (l<sub>2</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias euclidean\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the euclidean distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    return Math.sqrt(euclidean_squared(a, b));\n}\n","/**\n * Numerical stable summation with the Kahan summation algorithm.\n * @memberof module:numerical\n * @alias kahan_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n    let y, t;\n\n    for (let i = 0; i < n; ++i) {\n        y = summands[i] - compensation;\n        t = sum + y;\n        compensation = t - sum - y;\n        sum = t;\n    }\n    return sum;\n}\n","/**\n * Numerical stable summation with the Neumair summation algorithm.\n * @memberof module:numerical\n * @alias neumair_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n\n    for (let i = 0; i < n; ++i) {\n        let summand = summands[i];\n        let t = sum + summand;\n        if (Math.abs(sum) >= Math.abs(summand)) {\n            compensation += sum - t + summand;\n        } else {\n            compensation += summand - t + sum;\n        }\n        sum = t;\n    }\n    return sum + compensation;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n/**\n * Computes the squared euclidean distance (l<sub>2</sub><sup>2</sup>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias euclidean_squared\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the squared euclidean distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    let n = a.length;\n    let s = new Array(n);\n    for (let i = 0; i < n; ++i) {\n        let x = a[i];\n        let y = b[i];\n        s[i] = (x - y) * (x - y);\n    }\n    return neumair_sum(s);\n}\n","/**\n * Computes the cosine distance (not similarity) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias cosine\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @example\n * druid.cosine([1,0],[1,1]) == 0.7853981633974484 == π/4\n * @returns {Number} The cosine distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    let sum_a = 0;\n    let sum_b = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += a[i] * b[i];\n        sum_a += a[i] * a[i];\n        sum_b += b[i] * b[i];\n    }\n    return Math.acos(sum / (Math.sqrt(sum_a) * Math.sqrt(sum_b)));\n}\n","/**\n * Computes the manhattan distance (l<sub>1</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias manhattan\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the manhattan distance between {@link a} and {@link b}.\n */ \nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += Math.abs(a[i] - b[i]);\n    }\n    return sum;\n}\n","/**\n * Computes the chebyshev distance (L<sub>∞</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias chebyshev\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the chebyshev distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    let n = a.length;\n    let res = [];\n    for (let i = 0; i < n; ++i) {\n        res.push(Math.abs(a[i] - b[i]));\n    }\n    return Math.max(...res);\n}\n","/**\n * Computes the canberra distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias canberra\n * @param {Array<Number>} a \n * @param {Array<Number>} b \n * @returns {Number} The canberra distance between {@link a} and {@link b}.\n * @see {@link https://en.wikipedia.org/wiki/Canberra_distance}\n */\nexport default function(a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += (Math.abs(a[i] - b[i]) / (Math.abs(a[i]) + Math.abs(b[i])))\n    }\n    return sum;\n}","/**\n * Computes the jaccard distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias jaccard\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the jaccard distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_non_zero = 0;\n    let num_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_non_zero += x || y;\n        num_equal += x && y;\n    }\n    return (num_non_zero - num_equal) / num_non_zero;\n}\n","/**\n * Computes the hamming distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias hamming\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the hamming distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let disagree = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        disagree += x != y;\n    }\n    return disagree / n;\n}\n","/**\n * Computes the Sokal-Michener distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias sokal_michener\n * @param {Array<Number>} a \n * @param {Array<Number>} b \n * @returns {Number} the Sokal-Michener distance between {@link a} and {@link b}.  \n */\nexport default function(a, b) {\n    if (a.length != b.length) return undefined\n    const n = a.length;\n    let num_not_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_not_equal += x != y;\n    }\n    return (2 * num_not_equal) / (n + num_not_equal);\n}","/**\n * Computes the yule distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias yule\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the yule distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_true_true = 0;\n    let num_true_false = 0;\n    let num_false_true = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_true_true += x && y;\n        num_true_false += x && !y;\n        num_false_true += !x && x;\n    }\n    const num_false_false = n - num_true_true - num_true_false - num_false_true;\n    return num_true_false == 0 || num_false_true == 0 ? 0 : (2 * num_true_false * num_false_true) / (num_true_true * num_false_false + num_true_false * num_false_true);\n}\n","import { distance_matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Computes the k-nearest neighbors of each row of {@link A}.\n * @memberof module:matrix\n * @alias k_nearest_neigbhors\n * @param {Matrix} A - Either the data matrix, or a distance matrix.\n * @param {Number} k - The number of neighbors to compute.\n * @param {Function|\"precomputed\"} [metric=euclidean]\n * @returns {Array<Object>} -\n */\nexport default function (A, k, metric = euclidean) {\n    const rows = A.shape[0];\n    let D = metric == \"precomputed\" ? A : distance_matrix(A, metric);\n    let nN = new Array(rows);\n    for (let row = 0; row < rows; ++row) {\n        nN[row] = Array.from(D.row(row))\n            .map((distance, col) => {\n                return {\n                    i: row,\n                    j: col,\n                    distance: distance,\n                };\n            })\n            .sort((a, b) => a.distance - b.distance)\n            .slice(1, k + 1);\n    }\n    return nN;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"./index.js\";\n\n/**\n * Computes the distance matrix of datamatrix {@link A}.\n * @memberof module:matrix\n * @alias distance_matrix\n * @param {Matrix} A - Matrix.\n * @param {Function} [metric=euclidean] - The diistance metric.\n * @returns {Matrix} D - The distance matrix of {@link A}.\n */\nexport default function (A, metric = euclidean) {\n    let n = A.shape[0];\n    const D = new Matrix(n, n);\n    for (let i = 0; i < n; ++i) {\n        const A_i = A.row(i);\n        for (let j = i + 1; j < n; ++j) {\n            const dist = metric(A_i, A.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n        }\n    }\n    return D;\n}\n","/**\n * Creates an Array containing {@link number} numbers from {@link start} to {@link end}.\n * If <code>{@link number} = null</null>.\n * @memberof module:matrix\n * @alias linspace\n * @param {Number} start - Start value.\n * @param {Number} end - End value.\n * @param {Number} [number = null] - Number of number between {@link start} and {@link end}.\n * @returns {Array} - An array with {@link number} entries, beginning at {@link start} ending at {@link end}.\n */\nexport default function (start, end, number = null) {\n    if (!number) {\n        number = Math.max(Math.round(end - start) + 1, 1);\n    }\n    if (number < 2) {\n        return number === 1 ? [start] : [];\n    }\n    let result = new Array(number);\n    number -= 1;\n    for (let i = number; i >= 0; --i) {\n        result[i] = (i * end + (number - i) * start) / number;\n    }\n    return result;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n//import { neumair_sum } from \"../numerical/index\";\n\n/**\n * Computes the norm of a vector, by computing its distance to **0**.\n * @memberof module:matrix\n * @alias norm\n * @param {Matrix|Array<Number>|Float64Array} v - Vector. \n * @param {Function} [metric = euclidean] - Which metric should be used to compute the norm.\n * @returns {Number} - The norm of {@link v}.\n */\nexport default function (v, metric = euclidean) {\n    let vector = null;\n    if (v instanceof Matrix) {\n        let [rows, cols] = v.shape;\n        if (rows === 1) vector = v.row(0);\n        else if (cols === 1) vector = v.col(0);\n        else throw new Error(\"Matrix must be 1d!\");\n    } else {\n        vector = v;\n    }\n    const n = vector.length;\n    const zeros = Float64Array.from({ length: n }, () => 0);\n    return metric(vector, zeros);\n}\n","import { norm } from \"./index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Normalizes Vector {@link v}.\n * @memberof module:matrix\n * @alias normalize\n * @param {Array<Number>|Float64Array} v - Vector\n * @param {Function} metric \n * @returns {Array<Number>|Float64Array} - The normalized vector with length 1.\n */\nexport default function(v, metric = euclidean)  {\n    const v_norm = norm(v, metric);\n    return v.map(value => value / v_norm);\n}","import { Matrix, norm } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} using Gram-Schmidt process.\n * @memberof module:linear_algebra\n * @alias qr\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_the_Gram%E2%80%93Schmidt_process}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, cols, \"identity\");\n    const R = new Matrix(cols, cols, 0);\n\n    for (let j = 0; j < cols; ++j) {\n        let v = A.col(j);\n        for (let i = 0; i < j; ++i) {\n            const q = Q.col(i);\n            const q_dot_v = neumair_sum(q.map((q_, k) => q_ * v[k]));\n            R.set_entry(i, j, q_dot_v);\n            v = v.map((v_, k) => v_ - q_dot_v * q[k]);\n        }\n        const v_norm = norm(v, euclidean);\n        for (let k = 0; k < rows; ++k) {\n            Q.set_entry(k, j, v[k] / v_norm);\n        }\n        R.set_entry(j, j, v_norm);\n    }\n    return { R, Q };\n}\n","import { Matrix, norm } from \"../matrix/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} with householder transformations.\n * @memberof module:linear_algebra\n * @alias qr_householder\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_Householder_reflections}\n * @see {@link http://mlwiki.org/index.php/Householder_Transformation}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, rows, \"I\");\n    const R = A.clone();\n\n    for (let j = 0; j < cols; ++j) {\n        const x = Matrix.from(R.col(j).slice(j));\n        const x_norm = norm(x);\n        const x0 = x.entry(0, 0);\n        const rho = -Math.sign(x0);\n        const u1 = x0 - rho * x_norm;\n        const u = x.divide(u1).set_entry(0, 0, 1);\n        const beta = (-rho * u1) / x_norm;\n\n        const u_outer_u = u.outer(u);\n        const R_block = R.get_block(j, 0);\n        const new_R = R_block.sub(u_outer_u.dot(R_block).mult(beta));\n        const Q_block = Q.get_block(0, j);\n        const new_Q = Q_block.sub(Q_block.dot(u_outer_u).mult(beta));\n        R.set_block(j, 0, new_R);\n        Q.set_block(0, j, new_Q);\n    }\n    return { R, Q };\n}\n","import { qr as qr_gramschmidt } from \"./index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\n\n/**\n * Computes the {@link k} biggest Eigenvectors and Eigenvalues from Matrix {@link A} with the QR-Algorithm.\n * @memberof module:linear_algebra\n * @alias simultaneous_poweriteration\n * @param {Matrix} A - The Matrix\n * @param {Number} k - The number of eigenvectors and eigenvalues to compute.\n * @param {Object} parameters - Object containing parameterization of the simultanious poweriteration method.\n * @param {Number} [parameters.max_iterations=100] - The number of maxiumum iterations the algorithm should run.\n * @param {Number|Randomizer} [parameters.seed=1212] - The seed value or a randomizer used in the algorithm.\n * @param {Function} [parameters.qr=qr_gramschmidt] - The QR technique to use.\n * @param {Number} [parameters.tol=1e-8] - Allowed error for stopping criteria\n * @returns {{eigenvalues: Array, eigenvectors: Array}} - The {@link k} biggest eigenvectors and eigenvalues of Matrix {@link A}.\n */\nexport default function (A, k = 2, {seed = 1212, max_iterations = 100, qr = qr_gramschmidt, tol = 1e-8} = {}) {\n    const randomizer = seed instanceof Randomizer ? seed : new Randomizer(seed);\n    if (!(A instanceof Matrix)) A = Matrix.from(A);\n    const n = A.shape[0];\n    let { Q, R } = qr(new Matrix(n, k, () => (randomizer.random - .5) * 2));\n    while (max_iterations--) {\n        const oldQ = Q.clone();\n        const Z = A.dot(Q);\n        const QR = qr(Z);\n        Q = QR.Q;\n        R = QR.R;\n        const error = euclidean_squared(Q.values, oldQ.values);\n        if (error < tol) {\n            break;\n        }\n    }\n\n    const eigenvalues = R.diag;\n    const eigenvectors = Q.transpose().to2dArray;\n    return { eigenvalues, eigenvectors };\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the inner product between two arrays of the same length.\n * @memberof module:linear_algebra\n * @alias inner_product\n * @param {Array|Float64Array} a - Array a\n * @param {Array|Float64Array} b - Array b\n * @returns The inner product between {@link a} and {@link b}\n */\nexport default function (a, b) {\n    const N = a.length;\n    if (N != b.length) {\n        throw new Error(\"Array a and b must have the same length!\")\n    }\n    let sum = 0;\n    for (let i = 0; i < N; ++i) {\n        sum += a * b;\n    }\n    return sum;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n/**\n * @class\n * @alias Matrix\n * @requires module:numerical/neumair_sum\n */\nexport class Matrix {\n    /**\n     * creates a new Matrix. Entries are stored in a Float64Array.\n     * @constructor\n     * @memberof module:matrix\n     * @alias Matrix\n     * @param {number} rows - The amount of rows of the matrix.\n     * @param {number} cols - The amount of columns of the matrix.\n     * @param {(function|string|number)} value=0 - Can be a function with row and col as parameters, a number, or \"zeros\", \"identity\" or \"I\", or \"center\".\n     *  - **function**: for each entry the function gets called with the parameters for the actual row and column.\n     *  - **string**: allowed are\n     *      - \"zero\", creates a zero matrix.\n     *      - \"identity\" or \"I\", creates an identity matrix.\n     *      - \"center\", creates an center matrix.\n     *  - **number**: create a matrix filled with the given value.\n     * @example\n     *\n     * let A = new Matrix(10, 10, () => Math.random()); //creates a 10 times 10 random matrix.\n     * let B = new Matrix(3, 3, \"I\"); // creates a 3 times 3 identity matrix.\n     * @returns {Matrix} returns a {@link rows} times {@link cols} Matrix filled with {@link value}.\n     */\n    constructor(rows = null, cols = null, value = null) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = null;\n        if (rows && cols) {\n            if (!value) {\n                this._data = new Float64Array(rows * cols);\n                return this;\n            }\n            if (typeof value === \"function\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value(row, col);\n                    }\n                }\n                return this;\n            }\n            if (typeof value === \"string\") {\n                if (value === \"zeros\") {\n                    return new Matrix(rows, cols, 0);\n                }\n                if (value === \"identity\" || value === \"I\") {\n                    this._data = new Float64Array(rows * cols);\n                    for (let row = 0; row < rows; ++row) {\n                        this._data[row * cols + row] = 1;\n                    }\n                    return this;\n                }\n                if (value === \"center\" && rows == cols) {\n                    this._data = new Float64Array(rows * cols);\n                    value = (i, j) => (i === j ? 1 : 0) - 1 / rows;\n                    for (let row = 0; row < rows; ++row) {\n                        for (let col = 0; col < cols; ++col) {\n                            this._data[row * cols + col] = value(row, col);\n                        }\n                    }\n                    return this;\n                }\n            }\n            if (typeof value === \"number\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value;\n                    }\n                }\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Creates a Matrix out of {@link A}.\n     * @param {(Matrix|Array|Float64Array|number)} A - The matrix, array, or number, which should converted to a Matrix.\n     * @param {\"row\"|\"col\"|\"diag\"} [type = \"row\"] - If {@link A} is a Array or Float64Array, then type defines if it is a row- or a column vector.\n     * @returns {Matrix}\n     *\n     * @example\n     * let A = Matrix.from([[1, 0], [0, 1]]); //creates a two by two identity matrix.\n     * let S = Matrix.from([1, 2, 3], \"diag\"); // creates a 3 by 3 matrix with 1, 2, 3 on its diagonal. [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n     */\n    static from(A, type = \"row\") {\n        if (A instanceof Matrix) {\n            return A.clone();\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let m = A.length;\n            if (m === 0) throw new Error(\"Array is empty\");\n            // 1d\n            if (!Array.isArray(A[0]) && !(A[0] instanceof Float64Array)) {\n                if (type === \"row\") {\n                    return new Matrix(1, m, (_, j) => A[j]);\n                } else if (type === \"col\") {\n                    return new Matrix(m, 1, (i) => A[i]);\n                } else if (type === \"diag\") {\n                    return new Matrix(m, m, (i, j) => (i == j ? A[i] : 0));\n                } else {\n                    throw new Error(\"1d array has NaN entries\");\n                }\n                // 2d\n            } else if (Array.isArray(A[0]) || A[0] instanceof Float64Array) {\n                let n = A[0].length;\n                for (let row = 0; row < m; ++row) {\n                    if (A[row].length !== n) {\n                        throw new Error(\"various array lengths\");\n                    }\n                }\n                return new Matrix(m, n, (i, j) => A[i][j]);\n            }\n        } else if (typeof A === \"number\") {\n            return new Matrix(1, 1, A);\n        } else {\n            throw new Error(\"error\");\n        }\n    }\n\n    /**\n     * Returns the {@link row}<sup>th</sup> row from the Matrix.\n     * @param {Number} row\n     * @returns {Float64Array}\n     */\n    row(row) {\n        const data = this.values;\n        const cols = this._cols;\n        return data.subarray(row * cols, (row + 1) * cols);\n    }\n\n    /**\n     * Returns an generator yielding each row of the Matrix.\n     * @yields {Float64Array}\n     */\n    *iterate_rows() {\n        const cols = this._cols;\n        const rows = this._rows;\n        const data = this.values;\n        for (let row = 0; row < rows; ++row) {\n            yield data.subarray(row * cols, (row + 1) * cols);\n        }\n    }\n\n    /**\n     * Makes a {@link Matrix} object an iterable object.\n     * @yields {Float64Array}\n     */\n    *[Symbol.iterator]() {\n        for (const row of this.iterate_rows()) {\n            yield row;\n        }\n    }\n\n    /**\n     * Sets the entries of {@link row}<sup>th</sup> row from the Matrix to the entries from {@link values}.\n     * @param {int} row\n     * @param {Array} values\n     * @returns {Matrix}\n     */\n    set_row(row, values) {\n        let cols = this._cols;\n        if (Array.isArray(values) && values.length === cols) {\n            let offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values[col];\n            }\n        } else if (values instanceof Matrix && values.shape[1] === cols && values.shape[0] === 1) {\n            let offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values._data[col];\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> column from the Matrix.\n     * @param {int} col\n     * @returns {Array}\n     */\n    col(col) {\n        let result_col = new Float64Array(this._rows);\n        for (let row = 0; row < this._rows; ++row) {\n            result_col[row] = this.values[row * this._cols + col];\n        }\n        return result_col;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @returns {float64}\n     */\n    entry(row, col) {\n        return this.values[row * this._cols + col];\n    }\n\n    /**\n     * Sets the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix to the given {@link value}.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    set_entry(row, col, value) {\n        this.values[row * this._cols + col] = value;\n        return this;\n    }\n\n    /**\n     * Returns a new transposed Matrix.\n     * @returns {Matrix}\n     */\n    transpose() {\n        let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n        return B;\n    }\n\n    /**\n     * Returns a new transposed Matrix. Short-form of {@function transpose}.\n     * @returns {Matrix}\n     */\n    get T() {\n        return this.transpose();\n    }\n\n    /**\n     * Returns the inverse of the Matrix.\n     * @returns {Matrix}\n     */\n    inverse() {\n        const rows = this._rows;\n        const cols = this._cols;\n        let B = new Matrix(rows, 2 * cols, (i, j) => {\n            if (j >= cols) {\n                return i === j - cols ? 1 : 0;\n            } else {\n                return this.entry(i, j);\n            }\n        });\n        let h = 0;\n        let k = 0;\n        while (h < rows && k < cols) {\n            var i_max = 0;\n            let max_val = -Infinity;\n            for (let i = h; i < rows; ++i) {\n                let val = Math.abs(B.entry(i, k));\n                if (max_val < val) {\n                    i_max = i;\n                    max_val = val;\n                }\n            }\n            if (B.entry(i_max, k) == 0) {\n                k++;\n            } else {\n                // swap rows\n                for (let j = 0; j < 2 * cols; ++j) {\n                    let h_val = B.entry(h, j);\n                    let i_val = B.entry(i_max, j);\n                    B.set_entry(h, j, h_val);\n                    B.set_entry(i_max, j, i_val);\n                }\n                for (let i = h + 1; i < rows; ++i) {\n                    let f = B.entry(i, k) / B.entry(h, k);\n                    B.set_entry(i, k, 0);\n                    for (let j = k + 1; j < 2 * cols; ++j) {\n                        B.set_entry(i, j, B.entry(i, j) - B.entry(h, j) * f);\n                    }\n                }\n                h++;\n                k++;\n            }\n        }\n\n        for (let row = 0; row < rows; ++row) {\n            let f = B.entry(row, row);\n            for (let col = row; col < 2 * cols; ++col) {\n                B.set_entry(row, col, B.entry(row, col) / f);\n            }\n        }\n\n        for (let row = rows - 1; row >= 0; --row) {\n            let B_row_row = B.entry(row, row);\n            for (let i = 0; i < row; i++) {\n                let B_i_row = B.entry(i, row);\n                let f = B_i_row / B_row_row;\n                for (let j = i; j < 2 * cols; ++j) {\n                    let B_i_j = B.entry(i, j);\n                    let B_row_j = B.entry(row, j);\n                    B_i_j = B_i_j - B_row_j * f;\n                    B.set_entry(i, j, B_i_j);\n                }\n            }\n        }\n\n        return new Matrix(rows, cols, (i, j) => B.entry(i, j + cols));\n    }\n\n    /**\n     * Returns the dot product. If {@link B} is an Array or Float64Array then an Array gets returned. If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            if (A.shape[1] !== B.shape[0]) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix: \n                A has ${A.shape[1]} cols and B ${B.shape[0]} rows. \n                Must be equal!`);\n            }\n            let I = A.shape[1];\n            let C = new Matrix(A.shape[0], B.shape[1], (row, col) => {\n                const A_i = A.row(row);\n                const B_i = B.col(col);\n                let sum = 0;\n                for (let i = 0; i < I; ++i) {\n                    sum += A_i[i] * B_i[i];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Array.isArray(B) || B instanceof Float64Array) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Computes the outer product from {@link this} and {@link B}.\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    outer(B) {\n        let A = this;\n        let l = A._data.length;\n        let r = B._data.length;\n        if (l != r) return undefined;\n        let C = new Matrix();\n        C.shape = [\n            l,\n            l,\n            (i, j) => {\n                if (i <= j) {\n                    return A._data[i] * B._data[j];\n                } else {\n                    return C.entry(j, i);\n                }\n            },\n        ];\n        return C;\n    }\n\n    /**\n     * Appends matrix {@link B} to the matrix.\n     * @param {Matrix} B - matrix to append.\n     * @param {\"horizontal\"|\"vertical\"|\"diag\"} [type = \"horizontal\"] - type of concatenation.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 1], [1, 1]]); // 2 by 2 matrix filled with ones.\n     * let B = Matrix.from([[2, 2], [2, 2]]); // 2 by 2 matrix filled with twos.\n     *\n     * A.concat(B, \"horizontal\"); // 2 by 4 matrix. [[1, 1, 2, 2], [1, 1, 2, 2]]\n     * A.concat(B, \"vertical\"); // 4 by 2 matrix. [[1, 1], [1, 1], [2, 2], [2, 2]]\n     * A.concat(B, \"diag\"); // 4 by 4 matrix. [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 2, 2], [0, 0, 2, 2]]\n     */\n    concat(B, type = \"horizontal\") {\n        const A = this;\n        const [rows_A, cols_A] = A.shape;\n        const [rows_B, cols_B] = B.shape;\n        if (type == \"horizontal\") {\n            if (rows_A != rows_B) {\n                throw new Error(`A.concat(B, \"horizontal\"): A and B need same number of rows, A has ${rows_A} rows, B has ${rows_B} rows.`);\n            }\n            const X = new Matrix(rows_A, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(0, cols_A, B);\n            return X;\n        } else if (type == \"vertical\") {\n            if (cols_A != cols_B) {\n                throw new Error(`A.concat(B, \"vertical\"): A and B need same number of columns, A has ${cols_A} columns, B has ${cols_B} columns.`);\n            }\n            const X = new Matrix(rows_A + rows_B, cols_A, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, 0, B);\n            return X;\n        } else if (type == \"diag\") {\n            const X = new Matrix(rows_A + rows_B, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, cols_A, B);\n            return X;\n        } else {\n            throw new Error(`type must be \"horizontal\" or \"vertical\", but type is ${type}!`);\n        }\n    }\n\n    /**\n     * Writes the entries of B in A at an offset position given by {@link offset_row} and {@link offset_col}.\n     * @param {int} offset_row\n     * @param {int} offset_col\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    set_block(offset_row, offset_col, B) {\n        let [rows, cols] = B.shape;\n        for (let row = 0; row < rows; ++row) {\n            if (row > this._rows) {\n                continue;\n            }\n            for (let col = 0; col < cols; ++col) {\n                if (col > this._cols) {\n                    continue;\n                }\n                this.set_entry(row + offset_row, col + offset_col, B.entry(row, col));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Extracts the entries from the {@link start_row}<sup>th</sup> row to the {@link end_row}<sup>th</sup> row, the {@link start_col}<sup>th</sup> column to the {@link end_col}<sup>th</sup> column of the matrix.\n     * If {@link end_row} or {@link end_col} is empty, the respective value is set to {@link this.rows} or {@link this.cols}.\n     * @param {Number} start_row\n     * @param {Number} start_col\n     * @param {Number} [end_row = null]\n     * @param {Number} [end_col = null]\n     * @returns {Matrix} Returns a end_row - start_row times end_col - start_col matrix, with respective entries from the matrix.\n     * @example\n     *\n     * let A = Matrix.from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // a 3 by 3 matrix.\n     *\n     * A.get_block(1, 1); // [[5, 6], [8, 9]]\n     * A.get_block(0, 0, 1, 1); // [[1]]\n     * A.get_block(1, 1, 2, 2); // [[5]]\n     * A.get_block(0, 0, 2, 2); // [[1, 2], [4, 5]]\n     */\n    get_block(start_row, start_col, end_row = null, end_col = null) {\n        const [rows, cols] = this.shape;\n        end_row = end_row ?? rows;\n        end_col = end_col ?? cols;\n        if (end_row <= start_row || end_col <= start_col) {\n            throw new Error(`\n                end_row must be greater than start_row, and \n                end_col must be greater than start_col, but\n                end_row = ${end_row}, start_row = ${start_row}, end_col = ${end_col}, and start_col = ${start_col}!`);\n        }\n        const X = new Matrix(end_row - start_row, end_col - start_col, \"zeros\");\n        for (let row = start_row, new_row = 0; row < end_row; ++row, ++new_row) {\n            for (let col = start_col, new_col = 0; col < end_col; ++col, ++new_col) {\n                X.set_entry(new_row, new_col, this.entry(row, col));\n            }\n        }\n        return X;\n        //return new Matrix(end_row - start_row, end_col - start_col, (i, j) => this.entry(i + start_row, j + start_col));\n    }\n\n    /**\n     * Returns a new array gathering entries defined by the indices given by argument.\n     * @param {Array<Number>} row_indices - Array consists of indices of rows for gathering entries of this matrix\n     * @param {Array<Number>} col_indices  - Array consists of indices of cols for gathering entries of this matrix\n     * @returns {Matrix}\n     */\n    gather(row_indices, col_indices) {\n        const N = row_indices.length;\n        const D = col_indices.length;\n\n        const R = new Matrix(N, D);\n        for (let i = 0; i < N; ++i) {\n            const row_index = row_indices[i];\n            for (let j = 0; j < N; ++j) {\n                const col_index = col_indices[j];\n                R.set_entry(i, j, this.entry(row_index, col_index));\n            }\n        }\n\n        return R;\n    }\n\n    /**\n     * Applies a function to each entry of the matrix.\n     * @private\n     * @param {function} f function takes 2 parameters, the value of the actual entry and a value given by the function {@link v}. The result of {@link f} gets writen to the Matrix.\n     * @param {function} v function takes 2 parameters for row and col, and returns a value witch should be applied to the colth entry of the rowth row of the matrix.\n     */\n    _apply_array(f, v) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let row = 0; row < rows; ++row) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                const i = offset + col;\n                data[i] = f(data[i], v(row, col));\n            }\n        }\n        return this;\n    }\n\n    _apply_rowwise_array(values, f) {\n        return this._apply_array(f, (_, j) => values[j]);\n    }\n\n    _apply_colwise_array(values, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let row = 0; row < rows; ++row) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                const i = offset + col;\n                data[i] = f(data[i], values[row]);\n            }\n        }\n        return this;\n    }\n\n    _apply(value, f) {\n        let data = this.values;\n        if (value instanceof Matrix) {\n            let [value_rows, value_cols] = value.shape;\n            let [rows, cols] = this.shape;\n            if (value_rows === 1) {\n                if (cols !== value_cols) {\n                    throw new Error(`cols !== value_cols`);\n                }\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(0, col));\n                    }\n                }\n            } else if (value_cols === 1) {\n                if (rows !== value_rows) {\n                    throw new Error(`rows !== value_rows`);\n                }\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(row, 0));\n                    }\n                }\n            } else if (rows == value_rows && cols == value_cols) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(row, col));\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else if (Array.isArray(value)) {\n            let rows = this._rows;\n            let cols = this._cols;\n            if (value.length === rows) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value[row]);\n                    }\n                }\n            } else if (value.length === cols) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value[col]);\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else {\n            for (let i = 0, n = this._rows * this._cols; i < n; ++i) {\n                data[i] = f(data[i], value);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Clones the Matrix.\n     * @returns {Matrix}\n     */\n    clone() {\n        let B = new Matrix();\n        B._rows = this._rows;\n        B._cols = this._cols;\n        B._data = this.values.slice(0);\n        return B;\n    }\n\n    /**\n     * Entrywise multiplication with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.mult(2); // [[2, 4], [6, 8]];\n     * A.mult(B); // [[1, 4], [9, 16]];\n     */\n    mult(value) {\n        return this.clone()._apply(value, (a, b) => a * b);\n    }\n\n    /**\n     * Entrywise division with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.divide(2); // [[0.5, 1], [1.5, 2]];\n     * A.divide(B); // [[1, 1], [1, 1]];\n     */\n    divide(value) {\n        return this.clone()._apply(value, (a, b) => a / b);\n    }\n\n    /**\n     * Entrywise addition with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.add(2); // [[3, 4], [5, 6]];\n     * A.add(B); // [[2, 4], [6, 8]];\n     */\n    add(value) {\n        return this.clone()._apply(value, (a, b) => a + b);\n    }\n\n    /**\n     * Entrywise subtraction with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.sub(2); // [[-1, 0], [1, 2]];\n     * A.sub(B); // [[0, 0], [0, 0]];\n     */\n    sub(value) {\n        return this.clone()._apply(value, (a, b) => a - b);\n    }\n\n    /**\n     * Returns the number of rows and columns of the Matrix.\n     * @returns {Array} An Array in the form [rows, columns].\n     */\n    get shape() {\n        return [this._rows, this._cols];\n    }\n\n    /**\n     * Returns the matrix in the given shape with the given function which returns values for the entries of the matrix.\n     * @param {Array} parameter - takes an Array in the form [rows, cols, value], where rows and cols are the number of rows and columns of the matrix, and value is a function which takes two parameters (row and col) which has to return a value for the colth entry of the rowth row.\n     * @returns {Matrix}\n     */\n    set shape([rows, cols, value = () => 0]) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = new Float64Array(rows * cols);\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n                this._data[row * cols + col] = value(row, col);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Float64Arrays.\n     * @returns {Array<Float64Array>}\n     */\n    get to2dArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(row);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Arrays.\n     * @returns {Array<Array>}\n     */\n    get asArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(Array.from(row));\n        }\n        return result;\n    }\n\n    /**\n     * Returns the diagonal of the Matrix.\n     * @returns {Float64Array}\n     */\n    get diag() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const min_row_col = Math.min(rows, cols);\n        let result = new Float64Array(min_row_col);\n        for (let i = 0; i < min_row_col; ++i) {\n            result[i] = this.entry(i, i);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the mean of all entries of the Matrix.\n     * @returns {Number}\n     */\n    get mean() {\n        const sum = this.sum;\n        const n = this._rows * this._cols;\n        return sum / n;\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Number}\n     */\n    get sum() {\n        const data = this.values;\n        return neumair_sum(data);\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Float64Array}\n     */\n    get values() {\n        const data = this._data;\n        return data;\n    }\n\n    /**\n     * Returns the mean of each row of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanRows() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: rows });\n        for (let row = 0; row < rows; ++row) {\n            result[row] = 0;\n            for (let col = 0; col < cols; ++col) {\n                result[row] += data[row * cols + col];\n            }\n            result[row] /= cols;\n        }\n        return result;\n    }\n\n    /** Returns the mean of each column of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanCols() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: cols });\n        for (let col = 0; col < cols; ++col) {\n            result[col] = 0;\n            for (let row = 0; row < rows; ++row) {\n                result[col] += data[row * cols + col];\n            }\n            result[col] /= rows;\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b} using the conjugate gradient method. Returns the result x.\n     * @param {Matrix} A - Matrix\n     * @param {Matrix} b - Matrix\n     * @param {Randomizer} [randomizer=null]\n     * @param {Number} [tol=1e-3]\n     * @returns {Matrix}\n     */\n    static solve_CG(A, b, randomizer, tol = 1e-3) {\n        if (randomizer === null) {\n            randomizer = new Randomizer();\n        }\n        const rows = A.shape[0];\n        const cols = b.shape[1];\n        let result = new Matrix(rows, 0);\n        for (let i = 0; i < cols; ++i) {\n            const b_i = Matrix.from(b.col(i)).T;\n            let x = new Matrix(rows, 1, () => randomizer.random);\n            let r = b_i.sub(A.dot(x));\n            let d = r.clone();\n            do {\n                const z = A.dot(d);\n                const alpha = r.T.dot(r).entry(0, 0) / d.T.dot(z).entry(0, 0);\n                x = x.add(d.mult(alpha));\n                const r_next = r.sub(z.mult(alpha));\n                const beta = r_next.T.dot(r_next).entry(0, 0) / r.T.dot(r).entry(0, 0);\n                d = r_next.add(d.mult(beta));\n                r = r_next;\n            } while (Math.abs(r.mean) > tol);\n            result = result.concat(x, \"horizontal\");\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b}. Returns the result x.\n     * @param {Matrix} A - Matrix or LU Decomposition\n     * @param {Matrix} b - Matrix\n     * @returns {Matrix}\n     */\n    static solve(A, b) {\n        let { L: L, U: U } = \"L\" in A && \"U\" in A ? A : Matrix.LU(A);\n        let rows = L.shape[0];\n        let x = b.clone();\n\n        // forward\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < row - 1; ++col) {\n                x.set_entry(0, row, x.entry(0, row) - L.entry(row, col) * x.entry(1, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / L.entry(row, row));\n        }\n\n        // backward\n        for (let row = rows - 1; row >= 0; --row) {\n            for (let col = rows - 1; col > row; --col) {\n                x.set_entry(0, row, x.entry(0, row) - U.entry(row, col) * x.entry(0, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / U.entry(row, row));\n        }\n\n        return x;\n    }\n\n    /**\n     * {@link L}{@link U} decomposition of the Matrix {@link A}. Creates two matrices, so that the dot product LU equals A.\n     * @param {Matrix} A\n     * @returns {{L: Matrix, U: Matrix}} result - Returns the left triangle matrix {@link L} and the upper triangle matrix {@link U}.\n     */\n    static LU(A) {\n        const rows = A.shape[0];\n        const L = new Matrix(rows, rows, \"zeros\");\n        const U = new Matrix(rows, rows, \"identity\");\n\n        for (let j = 0; j < rows; ++j) {\n            for (let i = j; i < rows; ++i) {\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(i, k) * U.entry(k, j);\n                }\n                L.set_entry(i, j, A.entry(i, j) - sum);\n            }\n            for (let i = j; i < rows; ++i) {\n                if (L.entry(j, j) === 0) {\n                    return undefined;\n                }\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(j, k) * U.entry(k, i);\n                }\n                U.set_entry(j, i, (A.entry(j, i) - sum) / L.entry(j, j));\n            }\n        }\n\n        return { L: L, U: U };\n    }\n\n    /**\n     * Computes the determinante of {@link A}, by using the LU decomposition of {@link A}.\n     * @param {Matrix} A\n     * @returns {Number} det - Returns the determinate of the Matrix {@link A}.\n     */\n    static det(A) {\n        const rows = A.shape[0];\n        const { L, U } = Matrix.LU(A);\n        const L_diag = L.diag;\n        const U_diag = U.diag;\n        let det = L_diag[0] * U_diag[0];\n        for (let row = 1; row < rows; ++row) {\n            det *= L_diag[row] * U_diag[row];\n        }\n        return det;\n    }\n\n    /**\n     * Computes the {@link k} components of the SVD decomposition of the matrix {@link M}\n     * @param {Matrix} M\n     * @param {int} [k=2]\n     * @returns {{U: Matrix, Sigma: Matrix, V: Matrix}}\n     */\n    static SVD(M, k = 2) {\n        const MT = M.T;\n        let MtM = MT.dot(M);\n        let MMt = M.dot(MT);\n        let { eigenvectors: V, eigenvalues: Sigma } = simultaneous_poweriteration(MtM, k);\n        let { eigenvectors: U } = simultaneous_poweriteration(MMt, k);\n        return { U: U, Sigma: Sigma.map((sigma) => Math.sqrt(sigma)), V: V };\n\n        //Algorithm 1a: Householder reduction to bidiagonal form:\n        /* const [m, n] = A.shape;\n        let U = new Matrix(m, n, (i, j) => i == j ? 1 : 0);\n        console.log(U.to2dArray)\n        let V = new Matrix(n, m, (i, j) => i == j ? 1 : 0);\n        console.log(V.to2dArray)\n        let B = Matrix.bidiagonal(A.clone(), U, V);\n        console.log(U,V,B)\n        return { U: U, \"Sigma\": B, V: V }; */\n    }\n}\n","import { linspace, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @memberof module:utils\n * @alias Randomizer\n */\nexport class Randomizer {\n    /**\n     * Mersenne Twister random number generator.\n     * @constructor\n     * @param {Number} [_seed=new Date().getTime()] - The seed for the random number generator. If <code>_seed == null</code> then the actual time gets used as seed.\n     * @see https://github.com/bmurray7/mersenne-twister-examples/blob/master/javascript-mersenne-twister.js\n     */\n    constructor(_seed) {\n        this._N = 624;\n        this._M = 397;\n        this._MATRIX_A = 0x9908b0df;\n        this._UPPER_MASK = 0x80000000;\n        this._LOWER_MASK = 0x7fffffff;\n        this._mt = new Array(this._N);\n        this._mti = this.N + 1;\n\n        this.seed = _seed || new Date().getTime();\n        return this;\n    }\n\n    set seed(_seed) {\n        this._seed = _seed;\n        let mt = this._mt;\n\n        mt[0] = _seed >>> 0;\n        for (this._mti = 1; this._mti < this._N; this._mti += 1) {\n            let mti = this._mti;\n            let s = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n            mt[mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + mti;\n            mt[mti] >>>= 0;\n        }\n    }\n\n    /**\n     * Returns the seed of the random number generator.\n     * @returns {Number} - The seed.\n     */\n    get seed() {\n        return this._seed;\n    }\n\n    /**\n     * Returns a float between 0 and 1.\n     * @returns {Number} - A random number between [0, 1]\n     */\n    get random() {\n        return this.random_int * (1.0 / 4294967296.0);\n    }\n\n    /**\n     * Returns an integer between 0 and MAX_INTEGER.\n     * @returns {Integer} - A random integer.\n     */\n    get random_int() {\n        let y,\n            mag01 = new Array(0x0, this._MATRIX_A);\n        if (this._mti >= this._N) {\n            let kk;\n\n            /* if (this._mti == this._N + 1) {\n                this.seed = 5489;\n            } */\n\n            let N_M = this._N - this._M;\n            let M_N = this._M - this._N;\n\n            for (kk = 0; kk < N_M; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + this._M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (; kk < this._N - 1; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + M_N] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            y = (this._mt[this._N - 1] & this._UPPER_MASK) | (this._mt[0] & this._LOWER_MASK);\n            this._mt[this._N - 1] = this._mt[this._M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this._mti = 0;\n        }\n\n        y = this._mt[(this._mti += 1)];\n        y ^= y >>> 11;\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= y >>> 18;\n\n        return y >>> 0;\n    }\n\n    /**\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    choice(A, n) {\n        if (A instanceof Matrix) {\n            let rows = A.shape[0];\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A.row(d));\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let rows = A.length;\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A[d]);\n        }\n    }\n\n    /**\n     * @static\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @param {Number} seed - The seed for the random number generator.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    static choice(A, n, seed = 1212) {\n        const R = new Randomizer(seed);\n        return R.choice(A, n);\n        /* let rows = A.shape[0];\n        if (n > rows) {\n            throw new Error(\"n bigger than A!\");\n        }\n        let rand = new Randomizer(seed);\n        let sample = new Array(n);\n        let index_list = linspace(0, rows - 1);\n        for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n            let random_index = rand.random_int % l;\n            sample[i] = index_list.splice(random_index, 1)[0];\n        }\n        //return result;\n        //return new Matrix(n, cols, (row, col) => A.entry(sample[row], col))\n        return sample.map((d) => A.row(d)); */\n    }\n}\n","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias max\n * @param {Array} values \n * @returns {Number}\n */\nexport default function (values) {\n    let max;\n    for (const value of values) {\n        if (value != null && (max < value || (max === undefined && value >= value))) {\n            max = value;\n        }\n    }\n    return max;\n}","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias min\n * @param {Array} values\n * @returns {Number}\n */\nexport default function (values) {\n    let min;\n    for (const value of values) {\n        if (value != null && (min > value || (min === undefined && value <= value))) {\n            min = value;\n        }\n    }\n    return min;\n}","/**\n * @class\n * @alias Heap\n */\nexport class Heap {\n    /**\n     * A heap is a datastructure holding its elements in a specific way, so that the top element would be the first entry of an ordered list.\n     * @constructor\n     * @memberof module:datastructure\n     * @alias Heap\n     * @param {Array=} elements - Contains the elements for the Heap. {@link elements} can be null.\n     * @param {Function} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(\"min\"|\"max\"|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     * @see {@link https://en.wikipedia.org/wiki/Binary_heap}\n     */\n    constructor(elements = null, accessor = d => d, comparator = \"min\") {\n        if (elements) {\n            return Heap.heapify(elements, accessor, comparator);\n        } else {\n            this._accessor = accessor;\n            this._container = [];\n            if (comparator == \"min\") {\n                this._comparator = (a, b) => a < b;\n            } else if (comparator == \"max\") {\n                this._comparator = (a, b) => a > b;\n            } else {\n                this._comparator = comparator;\n            }\n            return this\n        }\n    }\n\n    /**\n     * Creates a Heap from an Array\n     * @param {Array|Set} elements - Contains the elements for the Heap.\n     * @param {Function=} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(String=|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     */\n    static heapify(elements, accessor = d => d, comparator = \"min\") {\n        const heap = new Heap(null, accessor, comparator);\n        const container = heap._container;\n        for (const e of elements) {\n            container.push({\n                \"element\": e,\n                \"value\": accessor(e),\n            });\n        }\n        for (let i = Math.floor((elements.length / 2) - 1); i >= 0; --i) {\n            heap._heapify_down(i);\n        }\n        return heap;\n    }\n\n    /**\n     * Swaps elements of container array.\n     * @private\n     * @param {Number} index_a \n     * @param {Number} index_b \n     */\n    _swap(index_a, index_b) {\n        const container = this._container;\n        [container[index_b], container[index_a]] = [container[index_a], container[index_b]];\n        return;\n    }\n\n    /**\n     * @private\n     */\n    _heapify_up() {\n        const container = this._container;\n        let index = container.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (!this._comparator(container[index].value, container[parentIndex].value)) {\n                break;\n            } else {\n            this._swap(parentIndex, index)\n            index = parentIndex;\n            }\n        }\n    }\n\n    /**\n     * Pushes the element to the heap.\n     * @param {} element\n     * @returns {Heap}\n     */\n    push(element) {\n        const value = this._accessor(element);\n        //const node = new Node(element, value);\n        const node = {\"element\": element, \"value\": value};\n        this._container.push(node);\n        this._heapify_up();\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} [start_index = 0] \n     */\n    _heapify_down(start_index=0) {\n        const container = this._container;\n        const comparator = this._comparator;\n        const length = container.length;\n        let left = 2 * start_index + 1;\n        let right = 2 * start_index + 2;\n        let index = start_index;\n        if (index > length) throw \"index higher than length\"\n        if (left < length && comparator(container[left].value, container[index].value)) {\n            index = left;\n        }\n        if (right < length && comparator(container[right].value, container[index].value)) {\n            index = right;\n        }\n        if (index !== start_index) {\n            this._swap(start_index, index);\n            this._heapify_down(index);\n        }\n    }\n\n    /**\n     * Removes and returns the top entry of the heap.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    pop() {\n        const container = this._container;\n        if (container.length === 0) {\n            return null;\n        } else if (container.length === 1) {\n            return container.pop();\n        }\n        this._swap(0, container.length - 1);\n        const item = container.pop();\n        this._heapify_down();\n        return item;\n    }\n\n    /**\n     * Returns the top entry of the heap without removing it.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    get first() {\n        return this._container.length > 0 ? this._container[0] : null;\n    }\n\n\n    /**\n     * Yields the raw data\n     * @yields {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    * iterate() {\n        for (let i = 0, n = this._container.length; i < n; ++i) {\n            yield this._container[i].element;\n        }\n    }\n\n    /**\n     * Returns the heap as ordered array.\n     * @returns {Array} Array consisting the elements ordered by {@link comparator}.\n     */\n    toArray() {\n        return this.data()\n            .sort((a,b) => this._comparator(a, b) ? -1 : 0)\n    }\n\n    /**\n     * Returns elements of container array.\n     * @returns {Array} Array consisting the elements.\n     */\n    data() {\n        return this._container\n            .map(d => d.element)\n    }\n\n    /**\n     * Returns the container array.\n     * @returns {Array} The container array.\n     */\n    raw_data() {\n        return this._container;\n    }\n\n    /**\n     * The size of the heap.\n     * @returns {Number}\n     */\n    get length() {\n        return this._container.length;\n    }\n\n    /**\n     * Returns false if the the heap has entries, true if the heap has no entries.\n     * @returns {Boolean}\n     */\n    get empty() {\n        return this.length === 0;\n    }\n}","/**\n * @class\n * @alias DisjointSet\n * @see {@link https://en.wikipedia.org/wiki/Disjoint-set_data_structure}\n */\nexport class DisjointSet {\n    /**\n     * @constructor\n     * @alias DisjointSet\n     * @memberof module:datastructure\n     * @param {Array=} elements \n     * @returns {DisjointSet}\n     */\n    constructor(elements = null) {\n        this._list = new Set();\n        if (elements) {\n            for (const e of elements) {\n                this.make_set(e);\n            }\n        }\n        return this;\n    }\n\n    make_set(x) {\n        const list = this._list;\n        if (!list.has(x)) {\n            list.add(x);\n            x.__disjoint_set = {};\n            x.__disjoint_set.parent = x;\n            x.__disjoint_set.children = new Set([x]);\n            x.__disjoint_set.size = 1;\n        }\n        return this;\n    }\n\n    find(x) {\n        const list = this._list;\n        if (list.has(x)) {\n            if (x.__disjoint_set.parent !== x) {\n                x.__disjoint_set.children.add(...x);\n                x.__disjoint_set.parent = this.find(x.__disjoint_set.parent);\n                return x.__disjoint_set.parent;\n            } else {\n                return x;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    union(x, y) {\n        let node_x = this.find(x);\n        let node_y = this.find(y);\n\n        if (node_x === node_y) return this;\n        if (node_x.__disjoint_set.size < node_y.__disjoint_set.size) [node_x, node_y] = [node_y, node_x];\n\n        node_y.__disjoint_set.parent = node_x;\n        // keep track of children?\n        node_y.__disjoint_set.children.forEach(node_x.__disjoint_set.children.add, node_x.__disjoint_set.children);\n        node_x.__disjoint_set.size += node_y.__disjoint_set.size;\n\n        return this;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n/**\n * @class\n * @alias BallTree\n */\nexport class BallTree {\n    /**\n     * Generates a BallTree with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias BallTree\n     * @param {Array=} elements - Elements which should be added to the BallTree\n     * @param {Function} [metric = euclidean] metric to use: (a, b) => distance\n     * @see {@link https://en.wikipedia.org/wiki/Ball_tree}\n     * @see {@link https://github.com/invisal/noobjs/blob/master/src/tree/BallTree.js}\n     * @returns {BallTree}\n     */\n    constructor(elements = null, metric = euclidean) {\n        this._Node = class {\n            constructor(pivot, child1=null, child2=null, radius=null) {\n                this.pivot = pivot;\n                this.child1 = child1;\n                this.child2 = child2;\n                this.radius = radius;\n            }\n        }\n        this._Leaf = class {\n            constructor(points) {\n                this.points = points;\n            }\n        }\n        this._metric = metric;\n        if (elements) {\n            this.add(elements);\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @param {Array<*>} elements - new elements.\n     * @returns {BallTree}\n     */\n    add(elements) {\n        elements = elements.map((element, index) => {\n            return {index: index, element: element}\n        })\n        this._root = this._construct(elements);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Array<*>} elements \n     * @returns {Node} root of balltree.\n     */\n    _construct(elements) {\n        if (elements.length === 1) {\n            return new this._Leaf(elements);\n        } else {\n            let c = this._greatest_spread(elements);\n            let sorted_elements = elements.sort((a, b) => a.element[c] - b.element[c]);\n            let n = sorted_elements.length;\n            let p_index = Math.floor(n / 2);\n            let p = elements[p_index];\n            let L = sorted_elements.slice(0, p_index);\n            let R = sorted_elements.slice(p_index, n);\n            let radius = Math.max(...elements.map(d => this._metric(p.element, d.element)));\n            let B\n            if (L.length > 0 && R.length > 0) {         \n                B = new this._Node(p, this._construct(L), this._construct(R), radius);\n            } else {\n                B = new this._Leaf(elements);\n            }\n            return B;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Node} B \n     * @returns {Number}\n     */\n    _greatest_spread(B) {\n        let d = B[0].element.length;\n        let start = new Array(d);\n\n        for (let i = 0; i < d; ++i) {\n            start[i] = [Infinity, -Infinity];\n        }\n\n        let spread = B.reduce((acc, current) => {\n            for (let i = 0; i < d; ++i) {\n                acc[i][0] = Math.min(acc[i][0], current.element[i]);\n                acc[i][1] = Math.max(acc[i][1], current.element[i]);\n            }\n            return acc;\n        }, start);\n        spread = spread.map(d => d[1] - d[0]);\n        \n        let c = 0;\n        for (let i = 0; i < d; ++i) {\n            c = spread[i] > spread[c] ? i : c;\n        }\n        return c;\n    }\n\n    /**\n     * \n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        return this._search(t, k, new Heap(null, d => this._metric(d.element, t), \"max\"), this._root);\n    }\n\n    /**\n     * @private\n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @param {Heap} Q - Heap consists of the currently found {@link k} nearest neighbors.\n     * @param {Node|Leaf} B \n     */\n    _search(t, k, Q, B) {\n        // B is Node\n        if (Q.length >= k && B.pivot && B.radius && this._metric(t, B.pivot.element) - B.radius >= Q.first.value) {\n            return Q;\n        } \n        if (B.child1) this._search(t, k, Q, B.child1);\n        if (B.child2) this._search(t, k, Q, B.child2);\n        \n        // B is leaf\n        if (B.points) {\n            for (let i = 0, n = B.points.length; i < n; ++i) {\n                let p = B.points[i];\n                if (k > Q.length) {\n                    Q.push(p);\n                } else {\n                    Q.push(p);\n                    Q.pop();\n                }\n            }\n        }\n        return Q;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KNN\n */\nexport class KNN {\n    /**\n     * Generates a KNN list with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias KNN\n     * @param {Array=} elements - Elements which should be added to the KNN list\n     * @param {Function|\"precomputed\"} [metric = euclidean] metric is either precomputed or a function to use: (a, b) => distance\n     * @returns {KNN}\n     */\n    constructor(elements=null, metric=euclidean) {\n        this._metric = metric;\n        this._elements = elements instanceof Matrix ? elements : Matrix.from(elements);\n        const N = this._elements.shape[0];\n        if (metric === \"precomputed\") {\n            this._D = this._elements.clone();\n        } else {\n            this._D = distance_matrix(this._elements, metric);\n        }\n        this.KNN = [];\n        for (let row = 0; row < N; ++row) {\n            const distances = this._D.row(row);\n            const H = new Heap(null, d => d.value, \"min\");\n            for (let j = 0; j < N; ++j) {\n                H.push({\n                    value: distances[j],\n                    index: j,\n                });\n            }\n            this.KNN.push(H);\n        }\n    }\n\n    /**\n     * \n     * @param {Array|Number} t - query element or index.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        const metric = this._metric;\n        const KNN = this.KNN;\n        let H;\n        if (Array.isArray(t)) {\n            if (this._metric == \"precomputed\") {\n                throw \"Search by query element is only possible when not using a precomputed distance matrix!\"\n            } \n            const elements = this._elements;\n            const N = KNN.length;\n            let nearest_element_index = null;\n            let nearest_dist = Infinity;\n            for (let i = 0; i < N; ++i) {\n                const element = elements.row(i);\n                const dist = metric(t, element);\n                if (dist < nearest_dist) {\n                    nearest_element_index = i;\n                    nearest_dist = dist;\n                }\n            }\n            H = KNN[nearest_element_index];\n        } else if (Number.isInteger(t)) {\n            H = KNN[t]\n        }\n\n        let result = []\n        for (let i = 0; i < k; ++i) {\n            result.push(H.pop())\n        }\n        result.forEach(res => H.push(res.element))\n        return result\n    }    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n\n/**\n * @class\n * @alias DR\n * @borrows DR#parameter as DR#para\n * @borrows DR#parameter as DR#p\n */\nexport class DR {\n    /**\n     * Takes the default parameters and seals them, remembers the type of input {@link X}, and initializes the random number generator.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias DR\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed value for the random number generator.\n     * @returns {DR}\n     */\n    constructor(X, default_parameters, parameters) {\n        this._parameters = Object.assign(Object.seal(default_parameters), parameters);\n        if (Array.isArray(X)) {\n            this._type = \"array\";\n            this.X = Matrix.from(X);\n        } else if (X instanceof Matrix) {\n            this._type = \"matrix\";\n            this.X = X;\n        } else {\n            throw new Error(\"No valid type for X!\");\n        }\n        [this._N, this._D] = this.X.shape;\n        this._randomizer = new Randomizer(this._parameters.seed);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * Set and get parameters\n     * @param {String} name - name of the parameter.\n     * @param {any} [value = null] - value of the parameter to set.\n     * @returns {DR|any} - On setting a parameter, this function returns the DR object. If <code>value == null</code> then return actual parameter value.\n     * @example\n     * const DR = new druid.TSNE(X, {d: 3}); // creates a new DR object, with parameter for <code>d</code> = 3.\n     * DR.parameter(\"d\"); // returns 3,\n     * DR.parameter(\"d\", 2); // sets parameter <code>d</code> to 2 and returns <code>DR</code>.\n     */\n    parameter(name, value = null) {\n        if (!this._parameters.hasOwnProperty(name)) {\n            throw new Error(`${name} is not a valid parameter!`);\n        }\n        if (value) {\n            this._parameters[name] = value;\n            this._is_initialized = false;\n            return this;\n        } else {\n            return this._parameters[name];\n        }\n    }\n\n    para(name, value = null) {\n        return this.parameter(name, value);\n    }\n\n    p(name, value = null) {\n        return this.parameter(name, value);\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} - Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Generator} - A generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    *generator() {\n        return this.transform();\n    }\n\n    /**\n     * If the respective DR method has an <code>init</code> function, call it before <code>transform</code>.\n     * @returns {DR}\n     */\n    check_init() {\n        if (!this._is_initialized && typeof this.init === \"function\") {\n            this.init();\n            this._is_initialized = true;\n        }\n        return this;\n    }\n\n    /**\n     * @returns {Matrix|Array} Returns the projection.\n     */\n    get projection() {\n        if (this.hasOwnProperty(\"Y\")) {\n            this.check_init();\n            return this._type === \"matrix\" ? this.Y : this.Y.to2dArray;\n        } else {\n            throw new Error(\"The dataset is not transformed yet!\");\n        }\n    }\n\n    /**\n     *\n     * @param  {...any} args - Arguments the transform method of the respective DR method takes.\n     * @returns {Promise} - A promise yielding the dimensionality reduced dataset.\n     */\n    async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * @static\n     * @param  {...any} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Matrix|Array} - The dimensionality reduced dataset.\n     */\n    static transform(...args) {\n        let dr = new this(...args);\n        return dr.transform();\n    }\n\n    /**\n     * @static\n     * @param  {...any} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Promise} - A promise yielding the dimensionality reduced dataset.\n     */\n    static async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * @static\n     * @param  {...any} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Generator} - A generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    static *generator(...args) {\n        const dr = new this(...args);\n        const generator = dr.generator();\n        for (const result of generator) {\n            yield result;\n        }\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias PCA\n * @augments DR\n */\nexport class PCA extends DR {\n    /**\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias PCA\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @returns {PCA}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}. If parameter {@link A} is given, then project {@link A} with the principal components of {@link X}.\n     * @param {null|Matrix|Array} [A = null] - If given, the data to project.\n     * @returns {Matrix|Array} - The projected data.\n     */\n    transform(A = null) {\n        const V = this.principal_components();\n        if (A == null) {\n            const X = this.X;\n            this.Y = X.dot(V);\n            return this.projection;\n        } else if (Array.isArray(A)) {\n            return Matrix.from(A).dot(V).asArray;\n        } else if (A instanceof Matrix) {\n            return A.dot(V);\n        } else {\n            throw new Error(\"No valid type for A!\");\n        }\n    }\n\n    /**\n     * Computes the {@link d} principal components of Matrix {@link X}.\n     * @returns {Matrix}\n     */\n    principal_components() {\n        if (this.V) {\n            return this.V;\n        }\n        const { d, eig_args } = this._parameters;\n        const X = this.X;\n        const means = Matrix.from(X.meanCols);\n        const X_cent = X.sub(means);\n        const C = X_cent.transpose().dot(X_cent);\n        const { eigenvectors: V } = simultaneous_poweriteration(C, d, eig_args);\n        this.V = Matrix.from(V).transpose();\n        return this.V;\n    }\n\n    static principal_components(X, parameters) {\n        const dr = new this(X, parameters);\n        return dr.principal_components();\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias MDS\n * @extends DR\n */\nexport class MDS extends DR {\n    /**\n     * Classical MDS.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias MDS\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}.\n     * @returns {Matrix|Array}\n     */\n    transform() {\n        const X = this.X;\n        const rows = X.shape[0];\n        const { d, metric, eig_args } = this._parameters;\n        const A = metric === \"precomputed\" ? X : distance_matrix(X, metric);\n        const ai_ = A.meanCols;\n        const a_j = A.meanRows;\n        const a__ = A.mean;\n\n        this._d_X = A;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n\n        return this.projection;\n    }\n\n    /**\n     * @returns {Number} - the stress of the projection.\n     */\n    stress() {\n        const N = this.X.shape[0];\n        const Y = this.Y;\n        const d_X = this._d_X;\n        const d_Y = new Matrix();\n        d_Y.shape = [\n            N,\n            N,\n            (i, j) => {\n                return i < j ? euclidean(Y.row(i), Y.row(j)) : d_Y.entry(j, i);\n            },\n        ];\n        let top_sum = 0;\n        let bottom_sum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                top_sum += Math.pow(d_X.entry(i, j) - d_Y.entry(i, j), 2);\n                bottom_sum += Math.pow(d_X.entry(i, j), 2);\n            }\n        }\n        return Math.sqrt(top_sum / bottom_sum);\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { DR } from \"./DR.js\";\nimport euclidean from \"../metrics/euclidean.js\";\n\n/**\n * @class\n * @alias ISOMAP\n * @extends DR\n */\nexport class ISOMAP extends DR {\n    /**\n     * Isometric feature mapping (ISOMAP).\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias ISOMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link ISOMAP} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2319}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this.X.shape[0] / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const X = this.X;\n        const rows = this._N;\n        const { d, metric, eig_args, neighbors } = this._parameters;\n        // TODO: make knn extern and parameter for constructor or transform?\n        const D = new Matrix();\n        D.shape = [rows, rows, (i, j) => (i <= j ? metric(X.row(i), X.row(j)) : D.entry(j, i))];\n        const kNearestNeighbors = [];\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < rows; ++j) {\n                row.push({\n                    index: j,\n                    distance: D.entry(i, j),\n                });\n            }\n            const H = new Heap(row, (d) => d.distance, \"min\");\n            kNearestNeighbors.push(H.toArray().slice(1, neighbors + 1));\n        }\n\n        /*D = dijkstra(kNearestNeighbors);*/\n        // compute shortest paths\n        // TODO: make extern\n        /** @see {@link https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm} */\n        const G = new Matrix(rows, rows, (i, j) => {\n            const other = kNearestNeighbors[i].find((n) => n.index === j);\n            return other ? other.distance : Infinity;\n        });\n\n        for (let i = 0; i < rows; ++i) {\n            for (let j = 0; j < rows; ++j) {\n                for (let k = 0; k < rows; ++k) {\n                    G.set_entry(i, j, Math.min(G.entry(i, j), G.entry(i, k) + G.entry(k, j)));\n                }\n            }\n        }\n\n        let ai_ = new Float64Array(rows);\n        let a_j = new Float64Array(rows);\n        let a__ = 0;\n        const A = new Matrix(rows, rows, (i, j) => {\n            let val = G.entry(i, j);\n            val = val === Infinity ? 0 : val;\n            ai_[i] += val;\n            a_j[j] += val;\n            a__ += val;\n            return val;\n        });\n\n        ai_ = ai_.map((v) => v / rows);\n        a_j = a_j.map((v) => v / rows);\n        a__ /= rows ** 2;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        // compute d eigenvectors\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n/**\n * @class\n * @alias FASTMAP\n * @extends DR\n */\nexport class FASTMAP extends DR {\n    /**\n     * FastMap: a fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias FASTMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the dimensionality of the projection.\n     * @returns {FASTMAP}\n     * @see {@link https://doi.org/10.1145/223784.223812}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     * Chooses two points which are the most distant in the actual projection.\n     * @private\n     * @param {Function} dist\n     * @returns {Array} An array consisting of first index, second index, and distance between the two points.\n     */\n    _choose_distant_objects(dist) {\n        const X = this.X;\n        const N = X.shape[0];\n        let a_index = (this._randomizer.random_int % N) - 1;\n        let b_index = null;\n        let max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_ai = dist(a_index, i);\n            if (d_ai > max_dist) {\n                max_dist = d_ai;\n                b_index = i;\n            }\n        }\n        max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_bi = dist(b_index, i);\n            if (d_bi > max_dist) {\n                max_dist = d_bi;\n                a_index = i;\n            }\n        }\n        return [a_index, b_index, max_dist];\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} The {@link d}-dimensional projection of the data matrix {@link X}.\n     */\n    transform() {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric } = this._parameters;\n        const Y = new Matrix(N, d, 0);\n        let dist = (a, b) => metric(X.row(a), X.row(b));\n\n        for (let _col = 0; _col < d; ++_col) {\n            let old_dist = dist;\n            // choose pivot objects\n            const [a_index, b_index, d_ab] = this._choose_distant_objects(dist);\n            if (d_ab !== 0) {\n                // project the objects on the line (O_a, O_b)\n                for (let i = 0; i < N; ++i) {\n                    const d_ai = dist(a_index, i);\n                    const d_bi = dist(b_index, i);\n                    const y_i = (d_ai ** 2 + d_ab ** 2 - d_bi ** 2) / (2 * d_ab);\n                    Y.set_entry(i, _col, y_i);\n                }\n                // consider the projections of the objects on a\n                // hyperplane perpendicluar to the line (a, b);\n                // the distance function D'() between two\n                // projections is given by Eq.4\n                dist = (a, b) => Math.sqrt(old_dist(a, b) ** 2 - (Y.entry(a, _col) - Y.entry(b, _col)) ** 2);\n            }\n        }\n        // return embedding.\n        this.Y = Y;\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LDA\n * @extends DR\n */\nexport class LDA extends DR {\n    /**\n     * Linear Discriminant Analysis.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LDA\n     * @param {Matrix} X - The high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Array} parameters.labels - The labels / classes for each data point.\n     * @param {number} [parameters.d = 2] - The dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://onlinelibrary.wiley.com/doi/10.1111/j.1469-1809.1936.tb02137.x}\n     */\n    constructor(X, parameters) {\n        super(X, { labels: null, d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, cols] = X.shape;\n        const { d, labels, eig_args } = this._parameters;\n        if (labels === null || labels.length != rows) {\n            throw new Error(\"LDA needs parameter label to every datapoint to work!\");\n        }\n        const unique_labels = {};\n        let label_id = 0;\n        labels.forEach((l, i) => {\n            if (l in unique_labels) {\n                unique_labels[l].count++;\n                unique_labels[l].rows.push(X.row(i));\n            } else {\n                unique_labels[l] = {\n                    id: label_id++,\n                    count: 1,\n                    rows: [X.row(i)],\n                };\n            }\n        });\n\n        // create X_mean and vector means;\n        const X_mean = X.mean;\n        const V_mean = new Matrix(label_id, cols);\n        for (const label in unique_labels) {\n            const V = Matrix.from(unique_labels[label].rows);\n            const v_mean = V.meanCols;\n            for (let j = 0; j < cols; ++j) {\n                V_mean.set_entry(unique_labels[label].id, j, v_mean[j]);\n            }\n        }\n        // scatter_between\n        let S_b = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j] - X_mean);\n            const N = unique_labels[label].count;\n            S_b = S_b.add(m.dot(m.transpose()).mult(N));\n        }\n\n        // scatter_within\n        let S_w = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j]);\n            const R = unique_labels[label].rows;\n            for (let i = 0, n = unique_labels[label].count; i < n; ++i) {\n                const row_v = new Matrix(cols, 1, (j, _) => R[i][j] - m.entry(j, 0));\n                S_w = S_w.add(row_v.dot(row_v.transpose()));\n            }\n        }\n\n        let { eigenvectors: V } = simultaneous_poweriteration(S_w.inverse().dot(S_b), d, eig_args);\n        V = Matrix.from(V).transpose();\n        this.Y = X.dot(V);\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { k_nearest_neighbors } from \"../matrix/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LLE\n * @extends DR\n */\nexport class LLE extends DR {\n    /**\n     * Locally Linear Embedding.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LLE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} neighbors - the label / class of each data point.\n     * @param {Number} [d = 2] - the dimensionality of the projection.\n     * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [seed = 1212] - the dimensionality of the projection.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2323}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const rows = this._N;\n        const cols = this._D;\n        const { neighbors, d, eig_args, metric } = this._parameters;\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        const O = new Matrix(neighbors, 1, 1);\n        const W = new Matrix(rows, rows);\n\n        for (let row = 0; row < rows; ++row) {\n            const nN_row = nN[row];\n            const Z = new Matrix(neighbors, cols, (i, j) => X.entry(nN_row[i].j, j) - X.entry(row, j));\n            const C = Z.dot(Z.T);\n            if (neighbors > cols) {\n                const C_trace = neumair_sum(C.diag) / 1000;\n                for (let j = 0; j < neighbors; ++j) {\n                    C.set_entry(j, j, C.entry(j, j) + C_trace);\n                }\n            }\n            // reconstruct;\n            let w = Matrix.solve_CG(C, O, this._randomizer);\n            w = w.divide(w.sum);\n            for (let j = 0; j < neighbors; ++j) {\n                W.set_entry(row, nN_row[j].j, w.entry(j, 0));\n            }\n        }\n        // comp embedding\n        const I = new Matrix(rows, rows, \"identity\");\n        const IW = I.sub(W);\n        const M = IW.T.dot(IW);\n        const { eigenvectors: V } = simultaneous_poweriteration(M.T.inverse(), d + 1, eig_args);\n        this.Y = Matrix.from(V.slice(1, 1 + d)).T;\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix, k_nearest_neighbors } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LTSA\n * @extends DR\n */\nexport class LTSA extends DR {\n    /**\n     * Local Tangent Space Alignment\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LTSA\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link LTSA} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://epubs.siam.org/doi/abs/10.1137/S1064827502419154}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        if (this._D <= this.parameter(\"d\")) {\n            throw new Error(`Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${this.parameter(\"d\")})!`);\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, D] = X.shape;\n        const { d, neighbors, metric, eig_args } = this._parameters;\n        // 1.1 determine k nearest neighbors\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        // center matrix\n        const O = new Matrix(D, D, \"center\");\n        const B = new Matrix(rows, rows, 0);\n\n        for (let row = 0; row < rows; ++row) {\n            // 1.2 compute the d largest eigenvectors of the correlation matrix\n            const I_i = [row, ...nN[row].map((n) => n.j)];\n            let X_i = Matrix.from(I_i.map((n) => X.row(n)));\n            // center X_i\n            X_i = X_i.dot(O);\n            // correlation matrix\n            const C = X_i.dot(X_i.transpose());\n            const { eigenvectors: g } = simultaneous_poweriteration(C, d, eig_args);\n            //g.push(linspace(0, k).map(_ => 1 / Math.sqrt(k + 1)));\n            const G_i_t = Matrix.from(g);\n            // 2. Constructing alignment matrix\n            const W_i = G_i_t.transpose()\n                .dot(G_i_t)\n                .add(1 / Math.sqrt(neighbors + 1));\n            for (let i = 0; i < neighbors + 1; ++i) {\n                for (let j = 0; j < neighbors + 1; ++j) {\n                    B.set_entry(I_i[i], I_i[j], B.entry(I_i[i], I_i[j]) - (i === j ? 1 : 0) + W_i.entry(i, j));\n                }\n            }\n        }\n\n        // 3. Aligning global coordinates\n        const { eigenvectors: Y } = simultaneous_poweriteration(B, d + 1, eig_args);\n        this.Y = Matrix.from(Y.slice(1)).transpose();\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TSNE\n * @extends DR\n */\nexport class TSNE extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TSNE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.perplexity = 50] - perplexity.\n     * @param {Number} [parameters.epsilon = 10] - learning parameter.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TSNE}\n     */\n    constructor(X, parameters) {\n        super(X, { perplexity: 50, epsilon: 10, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._iter = 0;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => this._randomizer.random);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} distance_matrix - accepts a precomputed distance matrix\n     * @returns {TSNE}\n     */\n    init() {\n        // init\n        const Htarget = Math.log(this.parameter(\"perplexity\"));\n        const N = this._N;\n        const D = this._D;\n        const {metric} = this._parameters;\n        const X = this.X;\n        let Delta;\n        if (metric ==\"precomputed\") {\n            Delta = druid.Matrix.from(X);\n        } else {\n            Delta = new Matrix(N, N);\n            for (let i = 0; i < N; ++i) {\n                const X_i = X.row(i);\n                for (let j = i + 1; j < N; ++j) {\n                    const distance = metric(X_i, X.row(j));\n                    Delta.set_entry(i, j, distance);\n                    Delta.set_entry(j, i, distance);\n                }\n            }\n        }\n\n        const P = new Matrix(N, N, \"zeros\");\n\n        this._ystep = new Matrix(N, D, \"zeros\");\n        this._gains = new Matrix(N, D, 1);\n\n        // search for fitting sigma\n        let prow = new Float64Array(N)\n        const tol = 1e-4;\n        const maxtries = 50;\n        for (let i = 0; i < N; ++i) {\n            let betamin = -Infinity;\n            let betamax = Infinity;\n            let beta = 1;\n            let done = false;\n\n            let num = 0;\n            while (!done) {\n                let psum = 0;\n                for (let j = 0; j < N; ++j) {\n                    let pj = Math.exp(-Delta.entry(i, j) * beta);\n                    if (i === j) pj = 0;\n                    prow[j] = pj;\n                    psum += pj;\n                }\n                let Hhere = 0;\n                for (let j = 0; j < N; ++j) {\n                    let pj = psum === 0 ? 0 : prow[j] / psum;\n                    prow[j] = pj;\n                    if (pj > 1e-7) {\n                        Hhere -= pj * Math.log(pj);\n                    }\n                }\n                if (Hhere > Htarget) {\n                    betamin = beta;\n                    beta = betamax === Infinity ? beta * 2 : (beta + betamax) / 2;\n                } else {\n                    betamax = beta;\n                    beta = betamin === -Infinity ? beta / 2 : (beta + betamin) / 2;\n                }\n                ++num;\n                if (Math.abs(Hhere - Htarget) < tol) done = true;\n                if (num >= maxtries) done = true;\n            }\n\n            for (let j = 0; j < N; ++j) {\n                P.set_entry(i, j, prow[j]);\n            }\n        }\n\n        //compute probabilities\n        const Pout = new Matrix(N, N, \"zeros\");\n        const N2 = N * 2;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i; j < N; ++j) {\n                const p = Math.max((P.entry(i, j) + P.entry(j, i)) / N2, 1e-100);\n                Pout.set_entry(i, j, p);\n                Pout.set_entry(j, i, p);\n            }\n        }\n        this._P = Pout;\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Array<Array>} - the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Array<Array>} - the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * performs a optimization step\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const P = this._P;\n        const ystep = this._ystep;\n        const gains = this._gains;\n        const N = this._N;\n        const { d: dim, epsilon} = this._parameters;\n        let Y = this.Y;\n\n        //calc cost gradient;\n        const pmul = iter < 100 ? 4 : 1;\n\n        // compute Q dist (unnormalized)\n        const Qu = new Matrix(N, N, \"zeros\");\n        let qsum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dsum = 0;\n                for (let d = 0; d < dim; ++d) {\n                    const dhere = Y.entry(i, d) - Y.entry(j, d);\n                    dsum += dhere * dhere;\n                }\n                const qu = 1 / (1 + dsum);\n                Qu.set_entry(i, j, qu);\n                Qu.set_entry(j, i, qu);\n                qsum += 2 * qu;\n            }\n        }\n\n        // normalize Q dist\n        const Q = new Matrix(N, N, 0);\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                const val = Math.max(Qu.entry(i, j) / qsum, 1e-100);\n                Q.set_entry(i, j, val);\n                Q.set_entry(j, i, val);\n            }\n        }\n\n        const grad = new Matrix(N, dim, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            for (let j = 0; j < N; ++j) {\n                const premult = 4 * (pmul * P.entry(i, j) - Q.entry(i, j)) * Qu.entry(i, j);\n                for (let d = 0; d < dim; ++d) {\n                    grad.set_entry(i, d, grad.entry(i, d) + premult * (Y.entry(i, d) - Y.entry(j, d)));\n                }\n            }\n        }\n\n        // perform gradient step\n        let ymean = new Float64Array(dim);\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const gid = grad.entry(i, d);\n                const sid = ystep.entry(i, d);\n                const gainid = gains.entry(i, d);\n\n                let newgain = Math.sign(gid) === Math.sign(sid) ? gainid * 0.8 : gainid + 0.2;\n                if (newgain < 0.01) newgain = 0.01;\n                gains.set_entry(i, d, newgain);\n\n                const momval = iter < 250 ? 0.5 : 0.8;\n                const newsid = momval * sid - epsilon * newgain * gid;\n                ystep.set_entry(i, d, newsid);\n\n                Y.set_entry(i, d, Y.entry(i, d) + newsid);\n                ymean[d] += Y.entry(i, d);\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < 2; ++d) {\n                Y.set_entry(i, d, Y.entry(i, d) - ymean[d] / N);\n            }\n        }\n\n        return this.Y;\n    }\n}\n","/**\n *\n * @memberof module:optimization\n * @alias powell\n * @param {Function} f\n * @param {Array} x0\n * @param {Number} [max_iter = 300]\n * @returns {Array}\n * @see http://optimization-js.github.io/optimization-js/optimization.js.html#line438\n */\nexport default function (f, x0, max_iter = 300) {\n    const epsilon = 1e-2;\n    const n = x0.length;\n    let alpha = 1e-3;\n    let pfx = 10000;\n    let x = x0.slice();\n    let fx = f(x);\n    let convergence = false;\n\n    while (max_iter-- >= 0 && !convergence) {\n        convergence = true;\n        for (let i = 0; i < n; ++i) {\n            x[i] += 1e-6;\n            let fxi = f(x);\n            x[i] -= 1e-6;\n            let dx = (fxi - fx) / 1e-6;\n            if (Math.abs(dx) > epsilon) {\n                convergence = false;\n            }\n            x[i] -= alpha * dx;\n            fx = f(x);\n        }\n        alpha *= pfx >= fx ? 1.05 : 0.4;\n        pfx = fx;\n    }\n    return x;\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { linspace } from \"../matrix/index.js\";\nimport { powell } from \"../optimization/index.js\";\nimport { DR } from \"./DR.js\";\nimport { max } from \"../util/index.js\";\nimport { KNN } from \"../knn/index.js\";\n\n/**\n * @class\n * @alias UMAP\n * @extends DR\n */\nexport class UMAP extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias UMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.n_neighbors = 15] - size of the local neighborhood.\n     * @param {Number} [parameters.local_connectivity = 1] - number of nearest neighbors connected in the local neighborhood.\n     * @param {Number} [parameters.min_dist = 1] - controls how tightly points get packed together.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points in the high-dimensional space.\n     * @param {Number} [parameters._spread = 1] - The effective scale of embedded points. (In combination with {@link parameters.min_dist})\n     * @param {Number} [parameters._set_op_mix_ratio = 1] - Interpolate between union and intersection.\n     * @param {Number} [parameters._repulsion_strength = 1]  - Weighting applied to negative samples.\n     * @param {Number} [parameters._negative_sample_rate = 5] - The number of negative samples per positive sample.\n     * @param {Number} [parameters._n_epochs = 350] - The number of training epochs.\n     * @param {Number} [parameter._initial_alpha = 1] - The initial learning rate for the optimization.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {UMAP}\n     */\n    constructor(X, parameters) {\n        super(X, { n_neighbors: 15, local_connectivity: 1, min_dist: 1, d: 2, metric: euclidean, seed: 1212, _spread: 1, _set_op_mix_ratio: 1, _repulsion_strength: 1, _negative_sample_rate: 5, _n_epochs: 350, _initial_alpha: 1 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        /* let n_neighbors = Math.min(this._N - 1, parameters.n_neighbors);\n        this.parameter(\"n_neighbors\", n_neighbors);\n        this.parameter(\"local_connectivity\", Math.min(this.parameter(\"local_connectivity\"), n_neighbors - 1)); */\n        if (this.parameter(\"n_neighbors\") > this._N) {\n            throw new Error(`Parameter n_neighbors (=${this.parameter(\"n_neighbors\")}) needs to be smaller than dataset size (N=${this._N})!`);\n        }\n        if (this.parameter(\"local_connectivity\") > this.parameter(\"n_neighbors\")) {\n            throw new Error(`Parameter local_connectivity (=${this.parameter(\"local_connectivity\")}) needs to be smaller than parameter n_neighbors (=${this.parameter(\"n_neighbors\")})`);\n        }\n        this._iter = 0;\n        const randomizer = this._randomizer;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => randomizer.random);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} spread\n     * @param {Number} min_dist\n     * @returns {Array}\n     */\n    _find_ab_params(spread, min_dist) {\n        const curve = (x, a, b) => 1 / (1 + a * Math.pow(x, 2 * b));\n        const xv = linspace(0, spread * 3, 300);\n        const yv = linspace(0, spread * 3, 300);\n\n        for (let i = 0, n = xv.length; i < n; ++i) {\n            const xv_i = xv[i];\n            yv[i] = xv_i < min_dist ? 1 : Math.exp(-(xv_i - min_dist) / spread);\n        }\n\n        const err = (p) => {\n            const error = linspace(1, 300).map((_, i) => yv[i] - curve(xv[i], p[0], p[1]));\n            return Math.sqrt(neumair_sum(error.map((e) => e * e)));\n        };\n\n        return powell(err, [1, 1]);\n    }\n\n    /**\n     * @private\n     * @param {Array<Array>} distances\n     * @param {Array<Number>} sigmas\n     * @param {Array<Number>} rhos\n     * @returns {Array}\n     */\n    _compute_membership_strengths(distances, sigmas, rhos) {\n        for (let i = 0, n = distances.length; i < n; ++i) {\n            for (let j = 0, m = distances[i].length; j < m; ++j) {\n                const v = distances[i][j].value - rhos[i];\n                distances[i][j].value = v > 0 ? Math.exp(-v / sigmas[i]) : 1;\n            }\n        }\n        return distances;\n    }\n\n    /**\n     * @private\n     * @param {KNN|BallTree} knn\n     * @param {Number} k\n     * @returns {Object}\n     */\n    _smooth_knn_dist(knn, k) {\n        const SMOOTH_K_TOLERANCE = 1e-5;\n        const MIN_K_DIST_SCALE = 1e-3;\n        const n_iter = 64;\n        const { local_connectivity, metric } = this._parameters;\n        const target = Math.log2(k);\n        const rhos = [];\n        const sigmas = [];\n        const X = this.X;\n        const N = X.shape[0];\n        //const distances = [...X].map(x_i => knn.search(x_i, k).raw_data().reverse());\n\n        const distances = [];\n        if (metric === \"precomputed\") {\n            for (let i = 0; i < N; ++i) {\n                distances.push(knn.search(i, k).reverse());\n            }\n        } else {\n            for (const x_i of X) {\n                distances.push(knn.search(x_i, k).raw_data().reverse());\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            let lo = 0;\n            let hi = Infinity;\n            let mid = 1;\n\n            const search_result = distances[i];\n            const non_zero_dist = search_result.filter((d) => d.value > 0);\n            const non_zero_dist_length = non_zero_dist.length;\n            if (non_zero_dist_length >= local_connectivity) {\n                const index = Math.floor(local_connectivity);\n                const interpolation = local_connectivity - index;\n                if (index > 0) {\n                    rhos.push(non_zero_dist[index - 1]);\n                    if (interpolation > SMOOTH_K_TOLERANCE) {\n                        rhos[i].value += interpolation * (non_zero_dist[index].value - non_zero_dist[index - 1]);\n                    }\n                } else {\n                    rhos[i].value = interpolation * non_zero_dist[0].value;\n                }\n            } else if (non_zero_dist_length > 0) {\n                rhos[i] = non_zero_dist[non_zero_dist_length - 1].value;\n            }\n            for (let x = 0; x < n_iter; ++x) {\n                let psum = 0;\n                for (let j = 0; j < k; ++j) {\n                    const d = search_result[j].value - rhos[i];\n                    psum += d > 0 ? Math.exp(-(d / mid)) : 1;\n                }\n                if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n                    break;\n                }\n                if (psum > target) {\n                    [hi, mid] = [mid, (lo + hi) / 2];\n                } else {\n                    if (hi === Infinity) {\n                        [lo, mid] = [mid, mid * 2];\n                    } else {\n                        [lo, mid] = [mid, (lo + hi) / 2];\n                    }\n                }\n            }\n            sigmas[i] = mid;\n\n            const mean_ithd = search_result.reduce((a, b) => a + b.value, 0) / search_result.length;\n            //let mean_d = null;\n            if (rhos[i] > 0) {\n                if (sigmas[i] < MIN_K_DIST_SCALE * mean_ithd) {\n                    sigmas[i] = MIN_K_DIST_SCALE * mean_ithd;\n                }\n            } else {\n                const mean_d = distances.reduce((acc, res) => acc + res.reduce((a, b) => a + b.value, 0) / res.length);\n                if (sigmas[i] > MIN_K_DIST_SCALE * mean_d) {\n                    sigmas[i] = MIN_K_DIST_SCALE * mean_d;\n                }\n            }\n        }\n        return {\n            distances: distances,\n            sigmas: sigmas,\n            rhos: rhos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Matrix} X\n     * @param {Number} n_neighbors\n     * @returns {Matrix}\n     */\n    _fuzzy_simplicial_set(X, n_neighbors) {\n        const N = X.shape[0];\n        const { metric, _set_op_mix_ratio } = this._parameters;\n        const knn = metric === \"precomputed\" ? new KNN(X, \"precomputed\") : new BallTree(X.to2dArray, metric);\n        let { distances, sigmas, rhos } = this._smooth_knn_dist(knn, n_neighbors);\n        distances = this._compute_membership_strengths(distances, sigmas, rhos);\n        const result = new Matrix(N, N, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            const distances_i = distances[i];\n            for (let j = 0; j < distances_i.length; ++j) {\n                result.set_entry(i, distances_i[j].element.index, distances_i[j].value);\n            }\n        }\n\n        const transposed_result = result.T;\n        const prod_matrix = result.mult(transposed_result);\n        return result\n            .add(transposed_result)\n            .sub(prod_matrix)\n            .mult(_set_op_mix_ratio)\n            .add(prod_matrix.mult(1 - _set_op_mix_ratio));\n    }\n\n    /**\n     * @private\n     * @param {Number} n_epochs\n     * @returns {Array}\n     */\n    _make_epochs_per_sample(n_epochs) {\n        const weights = this._weights;\n        const result = new Float32Array(weights.length).fill(-1);\n        const weights_max = max(weights);\n        const n_samples = weights.map((w) => n_epochs * (w / weights_max));\n        for (let i = 0; i < result.length; ++i) if (n_samples[i] > 0) result[i] = Math.round(n_epochs / n_samples[i]);\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Matrix} graph\n     * @returns {Object}\n     */\n    _tocoo(graph) {\n        const rows = [];\n        const cols = [];\n        const data = [];\n        const [rows_n, cols_n] = graph.shape;\n        for (let row = 0; row < rows_n; ++row) {\n            for (let col = 0; col < cols_n; ++col) {\n                const entry = graph.entry(row, col);\n                if (entry !== 0) {\n                    rows.push(row);\n                    cols.push(col);\n                    data.push(entry);\n                }\n            }\n        }\n        return {\n            rows: rows,\n            cols: cols,\n            data: data,\n        };\n    }\n\n    /**\n     * Computes all necessary\n     * @returns {UMAP}\n     */\n    init() {\n        const { _spread, min_dist, n_neighbors, _n_epochs, _negative_sample_rate } = this._parameters;\n        const [a, b] = this._find_ab_params(_spread, min_dist);\n        this._a = a;\n        this._b = b;\n        this._graph = this._fuzzy_simplicial_set(this.X, n_neighbors);\n        const { rows, cols, data: weights } = this._tocoo(this._graph);\n        this._head = rows;\n        this._tail = cols;\n        this._weights = weights;\n        this._epochs_per_sample = this._make_epochs_per_sample(_n_epochs);\n        this._epochs_per_negative_sample = this._epochs_per_sample.map((d) => d * _negative_sample_rate);\n        this._epoch_of_next_sample = this._epochs_per_sample.slice();\n        this._epoch_of_next_negative_sample = this._epochs_per_negative_sample.slice();\n        return this;\n    }\n\n    graph() {\n        this.check_init();\n        return { cols: this._head, rows: this._tail, weights: this._weights };\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    transform(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    *generator(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * @private\n     * @param {Number} x\n     * @returns {Number}\n     */\n    _clip(x) {\n        if (x > 4) return 4;\n        if (x < -4) return -4;\n        return x;\n    }\n\n    /**\n     * performs the optimization step.\n     * @private\n     * @param {Matrix} head_embedding\n     * @param {Matrix} tail_embedding\n     * @param {Matrix} head\n     * @param {Matrix} tail\n     * @returns {Matrix}\n     */\n    _optimize_layout(head_embedding, tail_embedding, head, tail) {\n        const randomizer = this._randomizer;\n        const { _repulsion_strength, d: dim } = this._parameters;\n        const { _alpha: alpha, _a: a, _b: b, _epochs_per_sample: epochs_per_sample, _epochs_per_negative_sample: epochs_per_negative_sample, _epoch_of_next_negative_sample: epoch_of_next_negative_sample, _epoch_of_next_sample: epoch_of_next_sample, _clip: clip } = this;\n        const tail_length = tail.length;\n\n        for (let i = 0, n = epochs_per_sample.length; i < n; ++i) {\n            if (epoch_of_next_sample[i] <= this._iter) {\n                const j = head[i];\n                const k = tail[i];\n                const current = head_embedding.row(j);\n                const other = tail_embedding.row(k);\n                const dist = euclidean_squared(current, other);\n                let grad_coeff = 0;\n                if (dist > 0) {\n                    grad_coeff = (-2 * a * b * Math.pow(dist, b - 1)) / (a * Math.pow(dist, b) + 1);\n                }\n                for (let d = 0; d < dim; ++d) {\n                    const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                    const c = current[d] + grad_d;\n                    const o = other[d] - grad_d;\n                    current[d] = c;\n                    other[d] = o;\n                    head_embedding.set_entry(j, d, c);\n                    tail_embedding.set_entry(k, d, o);\n                }\n                epoch_of_next_sample[i] += epochs_per_sample[i];\n                const n_neg_samples = (this._iter - epoch_of_next_negative_sample[i]) / epochs_per_negative_sample[i];\n                for (let p = 0; p < n_neg_samples; ++p) {\n                    const k = randomizer.random_int % tail_length;\n                    const other = tail_embedding.row(tail[k]);\n                    const dist = euclidean_squared(current, other);\n                    let grad_coeff = 0;\n                    if (dist > 0) {\n                        grad_coeff = (2 * _repulsion_strength * b) / ((0.01 + dist) * (a * Math.pow(dist, b) + 1));\n                    } else if (j === k) {\n                        continue;\n                    }\n                    for (let d = 0; d < dim; ++d) {\n                        const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                        const c = current[d] + grad_d;\n                        const o = other[d] - grad_d;\n                        current[d] = c;\n                        other[d] = o;\n                        head_embedding.set_entry(j, d, c);\n                        tail_embedding.set_entry(tail[k], d, o);\n                    }\n                }\n                epoch_of_next_negative_sample[i] += n_neg_samples * epochs_per_negative_sample[i];\n            }\n        }\n        return head_embedding;\n    }\n\n    /**\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const Y = this.Y;\n        const { _initial_alpha, _n_epochs } = this._parameters;\n        this._alpha = _initial_alpha * (1 - iter / _n_epochs);\n        this.Y = this._optimize_layout(Y, Y, this._head, this._tail);\n\n        return this.Y;\n    }\n}\n","import { Matrix, linspace } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { PCA } from \"./PCA.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TriMap\n * @extends DR\n */\nexport class TriMap extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TriMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.weight_adj = 500] - scaling factor.\n     * @param {Number} [parameters.c = 5] - number of triplets multiplier.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.tol = 1e-8] -\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TriMap}\n     * @see {@link https://arxiv.org/pdf/1910.00204v1.pdf}\n     * @see {@link https://github.com/eamid/trimap}\n     */\n    constructor(X, parameters) {\n        super(X, { weight_adj: 500, c: 5, d: 2, metric: euclidean, tol: 1e-8, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} [pca = null] - Initial Embedding (if null then PCA gets used).\n     * @param {KNN} [knn = null] - KNN Object (if null then BallTree gets used).\n     */\n    init(pca = null, knn = null) {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric, c } = this._parameters;\n        this.n_inliers = 2 * c;\n        this.n_outliers = 1 * c;\n        this.n_random = 1 * c;\n        this.Y = pca || new PCA(X, d).transform();\n        this.knn = knn || new BallTree(X.to2dArray, metric);\n        const { triplets, weights } = this._generate_triplets(this.n_inliers, this.n_outliers, this.n_random);\n        this.triplets = triplets;\n        this.weights = weights;\n        this.lr = (1000 * N) / triplets.shape[0];\n        this.C = Infinity;\n        this.vel = new Matrix(N, d, 0);\n        this.gain = new Matrix(N, d, 1);\n        return this;\n    }\n\n    /**\n     * Generates {@link n_inliers} x {@link n_outliers} x {@link n_random} triplets.\n     * @param {Number} n_inliers\n     * @param {Number} n_outliers\n     * @param {Number} n_random\n     */\n    _generate_triplets(n_inliers, n_outliers, n_random) {\n        const { metric, weight_adj } = this._parameters;\n        const X = this.X;\n        const N = X.shape[0];\n        const knn = this.knn;\n        const n_extra = Math.min(n_inliers + 20, N);\n        const nbrs = new Matrix(N, n_extra);\n        const knn_distances = new Matrix(N, n_extra);\n        for (let i = 0; i < N; ++i) {\n            knn.search(X.row(i), n_extra + 1)\n                .raw_data()\n                .filter((d) => d.value != 0)\n                .sort((a, b) => a.value - b.value)\n                .forEach((d, j) => {\n                    nbrs.set_entry(i, j, d.element.index);\n                    knn_distances.set_entry(i, j, d.value);\n                });\n        }\n        // scale parameter\n        const sig = new Float64Array(N);\n        for (let i = 0; i < N; ++i) {\n            sig[i] = Math.max((knn_distances.entry(i, 3) + knn_distances.entry(i, 4) + knn_distances.entry(i, 5) + knn_distances.entry(i, 6)) / 4, 1e-10);\n        }\n\n        const P = this._find_p(knn_distances, sig, nbrs);\n\n        let triplets = this._sample_knn_triplets(P, nbrs, n_inliers, n_outliers);\n        let n_triplets = triplets.shape[0];\n        const outlier_distances = new Float64Array(n_triplets);\n        for (let i = 0; i < n_triplets; ++i) {\n            const j = triplets.entry(i, 0);\n            const k = triplets.entry(i, 2);\n            outlier_distances[i] = metric(X.row(j), X.row(k));\n        }\n        let weights = this._find_weights(triplets, P, nbrs, outlier_distances, sig);\n\n        if (n_random > 0) {\n            const { random_triplets, random_weights } = this._sample_random_triplets(X, n_random, sig);\n            triplets = triplets.concat(random_triplets, \"vertical\");\n            weights = Float64Array.from([...weights, ...random_weights]);\n        }\n        n_triplets = triplets.shape[0];\n        let max_weight = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            if (isNaN(weights[i])) {\n                weights[i] = 0;\n            }\n            if (max_weight < weights[i]) max_weight = weights[i];\n        }\n        let max_weight_2 = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight;\n            weights[i] += 0.0001;\n            weights[i] = Math.log(1 + weight_adj * weights[i]);\n            if (max_weight_2 < weights[i]) max_weight_2 = weights[i];\n        }\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight_2;\n        }\n        return {\n            triplets: triplets,\n            weights: weights,\n        };\n    }\n\n    /**\n     * Calculates the similarity matrix P\n     * @private\n     * @param {Matrix} knn_distances - matrix of pairwise knn distances\n     * @param {Float64Array} sig - scaling factor for the distances\n     * @param {Matrix} nbrs - nearest neighbors\n     * @returns {Matrix} pairwise similarity matrix\n     */\n    _find_p(knn_distances, sig, nbrs) {\n        const [N, n_neighbors] = knn_distances.shape;\n        return new Matrix(N, n_neighbors, (i, j) => {\n            return Math.exp(-(knn_distances.entry(i, j) ** 2 / sig[i] / sig[nbrs.entry(i, j)]));\n        });\n    }\n\n    /**\n     * Sample nearest neighbors triplets based on the similarity values given in P.\n     * @private\n     * @param {Matrix} P - Matrix of pairwise similarities between each point and its neighbors given in matrix nbrs.\n     * @param {Matrix} nbrs - Nearest neighbors indices for each point. The similarity values are given in matrix {@link P}. Row i corresponds to the i-th point.\n     * @param {Number} n_inliers - Number of inlier points.\n     * @param {Number} n_outliers - Number of outlier points.\n     *\n     */\n    _sample_knn_triplets(P, nbrs, n_inliers, n_outliers) {\n        const N = nbrs.shape[0];\n        const triplets = new Matrix(N * n_inliers * n_outliers, 3);\n        for (let i = 0; i < N; ++i) {\n            let n_i = i * n_inliers * n_outliers;\n            const sort_indices = this.__argsort(P.row(i).map((d) => -d));\n            for (let j = 0; j < n_inliers; ++j) {\n                let n_j = j * n_outliers;\n                const sim = nbrs.entry(i, sort_indices[j]);\n                const samples = this._rejection_sample(n_outliers, N, sort_indices.slice(0, j + 1));\n                for (let k = 0; k < n_outliers; ++k) {\n                    const index = n_i + n_j + k;\n                    const out = samples[k];\n                    triplets.set_entry(index, 0, i);\n                    triplets.set_entry(index, 1, sim);\n                    triplets.set_entry(index, 2, out);\n                }\n            }\n        }\n        return triplets;\n    }\n\n    /**\n     * Should do the same as np.argsort()\n     * @private\n     * @param {Array} A\n     */\n    __argsort(A) {\n        return A.map((d, i) => {\n            return { d: d, i: i };\n        })\n            .sort((a, b) => a.d - b.d)\n            .map((d) => d.i);\n    }\n\n    /**\n     * Samples {@link n_samples} integers from a given interval [0, {@link max_int}] while rejection the values that are in the {@link rejects}.\n     * @private\n     * @param {*} n_samples\n     * @param {*} max_int\n     * @param {*} rejects\n     */\n    _rejection_sample(n_samples, max_int, rejects) {\n        const randomizer = this._randomizer;\n        const interval = linspace(0, max_int - 1).filter((d) => rejects.indexOf(d) < 0);\n        return randomizer.choice(interval, Math.min(n_samples, interval.length - 2));\n    }\n\n    /**\n     * Calculates the weights for the sampled nearest neighbors triplets\n     * @private\n     * @param {Matrix} triplets - Sampled Triplets.\n     * @param {Matrix} P - Pairwise similarity matrix.\n     * @param {Matrix} nbrs - nearest Neighbors\n     * @param {Float64Array} outlier_distances - Matrix of pairwise outlier distances\n     * @param {Float64Array} sig - scaling factor for the distances.\n     */\n    _find_weights(triplets, P, nbrs, outlier_distances, sig) {\n        const n_triplets = triplets.shape[0];\n        const weights = new Float64Array(n_triplets);\n        for (let t = 0; t < n_triplets; ++t) {\n            const i = triplets.entry(t, 0);\n            const sim = nbrs.row(i).indexOf(triplets.entry(t, 1));\n            const p_sim = P.entry(i, sim);\n            let p_out = Math.exp(-(outlier_distances[t] ** 2 / (sig[i] * sig[triplets.entry(t, 2)])));\n            if (p_out < 1e-20) p_out = 1e-20;\n            weights[t] = p_sim / p_out;\n        }\n        return weights;\n    }\n\n    /**\n     * Sample uniformly ranom triplets\n     * @private\n     * @param {Matrix} X - Data matrix.\n     * @param {Number} n_random - Number of random triplets per point\n     * @param {Float64Array} sig - Scaling factor for the distances\n     */\n    _sample_random_triplets(X, n_random, sig) {\n        const metric = this.parameter(\"metric\");\n        const randomizer = this._randomizer;\n        const N = X.shape[0];\n        const random_triplets = new Matrix(N * n_random, 3);\n        const random_weights = new Float64Array(N * n_random);\n        for (let i = 0; i < N; ++i) {\n            const n_i = i * n_random;\n            const indices = [...linspace(0, i - 1), ...linspace(i + 1, N - 1)];\n            for (let j = 0; j < n_random; ++j) {\n                let [sim, out] = randomizer.choice(indices, 2);\n                let p_sim = Math.exp(-(metric(X.row(i), X.row(sim)) ** 2 / (sig[i] * sig[sim])));\n                if (p_sim < 1e-20) p_sim = 1e-20;\n                let p_out = Math.exp(-(metric(X.row(i), X.row(out)) ** 2 / (sig[i] * sig[out])));\n                if (p_out < 1e-20) p_out = 1e-20;\n\n                if (p_sim < p_out) {\n                    [sim, out] = [out, sim];\n                    [p_sim, p_out] = [p_out, p_sim];\n                }\n                const index = n_i + j;\n                random_triplets.set_entry(index, 0, i);\n                random_triplets.set_entry(index, 1, sim);\n                random_triplets.set_entry(index, 2, out);\n                random_weights[index] = p_sim / p_out;\n            }\n        }\n        return {\n            random_triplets: random_triplets,\n            random_weights: random_weights,\n        };\n    }\n\n    /**\n     * Computes the gradient for updating the embedding.\n     * @param {Matrix} Y - The embedding\n     */\n    _grad(Y) {\n        const n_inliers = this.n_inliers;\n        const n_outliers = this.n_outliers;\n        const triplets = this.triplets;\n        const weights = this.weights;\n        const [N, dim] = Y.shape;\n        const n_triplets = triplets.shape[0];\n        const grad = new Matrix(N, dim, 0);\n        let y_ij = new Float64Array(dim);\n        let y_ik = new Float64Array(dim);\n        let d_ij = 1;\n        let d_ik = 1;\n        let n_viol = 0;\n        let loss = 0;\n        const n_knn_triplets = N * n_inliers * n_outliers;\n\n        for (let t = 0; t < n_triplets; ++t) {\n            const [i, j, k] = triplets.row(t);\n            // update y_ij, y_ik, d_ij, d_ik\n            if (t % n_outliers == 0 || t >= n_knn_triplets) {\n                d_ij = 1;\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_jd = Y.entry(j, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ij[d] = Y_id - Y_jd;\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ij += y_ij[d] ** 2;\n                    d_ik += y_ik[d] ** 2;\n                }\n                // update y_ik and d_ik only\n            } else {\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ik += y_ik[d] ** 2;\n                }\n            }\n\n            if (d_ij > d_ik) ++n_viol;\n            loss += weights[t] / (1 + d_ik / d_ij);\n            const w = (weights[t] / (d_ij + d_ik)) ** 2;\n            for (let d = 0; d < dim; ++d) {\n                const gs = y_ij[d] * d_ik * w;\n                const go = y_ik[d] * d_ij * w;\n                grad.set_entry(i, d, grad.entry(i, d) + gs - go);\n                grad.set_entry(j, d, grad.entry(j, d) - gs);\n                grad.set_entry(k, d, grad.entry(k, d) + go);\n            }\n        }\n        return { grad, loss, n_viol };\n    }\n\n    /**\n     *\n     * @param {Number} max_iteration\n     */\n    transform(max_iteration = 400) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n        }\n        return this.projection;\n    }\n\n    /**\n     * @param {Number} max_iteration\n     * @yields {Matrix}\n     * @returns {Matrix}\n     */\n    *generator(max_iteration = 800) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Does the iteration step.\n     * @private\n     * @param {Number} iter\n     */\n    _next(iter) {\n        const gamma = iter > 150 ? 0.5 : 0.3;\n        const old_C = this.C;\n        const vel = this.vel;\n        const Y = this.Y.add(vel.mult(gamma));\n        const { grad, loss, n_viol } = this._grad(Y);\n        this.C = loss;\n        this.Y = this._update_embedding(Y, iter, grad);\n        this.lr *= old_C > loss + this._parameters.tol ? 1.01 : 0.9;\n        return this.Y;\n    }\n\n    /**\n     * Updates the embedding.\n     * @private\n     * @param {Matrix} Y\n     * @param {Number} iter\n     * @param {Matrix} grad\n     */\n    _update_embedding(Y, iter, grad) {\n        const [N, dim] = Y.shape;\n        const gamma = iter > 150 ? 0.9 : 0.5; // moment parameter\n        const min_gain = 0.01;\n        const gain = this.gain;\n        const vel = this.vel;\n        const lr = this.lr;\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const new_gain = Math.sign(vel.entry(i, d)) != Math.sign(grad.entry(i, d)) ? gain.entry(i, d) + 0.2 : Math.max(gain.entry(i, d) * 0.8, min_gain);\n                gain.set_entry(i, d, new_gain);\n                vel.set_entry(i, d, gamma * vel.entry(i, d) - lr * gain.entry(i, d) * grad.entry(i, d));\n                Y.set_entry(i, d, Y.entry(i, d) + vel.entry(i, d));\n            }\n        }\n        return Y;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n/**\n * @class\n * @alias Hierarchical_Clustering\n */\nexport class Hierarchical_Clustering {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias Hierarchical_Clustering\n     * @todo needs restructuring.\n     * @param {Matrix} - Data or distance matrix if metric is 'precomputed'\n     * @param {(\"single\"|\"complete\"|\"average\")} [linkage = \"complete\"]\n     * @param {Function|\"precomputed\"} [metric = euclidean]\n     * @returns {Hierarchical_Clustering}\n     */\n    constructor(matrix, linkage = \"complete\", metric = euclidean) {\n        this._id = 0;\n        this._matrix = matrix instanceof Matrix ? matrix : Matrix.from(matrix);\n        this._metric = metric;\n        this._linkage = linkage;\n        if (metric === \"precomputed\" && this._matrix.shape[0] !== this._matrix.shape[1]) {\n            throw new Error(\"If metric is 'precomputed', then matrix has to be square!\");\n        }\n        this.init();\n        this.root = this.do();\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} value - value where to cut the tree.\n     * @param {(\"distance\"|\"depth\")} [type = \"distance\"] - type of value.\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters(value, type = \"distance\") {\n        let clusters = [];\n        let accessor;\n        switch (type) {\n            case \"distance\":\n                accessor = (d) => d.dist;\n                break;\n            case \"depth\":\n                accessor = (d) => d.depth;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        this._traverse(this.root, accessor, value, clusters);\n        return clusters;\n    }\n\n    /**\n     * @private\n     * @param {} node\n     * @param {*} f\n     * @param {*} value\n     * @param {*} result\n     */\n    _traverse(node, f, value, result) {\n        if (f(node) <= value) {\n            result.push(node.leaves());\n        } else {\n            this._traverse(node.left, f, value, result);\n            this._traverse(node.right, f, value, result);\n        }\n    }\n\n    /**\n     * computes the tree.\n     */\n    init() {\n        const metric = this._metric;\n        const A = this._matrix;\n        const n = (this._n = A.shape[0]);\n        const d_min = (this._d_min = new Float64Array(n));\n        let distance_matrix;\n        if (metric !== \"precomputed\") {\n            distance_matrix = new Matrix(n, n, 0); //new Array(n);\n            for (let i = 0; i < n; ++i) {\n                d_min[i] = 0;\n                //distance_matrix[i] = new Float64Array(n);\n                for (let j = 0; j < n; ++j) {\n                    distance_matrix.set_entry(i, j, i === j ? Infinity : metric(A.row(i), A.row(j)));\n                    if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        } else {\n            distance_matrix = this._matrix.clone();\n            for (let i = 0; i < n; ++i) {\n                for (let j = 0; j < n; ++j) {\n                    if (i === j) {\n                        distance_matrix.set_entry(i, j, Infinity);\n                    } else if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        }\n        this._distance_matrix = distance_matrix;\n        const clusters = (this._clusters = new Array(n));\n        const c_size = (this._c_size = new Uint16Array(n));\n        for (let i = 0; i < n; ++i) {\n            clusters[i] = [];\n            clusters[i][0] = new Cluster(this._id++, null, null, 0, A.row(i), i, 1, 0);\n            c_size[i] = 1;\n        }\n        return this;\n    }\n\n    /**\n     * computes the tree.\n     */\n    do() {\n        const n = this._n;\n        const d_min = this._d_min;\n        const D = this._distance_matrix;\n        const clusters = this._clusters;\n        const c_size = this._c_size;\n        const linkage = this._linkage;\n        let root = null;\n        for (let p = 0, p_max = n - 1; p < p_max; ++p) {\n            let c1 = 0;\n            for (let i = 0; i < n; ++i) {\n                let D_i_min = D.entry(i, d_min[i]);\n                for (let j = i + 1; j < n; ++j) {\n                    if (D_i_min > D.entry(i, j)) {\n                        d_min[i] = j;\n                        D_i_min = D.entry(i, d_min[i]);\n                    }\n                }\n            }\n            for (let i = 0; i < n; ++i) {\n                if (D.entry(i, d_min[i]) < D.entry(c1, d_min[c1])) {\n                    c1 = i;\n                }\n            }\n            let c2 = d_min[c1];\n            let c1_cluster = clusters[c1][0];\n            let c2_cluster = clusters[c2][0];\n            let c1_cluster_indices = c1_cluster.isLeaf ? [c1_cluster.index] : c1_cluster.index;\n            let c2_cluster_indices = c2_cluster.isLeaf ? [c2_cluster.index] : c2_cluster.index;\n            let indices = c1_cluster_indices.concat(c2_cluster_indices);\n            let new_cluster = new Cluster(this._id++, c1_cluster, c2_cluster, D.entry(c1, c2), null, indices);\n            c1_cluster.parent = new_cluster;\n            c2_cluster.parent = new_cluster;\n            clusters[c1].unshift(new_cluster);\n            c_size[c1] += c_size[c2];\n            for (let j = 0; j < n; ++j) {\n                const D_c1_j = D.entry(c1, j);\n                const D_c2_j = D.entry(c2, j);\n                let value;\n                switch (linkage) {\n                    case \"single\":\n                        value = Math.min(D_c1_j, D_c2_j);\n                        break;\n                    case \"complete\":\n                        value = Math.max(D_c1_j, D_c2_j);\n                        break;\n                    case \"average\":\n                        value = (c_size[c1] * D_c1_j + c_size[c2] * D_c2_j) / (c_size[c1] + c_size[j]);\n                        break;\n                }\n                D.set_entry(j, c1, value);\n                D.set_entry(c1, j, value);\n            }\n\n            D.set_entry(c1, c1, Infinity);\n            for (let i = 0; i < n; ++i) {\n                D.set_entry(i, c2, Infinity);\n                D.set_entry(c2, i, Infinity);\n            }\n\n            /* for (let j = 0; j < n; ++j) {\n                if (d_min[j] === c2) {\n                    d_min[j] = c1;\n                }\n                if (D.entry(c1, j) < D.entry(c1, d_min[c1])) {\n                    d_min[c1] = j;\n                }\n            } */\n            root = new_cluster;\n        }\n        return root;\n    }\n}\n\nclass Cluster {\n    constructor(id, left, right, dist, centroid, index, size, depth) {\n        this.id = id;\n        this.left = left;\n        this.right = right;\n        this.dist = dist;\n        this.index = index;\n        this.size = size ?? left.size + right.size;\n        this.depth = depth ?? 1 + Math.max(left.depth, right.depth);\n        this.centroid = centroid ?? this._calculate_centroid(left, right);\n        this.parent = null;\n        return this;\n    }\n\n    _calculate_centroid(left, right) {\n        const l_size = left.size;\n        const r_size = right.size;\n        const l_centroid = left.centroid;\n        const r_centroid = right.centroid;\n        const size = this.size;\n        const n = left.centroid.length;\n        const new_centroid = new Float64Array(n);\n        for (let i = 0; i < n; ++i) {\n            new_centroid[i] = (l_size * l_centroid[i] + r_size * r_centroid[i]) / size;\n        }\n        return new_centroid;\n    }\n\n    get isLeaf() {\n        return this.depth === 0;\n    }\n\n    leaves() {\n        if (this.isLeaf) return [this];\n        const left = this.left;\n        const right = this.right;\n        return (left.isLeaf ? [left] : left.leaves()).concat(right.isLeaf ? [right] : right.leaves());\n    }\n\n    descendants() {\n        if (this.isLeaf) return [this];\n        const left_descendants = this.left.descendants();\n        const right_descendants = this.right.descendants();\n        return left_descendants.concat(right_descendants).concat([this]);\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { linspace } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KMeans\n */\nexport class KMeans {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMeans\n     * @todo needs restructuring. \n     * @param {Matrix} matrix \n     * @param {Numbers} K \n     * @param {Function} [metric = euclidean] \n     * @param {Number} [seed = 1987]\n     * @param {Boolean} [init = true]\n     * @returns {KMeans}\n     */\n    constructor(matrix, K, metric = euclidean, seed=1987, init = true) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_centroids = this._get_random_centroids(K);\n        if (init) this.init(K, this._cluster_centroids);\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const clusters = this._clusters;\n        const result = new Array(K).fill().map(() => new Array());\n        clusters.forEach((c, i) => result[c].push(i));\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Array} points \n     * @param {Array} candidates \n     */\n    _furthest_point(points, candidates) {\n        const A = this._matrix;\n        const metric = this._metric;\n        let i = points.length;\n        let H = Heap.heapify(\n            candidates, \n            (d) => {\n                const Ad = A.row(d)\n                let sum = 0;\n                for (let j = 0; j < i; ++j) {\n                    sum += metric(Ad, points[j])\n                }\n                return sum;\n            }, \n            \"max\"\n        )\n        return H.pop().element;\n    }\n\n    _get_random_centroids(K) {\n        const N = this._N;\n        const randomizer = this._randomizer;\n        const A = this._matrix;\n        const cluster_centroids = new Array(K).fill()\n        const indices = linspace(0, N - 1);\n        const random_point = randomizer.random_int % (N - 1);\n        cluster_centroids[0] = A.row(random_point);\n        const init_points = [random_point];\n        const sample_size = Math.floor((N - K) / K);// / K\n        for (let i = 1; i < K; ++i) {\n            // sampling + kmeans++ improvement?\n            const sample = randomizer.choice(indices.filter(d => init_points.indexOf(d) == -1), sample_size);\n            const furthest_point = this._furthest_point(cluster_centroids.slice(0, i), sample);\n            init_points.push(furthest_point);\n            cluster_centroids[i] = A.row(furthest_point);\n        }\n        return cluster_centroids;\n    }\n\n    _iteration(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const metric = this._metric;\n        const clusters = this._clusters;\n        let clusters_changed = false;\n        // find nearest cluster centroid.\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i)\n            let min_dist = Infinity;\n            let min_cluster = null;\n            for (let j = 0; j < K; ++j) {\n                let d = metric(cluster_centroids[j], Ai);\n                if (d < min_dist) {\n                    min_dist = d;\n                    min_cluster = j; \n                }\n            }\n            if (clusters[i] !== min_cluster) {\n                clusters_changed = true;\n            }\n            clusters[i] = min_cluster;\n        }\n        // update cluster centroid\n        // reset cluster centroids to 0\n        for (let i = 0; i < K; ++i) {\n            const centroid = cluster_centroids[i];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] = 0;\n            }\n        }\n        // compute centroid\n        this._compute_centroid(cluster_centroids);\n\n        return {   \n            \"clusters_changed\": clusters_changed,\n            \"cluster_centroids\": cluster_centroids\n        };\n    }\n\n    _compute_centroid(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const clusters = this._clusters;\n        const cluster_counter = new Array(K).fill(0);\n\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i);\n            const ci = clusters[i];\n            cluster_counter[ci]++;\n            const centroid = cluster_centroids[ci];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] += Ai[j];\n            }\n        }\n        for (let i = 0; i < K; ++i) {\n            const n = cluster_counter[i];\n            cluster_centroids[i] = cluster_centroids[i].map(c => c / n);\n        }\n        \n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_centroids) {\n        if (!K) K = this._K;\n        if (!cluster_centroids) cluster_centroids = this._get_random_centroids(K);\n        let clusters_changed = false;\n        do {\n            const iteration_result = this._iteration(cluster_centroids)\n            cluster_centroids = iteration_result.cluster_centroids;\n            clusters_changed = iteration_result.clusters_changed;\n        } while (clusters_changed)\n    }\n    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { linspace, Matrix } from \"../matrix/index.js\";\nimport { min } from \"../util/index.js\";\n/**\n * @class\n * @alias KMedoids\n */\nexport class KMedoids {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMedoids\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - data matrix\n     * @param {Numbers} K - number of clusters\n     * @param {number} [max_iter=null] - maximum number of iterations. Default is 10 * Math.log10(N)\n     * @param {Function} [metric = euclidean] - metric defining the dissimilarity \n     * @param {Number} [seed = 1212] - seed value for random number generator\n     * @returns {KMedoids}\n     * @see {@link https://link.springer.com/chapter/10.1007/978-3-030-32047-8_16} Faster k-Medoids Clustering: Improving the PAM, CLARA, and CLARANS Algorithms\n     */\n    constructor(matrix, K, max_iter=null, metric = euclidean, seed=1212) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._A = this._matrix.to2dArray;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        this._max_iter = max_iter || 10 * Math.log10(N) \n        this._distance_matrix = new Matrix(N, N, \"zeros\");\n        /* for (let i = 1; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dist = metric(this._A[i], this._A[j]);\n                this._distance_matrix.set_entry(i, j, dist);\n                this._distance_matrix.set_entry(j, i, dist)\n            }\n        } */\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_medoids = this._get_random_medoids(K);\n        //if (init) this.init(K, this._cluster_medoids);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const A = this._A;\n        if (!this._is_initialized) {\n            this.init(K, this._cluster_medoids);\n        }\n        const result = new Array(K).fill().map(() => new Array());\n        A.forEach((x_j, j) => {\n            result[this._nearest_medoid(x_j, j).index_nearest].push(j);\n        })\n        result.medoids = this._cluster_medoids;\n        return result;\n    }\n\n    async* generator() {\n        const max_iter = this._max_iter;\n        yield this.get_clusters()\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n            yield this.get_clusters();\n        } while (!finish && ++i < max_iter)\n    }\n\n    /**\n     * Algorithm 1. FastPAM1: Improved SWAP algorithm\n     */\n    /* _iteration_1() {\n        const A = this._A;\n        const N = this._N;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        let DeltaTD = 0;\n        let m0 = null;\n        let x0 = null;\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const nearest_medoid = this._nearest_medoid(x_j, j);\n                const d_j = nearest_medoid.distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    // disance to new medoid\n                    const d_oj = this._get_distance(o, j, x_o, x_j);\n                    const {\n                        \"index_nearest\": n,\n                        \"distance_nearest\": d_n,\n                        \"distance_second\": d_s,\n                    } = this._nearest_medoid(x_o, o); \n                    this._clusters[o] = n; // cached values\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change\n                    if (d_oj < d_n) { // reassignment check\n                        deltaTD.forEach((d_i, i) => {\n                            if (n !== i) {\n                                deltaTD[i] = d_i + d_oj - d_n; // update loss change\n                            }\n                        });\n                    }\n                });\n                // choose best medoid i;\n                const i = deltaTD\n                    .map((d, i) => [d, i])\n                    .sort((d1, d2) => d1[0] - d2[0])[0][1];\n                const deltaTD_i = deltaTD[i];\n                // store\n                if (deltaTD_i < DeltaTD) {\n                    DeltaTD = deltaTD_i;\n                    m0 = i;\n                    x0 = j;\n                }\n            }\n        });\n\n        if (DeltaTD >= 0) {\n            return true // break loop if DeltaTD >= 0\n        }\n        // swap roles of medoid m and non-medoid x;\n        medoids[m0] = x0;\n        this._cluster_medoids = medoids;\n        return false\n    } */\n\n    /** Algorithm 2. FastPAM2: SWAP with multiple candidates\n     * \n     */\n    _iteration() {\n        const A = this._A;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        const cache = A.map((x_o, o) => this._nearest_medoid(x_o, o));\n        // empty best candidates array\n        const DeltaTD = new Array(K).fill(0);\n        const xs = new Array(K).fill(null);\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const d_j = cache[j].distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    if (j === o) return;\n                    const d_oj = this._get_distance(o, j, x_o, x_j); // distance to new medoid\n                    const {\"index_nearest\": n, \"distance_nearest\": d_n, \"distance_second\": d_s} = cache[o]; // cached\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change for x_o\n                    // Reassignment check\n                    if (d_oj < d_n) { \n                        // update loss change\n                        for (let i = 0; i < K; ++i) {\n                            if (i !== n) deltaTD[i] += d_oj - d_n;\n                        }\n                    }\n                });\n                // remember best swap for i;\n                deltaTD\n                    .map((d, i) => [d, i])\n                    .filter(([d, i]) => d < DeltaTD[i])\n                    .forEach(([d, i]) => {\n                        if (d < DeltaTD[i]) {\n                            DeltaTD[i] = d;\n                            xs[i] = j;\n                        }\n                    })\n            }\n        })\n        // stop if no improvements were found\n        if (min(DeltaTD) >= 0) return true; \n\n        // execute all improvements\n        while (min(DeltaTD) < 0) {\n            // swap roles of medoid m_i and non_medoid xs_i\n            const i = DeltaTD\n                .map((d, i) => [d, i])\n                .sort(([a], [b]) => a - b)[0][1];\n            if (medoids.filter(m => m == xs[i]).length == 0) {\n                medoids[i] = xs[i];\n            }\n            // disable the swap just performed\n            DeltaTD[i] = 0; \n            // recompute TD for remaining swap candidates\n            DeltaTD\n                .map((d_j, j) => [d_j, j])\n                .filter(([d_j]) => d_j < 0)\n                .forEach(([_, j]) => {\n                    const x_j = A[j];\n                    let sum = 0;\n                    A.forEach((x_o, o) => {\n                        if (medoids.findIndex(m => m != j && m == o) >= 0) return;\n                        if (i == j) return;\n                        if (cache[o].index_nearest === medoids[j])\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j), cache[o].distance_second) - cache[o].distance_nearest); \n                        else {\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j) - cache[o].distance_nearest, 0));\n                        }\n                    });\n                    DeltaTD[j] = sum;\n                })\n        }\n        this._cluster_medoids = medoids;\n        return false;\n    }\n\n    _get_distance(i, j, x_i=null, x_j=null) {\n        if (i === j) return 0;\n        const D = this._distance_matrix;\n        const A = this._A;\n        const metric = this._metric;\n        let d_ij = D.entry(i, j);\n        if (d_ij === 0) {\n            d_ij = metric(x_i || A[i], x_j || A[j]);\n            D.set_entry(i, j, d_ij);\n            D.set_entry(j, i, d_ij);\n        }\n        return d_ij;\n    }\n\n    _nearest_medoid(x_j, j) {\n        const medoids = this._cluster_medoids;\n        const A = this._A;\n        const [nearest, second] = medoids\n            .map((m, i) => {\n                const x_m = A[m]; \n                return [this._get_distance(j, m, x_j, x_m), i];\n            })\n            .sort((m1, m2) => m1[0] - m2[0]);\n        \n        return { \n            \"distance_nearest\": nearest[0], \n            \"index_nearest\": nearest[1],\n            \"distance_second\": second[0],\n            \"index_second\": second[1],\n        };\n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_medoids) {\n        if (!K) K = this._K;\n        if (!cluster_medoids) cluster_medoids = this._get_random_medoids(K);\n        const max_iter = this._max_iter;\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n        } while (!finish && ++i < max_iter)\n        return this;\n    }\n\n    /**\n     * Algorithm 3. FastPAM LAB: Linear Approximate BUILD initialization.\n     * @param {number} K - number of clusters\n     * \n     */\n    _get_random_medoids(K) {\n        const N = this._N;\n        const A = this._A;\n        const indices = linspace(0, N - 1);\n        const randomizer = this._randomizer;\n        const n = Math.min(N, 10 + Math.ceil(Math.sqrt(N)));\n        const TD = new Array(n).fill(Infinity);\n        const medoids = [];\n        // first medoid\n        let TD0 = Infinity;\n        let S = randomizer.choice(indices, n);\n        for (let j = 0; j < n; ++j) {\n            const S_j = S[j];\n            const x_j = A[S_j];\n            for (let o = 0; o < n; ++o) {\n                if (o === j) continue;\n                const x_o = A[S[o]];\n                TD[j] += this._get_distance(j, o, x_j, x_o);\n            }\n            if (TD[j] < TD0) {\n                TD0 = TD[j]; // smallest distance sum\n                medoids.push(S_j);\n            }\n        }\n        // other medoids\n        for (let i = 1; i < K; ++i) {\n            let DeltaTD = Infinity;\n            S = randomizer.choice(indices.filter(index => medoids.findIndex(d => d === index) < 0), n);\n            for (let j = 0; j < n; ++j) {\n                let deltaTD = 0;\n                const S_j = S[j];\n                const x_j = A[S_j];\n                for (let o = 0; o < n; ++o) {\n                    if (o === j) continue;\n                    const S_o = S[o];\n                    const x_o = A[S_o];\n                    let delta = this._get_distance(S_j, S_o, x_j, x_o) - min(medoids.map(m => this._get_distance(S_o, m, x_o)));\n                    if (delta < 0) {\n                        deltaTD = deltaTD + delta;\n                    }\n                }\n                // best reduction\n                if (deltaTD < DeltaTD) {\n                    DeltaTD = deltaTD;\n                    medoids.push(S_j);\n                }\n            }\n            TD0 += DeltaTD;\n        }\n        return medoids.slice(0, K);\n    }\n    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias OPTICS\n */\nexport class OPTICS {\n    /**\n     * **O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure.\n     * @constructor\n     * @memberof module:clustering\n     * @alias OPTICS\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - the data.\n     * @param {Number} epsilon - the minimum distance which defines whether a point is a neighbor or not.\n     * @param {Number} min_points - the minimum number of points which a point needs to create a cluster. (Should be higher than 1, else each point creates a cluster.)\n     * @param {Function} [metric = euclidean] - the distance metric which defines the distance between two points of the {@link matrix}.\n     * @returns {OPTICS}\n     * @see {@link https://www.dbs.ifi.lmu.de/Publikationen/Papers/OPTICS.pdf}\n     * @see {@link https://en.wikipedia.org/wiki/OPTICS_algorithm}\n     */\n    constructor(matrix, epsilon, min_points, metric = euclidean) {\n        this._matrix = matrix;\n        this._epsilon = epsilon;\n        this._min_points = min_points;\n        this._metric = metric;\n\n        this._ordered_list = [];\n        this._clusters = [];\n        this._DB = new Array(matrix.shape[0]).fill();\n        this.init();\n        return this;\n    }\n\n    /**\n     * Computes the clustering.\n     */\n    init() {\n        const ordered_list = this._ordered_list;\n        const matrix = this._matrix;\n        const N = matrix.shape[0];\n        const DB = this._DB;\n        const clusters = this._clusters;\n        let cluster_index = this._cluster_index = 0;\n\n        for (let i = 0; i < N; ++i) {\n            DB[i] = {\n                \"element\": matrix.row(i),\n                \"index\": i,\n                \"reachability_distance\": undefined,\n                \"processed\": false,\n            }\n        }\n        for (const p of DB) {\n            if (p.processed) continue;\n            p.neighbors = this._get_neighbors(p);\n            p.processed = true;\n            clusters.push([p.index])\n            cluster_index = clusters.length - 1;\n            ordered_list.push(p);\n            if (this._core_distance(p) != undefined) {\n                const seeds = new Heap(null, d => d.reachability_distance, \"min\")\n                this._update(p, seeds);\n                this._expand_cluster(seeds, clusters[cluster_index]);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Array} An array consisting of the {@link epsilon}-neighborhood of {@link p}.\n     */\n    _get_neighbors(p) {\n        if (\"neighbors\" in p) return p.neighbors;\n        const DB = this._DB;\n        const metric = this._metric;\n        const epsilon = this._epsilon;\n        const neighbors = [];\n        for (const q of DB) {\n            if (q.index == p.index) continue;\n            if (metric(p.element, q.element) < epsilon) {\n                neighbors.push(q);\n            }\n        }\n        return neighbors;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Number} The distance to the {@link min_points}-th nearest point of {@link p}, or undefined if the {@link epsilon}-neighborhood has fewer elements than {@link min_points}.\n     */\n    _core_distance(p) {\n        const min_points = this._min_points;\n        const metric = this._metric;\n        if (p.neighbors && p.neighbors.length <= min_points) {\n            return undefined;\n        }\n        return metric(p.element, p.neighbors[min_points].element);\n    }\n\n    /**\n     * Updates the reachability distance of the points.\n     * @private\n     * @param {Object} p \n     * @param {Heap} seeds \n     */\n    _update(p, seeds) {\n        const metric = this._metric;\n        const core_distance = this._core_distance(p);\n        const neighbors = this._get_neighbors(p);//p.neighbors;\n        for (const q of neighbors) {\n            if (q.processed) continue;\n            const new_reachability_distance = Math.max(core_distance, metric(p.element, q.element));\n            //if (q.reachability_distance == undefined) { // q is not in seeds\n            if (seeds.raw_data().findIndex(d => d.element == q) < 0) {\n                q.reachability_distance = new_reachability_distance;\n                seeds.push(q);\n            } else { // q is in seeds\n                if (new_reachability_distance < q.reachability_distance) {\n                    q.reachability_distance = new_reachability_distance;\n                    seeds = Heap.heapify(seeds.data(), d => d.reachability_distance, \"min\"); // seeds change key =/\n                }\n            }\n        }\n    }\n\n    /**\n     * Expands the {@link cluster} with points in {@link seeds}.\n     * @private\n     * @param {Heap} seeds \n     * @param {Array} cluster \n     */\n    _expand_cluster(seeds, cluster) {\n        const ordered_list = this._ordered_list;\n        while (!seeds.empty) {\n            const q = seeds.pop().element;\n            q.neighbors = this._get_neighbors(q);\n            q.processed = true;\n            cluster.push(q.index);\n            ordered_list.push(q);\n            if (this._core_distance(q) != undefined) {\n                this._update(q, seeds);\n                this._expand_cluster(seeds, cluster);\n            }\n        }\n    }\n\n    /**\n     * Returns an array of clusters.\n     * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters() {\n        const clusters = [];\n        const outliers = [];\n        const min_points = this._min_points;\n        for (const cluster of this._clusters) {\n            if (cluster.length < min_points) {\n                outliers.push(...cluster);\n            } else {\n                clusters.push(cluster);\n            }\n        }\n        clusters.push(outliers);\n        return clusters;\n    }\n\n    /**\n     * @returns {Array} Returns an array, where the ith entry defines the cluster affirmation of the ith point of {@link matrix}. (-1 stands for outlier)\n     */\n    get_cluster_affirmation() {\n        const N = this._matrix.shape[0];\n        const result = new Array(N).fill();\n        const clusters = this.get_clusters();\n        for (let i = 0, n = clusters.length; i < n; ++i) {\n            const cluster = clusters[i]\n            for (const index of cluster) {\n                result[index] = (i < n - 1) ? i : -1;\n            }\n        }\n        return result;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\nimport { MDS } from \"./MDS.js\";\nimport { KMedoids } from \"../clustering/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\n/**\n * @class\n * @alias LSP\n * @extends DR\n */\nexport class LSP extends DR {\n    /**\n     * Least Squares Projection.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LSP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.neighbors = Math.max(Math.floor(N / 10), 2)] - number of neighbors to consider.\n     * @param {Number} [parameters.control_points = Math.ceil(Math.sqrt(N))] - number of controlpoints\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {LSP}\n     * @see {@link https://ieeexplore.ieee.org/document/4378370}\n     * @todo accept precomputed distance matrix.\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, control_points: undefined, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        this.parameter(\"control_points\", Math.min(parameters.control_points ?? Math.ceil(Math.sqrt(this._N)), this._N - 1));\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     *\n     * @param {DR} DR - method used for position control points.\n     * @param {Object} DR_parameters - Object containing parameters for the DR method which projects the control points\n     * @returns {LSP}\n     */\n    init(DR = MDS, DR_parameters = {}, KNN = BallTree) {\n        if (this._is_initialized) return this;\n        const X = this.X;\n        const N = this._N;\n        const K = this.parameter(\"neighbors\");\n        const d = this.parameter(\"d\");\n        const seed = this.parameter(\"seed\");\n        const metric = this.parameter(\"metric\");\n        DR_parameters = Object.assign({d, metric, seed }, DR_parameters);\n        const nc = this.parameter(\"control_points\");\n        const control_points = new KMedoids(X, nc, null, metric).get_clusters().medoids;\n        const C = new Matrix(nc, N, \"zeros\");\n        control_points.forEach((c_i, i) => {\n            C.set_entry(i, c_i, 1);\n        });\n        const Y_C = new DR(Matrix.from(control_points.map((c_i) => X.row(c_i))), DR_parameters).transform();\n\n        const XA = X.to2dArray;\n        const knn = new KNN(XA, metric);\n        const L = new Matrix(N, N, \"I\");\n        const alpha = -1 / K;\n        XA.forEach((x_i, i) => {\n            for (const { index: j } of knn.search(x_i, K).iterate()) {\n                if (i === j) continue;\n                L.set_entry(i, j, alpha);\n            }\n        });\n        const A = L.concat(C, \"vertical\");\n\n        const z = new Matrix(N, d, \"zeros\");\n        const b = z.concat(Y_C, \"vertical\");\n\n        this._A = A;\n        this._b = b;\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const A = this._A;\n        const AT = A.T;\n        const b = this._b;\n        const ATA = AT.dot(A);\n        const ATb = AT.dot(b);\n        this.Y = Matrix.solve_CG(ATA, ATb, this._randomizer);\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { DisjointSet } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias TopoMap\n * @memberof module:dimensionality_reduction\n * @extends DR\n */\nexport class TopoMap extends DR {\n    /**\n     * TopoMap: A 0-dimensional Homology Preserving Projection of High-Dimensional Data.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TopoMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TopoMap}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._distance_matrix = new Matrix(this._N, this._N, 0);\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    __lazy_distance_matrix(i, j, metric) {\n        const D = this._distance_matrix;\n        const X = this.X;\n        const D_ij = D.entry(i, j);\n        if (D_ij === 0) {\n            let dist = metric(X.row(i), X.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n            return dist;\n        }\n        return D_ij;\n    }\n\n    /**\n     * Computes the minimum spanning tree, using a given metric\n     * @private\n     * @param {Function} metric\n     * @see {@link https://en.wikipedia.org/wiki/Kruskal%27s_algorithm}\n     */\n    _make_minimum_spanning_tree(metric = euclidean) {\n        const N = this._N;\n        const X = [...this.X];\n\n        let disjoint_set = new DisjointSet(X);\n        const F = [];\n        let E = [];\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                E.push([i, j, this.__lazy_distance_matrix(i, j, metric)]);\n            }\n        }\n        E = E.sort((a, b) => a[2] - b[2]);\n\n        for (const [u, v, w] of E) {\n            const set_u = disjoint_set.find(X[u]);\n            const set_v = disjoint_set.find(X[v]);\n            if (set_u !== set_v) {\n                F.push([u, v, w]);\n                disjoint_set.union(set_u, set_v);\n            }\n        }\n\n        return F.sort((a, b) => a[2] - b[2]);\n    }\n\n    /**\n     * initializes TopoMap. Sets all projcted points to zero, and computes a minimum spanning tree.\n     */\n    init() {\n        const { metric} = this._parameters\n        this.Y = new Matrix(this._N, 2, 0);\n        this._Emst = this._make_minimum_spanning_tree(metric);\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Returns true if Point C is left of line AB.\n     * @private\n     * @param {Array} PointA - Point A of line AB\n     * @param {Array} PointB - Point B of line AB\n     * @param {Array} PointC - Point C\n     * @returns {Boolean}\n     */\n    __hull_cross([ax, ay], [bx, by], [sx, sy]) {\n        return (bx - ax) * (sy - ay) - (by - ay) * (sx - ax) <= 0;\n    }\n\n    /**\n     * Computes the convex hull of the set of Points S\n     * @private\n     * @param {Array} S - Set of Points.\n     * @see {@link https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript}\n     * @returns {Array} convex hull of S. Starts at the bottom-most point and continues counter-clockwise.\n     */\n    __hull(S) {\n        const points = S.sort(([x1, y1], [x2, y2]) => y1 - y2 || x1 - x2);\n        const N = points.length;\n        if (N <= 2) return points;\n\n        const lower = [];\n        for (let i = 0; i < N; ++i) {\n            while (lower.length >= 2 && this.__hull_cross(lower[lower.length - 2], lower[lower.length - 1], points[i])) {\n                lower.pop();\n            }\n            lower.push(points[i]);\n        }\n        const upper = [];\n        for (let i = N - 1; i >= 0; --i) {\n            while (upper.length >= 2 && this.__hull_cross(upper[upper.length - 2], upper[upper.length - 1], points[i])) {\n                upper.pop();\n            }\n            upper.push(points[i]);\n        }\n        upper.pop();\n        lower.pop();\n        return lower.concat(upper);\n    }\n\n    /**\n     * Finds the angle to rotate Point A and B to lie on a line parallel to the x-axis.\n     * @private\n     * @param {Array} PointA\n     * @param {Array} PointB\n     * @return {Object} Object containing the sinus- and cosinus-values for a rotation.\n     */\n    __findAngle([p1x, p1y], [p2x, p2y]) {\n        const n = euclidean([p1x, p1y], [p2x, p2y]);\n        if (n === 0)\n            return {\n                sin: 0,\n                cos: 1,\n            };\n        const vec = [(p2x - p1x) / n, (p2y - p1y) / n];\n        const cos = vec[0];\n        let sin = Math.sqrt(1 - cos * cos);\n        sin = vec[1] >= 0 ? -sin : sin;\n        return {\n            sin: sin,\n            cos: cos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Array} hull\n     * @param {Array} p\n     * @param {Bool} topEdge\n     */\n    __align_hull(hull, p, topEdge) {\n        let v = -1;\n        let d2;\n        for (let i = 0; i < hull.length; ++i) {\n            const d = euclidean(hull[i], p);\n            if (v === -1) {\n                d2 = d;\n                v = i;\n            } else {\n                if (d2 > d) {\n                    d2 = d;\n                    v = i;\n                }\n            }\n        }\n\n        let v1;\n        let v2;\n        if (topEdge) {\n            v1 = hull[v];\n            v2 = hull[(v + 1) % hull.length];\n        } else {\n            if (v == 0) v = hull.length - 1;\n            v1 = hull[v];\n            v2 = hull[(v - 1) % hull.length];\n        }\n\n        const transformation = {\n            tx: -hull[v][0],\n            ty: -hull[v][1],\n        };\n\n        if (hull.length >= 2) {\n            const { sin, cos } = this.__findAngle(v1, v2);\n            transformation.sin = sin;\n            transformation.cos = cos;\n        } else {\n            transformation.sin = 0;\n            transformation.cos = 1;\n        }\n\n        return transformation;\n    }\n\n    /**\n     * @private\n     * @param {Array} Point - The point which should get transformed.\n     * @param {Object} Transformation - contains the values for translation and rotation.\n     */\n    __transform([px, py], { tx, ty, sin, cos }) {\n        let x = px + tx;\n        let y = py + ty;\n        let xx = x * cos - y * sin;\n        let yy = x * sin + y * cos;\n        return [xx, yy];\n    }\n\n    /**\n     * Calls {@link __transform} for each point in Set C\n     * @private\n     * @param {Array} C - Set of points.\n     * @param {Object} t - Transform object.\n     * @param {Number} yOffset - value to offset set C.\n     */\n    __transform_component(C, t, yOffset) {\n        const N = C.length;\n        for (let i = 0; i < N; ++i) {\n            const c = C[i];\n            const [cx, cy] = this.__transform(c, t);\n            c[0] = cx;\n            c[1] = cy + yOffset;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Array} u - point u\n     * @param {Array} v - point v\n     * @param {Number} w - edge weight w\n     */\n    __align_components(u, v, w) {\n        const points_u = [...u.__disjoint_set.children];\n        const points_v = [...v.__disjoint_set.children];\n\n        const hull_u = this.__hull(points_u);\n        const hull_v = this.__hull(points_v);\n\n        const t_u = this.__align_hull(hull_u, u, false);\n        const t_v = this.__align_hull(hull_v, v, true);\n\n        this.__transform_component(points_u, t_u, 0);\n        this.__transform_component(points_v, t_v, w);\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality 2.\n     */\n    transform() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n        }\n        return this.projection;\n    }\n\n    *generator() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA, MDS } from \"./index.js\";\nimport { distance_matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias SAMMON\n * @extends DR\n */\nexport class SAMMON extends DR {\n    /**\n     * SAMMON's Mapping\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias SAMMON\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {\"PCA\"|\"MDS\"|\"random\"} [parameters.init = \"random\"] - Either \"PCA\" or \"MDS\", with which SAMMON initialiates the projection. With \"random\" a random matrix gets used as starting point.\n     * @param {Object} [parameters.init_parameters] - Parameters for the {@link init}-DR method.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {SAMMON}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { magic: 0.1, d: 2, metric: euclidean, seed: 1212, init_DR: \"random\", init_parameters: {} }, parameters);\n        return this;\n    }\n\n    /**\n     * initializes the projection.\n     * @private\n     */\n    init() {\n        const N = this.X.shape[0];\n        const { d, metric, init_DR: init_DR, init_parameters: DR_parameters } = this._parameters;\n        if (init_DR === \"random\") {\n            const randomizer = this._randomizer;\n            this.Y = new Matrix(N, d, () => randomizer.random);\n        } else if ([\"PCA\", \"MDS\"].includes(init_DR)) {\n            this.Y = Matrix.from(init_DR == \"PCA\" ? PCA.transform(this.X, DR_parameters) : MDS.transform(this.X, DR_parameters));\n        } else {\n            throw new Error('init_DR needs to be either \"random\" or a DR method!')\n        }\n        this.distance_matrix = metric == \"precomputed\" ? Matrix.from(this.X) : distance_matrix(this.X, metric);\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Matrix|Array} - The projection of {@link X}.\n     */\n    transform(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n        }\n        return this.projection;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Generator} - A generator yielding the intermediate steps of the projection of {@link X}.\n     */\n    *generator(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n            yield this.projection;\n        }\n\n        return this.projection;\n    }\n\n    _step() {\n        const MAGIC = this.parameter(\"magic\");\n        const D = this.distance_matrix;\n        const N = this.X.shape[0];\n        const { d, metric } = this._parameters;\n        let Y = this.Y;\n\n        let G = new Matrix(N, d, 0);\n\n        let sum = new Float64Array(d);\n        for (let i = 0; i < N; ++i) {\n            let e1 = new Float64Array(d);\n            let e2 = new Float64Array(d);\n            const Yi = Y.row(i);\n            for (let j = 0; j < N; ++j) {\n                if (i === j) continue;\n                const Yj = Y.row(j);\n                const delta = new Float64Array(d);\n                for (let k = 0; k < d; ++k) {\n                    delta[k] = Yi[k] - Yj[k];\n                }\n                const dY = metric(Yi, Yj);\n                const dX = D.entry(i, j);\n                const dq = dX - dY;\n                const dr = Math.max(dX * dY, 1e-2);\n                for (let k = 0; k < d; ++k) {\n                    e1[k] += (delta[k] * dq) / dr;\n                    e2[k] += (dq - (Math.pow(delta[k], 2) * (1 + dq / dY)) / dY) / dr;\n                }\n            }\n            for (let k = 0; k < d; ++k) {\n                const val = Y.entry(i, k) + ((MAGIC * e1[k]) / Math.abs(e2[k]) || 0);\n                G.set_entry(i, k, val);\n                sum[k] += val;\n            }\n        }\n        for (let k = 0; k < d; ++k) {\n            sum[k] /= N;\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let k = 0; k < d; ++k) {\n                Y.set_entry(i, k, G.entry(i, k) - sum[k]);\n            }\n        }\n        return Y;\n    }\n}\n"],"names":["a","b","Math","sqrt","euclidean_squared","summands","y","t","n","length","sum","compensation","i","summand","abs","s","Array","x","neumair_sum","sum_a","sum_b","acos","res","push","max","num_non_zero","num_equal","disagree","num_not_equal","num_true_true","num_true_false","num_false_true","A","k","metric","euclidean","rows","shape","D","distance_matrix","nN","row","from","map","distance","col","j","sort","slice","Matrix","A_i","dist","set_entry","start","end","number","round","result","v","vector","cols","Error","Float64Array","v_norm","norm","value","Q","R","q","q_dot_v","q_","v_","clone","x_norm","x0","entry","rho","sign","u1","u","divide","beta","u_outer_u","outer","R_block","get_block","new_R","sub","dot","mult","Q_block","new_Q","set_block","seed","max_iterations","qr","qr_gramschmidt","tol","randomizer","Randomizer","random","oldQ","QR","values","eigenvalues","diag","eigenvectors","transpose","to2dArray","N","constructor","this","_rows","_cols","_data","static","type","isArray","m","_","data","subarray","iterate_rows","Symbol","iterator","set_row","offset","result_col","T","inverse","B","h","i_max","max_val","Infinity","val","h_val","i_val","f","B_row_row","B_i_j","join","I","B_i","C","e","l","concat","rows_A","cols_A","rows_B","cols_B","X","offset_row","offset_col","start_row","start_col","end_row","end_col","new_row","new_col","gather","row_indices","col_indices","row_index","col_index","_apply_array","_apply_rowwise_array","_apply_colwise_array","_apply","value_rows","value_cols","add","asArray","min_row_col","min","mean","meanRows","meanCols","b_i","r","d","z","alpha","r_next","L","U","LU","L_diag","U_diag","det","M","MT","MtM","MMt","V","Sigma","simultaneous_poweriteration","sigma","_seed","_N","_M","_MATRIX_A","_UPPER_MASK","_LOWER_MASK","_mt","_mti","Date","getTime","mt","mti","random_int","mag01","kk","N_M","M_N","choice","sample","index_list","linspace","random_index","splice","undefined","Heap","elements","accessor","comparator","heapify","_accessor","_container","_comparator","heap","container","element","floor","_heapify_down","_swap","index_a","index_b","_heapify_up","index","parentIndex","node","start_index","left","right","pop","item","first","iterate","toArray","raw_data","empty","DisjointSet","_list","Set","make_set","list","has","__disjoint_set","parent","children","size","find","union","node_x","node_y","forEach","BallTree","_Node","pivot","child1","child2","radius","_Leaf","points","_metric","_root","_construct","c","_greatest_spread","sorted_elements","p_index","p","spread","reduce","acc","current","search","_search","KNN","_elements","_D","distances","H","nearest_element_index","nearest_dist","Number","isInteger","DR","default_parameters","parameters","_parameters","Object","assign","seal","_type","_randomizer","_is_initialized","parameter","name","hasOwnProperty","para","transform","check_init","projection","generator","init","Y","async","args","PCA","super","eig_args","principal_components","means","X_cent","MDS","ai_","a_j","a__","_d_X","stress","d_X","d_Y","top_sum","bottom_sum","pow","ISOMAP","neighbors","kNearestNeighbors","G","other","FASTMAP","_choose_distant_objects","a_index","b_index","max_dist","d_ai","d_bi","_col","old_dist","d_ab","y_i","LDA","labels","unique_labels","label_id","count","id","X_mean","V_mean","label","v_mean","S_b","S_w","row_v","LLE","k_nearest_neighbors","O","W","nN_row","Z","C_trace","w","solve_CG","IW","LTSA","I_i","X_i","g","G_i_t","W_i","TSNE","perplexity","epsilon","_iter","Htarget","log","Delta","druid","P","_ystep","_gains","prow","betamin","betamax","done","num","psum","pj","exp","Hhere","Pout","N2","_P","iterations","next","iter","ystep","gains","dim","pmul","Qu","qsum","dsum","dhere","qu","grad","premult","ymean","gid","sid","gainid","newgain","newsid","max_iter","pfx","fx","convergence","fxi","dx","UMAP","n_neighbors","local_connectivity","min_dist","_spread","_set_op_mix_ratio","_repulsion_strength","_negative_sample_rate","_n_epochs","_initial_alpha","_find_ab_params","xv","yv","xv_i","powell","error","_compute_membership_strengths","sigmas","rhos","_smooth_knn_dist","knn","SMOOTH_K_TOLERANCE","MIN_K_DIST_SCALE","target","log2","reverse","x_i","lo","hi","mid","search_result","non_zero_dist","filter","non_zero_dist_length","interpolation","mean_ithd","mean_d","_fuzzy_simplicial_set","distances_i","transposed_result","prod_matrix","_make_epochs_per_sample","n_epochs","weights","_weights","Float32Array","fill","weights_max","n_samples","_tocoo","graph","rows_n","cols_n","_a","_b","_graph","_head","_tail","_epochs_per_sample","_epochs_per_negative_sample","_epoch_of_next_sample","_epoch_of_next_negative_sample","_clip","_optimize_layout","head_embedding","tail_embedding","head","tail","_alpha","epochs_per_sample","epochs_per_negative_sample","epoch_of_next_negative_sample","epoch_of_next_sample","clip","tail_length","grad_coeff","grad_d","o","n_neg_samples","TriMap","weight_adj","pca","n_inliers","n_outliers","n_random","triplets","_generate_triplets","lr","vel","gain","n_extra","nbrs","knn_distances","sig","_find_p","_sample_knn_triplets","n_triplets","outlier_distances","_find_weights","random_triplets","random_weights","_sample_random_triplets","max_weight","isNaN","max_weight_2","n_i","sort_indices","__argsort","n_j","sim","samples","_rejection_sample","out","max_int","rejects","interval","indexOf","p_sim","p_out","indices","_grad","y_ij","y_ik","d_ij","d_ik","n_viol","loss","n_knn_triplets","Y_id","Y_jd","Y_kd","gs","go","max_iteration","_next","gamma","old_C","_update_embedding","new_gain","Hierarchical_Clustering","matrix","linkage","_id","_matrix","_linkage","root","do","get_clusters","clusters","depth","_traverse","leaves","_n","d_min","_d_min","_distance_matrix","_clusters","c_size","_c_size","Uint16Array","Cluster","p_max","c1","D_i_min","c2","c1_cluster","c2_cluster","c1_cluster_indices","isLeaf","c2_cluster_indices","new_cluster","unshift","D_c1_j","D_c2_j","centroid","_calculate_centroid","l_size","r_size","l_centroid","r_centroid","new_centroid","descendants","left_descendants","right_descendants","KMeans","K","_K","_cluster_centroids","_get_random_centroids","_furthest_point","candidates","Ad","cluster_centroids","random_point","init_points","sample_size","furthest_point","_iteration","clusters_changed","Ai","min_cluster","_compute_centroid","cluster_counter","ci","iteration_result","KMedoids","_A","_max_iter","log10","_cluster_medoids","_get_random_medoids","x_j","_nearest_medoid","index_nearest","medoids","finish","cache","x_o","DeltaTD","xs","findIndex","d_j","distance_nearest","deltaTD","d_oj","_get_distance","d_n","distance_second","d_s","nearest","second","x_m","m1","m2","index_second","cluster_medoids","ceil","TD","TD0","S","S_j","S_o","delta","OPTICS","min_points","_epsilon","_min_points","_ordered_list","_DB","ordered_list","DB","cluster_index","_cluster_index","reachability_distance","processed","_get_neighbors","_core_distance","seeds","_update","_expand_cluster","core_distance","new_reachability_distance","cluster","outliers","get_cluster_affirmation","LSP","control_points","DR_parameters","nc","c_i","Y_C","XA","AT","ATA","ATb","TopoMap","__lazy_distance_matrix","D_ij","_make_minimum_spanning_tree","disjoint_set","F","E","set_u","set_v","_Emst","__hull_cross","ax","ay","bx","by","sx","sy","__hull","x1","y1","x2","y2","lower","upper","__findAngle","p1x","p1y","p2x","p2y","sin","cos","vec","__align_hull","hull","topEdge","d2","v1","v2","transformation","tx","ty","__transform","px","py","__transform_component","yOffset","cx","cy","__align_components","points_u","points_v","hull_u","hull_v","t_u","t_v","Emst","components","component_u","component_v","SAMMON","magic","init_DR","init_parameters","includes","_step","MAGIC","e1","e2","Yi","Yj","dY","dX","dq","dr"],"mappings":"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"}