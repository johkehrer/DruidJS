{"version":3,"file":"druid.esm.js","sources":["../metrics/euclidean.js","../metrics/euclidean_squared.js","../metrics/cosine.js","../metrics/manhattan.js","../metrics/chebyshev.js","../metrics/canberra.js","../metrics/jaccard.js","../metrics/hamming.js","../metrics/sokal_michener.js","../metrics/yule.js","../matrix/k_nearest_neighbors.js","../matrix/distance_matrix.js","../matrix/linspace.js","../matrix/norm.js","../matrix/normalize.js","../numerical/kahan_sum.js","../numerical/neumair_sum.js","../linear_algebra/qr.js","../linear_algebra/qr_householder.js","../linear_algebra/simultaneous_poweriteration.js","../linear_algebra/inner_product.js","../matrix/Matrix.js","../util/randomizer.js","../util/max.js","../util/min.js","../datastructure/Heap.js","../datastructure/DisjointSet.js","../knn/BallTree.js","../knn/KNN.js","../dimred/DR.js","../dimred/PCA.js","../dimred/MDS.js","../dimred/ISOMAP.js","../dimred/FASTMAP.js","../dimred/LDA.js","../dimred/LLE.js","../dimred/LTSA.js","../dimred/TSNE.js","../optimization/powell.js","../dimred/UMAP.js","../dimred/TriMap.js","../clustering/Hierarchical_Clustering.js","../clustering/KMeans.js","../clustering/KMedoids.js","../clustering/OPTICS.js","../dimred/LSP.js","../dimred/TopoMap.js","../dimred/SAMMON.js","../dimred/SQDMDS.js"],"sourcesContent":["import { euclidean_squared } from \"../metrics/index.js\";\n/**\n * Computes the euclidean distance (<code>l<sub>2</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    return Math.sqrt(euclidean_squared(a, b));\n}\n","/**\n * Computes the squared euclidean distance (l<sub>2</sub><sup>2</sup>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean_squared\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the squared euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        const a_b = a[i] - b[i];\n        sum += a_b * a_b;\n    }\n    return sum;\n}\n","/**\n * Computes the cosine distance (not similarity) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias cosine\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} The cosine distance between {@link a} and {@link b}.\n * \n * @example\n * import * as druid from \"@saehrimnir/druidjs\";\n * \n * druid.cosine([1,0],[1,1]) == 0.7853981633974484 == π/4;\n * \n */\nexport default function (a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    let sum_a = 0;\n    let sum_b = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += a[i] * b[i];\n        sum_a += a[i] * a[i];\n        sum_b += b[i] * b[i];\n    }\n    return Math.acos(sum / (Math.sqrt(sum_a) * Math.sqrt(sum_b)));\n}\n","/**\n * Computes the manhattan distance (<code>l<sub>1</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias manhattan\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the manhattan distance between <code>a</code> and <code>b</code>.\n */ \nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += Math.abs(a[i] - b[i]);\n    }\n    return sum;\n}\n","/**\n * Computes the chebyshev distance (L<sub>∞</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias chebyshev\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the chebyshev distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let res = [];\n    for (let i = 0; i < n; ++i) {\n        res.push(Math.abs(a[i] - b[i]));\n    }\n    return Math.max(...res);\n}\n","/**\n * Computes the canberra distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias canberra\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the canberra distance between <code>a</code> and <code>b</code>.\n * @see {@link https://en.wikipedia.org/wiki/Canberra_distance}\n */\nexport default function(a, b) {\n    if (a.length !== b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += (Math.abs(a[i] - b[i]) / (Math.abs(a[i]) + Math.abs(b[i])))\n    }\n    return sum;\n}","/**\n * Computes the jaccard distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias jaccard\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the jaccard distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_non_zero = 0;\n    let num_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_non_zero += x || y;\n        num_equal += x && y;\n    }\n    return (num_non_zero - num_equal) / num_non_zero;\n}\n","/**\n * Computes the hamming distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias hamming\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the hamming distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let disagree = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        disagree += x != y;\n    }\n    return disagree / n;\n}\n","/**\n * Computes the Sokal-Michener distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias sokal_michener\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the Sokal-Michener distance between <code>a</code> and <code>b</code>.  \n */\nexport default function(a, b) {\n    if (a.length != b.length) return undefined\n    const n = a.length;\n    let num_not_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_not_equal += x != y;\n    }\n    return (2 * num_not_equal) / (n + num_not_equal);\n}","/**\n * Computes the yule distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias yule\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the yule distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_true_true = 0;\n    let num_true_false = 0;\n    let num_false_true = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_true_true += x && y;\n        num_true_false += x && !y;\n        num_false_true += !x && x;\n    }\n    const num_false_false = n - num_true_true - num_true_false - num_false_true;\n    return num_true_false == 0 || num_false_true == 0 ? 0 : (2 * num_true_false * num_false_true) / (num_true_true * num_false_false + num_true_false * num_false_true);\n}\n","import { distance_matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Computes the k-nearest neighbors of each row of {@link A}.\n * @memberof module:matrix\n * @alias k_nearest_neigbhors\n * @param {Matrix} A - Either the data matrix, or a distance matrix.\n * @param {Number} k - The number of neighbors to compute.\n * @param {Function|\"precomputed\"} [metric=euclidean]\n * @returns {Array<Object>} -\n */\nexport default function (A, k, metric = euclidean) {\n    const rows = A.shape[0];\n    let D = metric == \"precomputed\" ? A : distance_matrix(A, metric);\n    let nN = new Array(rows);\n    for (let row = 0; row < rows; ++row) {\n        nN[row] = Array.from(D.row(row))\n            .map((distance, col) => {\n                return {\n                    i: row,\n                    j: col,\n                    distance: distance,\n                };\n            })\n            .sort((a, b) => a.distance - b.distance)\n            .slice(1, k + 1);\n    }\n    return nN;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"./index.js\";\n\n/**\n * Computes the distance matrix of datamatrix {@link A}.\n * @memberof module:matrix\n * @alias distance_matrix\n * @param {Matrix} A - Matrix.\n * @param {Function} [metric=euclidean] - The diistance metric.\n * @returns {Matrix} D - The distance matrix of {@link A}.\n */\nexport default function (A, metric = euclidean) {\n    let n = A.shape[0];\n    const D = new Matrix(n, n);\n    for (let i = 0; i < n; ++i) {\n        const A_i = A.row(i);\n        for (let j = i + 1; j < n; ++j) {\n            const dist = metric(A_i, A.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n        }\n    }\n    return D;\n}\n","/**\n * Creates an Array containing {@link number} numbers from {@link start} to {@link end}.\n * If <code>{@link number} = null</null>.\n * @memberof module:matrix\n * @alias linspace\n * @param {Number} start - Start value.\n * @param {Number} end - End value.\n * @param {Number} [number = null] - Number of number between {@link start} and {@link end}.\n * @returns {Array} - An array with {@link number} entries, beginning at {@link start} ending at {@link end}.\n */\nexport default function (start, end, number = null) {\n    if (!number) {\n        number = Math.max(Math.round(end - start) + 1, 1);\n    }\n    if (number < 2) {\n        return number === 1 ? [start] : [];\n    }\n    let result = new Array(number);\n    number -= 1;\n    for (let i = number; i >= 0; --i) {\n        result[i] = (i * end + (number - i) * start) / number;\n    }\n    return result;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n//import { neumair_sum } from \"../numerical/index\";\n\n/**\n * Computes the norm of a vector, by computing its distance to **0**.\n * @memberof module:matrix\n * @alias norm\n * @param {Matrix|Array<Number>|Float64Array} v - Vector.\n * @param {Function} [metric = euclidean] - Which metric should be used to compute the norm.\n * @returns {Number} - The norm of {@link v}.\n */\nexport default function (v, metric = euclidean) {\n    let vector = null;\n    if (v instanceof Matrix) {\n        let [rows, cols] = v.shape;\n        if (rows === 1) vector = v.row(0);\n        else if (cols === 1) vector = v.col(0);\n        else throw new Error(\"Matrix must be 1d!\");\n    } else {\n        vector = v;\n    }\n    const n = vector.length;\n    const zeros = new Float64Array(n);\n    return metric(vector, zeros);\n}\n","import { norm } from \"./index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Normalizes Vector {@link v}.\n * @memberof module:matrix\n * @alias normalize\n * @param {Array<Number>|Float64Array} v - Vector\n * @param {Function} metric \n * @returns {Array<Number>|Float64Array} - The normalized vector with length 1.\n */\nexport default function(v, metric = euclidean)  {\n    const v_norm = norm(v, metric);\n    return v.map(value => value / v_norm);\n}","/**\n * Numerical stable summation with the Kahan summation algorithm.\n * @memberof module:numerical\n * @alias kahan_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n    let y, t;\n\n    for (let i = 0; i < n; ++i) {\n        y = summands[i] - compensation;\n        t = sum + y;\n        compensation = t - sum - y;\n        sum = t;\n    }\n    return sum;\n}\n","/**\n * Numerical stable summation with the Neumair summation algorithm.\n * @memberof module:numerical\n * @alias neumair_sum\n * @param {Number[]} summands - Array of values to sum up.\n * @returns {Number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements}\n */\nexport default function (summands) {\n    const n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n\n    for (let i = 0; i < n; ++i) {\n        const summand = summands[i];\n        const t = sum + summand;\n        if (Math.abs(sum) >= Math.abs(summand)) {\n            compensation += sum - t + summand;\n        } else {\n            compensation += summand - t + sum;\n        }\n        sum = t;\n    }\n    return sum + compensation;\n}\n","import { Matrix, norm } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix `A` using Gram-Schmidt process.\n * @memberof module:linear_algebra\n * @alias qr\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_the_Gram%E2%80%93Schmidt_process}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, cols, \"identity\");\n    const R = new Matrix(cols, cols, 0);\n\n    for (let j = 0; j < cols; ++j) {\n        let v = A.col(j);\n        for (let i = 0; i < j; ++i) {\n            const q = Q.col(i);\n            const q_dot_v = neumair_sum(q.map((q_, k) => q_ * v[k]));\n            for (let k = 0; k < rows; ++k) {\n                v[k] -= q_dot_v * q[k];\n            }\n            R.set_entry(i, j, q_dot_v);\n        }\n        const v_norm = norm(v, euclidean);\n        for (let k = 0; k < rows; ++k) {\n            Q.set_entry(k, j, v[k] / v_norm);\n        }\n        R.set_entry(j, j, v_norm);\n    }\n    return { R, Q };\n}\n","import { Matrix, norm } from \"../matrix/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} with householder transformations.\n * @memberof module:linear_algebra\n * @alias qr_householder\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_Householder_reflections}\n * @see {@link http://mlwiki.org/index.php/Householder_Transformation}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, rows, \"I\");\n    const R = A.clone();\n\n    for (let j = 0; j < cols; ++j) {\n        const x = Matrix.from(R.col(j).slice(j));\n        const x_norm = norm(x);\n        const x0 = x.entry(0, 0);\n        const rho = -Math.sign(x0);\n        const u1 = x0 - rho * x_norm;\n        const u = x.divide(u1).set_entry(0, 0, 1);\n        const beta = (-rho * u1) / x_norm;\n\n        const u_outer_u = u.outer(u);\n        const R_block = R.get_block(j, 0);\n        const new_R = R_block.sub(u_outer_u.dot(R_block).mult(beta));\n        const Q_block = Q.get_block(0, j);\n        const new_Q = Q_block.sub(Q_block.dot(u_outer_u).mult(beta));\n        R.set_block(j, 0, new_R);\n        Q.set_block(0, j, new_Q);\n    }\n    return { R, Q };\n}\n","import { qr as qr_gramschmidt } from \"./index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\n\n/**\n * Computes the `k` biggest Eigenvectors and Eigenvalues from Matrix `A` with the QR-Algorithm.\n * @memberof module:linear_algebra\n * @alias simultaneous_poweriteration\n * @param {Matrix} A - The Matrix\n * @param {Number} k - The number of eigenvectors and eigenvalues to compute.\n * @param {Object} parameters - Object containing parameterization of the simultanious poweriteration method.\n * @param {Number} [parameters.max_iterations=100] - The number of maxiumum iterations the algorithm should run.\n * @param {Number|Randomizer} [parameters.seed=1212] - The seed value or a randomizer used in the algorithm.\n * @param {Function} [parameters.qr=qr_gramschmidt] - The QR technique to use.\n * @param {Number} [parameters.tol=1e-8] - Tolerated error for stopping criteria.\n * @returns {{eigenvalues: Number[], eigenvectors: Number[][]}} the `k` biggest eigenvectors and eigenvalues of Matrix `A`.\n */\nexport default function (A, k = 2, {seed = 1212, max_iterations = 100, qr = qr_gramschmidt, tol = 1e-8} = {}) {\n    const randomizer = seed instanceof Randomizer ? seed : new Randomizer(seed);\n    if (!(A instanceof Matrix)) A = Matrix.from(A);\n    const n = A.shape[0];\n    let { Q, R } = qr(new Matrix(n, k, () => (randomizer.random - .5) * 2));\n    while (max_iterations--) {\n        const oldQ = Q;\n        const Z = A.dot(Q);\n        const QR = qr(Z);\n        Q = QR.Q;\n        R = QR.R;\n        const error = euclidean_squared(Q.values, oldQ.values);\n        if (error < tol) {\n            break;\n        }\n    }\n\n    const eigenvalues = R.diag;\n    const eigenvectors = Q.transpose().to2dArray;\n    return { eigenvalues, eigenvectors };\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the inner product between two arrays of the same length.\n * @memberof module:linear_algebra\n * @alias inner_product\n * @param {Array|Float64Array} a - Array a\n * @param {Array|Float64Array} b - Array b\n * @returns The inner product between {@link a} and {@link b}\n */\nexport default function (a, b) {\n    const N = a.length;\n    if (N != b.length) {\n        throw new Error(\"Array a and b must have the same length!\")\n    }\n    let sum = 0;\n    for (let i = 0; i < N; ++i) {\n        sum += a * b;\n    }\n    return sum;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n/**\n * @class\n * @alias Matrix\n * @requires module:numerical/neumair_sum\n */\nexport class Matrix {\n    /**\n     * creates a new Matrix. Entries are stored in a Float64Array.\n     * @memberof module:matrix\n     * @param {number} rows - The amount of rows of the matrix.\n     * @param {number} cols - The amount of columns of the matrix.\n     * @param {(function|string|number)} value=0 - Can be a function with row and col as parameters, a number, or \"zeros\", \"identity\" or \"I\", or \"center\".\n     *  - **function**: for each entry the function gets called with the parameters for the actual row and column.\n     *  - **string**: allowed are\n     *      - \"zero\", creates a zero matrix.\n     *      - \"identity\" or \"I\", creates an identity matrix.\n     *      - \"center\", creates an center matrix.\n     *  - **number**: create a matrix filled with the given value.\n     * @example\n     *\n     * let A = new Matrix(10, 10, () => Math.random()); //creates a 10 times 10 random matrix.\n     * let B = new Matrix(3, 3, \"I\"); // creates a 3 times 3 identity matrix.\n     * @returns {Matrix} returns a {@link rows} times {@link cols} Matrix filled with {@link value}.\n     */\n    constructor(rows = null, cols = null, value = null) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = null;\n        if (rows && cols) {\n            if (!value) {\n                this._data = new Float64Array(rows * cols);\n                return this;\n            }\n            if (typeof value === \"function\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value(row, col);\n                    }\n                }\n                return this;\n            }\n            if (typeof value === \"string\") {\n                if (value === \"zeros\") {\n                    return new Matrix(rows, cols, 0);\n                }\n                if (value === \"identity\" || value === \"I\") {\n                    this._data = new Float64Array(rows * cols);\n                    for (let row = 0; row < rows; ++row) {\n                        this._data[row * cols + row] = 1;\n                    }\n                    return this;\n                }\n                if (value === \"center\" && rows == cols) {\n                    this._data = new Float64Array(rows * cols);\n                    value = (i, j) => (i === j ? 1 : 0) - 1 / rows;\n                    for (let row = 0; row < rows; ++row) {\n                        for (let col = 0; col < cols; ++col) {\n                            this._data[row * cols + col] = value(row, col);\n                        }\n                    }\n                    return this;\n                }\n            }\n            if (typeof value === \"number\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value;\n                    }\n                }\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Creates a Matrix out of {@link A}.\n     * @param {(Matrix|Array|Float64Array|number)} A - The matrix, array, or number, which should converted to a Matrix.\n     * @param {\"row\"|\"col\"|\"diag\"} [type = \"row\"] - If {@link A} is a Array or Float64Array, then type defines if it is a row- or a column vector.\n     * @returns {Matrix}\n     *\n     * @example\n     * let A = Matrix.from([[1, 0], [0, 1]]); //creates a two by two identity matrix.\n     * let S = Matrix.from([1, 2, 3], \"diag\"); // creates a 3 by 3 matrix with 1, 2, 3 on its diagonal. [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n     */\n    static from(A, type = \"row\") {\n        if (A instanceof Matrix) {\n            return A.clone();\n        } else if (Matrix.isArray(A)) {\n            let m = A.length;\n            if (m === 0) throw new Error(\"Array is empty\");\n            // 1d\n            if (!Matrix.isArray(A[0])) {\n                if (type === \"row\") {\n                    return new Matrix(1, m, (_, j) => A[j]);\n                } else if (type === \"col\") {\n                    return new Matrix(m, 1, (i) => A[i]);\n                } else if (type === \"diag\") {\n                    return new Matrix(m, m, (i, j) => (i == j ? A[i] : 0));\n                } else {\n                    throw new Error(\"1d array has NaN entries\");\n                }\n                // 2d\n            } else {\n                let n = A[0].length;\n                for (let row = 0; row < m; ++row) {\n                    if (A[row].length !== n) {\n                        throw new Error(\"various array lengths\");\n                    }\n                }\n                return new Matrix(m, n, (i, j) => A[i][j]);\n            }\n        } else if (typeof A === \"number\") {\n            return new Matrix(1, 1, A);\n        } else {\n            throw new Error(\"error\");\n        }\n    }\n\n    /**\n     * Returns the {@link row}<sup>th</sup> row from the Matrix.\n     * @param {Number} row\n     * @returns {Float64Array}\n     */\n    row(row) {\n        const data = this.values;\n        const cols = this._cols;\n        return data.subarray(row * cols, (row + 1) * cols);\n    }\n\n    /**\n     * Returns an generator yielding each row of the Matrix.\n     * @yields {Float64Array}\n     */\n    *iterate_rows() {\n        const cols = this._cols;\n        const rows = this._rows;\n        const data = this.values;\n        for (let row = 0; row < rows; ++row) {\n            yield data.subarray(row * cols, (row + 1) * cols);\n        }\n    }\n\n    /**\n     * Makes a {@link Matrix} object an iterable object.\n     * @yields {Float64Array}\n     */\n    *[Symbol.iterator]() {\n        for (const row of this.iterate_rows()) {\n            yield row;\n        }\n    }\n\n    /**\n     * Sets the entries of {@link row}<sup>th</sup> row from the Matrix to the entries from {@link values}.\n     * @param {Number} row\n     * @param {Array} values\n     * @returns {Matrix}\n     */\n    set_row(row, values) {\n        const cols = this._cols;\n        if (Matrix.isArray(values) && values.length === cols) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values[col];\n            }\n        } else if (values instanceof Matrix && values.shape[1] === cols && values.shape[0] === 1) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values._data[col];\n            }\n        } else {\n            throw new Error(\"Values not valid! Needs to be either an Array, a Float64Array, or a fitting Matrix!\")\n        }\n        return this;\n    }\n\n    /**\n     * Swaps the rows {@link row1} and {@link row2} of the Matrix.\n     * @param {Number} row1\n     * @param {Number} row2\n     * @returns {Matrix}\n     */\n    swap_rows(row1, row2) {\n        const cols = this._cols;\n        const data = this.values;\n        for (let i = row1 * cols, j = row2 * cols, col = 0; col < cols; ++col, ++i, ++j) {\n            const t = data[i];\n            data[i] = data[j];\n            data[j] = t;\n        }\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> column from the Matrix.\n     * @param {Number} col\n     * @returns {Array}\n     */\n    col(col) {\n        const result_col = new Float64Array(this._rows);\n        for (let row = 0; row < this._rows; ++row) {\n            result_col[row] = this.values[row * this._cols + col];\n        }\n        return result_col;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @returns {float64}\n     */\n    entry(row, col) {\n        return this.values[row * this._cols + col];\n    }\n\n    /**\n     * Sets the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix to the given {@link value}.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    set_entry(row, col, value) {\n        this.values[row * this._cols + col] = value;\n        return this;\n    }\n\n    /**\n     * Adds a given {@link value} to the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    add_entry(row, col, value) {\n      this.values[row * this._cols + col] += value;\n      return this;\n    }\n\n    /**\n     * Subtracts a given {@link value} from the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    sub_entry(row, col, value) {\n      this.values[row * this._cols + col] -= value;\n      return this;\n    }\n\n    /**\n     * Returns a new transposed Matrix.\n     * @returns {Matrix}\n     */\n    transpose() {\n        let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n        return B;\n    }\n\n    /**\n     * Returns a new transposed Matrix. Short-form of {@function transpose}.\n     * @returns {Matrix}\n     */\n    get T() {\n        return this.transpose();\n    }\n\n    /**\n     * Returns the inverse of the Matrix.\n     * @returns {Matrix}\n     */\n    inverse() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const A = this.clone();\n        const B = new Matrix(rows, cols, 'I');\n\n        // foreach column\n        for (let col = 0; col < cols; ++col) {\n            // Search for maximum in this column (pivot)\n            let max_idx = col;\n            let max_val = Math.abs(A.entry(col, col));\n            for (let row = col + 1; row < rows; ++row) {\n                const val = Math.abs(A.entry(row, col));\n                if (max_val < val) {\n                    max_idx = row;\n                    max_val = val;\n                }\n            }\n            if (max_val === 0) {\n                throw new Error('Cannot compute inverse of Matrix, determinant is zero');\n            }\n            // Swap maximum row with current row\n            if (max_idx !== col) {\n                A.swap_rows(col, max_idx);\n                B.swap_rows(col, max_idx);\n            }\n\n            // eliminate non-zero values on the other rows at column c\n            const A_col = A.row(col);\n            const B_col = B.row(col);\n            for (let row = 0; row < rows; ++row) {\n                if (row !== col) {\n                    // eliminate value at column c and row r\n                    const A_row = A.row(row);\n                    const B_row = B.row(row);\n                    if (A_row[col] !== 0) {\n                        const f = A_row[col] / A_col[col];\n                        // sub (f * row c) from row r to eliminate the value at column c\n                        for (let s = col; s < cols; ++s) {\n                            A_row[s] -= (f * A_col[s]);\n                        }\n                        for (let s = 0; s < cols; ++s) {\n                            B_row[s] -= (f * B_col[s]);\n                        }\n                    }\n                } else {\n                    // normalize value at Acc to 1 (diagonal):\n                    // divide each value of row r=c by the value at Acc\n                    const f = A_col[col];\n                    for (let s = col; s < cols; ++s) {\n                        A_col[s] /= f;\n                    }\n                    for (let s = 0; s < cols; ++s) {\n                        B_col[s] /= f;\n                    }\n                }\n            }\n        }\n        return B;\n    }\n\n    /**\n     * Returns the dot product. If {@link B} is an Array or Float64Array then an Array gets returned. If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [rows_A, cols_A] = A.shape;\n            const [rows_B, cols_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows.\n                Must be equal!`);\n            }\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_i = A.row(row);\n                const B_val = B.values;\n                let sum = 0;\n                for (let i = 0, j = col; i < cols_A; ++i, j += cols_B) {\n                    sum += A_i[i] * B_val[j];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Transposes the current matrix and returns the dot product with {@link B}.\n     * If {@link B} is an Array or Float64Array then an Array gets returned.\n     * If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    transDot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [cols_A, rows_A] = A.shape; // transpose matrix\n            const [rows_B, cols_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${[rows_A, cols_A].join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows, which must be equal!`);\n            }\n            // let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n            // this.values[row * this._cols + col];\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_val = A.values;\n                const B_val = B.values;\n                let sum = 0;\n                for (let i = 0, j = row, k = col; i < cols_A; ++i, j += rows_A, k += cols_B) {\n                    sum += A_val[j] * B_val[k];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._cols;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.col(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Returns the dot product with the transposed version of {@link B}.\n     * If {@link B} is an Array or Float64Array then an Array gets returned.\n     * If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dotTrans(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [rows_A, cols_A] = A.shape;\n            const [cols_B, rows_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${[rows_B, cols_B].join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows, which must be equal!`);\n            }\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_i = A.row(row);\n                const B_i = B.row(col);\n                let sum = 0;\n                for (let i = 0; i < cols_A; ++i) {\n                    sum += A_i[i] * B_i[i];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Computes the outer product from {@link this} and {@link B}.\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    outer(B) {\n        let A = this;\n        let l = A._data.length;\n        let r = B._data.length;\n        if (l != r) return undefined;\n        let C = new Matrix();\n        C.shape = [\n            l,\n            l,\n            (i, j) => {\n                if (i <= j) {\n                    return A._data[i] * B._data[j];\n                } else {\n                    return C.entry(j, i);\n                }\n            },\n        ];\n        return C;\n    }\n\n    /**\n     * Appends matrix {@link B} to the matrix.\n     * @param {Matrix} B - matrix to append.\n     * @param {\"horizontal\"|\"vertical\"|\"diag\"} [type = \"horizontal\"] - type of concatenation.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 1], [1, 1]]); // 2 by 2 matrix filled with ones.\n     * let B = Matrix.from([[2, 2], [2, 2]]); // 2 by 2 matrix filled with twos.\n     *\n     * A.concat(B, \"horizontal\"); // 2 by 4 matrix. [[1, 1, 2, 2], [1, 1, 2, 2]]\n     * A.concat(B, \"vertical\"); // 4 by 2 matrix. [[1, 1], [1, 1], [2, 2], [2, 2]]\n     * A.concat(B, \"diag\"); // 4 by 4 matrix. [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 2, 2], [0, 0, 2, 2]]\n     */\n    concat(B, type = \"horizontal\") {\n        const A = this;\n        const [rows_A, cols_A] = A.shape;\n        const [rows_B, cols_B] = B.shape;\n        if (type == \"horizontal\") {\n            if (rows_A != rows_B) {\n                throw new Error(`A.concat(B, \"horizontal\"): A and B need same number of rows, A has ${rows_A} rows, B has ${rows_B} rows.`);\n            }\n            const X = new Matrix(rows_A, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(0, cols_A, B);\n            return X;\n        } else if (type == \"vertical\") {\n            if (cols_A != cols_B) {\n                throw new Error(`A.concat(B, \"vertical\"): A and B need same number of columns, A has ${cols_A} columns, B has ${cols_B} columns.`);\n            }\n            const X = new Matrix(rows_A + rows_B, cols_A, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, 0, B);\n            return X;\n        } else if (type == \"diag\") {\n            const X = new Matrix(rows_A + rows_B, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, cols_A, B);\n            return X;\n        } else {\n            throw new Error(`type must be \"horizontal\" or \"vertical\", but type is ${type}!`);\n        }\n    }\n\n    /**\n     * Writes the entries of B in A at an offset position given by {@link offset_row} and {@link offset_col}.\n     * @param {int} offset_row\n     * @param {int} offset_col\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    set_block(offset_row, offset_col, B) {\n        const rows = Math.min(this._rows - offset_row, B.shape[0]);\n        const cols = Math.min(this._cols - offset_col, B.shape[1]);\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n                this.set_entry(row + offset_row, col + offset_col, B.entry(row, col));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Extracts the entries from the {@link start_row}<sup>th</sup> row to the {@link end_row}<sup>th</sup> row, the {@link start_col}<sup>th</sup> column to the {@link end_col}<sup>th</sup> column of the matrix.\n     * If {@link end_row} or {@link end_col} is empty, the respective value is set to {@link this.rows} or {@link this.cols}.\n     * @param {Number} start_row\n     * @param {Number} start_col\n     * @param {Number} [end_row = null]\n     * @param {Number} [end_col = null]\n     * @returns {Matrix} Returns a end_row - start_row times end_col - start_col matrix, with respective entries from the matrix.\n     * @example\n     *\n     * let A = Matrix.from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // a 3 by 3 matrix.\n     *\n     * A.get_block(1, 1); // [[5, 6], [8, 9]]\n     * A.get_block(0, 0, 1, 1); // [[1]]\n     * A.get_block(1, 1, 2, 2); // [[5]]\n     * A.get_block(0, 0, 2, 2); // [[1, 2], [4, 5]]\n     */\n    get_block(start_row, start_col, end_row = null, end_col = null) {\n        const [rows, cols] = this.shape;\n        end_row = end_row ?? rows;\n        end_col = end_col ?? cols;\n        if (end_row <= start_row || end_col <= start_col) {\n            throw new Error(`\n                end_row must be greater than start_row, and\n                end_col must be greater than start_col, but\n                end_row = ${end_row}, start_row = ${start_row}, end_col = ${end_col}, and start_col = ${start_col}!`);\n        }\n        const X = new Matrix(end_row - start_row, end_col - start_col, \"zeros\");\n        for (let row = start_row, new_row = 0; row < end_row; ++row, ++new_row) {\n            for (let col = start_col, new_col = 0; col < end_col; ++col, ++new_col) {\n                X.set_entry(new_row, new_col, this.entry(row, col));\n            }\n        }\n        return X;\n        //return new Matrix(end_row - start_row, end_col - start_col, (i, j) => this.entry(i + start_row, j + start_col));\n    }\n\n    /**\n     * Returns a new array gathering entries defined by the indices given by argument.\n     * @param {Array<Number>} row_indices - Array consists of indices of rows for gathering entries of this matrix\n     * @param {Array<Number>} col_indices  - Array consists of indices of cols for gathering entries of this matrix\n     * @returns {Matrix}\n     */\n    gather(row_indices, col_indices) {\n        const N = row_indices.length;\n        const D = col_indices.length;\n\n        const R = new Matrix(N, D);\n        for (let i = 0; i < N; ++i) {\n            const row_index = row_indices[i];\n            for (let j = 0; j < N; ++j) {\n                const col_index = col_indices[j];\n                R.set_entry(i, j, this.entry(row_index, col_index));\n            }\n        }\n\n        return R;\n    }\n\n    /**\n     * Applies a function to each entry of the matrix.\n     * @private\n     * @param {Function} f function takes 2 parameters, the value of the actual entry and a value given by the function {@link v}. The result of {@link f} gets writen to the Matrix.\n     * @param {Function} v function takes 2 parameters for row and col, and returns a value witch should be applied to the colth entry of the rowth row of the matrix.\n     */\n    _apply_array(f, v) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let i = 0, row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col, ++i) {\n                data[i] = f(data[i], v(row, col));\n            }\n        }\n        return this;\n    }\n\n    _apply_rowwise_array(values, f) {\n        return this._apply_array(f, (_, j) => values[j]);\n    }\n\n    _apply_colwise_array(values, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let i = 0, row = 0; row < rows; ++row) {\n            const val = values[row];\n            for (let col = 0; col < cols; ++col, ++i) {\n                data[i] = f(data[i], val);\n            }\n        }\n        return this;\n    }\n\n    _apply(value, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        if (value instanceof Matrix) {\n            const values = value.values;\n            const [value_rows, value_cols] = value.shape;\n            if (value_rows === 1) {\n                if (cols !== value_cols) {\n                    throw new Error(`cols !== value_cols`);\n                }\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], values[col]);\n                    }\n                }\n            } else if (value_cols === 1) {\n                if (rows !== value_rows) {\n                    throw new Error(`rows !== value_rows`);\n                }\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    const v =  values[row];\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], v);\n                    }\n                }\n            } else if (rows == value_rows && cols == value_cols) {\n                for (let i = 0, n = rows * cols; i < n; ++i) {\n                    data[i] = f(data[i], values[i]);\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else if (Matrix.isArray(value)) {\n            if (value.length === rows) {\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    const v = value[row];\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], v);\n                    }\n                }\n            } else if (value.length === cols) {\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], value[col]);\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else { // scalar value\n            for (let i = 0, n = rows * cols; i < n; ++i) {\n                data[i] = f(data[i], value);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Clones the Matrix.\n     * @returns {Matrix}\n     */\n    clone() {\n        let B = new Matrix();\n        B._rows = this._rows;\n        B._cols = this._cols;\n        B._data = this.values.slice(0);\n        return B;\n    }\n\n    /**\n     * Entrywise multiplication with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies multiplication to the element, otherwise it creates first a copy and applies the multiplication on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.mult(2); // [[2, 4], [6, 8]];\n     * A.mult(B); // [[1, 4], [9, 16]];\n     */\n    mult(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a * b);\n    }\n\n    /**\n     * Entrywise division with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies division to the element, otherwise it creates first a copy and applies the division on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.divide(2); // [[0.5, 1], [1.5, 2]];\n     * A.divide(B); // [[1, 1], [1, 1]];\n     */\n    divide(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a / b);\n    }\n\n    /**\n     * Entrywise addition with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies addition to the element, otherwise it creates first a copy and applies the addition on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.add(2); // [[3, 4], [5, 6]];\n     * A.add(B); // [[2, 4], [6, 8]];\n     */\n    add(value, {inline = false} = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a + b);\n    }\n\n    /**\n     * Entrywise subtraction with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies subtraction to the element, otherwise it creates first a copy and applies the subtraction on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.sub(2); // [[-1, 0], [1, 2]];\n     * A.sub(B); // [[0, 0], [0, 0]];\n     */\n    sub(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a - b);\n    }\n\n    /**\n     * Returns the number of rows and columns of the Matrix.\n     * @returns {Array} An Array in the form [rows, columns].\n     */\n    get shape() {\n        return [this._rows, this._cols];\n    }\n\n    /**\n     * Returns the matrix in the given shape with the given function which returns values for the entries of the matrix.\n     * @param {Array} parameter - takes an Array in the form [rows, cols, value], where rows and cols are the number of rows and columns of the matrix, and value is a function which takes two parameters (row and col) which has to return a value for the colth entry of the rowth row.\n     * @returns {Matrix}\n     */\n    set shape([rows, cols, value = () => 0]) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = new Float64Array(rows * cols);\n        for (let i = 0, row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col, ++i) {\n                this._data[i] = value(row, col);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Float64Arrays.\n     * @returns {Array<Float64Array>}\n     */\n    get to2dArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(row);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Arrays.\n     * @returns {Array<Array>}\n     */\n    get asArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(Array.from(row));\n        }\n        return result;\n    }\n\n    /**\n     * Returns the diagonal of the Matrix.\n     * @returns {Float64Array}\n     */\n    get diag() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const min_row_col = Math.min(rows, cols);\n        let result = new Float64Array(min_row_col);\n        for (let i = 0; i < min_row_col; ++i) {\n            result[i] = this.entry(i, i);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the mean of all entries of the Matrix.\n     * @returns {Number}\n     */\n    get mean() {\n        const sum = this.sum;\n        const n = this._rows * this._cols;\n        return sum / n;\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Number}\n     */\n    get sum() {\n        const data = this.values;\n        return neumair_sum(data);\n    }\n\n    /**\n     * Returns the entries of the Matrix.\n     * @returns {Float64Array}\n     */\n    get values() {\n        const data = this._data;\n        return data;\n    }\n\n    /**\n     * Returns the mean of each row of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanRows() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: rows });\n        for (let i = 0, row = 0; row < rows; ++row) {\n            let sum = 0;\n            for (let col = 0; col < cols; ++col, ++i) {\n                sum += data[i];\n            }\n            result[row] = sum / cols;\n        }\n        return result;\n    }\n\n    /** Returns the mean of each column of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanCols() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: cols });\n        for (let col = 0; col < cols; ++col) {\n            let sum = 0;\n            for (let i = col, row = 0; row < rows; ++row, i += cols) {\n                sum += data[i];\n            }\n            result[col] = sum / rows;\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b} using the conjugate gradient method. Returns the result x.\n     * @param {Matrix} A - Matrix\n     * @param {Matrix} b - Matrix\n     * @param {Randomizer} [randomizer=null]\n     * @param {Number} [tol=1e-3]\n     * @returns {Matrix}\n     */\n    static solve_CG(A, b, randomizer, tol = 1e-3) {\n        if (randomizer === null) {\n            randomizer = new Randomizer();\n        }\n        const rows = A.shape[0];\n        const cols = b.shape[1];\n        let result = new Matrix(rows, 0);\n        for (let i = 0; i < cols; ++i) {\n            const b_i = Matrix.from(b.col(i)).T;\n            let x = new Matrix(rows, 1, () => randomizer.random);\n            let r = b_i.sub(A.dot(x));\n            let d = r.clone();\n            do {\n                const z = A.dot(d);\n                const alpha = r.transDot(r).entry(0, 0) / d.transDot(z).entry(0, 0);\n                x = x.add(d.mult(alpha));\n                const r_next = r.sub(z.mult(alpha));\n                const beta = r_next.transDot(r_next).entry(0, 0) / r.transDot(r).entry(0, 0);\n                d = r_next.add(d.mult(beta));\n                r = r_next;\n            } while (Math.abs(r.mean) > tol);\n            result = result.concat(x, \"horizontal\");\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b}. Returns the result x.\n     * @param {Matrix} A - Matrix or LU Decomposition\n     * @param {Matrix} b - Matrix\n     * @returns {Matrix}\n     */\n    static solve(A, b) {\n        let { L: L, U: U } = \"L\" in A && \"U\" in A ? A : Matrix.LU(A);\n        let rows = L.shape[0];\n        let x = b.clone();\n\n        // forward\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < row - 1; ++col) {\n                x.sub_entry(0, row, L.entry(row, col) * x.entry(1, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / L.entry(row, row));\n        }\n\n        // backward\n        for (let row = rows - 1; row >= 0; --row) {\n            for (let col = rows - 1; col > row; --col) {\n                x.sub_entry(0, row, U.entry(row, col) * x.entry(0, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / U.entry(row, row));\n        }\n\n        return x;\n    }\n\n    /**\n     * {@link L}{@link U} decomposition of the Matrix {@link A}. Creates two matrices, so that the dot product LU equals A.\n     * @param {Matrix} A\n     * @returns {{L: Matrix, U: Matrix}} result - Returns the left triangle matrix {@link L} and the upper triangle matrix {@link U}.\n     */\n    static LU(A) {\n        const rows = A.shape[0];\n        const L = new Matrix(rows, rows, \"zeros\");\n        const U = new Matrix(rows, rows, \"identity\");\n\n        for (let j = 0; j < rows; ++j) {\n            for (let i = j; i < rows; ++i) {\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(i, k) * U.entry(k, j);\n                }\n                L.set_entry(i, j, A.entry(i, j) - sum);\n            }\n            for (let i = j; i < rows; ++i) {\n                if (L.entry(j, j) === 0) {\n                    return undefined;\n                }\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(j, k) * U.entry(k, i);\n                }\n                U.set_entry(j, i, (A.entry(j, i) - sum) / L.entry(j, j));\n            }\n        }\n\n        return { L: L, U: U };\n    }\n\n    /**\n     * Computes the determinante of {@link A}, by using the LU decomposition of {@link A}.\n     * @param {Matrix} A\n     * @returns {Number} det - Returns the determinate of the Matrix {@link A}.\n     */\n    static det(A) {\n        const rows = A.shape[0];\n        const { L, U } = Matrix.LU(A);\n        const L_diag = L.diag;\n        const U_diag = U.diag;\n        let det = L_diag[0] * U_diag[0];\n        for (let row = 1; row < rows; ++row) {\n            det *= L_diag[row] * U_diag[row];\n        }\n        return det;\n    }\n\n    /**\n     * Computes the {@link k} components of the SVD decomposition of the matrix {@link M}\n     * @param {Matrix} M\n     * @param {int} [k=2]\n     * @returns {{U: Matrix, Sigma: Matrix, V: Matrix}}\n     */\n    static SVD(M, k = 2) {\n        let MtM = M.transDot(M);\n        let MMt = M.dotTrans(M);\n        let { eigenvectors: V, eigenvalues: Sigma } = simultaneous_poweriteration(MtM, k);\n        let { eigenvectors: U } = simultaneous_poweriteration(MMt, k);\n        return { U: U, Sigma: Sigma.map((sigma) => Math.sqrt(sigma)), V: V };\n\n        //Algorithm 1a: Householder reduction to bidiagonal form:\n        /* const [m, n] = A.shape;\n        let U = new Matrix(m, n, (i, j) => i == j ? 1 : 0);\n        console.log(U.to2dArray)\n        let V = new Matrix(n, m, (i, j) => i == j ? 1 : 0);\n        console.log(V.to2dArray)\n        let B = Matrix.bidiagonal(A.clone(), U, V);\n        console.log(U,V,B)\n        return { U: U, \"Sigma\": B, V: V }; */\n    }\n\n    static isArray(A) {\n      return Array.isArray(A) || A instanceof Float64Array || A instanceof Float32Array;\n    }\n}\n","import { linspace, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @memberof module:utils\n * @alias Randomizer\n */\nexport class Randomizer {\n    /**\n     * Mersenne Twister random number generator.\n     * @constructor\n     * @param {Number} [_seed=new Date().getTime()] - The seed for the random number generator. If <code>_seed == null</code> then the actual time gets used as seed.\n     * @see https://github.com/bmurray7/mersenne-twister-examples/blob/master/javascript-mersenne-twister.js\n     */\n    constructor(_seed) {\n        this._N = 624;\n        this._M = 397;\n        this._MATRIX_A = 0x9908b0df;\n        this._UPPER_MASK = 0x80000000;\n        this._LOWER_MASK = 0x7fffffff;\n        this._mt = new Array(this._N);\n        this._mti = this.N + 1;\n\n        this.seed = _seed || new Date().getTime();\n        return this;\n    }\n\n    set seed(_seed) {\n        this._seed = _seed;\n        let mt = this._mt;\n\n        mt[0] = _seed >>> 0;\n        for (this._mti = 1; this._mti < this._N; this._mti += 1) {\n            let mti = this._mti;\n            let s = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n            mt[mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + mti;\n            mt[mti] >>>= 0;\n        }\n    }\n\n    /**\n     * Returns the seed of the random number generator.\n     * @returns {Number} - The seed.\n     */\n    get seed() {\n        return this._seed;\n    }\n\n    /**\n     * Returns a float between 0 and 1.\n     * @returns {Number} - A random number between [0, 1]\n     */\n    get random() {\n        return this.random_int * (1.0 / 4294967296.0);\n    }\n\n    /**\n     * Returns an integer between 0 and MAX_INTEGER.\n     * @returns {Integer} - A random integer.\n     */\n    get random_int() {\n        let y,\n            mag01 = new Array(0x0, this._MATRIX_A);\n        if (this._mti >= this._N) {\n            let kk;\n\n            /* if (this._mti == this._N + 1) {\n                this.seed = 5489;\n            } */\n\n            let N_M = this._N - this._M;\n            let M_N = this._M - this._N;\n\n            for (kk = 0; kk < N_M; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + this._M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (; kk < this._N - 1; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + M_N] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            y = (this._mt[this._N - 1] & this._UPPER_MASK) | (this._mt[0] & this._LOWER_MASK);\n            this._mt[this._N - 1] = this._mt[this._M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this._mti = 0;\n        }\n\n        y = this._mt[(this._mti += 1)];\n        y ^= y >>> 11;\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= y >>> 18;\n\n        return y >>> 0;\n    }\n\n    gauss_random() {\n        let x, y, r;\n        if (this._val != null) {\n            x = this._val, this._val = null;\n            return x;\n        } else do {\n            x = 2 * this.random - 1;\n            y = 2 * this.random - 1;\n            r = x * x + y * y;\n        } while (!r || r > 1);\n        const c = Math.sqrt(-2 * Math.log(r) / r);\n        this._val = y * c; // cache this for next function call for efficiency\n        return x * c;\n    }\n\n    /**\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    choice(A, n) {\n        if (A instanceof Matrix) {\n            let rows = A.shape[0];\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A.row(d));\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let rows = A.length;\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A[d]);\n        }\n    }\n\n    /**\n     * @static\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @param {Number} seed - The seed for the random number generator.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    static choice(A, n, seed = 1212) {\n        const R = new Randomizer(seed);\n        return R.choice(A, n);\n        /* let rows = A.shape[0];\n        if (n > rows) {\n            throw new Error(\"n bigger than A!\");\n        }\n        let rand = new Randomizer(seed);\n        let sample = new Array(n);\n        let index_list = linspace(0, rows - 1);\n        for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n            let random_index = rand.random_int % l;\n            sample[i] = index_list.splice(random_index, 1)[0];\n        }\n        //return result;\n        //return new Matrix(n, cols, (row, col) => A.entry(sample[row], col))\n        return sample.map((d) => A.row(d)); */\n    }\n}\n","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias max\n * @param {Array} values \n * @returns {Number}\n */\nexport default function (values) {\n    let max;\n    for (const value of values) {\n        if (value != null && (max < value || (max === undefined && value >= value))) {\n            max = value;\n        }\n    }\n    return max;\n}","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias min\n * @param {Array} values\n * @returns {Number}\n */\nexport default function (values) {\n    let min;\n    for (const value of values) {\n        if (value != null && (min > value || (min === undefined && value <= value))) {\n            min = value;\n        }\n    }\n    return min;\n}","/**\n * @class\n * @alias Heap\n */\nexport class Heap {\n    /**\n     * A heap is a datastructure holding its elements in a specific way, so that the top element would be the first entry of an ordered list.\n     * @constructor\n     * @memberof module:datastructure\n     * @alias Heap\n     * @param {Array=} elements - Contains the elements for the Heap. {@link elements} can be null.\n     * @param {Function} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(\"min\"|\"max\"|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     * @see {@link https://en.wikipedia.org/wiki/Binary_heap}\n     */\n    constructor(elements = null, accessor = d => d, comparator = \"min\") {\n        if (elements) {\n            return Heap.heapify(elements, accessor, comparator);\n        } else {\n            this._accessor = accessor;\n            this._container = [];\n            if (comparator == \"min\") {\n                this._comparator = (a, b) => a < b;\n            } else if (comparator == \"max\") {\n                this._comparator = (a, b) => a > b;\n            } else {\n                this._comparator = comparator;\n            }\n            return this\n        }\n    }\n\n    /**\n     * Creates a Heap from an Array\n     * @param {Array|Set} elements - Contains the elements for the Heap.\n     * @param {Function=} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(String=|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     */\n    static heapify(elements, accessor = d => d, comparator = \"min\") {\n        const heap = new Heap(null, accessor, comparator);\n        const container = heap._container;\n        for (const e of elements) {\n            container.push({\n                \"element\": e,\n                \"value\": accessor(e),\n            });\n        }\n        for (let i = Math.floor((elements.length / 2) - 1); i >= 0; --i) {\n            heap._heapify_down(i);\n        }\n        return heap;\n    }\n\n    /**\n     * Swaps elements of container array.\n     * @private\n     * @param {Number} index_a \n     * @param {Number} index_b \n     */\n    _swap(index_a, index_b) {\n        const container = this._container;\n        [container[index_b], container[index_a]] = [container[index_a], container[index_b]];\n        return;\n    }\n\n    /**\n     * @private\n     */\n    _heapify_up() {\n        const container = this._container;\n        let index = container.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (!this._comparator(container[index].value, container[parentIndex].value)) {\n                break;\n            } else {\n            this._swap(parentIndex, index)\n            index = parentIndex;\n            }\n        }\n    }\n\n    /**\n     * Pushes the element to the heap.\n     * @param {} element\n     * @returns {Heap}\n     */\n    push(element) {\n        const value = this._accessor(element);\n        //const node = new Node(element, value);\n        const node = {\"element\": element, \"value\": value};\n        this._container.push(node);\n        this._heapify_up();\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} [start_index = 0] \n     */\n    _heapify_down(start_index=0) {\n        const container = this._container;\n        const comparator = this._comparator;\n        const length = container.length;\n        let left = 2 * start_index + 1;\n        let right = 2 * start_index + 2;\n        let index = start_index;\n        if (index > length) throw \"index higher than length\"\n        if (left < length && comparator(container[left].value, container[index].value)) {\n            index = left;\n        }\n        if (right < length && comparator(container[right].value, container[index].value)) {\n            index = right;\n        }\n        if (index !== start_index) {\n            this._swap(start_index, index);\n            this._heapify_down(index);\n        }\n    }\n\n    /**\n     * Removes and returns the top entry of the heap.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    pop() {\n        const container = this._container;\n        if (container.length === 0) {\n            return null;\n        } else if (container.length === 1) {\n            return container.pop();\n        }\n        this._swap(0, container.length - 1);\n        const item = container.pop();\n        this._heapify_down();\n        return item;\n    }\n\n    /**\n     * Returns the top entry of the heap without removing it.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    get first() {\n        return this._container.length > 0 ? this._container[0] : null;\n    }\n\n\n    /**\n     * Yields the raw data\n     * @yields {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    * iterate() {\n        for (let i = 0, n = this._container.length; i < n; ++i) {\n            yield this._container[i].element;\n        }\n    }\n\n    /**\n     * Returns the heap as ordered array.\n     * @returns {Array} Array consisting the elements ordered by {@link comparator}.\n     */\n    toArray() {\n        return this.data()\n            .sort((a,b) => this._comparator(a, b) ? -1 : 0)\n    }\n\n    /**\n     * Returns elements of container array.\n     * @returns {Array} Array consisting the elements.\n     */\n    data() {\n        return this._container\n            .map(d => d.element)\n    }\n\n    /**\n     * Returns the container array.\n     * @returns {Array} The container array.\n     */\n    raw_data() {\n        return this._container;\n    }\n\n    /**\n     * The size of the heap.\n     * @returns {Number}\n     */\n    get length() {\n        return this._container.length;\n    }\n\n    /**\n     * Returns false if the the heap has entries, true if the heap has no entries.\n     * @returns {Boolean}\n     */\n    get empty() {\n        return this.length === 0;\n    }\n}","/**\n * @class\n * @alias DisjointSet\n * @see {@link https://en.wikipedia.org/wiki/Disjoint-set_data_structure}\n */\nexport class DisjointSet {\n    /**\n     * @constructor\n     * @alias DisjointSet\n     * @memberof module:datastructure\n     * @param {Array=} elements \n     * @returns {DisjointSet}\n     */\n    constructor(elements = null) {\n        this._list = new Set();\n        if (elements) {\n            for (const e of elements) {\n                this.make_set(e);\n            }\n        }\n        return this;\n    }\n\n    make_set(x) {\n        const list = this._list;\n        if (!list.has(x)) {\n            list.add(x);\n            x.__disjoint_set = {};\n            x.__disjoint_set.parent = x;\n            x.__disjoint_set.children = new Set([x]);\n            x.__disjoint_set.size = 1;\n        }\n        return this;\n    }\n\n    find(x) {\n        const list = this._list;\n        if (list.has(x)) {\n            if (x.__disjoint_set.parent !== x) {\n                x.__disjoint_set.children.add(...x);\n                x.__disjoint_set.parent = this.find(x.__disjoint_set.parent);\n                return x.__disjoint_set.parent;\n            } else {\n                return x;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    union(x, y) {\n        let node_x = this.find(x);\n        let node_y = this.find(y);\n\n        if (node_x === node_y) return this;\n        if (node_x.__disjoint_set.size < node_y.__disjoint_set.size) [node_x, node_y] = [node_y, node_x];\n\n        node_y.__disjoint_set.parent = node_x;\n        // keep track of children?\n        node_y.__disjoint_set.children.forEach(node_x.__disjoint_set.children.add, node_x.__disjoint_set.children);\n        node_x.__disjoint_set.size += node_y.__disjoint_set.size;\n\n        return this;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n/**\n * @class\n * @alias BallTree\n */\nexport class BallTree {\n    /**\n     * Generates a BallTree with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias BallTree\n     * @param {Array=} elements - Elements which should be added to the BallTree\n     * @param {Function} [metric = euclidean] metric to use: (a, b) => distance\n     * @see {@link https://en.wikipedia.org/wiki/Ball_tree}\n     * @see {@link https://github.com/invisal/noobjs/blob/master/src/tree/BallTree.js}\n     * @returns {BallTree}\n     */\n    constructor(elements = null, metric = euclidean) {\n        this._Node = class {\n            constructor(pivot, child1=null, child2=null, radius=null) {\n                this.pivot = pivot;\n                this.child1 = child1;\n                this.child2 = child2;\n                this.radius = radius;\n            }\n        }\n        this._Leaf = class {\n            constructor(points) {\n                this.points = points;\n            }\n        }\n        this._metric = metric;\n        if (elements) {\n            this.add(elements);\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @param {Array<*>} elements - new elements.\n     * @returns {BallTree}\n     */\n    add(elements) {\n        elements = elements.map((element, index) => {\n            return {index: index, element: element}\n        })\n        this._root = this._construct(elements);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Array<*>} elements \n     * @returns {Node} root of balltree.\n     */\n    _construct(elements) {\n        if (elements.length === 1) {\n            return new this._Leaf(elements);\n        } else {\n            let c = this._greatest_spread(elements);\n            let sorted_elements = elements.sort((a, b) => a.element[c] - b.element[c]);\n            let n = sorted_elements.length;\n            let p_index = Math.floor(n / 2);\n            let p = elements[p_index];\n            let L = sorted_elements.slice(0, p_index);\n            let R = sorted_elements.slice(p_index, n);\n            let radius = Math.max(...elements.map(d => this._metric(p.element, d.element)));\n            let B\n            if (L.length > 0 && R.length > 0) {         \n                B = new this._Node(p, this._construct(L), this._construct(R), radius);\n            } else {\n                B = new this._Leaf(elements);\n            }\n            return B;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Node} B \n     * @returns {Number}\n     */\n    _greatest_spread(B) {\n        let d = B[0].element.length;\n        let start = new Array(d);\n\n        for (let i = 0; i < d; ++i) {\n            start[i] = [Infinity, -Infinity];\n        }\n\n        let spread = B.reduce((acc, current) => {\n            for (let i = 0; i < d; ++i) {\n                acc[i][0] = Math.min(acc[i][0], current.element[i]);\n                acc[i][1] = Math.max(acc[i][1], current.element[i]);\n            }\n            return acc;\n        }, start);\n        spread = spread.map(d => d[1] - d[0]);\n        \n        let c = 0;\n        for (let i = 0; i < d; ++i) {\n            c = spread[i] > spread[c] ? i : c;\n        }\n        return c;\n    }\n\n    /**\n     * \n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        return this._search(t, k, new Heap(null, d => this._metric(d.element, t), \"max\"), this._root);\n    }\n\n    /**\n     * @private\n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @param {Heap} Q - Heap consists of the currently found {@link k} nearest neighbors.\n     * @param {Node|Leaf} B \n     */\n    _search(t, k, Q, B) {\n        // B is Node\n        if (Q.length >= k && B.pivot && B.radius && this._metric(t, B.pivot.element) - B.radius >= Q.first.value) {\n            return Q;\n        } \n        if (B.child1) this._search(t, k, Q, B.child1);\n        if (B.child2) this._search(t, k, Q, B.child2);\n        \n        // B is leaf\n        if (B.points) {\n            for (let i = 0, n = B.points.length; i < n; ++i) {\n                let p = B.points[i];\n                if (k > Q.length) {\n                    Q.push(p);\n                } else {\n                    Q.push(p);\n                    Q.pop();\n                }\n            }\n        }\n        return Q;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KNN\n */\nexport class KNN {\n    /**\n     * Generates a KNN list with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias KNN\n     * @param {Array=} elements - Elements which should be added to the KNN list\n     * @param {Function|\"precomputed\"} [metric = euclidean] metric is either precomputed or a function to use: (a, b) => distance\n     * @returns {KNN}\n     */\n    constructor(elements=null, metric=euclidean) {\n        this._metric = metric;\n        this._elements = elements instanceof Matrix ? elements : Matrix.from(elements);\n        const N = this._elements.shape[0];\n        if (metric === \"precomputed\") {\n            this._D = this._elements.clone();\n        } else {\n            this._D = distance_matrix(this._elements, metric);\n        }\n        this.KNN = [];\n        for (let row = 0; row < N; ++row) {\n            const distances = this._D.row(row);\n            const H = new Heap(null, d => d.value, \"min\");\n            for (let j = 0; j < N; ++j) {\n                H.push({\n                    value: distances[j],\n                    index: j,\n                });\n            }\n            this.KNN.push(H);\n        }\n    }\n\n    /**\n     * \n     * @param {Array|Number} t - query element or index.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        const metric = this._metric;\n        const KNN = this.KNN;\n        let H;\n        if (Array.isArray(t)) {\n            if (this._metric == \"precomputed\") {\n                throw \"Search by query element is only possible when not using a precomputed distance matrix!\"\n            } \n            const elements = this._elements;\n            const N = KNN.length;\n            let nearest_element_index = null;\n            let nearest_dist = Infinity;\n            for (let i = 0; i < N; ++i) {\n                const element = elements.row(i);\n                const dist = metric(t, element);\n                if (dist < nearest_dist) {\n                    nearest_element_index = i;\n                    nearest_dist = dist;\n                }\n            }\n            H = KNN[nearest_element_index];\n        } else if (Number.isInteger(t)) {\n            H = KNN[t]\n        }\n\n        let result = []\n        for (let i = 0; i < k; ++i) {\n            result.push(H.pop())\n        }\n        result.forEach(res => H.push(res.element))\n        return result\n    }    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n\n/**\n * @class\n * @alias DR\n * @borrows DR#parameter as DR#para\n * @borrows DR#parameter as DR#p\n */\nexport class DR {\n    /**\n     * Takes the default parameters and seals them, remembers the type of input {@link X}, and initializes the random number generator.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias DR\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed value for the random number generator.\n     * @returns {DR}\n     */\n    constructor(X, default_parameters, parameters) {\n        this._parameters = Object.assign(Object.seal(default_parameters), parameters);\n        if (Array.isArray(X)) {\n            this._type = \"array\";\n            this.X = Matrix.from(X);\n        } else if (X instanceof Matrix) {\n            this._type = \"matrix\";\n            this.X = X;\n        } else {\n            throw new Error(\"No valid type for X!\");\n        }\n        [this._N, this._D] = this.X.shape;\n        this._randomizer = new Randomizer(this._parameters.seed);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * Set and get parameters\n     * @param {String} [name = null] - Name of the parameter. If not given then returns all parameters as an Object.\n     * @param {any} [value = null] - Value of the parameter to set. If <code>name</code> is set and <code>value</code> is not given, returns the value of the respective parameter.\n     * @returns {DR|any|Object} \n     * On setting a parameter, this function returns the DR object. \n     * If <code>name</code> is set and <code>value == null</code> then return actual parameter value.\n     * If <code>name</code> is not given, then returns all parameters as an Object.\n     * \n     * @example\n     * '''\n     * const DR = new druid.TSNE(X, {d: 3}); // creates a new DR object, with parameter for <code>d</code> = 3.\n     * DR.parameter(\"d\"); // returns 3,\n     * DR.parameter(\"d\", 2); // sets parameter <code>d</code> to 2 and returns <code>DR</code>.\n     * '''\n     */\n    parameter(name = null, value = null) {\n        if (name === null) {\n            return Object.assign({}, this._parameters);\n        }\n        if (!this._parameters.hasOwnProperty(name)) {\n            throw new Error(`${name} is not a valid parameter!`);\n        }\n        if (value !== null) {\n            this._parameters[name] = value;\n            this._is_initialized = false;\n            return this;\n        } else {\n            return this._parameters[name];\n        }\n    }\n\n    para(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    p(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} the projection.\n     */\n    transform() {\n        this.check_init();\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @yields {Matrix|Number[][]} the intermediate steps of the projection.\n     */\n    *generator() {\n        return this.transform();\n    }\n\n    /**\n     * If the respective DR method has an <code>init</code> function, call it before <code>transform</code>.\n     * @returns {DR}\n     */\n    check_init() {\n        if (!this._is_initialized && typeof this.init === \"function\") {\n            this.init();\n            this._is_initialized = true;\n        }\n        return this;\n    }\n\n    /**\n     * @returns {Matrix|Number[][]} the projection in the type of input <code>X</code>.\n     */\n    get projection() {\n        if (this.hasOwnProperty(\"Y\")) {\n            this.check_init();\n            return this._type === \"matrix\" ? this.Y : this.Y.to2dArray;\n        } else {\n            throw new Error(\"The dataset is not transformed yet!\");\n        }\n    }\n\n    /**\n     * Computes the projection.\n     * @param  {...unknown} args - Arguments the transform method of the respective DR method takes.\n     * @returns {Promise<Matrix|Number[][]>} the dimensionality reduced dataset.\n     */\n    async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Matrix|Array} the dimensionality reduced dataset.\n     */\n    static transform(...args) {\n        let dr = new this(...args);\n        return dr.transform();\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Promise} a promise yielding the dimensionality reduced dataset.\n     */\n    static async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Generator} a generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    static *generator(...args) {\n        const dr = new this(...args);\n        const generator = dr.generator();\n        for (const result of generator) {\n            yield result;\n        }\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias PCA\n * @augments DR\n */\nexport class PCA extends DR {\n    /**\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias PCA\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @returns {PCA}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}. If parameter {@link A} is given, then project {@link A} with the principal components of {@link X}.\n     * @param {null|Matrix|Array} [A = null] - If given, the data to project.\n     * @returns {Matrix|Array} - The projected data.\n     */\n    transform(A = null) {\n        const V = this.principal_components();\n        if (A == null) {\n            const X = this.X;\n            this.Y = X.dot(V);\n            return this.projection;\n        } else if (Array.isArray(A)) {\n            return Matrix.from(A).dot(V).asArray;\n        } else if (A instanceof Matrix) {\n            return A.dot(V);\n        } else {\n            throw new Error(\"No valid type for A!\");\n        }\n    }\n\n    /**\n     * Computes the {@link d} principal components of Matrix {@link X}.\n     * @returns {Matrix}\n     */\n    principal_components() {\n        if (this.V) {\n            return this.V;\n        }\n        const { d, eig_args } = this._parameters;\n        const X = this.X;\n        const X_cent = X.sub(X.meanCols);\n        const C = X_cent.transDot(X_cent);\n        const { eigenvectors: V } = simultaneous_poweriteration(C, d, eig_args);\n        this.V = Matrix.from(V).transpose();\n        return this.V;\n    }\n\n    static principal_components(X, parameters) {\n        const dr = new this(X, parameters);\n        return dr.principal_components();\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias MDS\n * @extends DR\n */\nexport class MDS extends DR {\n    /**\n     * Classical MDS.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias MDS\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}.\n     * @returns {Matrix|Array}\n     */\n    transform() {\n        const X = this.X;\n        const rows = X.shape[0];\n        const { d, metric, eig_args } = this._parameters;\n        const A = metric === \"precomputed\" ? X : distance_matrix(X, metric);\n        const ai_ = A.meanCols;\n        const a_j = A.meanRows;\n        const a__ = A.mean;\n\n        this._d_X = A;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n\n        return this.projection;\n    }\n\n    /**\n     * @returns {Number} - the stress of the projection.\n     */\n    stress() {\n        const N = this.X.shape[0];\n        const Y = this.Y;\n        const d_X = this._d_X;\n        const d_Y = new Matrix();\n        d_Y.shape = [\n            N,\n            N,\n            (i, j) => {\n                return i < j ? euclidean(Y.row(i), Y.row(j)) : d_Y.entry(j, i);\n            },\n        ];\n        let top_sum = 0;\n        let bottom_sum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                top_sum += Math.pow(d_X.entry(i, j) - d_Y.entry(i, j), 2);\n                bottom_sum += Math.pow(d_X.entry(i, j), 2);\n            }\n        }\n        return Math.sqrt(top_sum / bottom_sum);\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { DR } from \"./DR.js\";\nimport euclidean from \"../metrics/euclidean.js\";\n\n/**\n * @class\n * @alias ISOMAP\n * @extends DR\n */\nexport class ISOMAP extends DR {\n    /**\n     * Isometric feature mapping (ISOMAP).\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias ISOMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link ISOMAP} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2319}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this.X.shape[0] / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const X = this.X;\n        const rows = this._N;\n        const { d, metric, eig_args, neighbors } = this._parameters;\n        // TODO: make knn extern and parameter for constructor or transform?\n        const D = new Matrix();\n        D.shape = [rows, rows, (i, j) => (i <= j ? metric(X.row(i), X.row(j)) : D.entry(j, i))];\n        const kNearestNeighbors = [];\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < rows; ++j) {\n                row.push({\n                    index: j,\n                    distance: D.entry(i, j),\n                });\n            }\n            const H = new Heap(row, (d) => d.distance, \"min\");\n            kNearestNeighbors.push(H.toArray().slice(1, neighbors + 1));\n        }\n\n        /*D = dijkstra(kNearestNeighbors);*/\n        // compute shortest paths\n        // TODO: make extern\n        /** @see {@link https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm} */\n        const G = new Matrix(rows, rows, (i, j) => {\n            const other = kNearestNeighbors[i].find((n) => n.index === j);\n            return other ? other.distance : Infinity;\n        });\n\n        for (let i = 0; i < rows; ++i) {\n            for (let j = 0; j < rows; ++j) {\n                let min_val = G.entry(i, j);\n                for (let k = 0; k < rows; ++k) {\n                    min_val = Math.min(min_val, G.entry(i, k) + G.entry(k, j));\n                }\n                G.set_entry(i, j, min_val);\n            }\n        }\n\n        let ai_ = new Float64Array(rows);\n        let a_j = new Float64Array(rows);\n        let a__ = 0;\n        const A = new Matrix(rows, rows, (i, j) => {\n            let val = G.entry(i, j);\n            val = val === Infinity ? 0 : val;\n            ai_[i] += val;\n            a_j[j] += val;\n            a__ += val;\n            return val;\n        });\n\n        ai_ = ai_.map((v) => v / rows);\n        a_j = a_j.map((v) => v / rows);\n        a__ /= rows ** 2;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        // compute d eigenvectors\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n/**\n * @class\n * @alias FASTMAP\n * @extends DR\n */\nexport class FASTMAP extends DR {\n    /**\n     * FastMap: a fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias FASTMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the dimensionality of the projection.\n     * @returns {FASTMAP}\n     * @see {@link https://doi.org/10.1145/223784.223812}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     * Chooses two points which are the most distant in the actual projection.\n     * @private\n     * @param {Function} dist\n     * @returns {Array} An array consisting of first index, second index, and distance between the two points.\n     */\n    _choose_distant_objects(dist) {\n        const X = this.X;\n        const N = X.shape[0];\n        let a_index = (this._randomizer.random_int % N) - 1;\n        let b_index = null;\n        let max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_ai = dist(a_index, i);\n            if (d_ai > max_dist) {\n                max_dist = d_ai;\n                b_index = i;\n            }\n        }\n        max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_bi = dist(b_index, i);\n            if (d_bi > max_dist) {\n                max_dist = d_bi;\n                a_index = i;\n            }\n        }\n        return [a_index, b_index, max_dist];\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} The {@link d}-dimensional projection of the data matrix {@link X}.\n     */\n    transform() {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric } = this._parameters;\n        const Y = new Matrix(N, d, 0);\n        let dist = (a, b) => metric(X.row(a), X.row(b));\n\n        for (let _col = 0; _col < d; ++_col) {\n            let old_dist = dist;\n            // choose pivot objects\n            const [a_index, b_index, d_ab] = this._choose_distant_objects(dist);\n            if (d_ab !== 0) {\n                // project the objects on the line (O_a, O_b)\n                for (let i = 0; i < N; ++i) {\n                    const d_ai = dist(a_index, i);\n                    const d_bi = dist(b_index, i);\n                    const y_i = (d_ai ** 2 + d_ab ** 2 - d_bi ** 2) / (2 * d_ab);\n                    Y.set_entry(i, _col, y_i);\n                }\n                // consider the projections of the objects on a\n                // hyperplane perpendicluar to the line (a, b);\n                // the distance function D'() between two\n                // projections is given by Eq.4\n                dist = (a, b) => Math.sqrt(old_dist(a, b) ** 2 - (Y.entry(a, _col) - Y.entry(b, _col)) ** 2);\n            }\n        }\n        // return embedding.\n        this.Y = Y;\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LDA\n * @extends DR\n */\nexport class LDA extends DR {\n    /**\n     * Linear Discriminant Analysis.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LDA\n     * @param {Matrix} X - The high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Array} parameters.labels - The labels / classes for each data point.\n     * @param {number} [parameters.d = 2] - The dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://onlinelibrary.wiley.com/doi/10.1111/j.1469-1809.1936.tb02137.x}\n     */\n    constructor(X, parameters) {\n        super(X, { labels: null, d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, cols] = X.shape;\n        const { d, labels, eig_args } = this._parameters;\n        if (labels === null || labels.length != rows) {\n            throw new Error(\"LDA needs parameter label to every datapoint to work!\");\n        }\n        const unique_labels = {};\n        let label_id = 0;\n        labels.forEach((l, i) => {\n            if (l in unique_labels) {\n                unique_labels[l].count++;\n                unique_labels[l].rows.push(X.row(i));\n            } else {\n                unique_labels[l] = {\n                    id: label_id++,\n                    count: 1,\n                    rows: [X.row(i)],\n                };\n            }\n        });\n\n        // create X_mean and vector means;\n        const X_mean = X.mean;\n        const V_mean = new Matrix(label_id, cols);\n        for (const label in unique_labels) {\n            const V = Matrix.from(unique_labels[label].rows);\n            const v_mean = V.meanCols;\n            for (let j = 0; j < cols; ++j) {\n                V_mean.set_entry(unique_labels[label].id, j, v_mean[j]);\n            }\n        }\n        // scatter_between\n        let S_b = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j] - X_mean);\n            const N = unique_labels[label].count;\n            S_b = S_b.add(m.dotTrans(m).mult(N));\n        }\n\n        // scatter_within\n        let S_w = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j]);\n            const R = unique_labels[label].rows;\n            for (let i = 0, n = unique_labels[label].count; i < n; ++i) {\n                const row_v = new Matrix(cols, 1, (j, _) => R[i][j] - m.entry(j, 0));\n                S_w = S_w.add(row_v.dotTrans(row_v));\n            }\n        }\n\n        let { eigenvectors: V } = simultaneous_poweriteration(S_w.inverse().dot(S_b), d, eig_args);\n        V = Matrix.from(V).transpose();\n        this.Y = X.dot(V);\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { k_nearest_neighbors } from \"../matrix/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LLE\n * @extends DR\n */\nexport class LLE extends DR {\n    /**\n     * Locally Linear Embedding.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LLE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} neighbors - the label / class of each data point.\n     * @param {Number} [d = 2] - the dimensionality of the projection.\n     * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [seed = 1212] - the dimensionality of the projection.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2323}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const rows = this._N;\n        const cols = this._D;\n        const { neighbors, d, eig_args, metric } = this._parameters;\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        const O = new Matrix(neighbors, 1, 1);\n        const W = new Matrix(rows, rows);\n\n        for (let row = 0; row < rows; ++row) {\n            const nN_row = nN[row];\n            const Z = new Matrix(neighbors, cols, (i, j) => X.entry(nN_row[i].j, j) - X.entry(row, j));\n            const C = Z.dotTrans(Z);\n            if (neighbors > cols) {\n                const C_trace = neumair_sum(C.diag) / 1000;\n                for (let j = 0; j < neighbors; ++j) {\n                    C.add_entry(j, j, C_trace);\n                }\n            }\n            // reconstruct;\n            let w = Matrix.solve_CG(C, O, this._randomizer);\n            w = w.divide(w.sum);\n            for (let j = 0; j < neighbors; ++j) {\n                W.set_entry(row, nN_row[j].j, w.entry(j, 0));\n            }\n        }\n        // comp embedding\n        const I = new Matrix(rows, rows, \"identity\");\n        const IW = I.sub(W);\n        const M = IW.transDot(IW);\n        const { eigenvectors: V } = simultaneous_poweriteration(M.T.inverse(), d + 1, eig_args);\n        this.Y = Matrix.from(V.slice(1, 1 + d)).T;\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix, k_nearest_neighbors } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LTSA\n * @extends DR\n */\nexport class LTSA extends DR {\n    /**\n     * Local Tangent Space Alignment\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LTSA\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link LTSA} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://epubs.siam.org/doi/abs/10.1137/S1064827502419154}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        if (this._D <= this.parameter(\"d\")) {\n            throw new Error(`Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${this.parameter(\"d\")})!`);\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, D] = X.shape;\n        const { d, neighbors, metric, eig_args } = this._parameters;\n        // 1.1 determine k nearest neighbors\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        // center matrix\n        const O = new Matrix(D, D, \"center\");\n        const B = new Matrix(rows, rows, 0);\n\n        for (let row = 0; row < rows; ++row) {\n            // 1.2 compute the d largest eigenvectors of the correlation matrix\n            const I_i = [row, ...nN[row].map((n) => n.j)];\n            let X_i = Matrix.from(I_i.map((n) => X.row(n)));\n            // center X_i\n            X_i = X_i.dot(O);\n            // correlation matrix\n            const C = X_i.dotTrans(X_i);\n            const { eigenvectors: g } = simultaneous_poweriteration(C, d, eig_args);\n            //g.push(linspace(0, k).map(_ => 1 / Math.sqrt(k + 1)));\n            const G_i_t = Matrix.from(g);\n            // 2. Constructing alignment matrix\n            const W_i = G_i_t.transDot(G_i_t)\n                .add(1 / Math.sqrt(neighbors + 1));\n            for (let i = 0; i < neighbors + 1; ++i) {\n                for (let j = 0; j < neighbors + 1; ++j) {\n                    B.add_entry(I_i[i], I_i[j], W_i.entry(i, j) - (i === j ? 1 : 0));\n                }\n            }\n        }\n\n        // 3. Aligning global coordinates\n        const { eigenvectors: Y } = simultaneous_poweriteration(B, d + 1, eig_args);\n        this.Y = Matrix.from(Y.slice(1)).transpose();\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TSNE\n * @extends DR\n */\nexport class TSNE extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TSNE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.perplexity = 50] - perplexity.\n     * @param {Number} [parameters.epsilon = 10] - learning parameter.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean_squared] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TSNE}\n     */\n    constructor(X, parameters) {\n        super(X, { perplexity: 50, epsilon: 10, d: 2, metric: euclidean_squared, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._iter = 0;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => this._randomizer.gauss_random() * 1e-4);\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TSNE}\n     */\n    init() {\n        // init\n        const Htarget = Math.log(this.parameter(\"perplexity\"));\n        const N = this._N;\n        const D = this._D;\n        const {metric} = this._parameters;\n        const X = this.X;\n        let Delta;\n        if (metric ==\"precomputed\") {\n            Delta = druid.Matrix.from(X);\n        } else {\n            Delta = new Matrix(N, N);\n            for (let i = 0; i < N; ++i) {\n                const X_i = X.row(i);\n                for (let j = i + 1; j < N; ++j) {\n                    const distance = metric(X_i, X.row(j));\n                    Delta.set_entry(i, j, distance);\n                    Delta.set_entry(j, i, distance);\n                }\n            }\n        }\n\n        const P = new Matrix(N, N, 0);\n\n        this._ystep = new Matrix(N, D, 0);\n        this._gains = new Matrix(N, D, 1);\n\n        // search for fitting sigma\n        const tol = 1e-4;\n        const maxtries = 50;\n        for (let i = 0; i < N; ++i) {\n            const dist_i = Delta.row(i);\n            const prow = P.row(i);\n            let betamin = -Infinity;\n            let betamax = Infinity;\n            let beta = 1;\n            let cnt = maxtries;\n            let done = false;\n            let psum;\n\n            while (!done && cnt--) {\n                // compute entropy and kernel row with beta precision\n                psum = 0;\n                let dp_sum = 0;\n                for (let j = 0; j < N; ++j) {\n                    const dist = dist_i[j];\n                    const pj = (i !== j) ? Math.exp(-dist * beta) : 0;\n                    dp_sum += dist * pj;\n                    prow[j] = pj;\n                    psum += pj;\n                }\n                // compute entropy\n                const H = psum > 0 ? Math.log(psum) + beta * dp_sum / psum : 0;\n                if (H > Htarget) {\n                    betamin = beta;\n                    beta = betamax === Infinity ? beta * 2 : (beta + betamax) / 2;\n                } else {\n                    betamax = beta;\n                    beta = betamin === -Infinity ? beta / 2 : (beta + betamin) / 2;\n                }\n                done = Math.abs(H - Htarget) < tol;\n            }\n            // normalize p\n            for (let j = 0; j < N; ++j) {\n                prow[j] /= psum;\n            }\n        }\n\n        // compute probabilities\n        const N2 = N * 2;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i; j < N; ++j) {\n                const p = Math.max((P.entry(i, j) + P.entry(j, i)) / N2, 1e-100);\n                P.set_entry(i, j, p);\n                P.set_entry(j, i, p);\n            }\n        }\n        this._P = P;\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - Number of iterations.\n     * @returns {Matrix|Number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Number[][]} - the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * performs a optimization step\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const P = this._P;\n        const ystep = this._ystep;\n        const gains = this._gains;\n        const N = this._N;\n        const { d: dim, epsilon} = this._parameters;\n        let Y = this.Y;\n\n        //calc cost gradient;\n        const pmul = iter < 100 ? 4 : 1;\n\n        // compute Q dist (unnormalized)\n        const Qu = new Matrix(N, N, \"zeros\");\n        let qsum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dsum = 0;\n                for (let d = 0; d < dim; ++d) {\n                    const dhere = Y.entry(i, d) - Y.entry(j, d);\n                    dsum += dhere * dhere;\n                }\n                const qu = 1 / (1 + dsum);\n                Qu.set_entry(i, j, qu);\n                Qu.set_entry(j, i, qu);\n                qsum += 2 * qu;\n            }\n        }\n\n        // normalize Q dist\n        const Q = new Matrix(N, N, 0);\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                const val = Math.max(Qu.entry(i, j) / qsum, 1e-100);\n                Q.set_entry(i, j, val);\n                Q.set_entry(j, i, val);\n            }\n        }\n\n        const grad = new Matrix(N, dim, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            for (let j = 0; j < N; ++j) {\n                const premult = 4 * (pmul * P.entry(i, j) - Q.entry(i, j)) * Qu.entry(i, j);\n                for (let d = 0; d < dim; ++d) {\n                    grad.add_entry(i, d, premult * (Y.entry(i, d) - Y.entry(j, d)));\n                }\n            }\n        }\n\n        // perform gradient step\n        let ymean = new Float64Array(dim);\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const gid = grad.entry(i, d);\n                const sid = ystep.entry(i, d);\n                const gainid = gains.entry(i, d);\n\n                let newgain = Math.sign(gid) === Math.sign(sid) ? gainid * 0.8 : gainid + 0.2;\n                if (newgain < 0.01) newgain = 0.01;\n                gains.set_entry(i, d, newgain);\n\n                const momval = iter < 250 ? 0.5 : 0.8;\n                const newsid = momval * sid - epsilon * newgain * gid;\n                ystep.set_entry(i, d, newsid);\n\n                Y.add_entry(i, d, newsid);\n                ymean[d] += Y.entry(i, d);\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                Y.sub_entry(i, d, ymean[d] / N);\n            }\n        }\n\n        return this.Y;\n    }\n}\n","/**\n *\n * @memberof module:optimization\n * @alias powell\n * @param {Function} f\n * @param {Array} x0\n * @param {Number} [max_iter = 300]\n * @returns {Array}\n * @see http://optimization-js.github.io/optimization-js/optimization.js.html#line438\n */\nexport default function (f, x0, max_iter = 300) {\n    const epsilon = 1e-2;\n    const n = x0.length;\n    let alpha = 1e-3;\n    let pfx = 10000;\n    let x = x0.slice();\n    let fx = f(x);\n    let convergence = false;\n\n    while (max_iter-- >= 0 && !convergence) {\n        convergence = true;\n        for (let i = 0; i < n; ++i) {\n            x[i] += 1e-6;\n            let fxi = f(x);\n            x[i] -= 1e-6;\n            let dx = (fxi - fx) / 1e-6;\n            if (Math.abs(dx) > epsilon) {\n                convergence = false;\n            }\n            x[i] -= alpha * dx;\n            fx = f(x);\n        }\n        alpha *= pfx >= fx ? 1.05 : 0.4;\n        pfx = fx;\n    }\n    return x;\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { linspace } from \"../matrix/index.js\";\nimport { powell } from \"../optimization/index.js\";\nimport { DR } from \"./DR.js\";\nimport { max } from \"../util/index.js\";\nimport { KNN } from \"../knn/index.js\";\n\n/**\n * @class\n * @alias UMAP\n * @extends DR\n */\nexport class UMAP extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias UMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.n_neighbors = 15] - size of the local neighborhood.\n     * @param {Number} [parameters.local_connectivity = 1] - number of nearest neighbors connected in the local neighborhood.\n     * @param {Number} [parameters.min_dist = 1] - controls how tightly points get packed together.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points in the high-dimensional space.\n     * @param {Number} [parameters._spread = 1] - The effective scale of embedded points. (In combination with {@link parameters.min_dist})\n     * @param {Number} [parameters._set_op_mix_ratio = 1] - Interpolate between union and intersection.\n     * @param {Number} [parameters._repulsion_strength = 1]  - Weighting applied to negative samples.\n     * @param {Number} [parameters._negative_sample_rate = 5] - The number of negative samples per positive sample.\n     * @param {Number} [parameters._n_epochs = 350] - The number of training epochs.\n     * @param {Number} [parameter._initial_alpha = 1] - The initial learning rate for the optimization.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {UMAP}\n     */\n    constructor(X, parameters) {\n        super(X, { n_neighbors: 15, local_connectivity: 1, min_dist: 1, d: 2, metric: euclidean, seed: 1212, _spread: 1, _set_op_mix_ratio: 1, _repulsion_strength: 1, _negative_sample_rate: 5, _n_epochs: 350, _initial_alpha: 1 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        /* let n_neighbors = Math.min(this._N - 1, parameters.n_neighbors);\n        this.parameter(\"n_neighbors\", n_neighbors);\n        this.parameter(\"local_connectivity\", Math.min(this.parameter(\"local_connectivity\"), n_neighbors - 1)); */\n        if (this.parameter(\"n_neighbors\") > this._N) {\n            throw new Error(`Parameter n_neighbors (=${this.parameter(\"n_neighbors\")}) needs to be smaller than dataset size (N=${this._N})!`);\n        }\n        if (this.parameter(\"local_connectivity\") > this.parameter(\"n_neighbors\")) {\n            throw new Error(`Parameter local_connectivity (=${this.parameter(\"local_connectivity\")}) needs to be smaller than parameter n_neighbors (=${this.parameter(\"n_neighbors\")})`);\n        }\n        this._iter = 0;\n        const randomizer = this._randomizer;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => randomizer.random);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} spread\n     * @param {Number} min_dist\n     * @returns {Array}\n     */\n    _find_ab_params(spread, min_dist) {\n        const curve = (x, a, b) => 1 / (1 + a * Math.pow(x, 2 * b));\n        const xv = linspace(0, spread * 3, 300);\n        const yv = linspace(0, spread * 3, 300);\n\n        for (let i = 0, n = xv.length; i < n; ++i) {\n            const xv_i = xv[i];\n            yv[i] = xv_i < min_dist ? 1 : Math.exp(-(xv_i - min_dist) / spread);\n        }\n\n        const err = (p) => {\n            const error = linspace(1, 300).map((_, i) => yv[i] - curve(xv[i], p[0], p[1]));\n            return Math.sqrt(neumair_sum(error.map((e) => e * e)));\n        };\n\n        return powell(err, [1, 1]);\n    }\n\n    /**\n     * @private\n     * @param {Array<Array>} distances\n     * @param {Array<Number>} sigmas\n     * @param {Array<Number>} rhos\n     * @returns {Array}\n     */\n    _compute_membership_strengths(distances, sigmas, rhos) {\n        for (let i = 0, n = distances.length; i < n; ++i) {\n            const rho = rhos[i];\n            const curr_dist = distances[i];\n            for (let j = 0, m = curr_dist.length; j < m; ++j) {\n                const v = curr_dist[j].value - rho;\n                curr_dist[j].value = v > 0 ? Math.exp(-v / sigmas[i]) : 1.0;\n            }\n        }\n        return distances;\n    }\n\n    /**\n     * @private\n     * @param {KNN|BallTree} knn\n     * @param {Number} k\n     * @returns {Object}\n     */\n    _smooth_knn_dist(knn, k) {\n        const SMOOTH_K_TOLERANCE = 1e-5;\n        const MIN_K_DIST_SCALE = 1e-3;\n        const n_iter = 64;\n        const { local_connectivity, metric } = this._parameters;\n        const target = Math.log2(k);\n        const rhos = [];\n        const sigmas = [];\n        const X = this.X;\n        const N = X.shape[0];\n        //const distances = [...X].map(x_i => knn.search(x_i, k).raw_data().reverse());\n\n        const distances = [];\n        if (metric === \"precomputed\") {\n            for (let i = 0; i < N; ++i) {\n                distances.push(knn.search(i, k).reverse());\n            }\n        } else {\n            for (const x_i of X) {\n                distances.push(knn.search(x_i, k).raw_data().reverse());\n            }\n        }\n\n        const index = Math.floor(local_connectivity);\n        const interpolation = local_connectivity - index;\n        for (let i = 0; i < N; ++i) {\n            let lo = 0;\n            let hi = Infinity;\n            let mid = 1;\n            let rho = 0;\n\n            const search_result = distances[i];\n            const non_zero_dist = search_result.filter((d) => d.value > 0);\n            const non_zero_dist_length = non_zero_dist.length;\n            if (non_zero_dist_length >= local_connectivity) {\n                if (index > 0) {\n                    rho = non_zero_dist[index - 1].value;\n                    if (interpolation > SMOOTH_K_TOLERANCE) {\n                        rho += interpolation * (non_zero_dist[index].value - non_zero_dist[index - 1].value);\n                    }\n                } else {\n                    rho = interpolation * non_zero_dist[0].value;\n                }\n            } else if (non_zero_dist_length > 0) {\n                rho = non_zero_dist[non_zero_dist_length - 1].value;\n            }\n            for (let x = 0; x < n_iter; ++x) {\n                let psum = 0;\n                for (let j = 0; j < k; ++j) {\n                    const d = search_result[j].value - rho;\n                    psum += d > 0 ? Math.exp(-(d / mid)) : 1;\n                }\n                if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n                    break;\n                }\n                if (psum > target) {\n                    [hi, mid] = [mid, (lo + hi) / 2];\n                } else {\n                    if (hi === Infinity) {\n                        [lo, mid] = [mid, mid * 2];\n                    } else {\n                        [lo, mid] = [mid, (lo + hi) / 2];\n                    }\n                }\n            }\n\n            //let mean_d = null;\n            if (rho > 0) {\n                const mean_ithd = search_result.reduce((a, b) => a + b.value, 0) / search_result.length;\n                if (mid < MIN_K_DIST_SCALE * mean_ithd) {\n                    mid = MIN_K_DIST_SCALE * mean_ithd;\n                }\n            } else {\n                const mean_d = distances.reduce((acc, res) => acc + res.reduce((a, b) => a + b.value, 0) / res.length);\n                if (mid < MIN_K_DIST_SCALE * mean_d) {\n                    mid = MIN_K_DIST_SCALE * mean_d;\n                }\n            }\n            rhos[i] = rho;\n            sigmas[i] = mid;\n        }\n        return {\n            distances: distances,\n            sigmas: sigmas,\n            rhos: rhos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Matrix} X\n     * @param {Number} n_neighbors\n     * @returns {Matrix}\n     */\n    _fuzzy_simplicial_set(X, n_neighbors) {\n        const N = X.shape[0];\n        const { metric, _set_op_mix_ratio } = this._parameters;\n        const knn = metric === \"precomputed\" ? new KNN(X, \"precomputed\") : new BallTree(X.to2dArray, metric);\n        let { distances, sigmas, rhos } = this._smooth_knn_dist(knn, n_neighbors);\n        distances = this._compute_membership_strengths(distances, sigmas, rhos);\n        const result = new Matrix(N, N, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            const distances_i = distances[i];\n            for (let j = 0; j < distances_i.length; ++j) {\n                result.set_entry(i, distances_i[j].element.index, distances_i[j].value);\n            }\n        }\n\n        const transposed_result = result.T;\n        const prod_matrix = result.mult(transposed_result);\n        return result\n            .add(transposed_result)\n            .sub(prod_matrix)\n            .mult(_set_op_mix_ratio)\n            .add(prod_matrix.mult(1 - _set_op_mix_ratio));\n    }\n\n    /**\n     * @private\n     * @param {Number} n_epochs\n     * @returns {Array}\n     */\n    _make_epochs_per_sample(n_epochs) {\n        const weights = this._weights;\n        const result = new Float32Array(weights.length).fill(-1);\n        const weight_scl = n_epochs / max(weights);\n        weights.forEach((w, i) => {\n          const sample = w * weight_scl;\n          if (sample > 0) result[i] = Math.round(n_epochs / sample);\n        })\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Matrix} graph\n     * @returns {Object}\n     */\n    _tocoo(graph) {\n        const rows = [];\n        const cols = [];\n        const data = [];\n        const [rows_n, cols_n] = graph.shape;\n        for (let row = 0; row < rows_n; ++row) {\n            for (let col = 0; col < cols_n; ++col) {\n                const entry = graph.entry(row, col);\n                if (entry !== 0) {\n                    rows.push(row);\n                    cols.push(col);\n                    data.push(entry);\n                }\n            }\n        }\n        return {\n            rows: rows,\n            cols: cols,\n            data: data,\n        };\n    }\n\n    /**\n     * Computes all necessary\n     * @returns {UMAP}\n     */\n    init() {\n        const { _spread, min_dist, n_neighbors, _n_epochs, _negative_sample_rate } = this._parameters;\n        const [a, b] = this._find_ab_params(_spread, min_dist);\n        this._a = a;\n        this._b = b;\n        this._graph = this._fuzzy_simplicial_set(this.X, n_neighbors);\n        const { rows, cols, data: weights } = this._tocoo(this._graph);\n        this._head = rows;\n        this._tail = cols;\n        this._weights = weights;\n        this._epochs_per_sample = this._make_epochs_per_sample(_n_epochs);\n        this._epochs_per_negative_sample = this._epochs_per_sample.map((d) => d * _negative_sample_rate);\n        this._epoch_of_next_sample = this._epochs_per_sample.slice();\n        this._epoch_of_next_negative_sample = this._epochs_per_negative_sample.slice();\n        return this;\n    }\n\n    graph() {\n        this.check_init();\n        return { cols: this._head, rows: this._tail, weights: this._weights };\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    transform(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    *generator(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * @private\n     * @param {Number} x\n     * @returns {Number}\n     */\n    _clip(x) {\n        if (x > 4) return 4;\n        if (x < -4) return -4;\n        return x;\n    }\n\n    /**\n     * performs the optimization step.\n     * @private\n     * @param {Matrix} head_embedding\n     * @param {Matrix} tail_embedding\n     * @param {Matrix} head\n     * @param {Matrix} tail\n     * @returns {Matrix}\n     */\n    _optimize_layout(head_embedding, tail_embedding, head, tail) {\n        const randomizer = this._randomizer;\n        const { _repulsion_strength, d: dim } = this._parameters;\n        const { _alpha: alpha, _a: a, _b: b, _epochs_per_sample: epochs_per_sample, _epochs_per_negative_sample: epochs_per_negative_sample, _epoch_of_next_negative_sample: epoch_of_next_negative_sample, _epoch_of_next_sample: epoch_of_next_sample, _clip: clip } = this;\n        const tail_length = tail.length;\n\n        for (let i = 0, n = epochs_per_sample.length; i < n; ++i) {\n            if (epoch_of_next_sample[i] <= this._iter) {\n                const j = head[i];\n                const k = tail[i];\n                const current = head_embedding.row(j);\n                const other = tail_embedding.row(k);\n                const dist = euclidean_squared(current, other);\n                if (dist > 0) {\n                    const grad_coeff = (-2 * a * b * Math.pow(dist, b - 1)) / (a * Math.pow(dist, b) + 1);\n                    for (let d = 0; d < dim; ++d) {\n                        const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                        current[d] += grad_d;\n                        other[d] -= grad_d;\n                    }\n                }\n                epoch_of_next_sample[i] += epochs_per_sample[i];\n                const n_neg_samples = (this._iter - epoch_of_next_negative_sample[i]) / epochs_per_negative_sample[i];\n                for (let p = 0; p < n_neg_samples; ++p) {\n                    const k = randomizer.random_int % tail_length;\n                    const other = tail_embedding.row(tail[k]);\n                    const dist = euclidean_squared(current, other);\n                    if (dist > 0) {\n                        const grad_coeff = (2 * _repulsion_strength * b) / ((0.01 + dist) * (a * Math.pow(dist, b) + 1));\n                        for (let d = 0; d < dim; ++d) {\n                            const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                            current[d] += grad_d;\n                            other[d] -= grad_d;\n                        }\n                    } else if (j === k) {\n                        continue;\n                    }\n                }\n                epoch_of_next_negative_sample[i] += n_neg_samples * epochs_per_negative_sample[i];\n            }\n        }\n        return head_embedding;\n    }\n\n    /**\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const Y = this.Y;\n        const { _initial_alpha, _n_epochs } = this._parameters;\n        this._alpha = _initial_alpha * (1 - iter / _n_epochs);\n        this.Y = this._optimize_layout(Y, Y, this._head, this._tail);\n\n        return this.Y;\n    }\n}\n","import { Matrix, linspace } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { PCA } from \"./PCA.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TriMap\n * @extends DR\n */\nexport class TriMap extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TriMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.weight_adj = 500] - scaling factor.\n     * @param {Number} [parameters.c = 5] - number of triplets multiplier.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.tol = 1e-8] -\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TriMap}\n     * @see {@link https://arxiv.org/pdf/1910.00204v1.pdf}\n     * @see {@link https://github.com/eamid/trimap}\n     */\n    constructor(X, parameters) {\n        super(X, { weight_adj: 500, c: 5, d: 2, metric: euclidean, tol: 1e-8, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} [pca = null] - Initial Embedding (if null then PCA gets used).\n     * @param {KNN} [knn = null] - KNN Object (if null then BallTree gets used).\n     */\n    init(pca = null, knn = null) {\n        const X = this.X;\n        const N = X.shape[0];\n        const { c, d, metric, seed } = this._parameters;\n        this.n_inliers = 2 * c;\n        this.n_outliers = 1 * c;\n        this.n_random = 1 * c;\n        this.Y = pca || new PCA(X, { d, seed }).transform();\n        this.knn = knn || new BallTree(X.to2dArray, metric);\n        const { triplets, weights } = this._generate_triplets(this.n_inliers, this.n_outliers, this.n_random);\n        this.triplets = triplets;\n        this.weights = weights;\n        this.lr = (1000 * N) / triplets.shape[0];\n        this.C = Infinity;\n        this.vel = new Matrix(N, d, 0);\n        this.gain = new Matrix(N, d, 1);\n        return this;\n    }\n\n    /**\n     * Generates {@link n_inliers} x {@link n_outliers} x {@link n_random} triplets.\n     * @param {Number} n_inliers\n     * @param {Number} n_outliers\n     * @param {Number} n_random\n     */\n    _generate_triplets(n_inliers, n_outliers, n_random) {\n        const { metric, weight_adj } = this._parameters;\n        const X = this.X;\n        const N = X.shape[0];\n        const knn = this.knn;\n        const n_extra = Math.min(n_inliers + 20, N);\n        const nbrs = new Matrix(N, n_extra);\n        const knn_distances = new Matrix(N, n_extra);\n        for (let i = 0; i < N; ++i) {\n            knn.search(X.row(i), n_extra + 1)\n                .raw_data()\n                .filter((d) => d.value != 0)\n                .sort((a, b) => a.value - b.value)\n                .forEach((d, j) => {\n                    nbrs.set_entry(i, j, d.element.index);\n                    knn_distances.set_entry(i, j, d.value);\n                });\n        }\n        // scale parameter\n        const sig = new Float64Array(N);\n        for (let i = 0; i < N; ++i) {\n            sig[i] = Math.max((knn_distances.entry(i, 3) + knn_distances.entry(i, 4) + knn_distances.entry(i, 5) + knn_distances.entry(i, 6)) / 4, 1e-10);\n        }\n\n        const P = this._find_p(knn_distances, sig, nbrs);\n\n        let triplets = this._sample_knn_triplets(P, nbrs, n_inliers, n_outliers);\n        let n_triplets = triplets.shape[0];\n        const outlier_distances = new Float64Array(n_triplets);\n        for (let i = 0; i < n_triplets; ++i) {\n            const j = triplets.entry(i, 0);\n            const k = triplets.entry(i, 2);\n            outlier_distances[i] = metric(X.row(j), X.row(k));\n        }\n        let weights = this._find_weights(triplets, P, nbrs, outlier_distances, sig);\n\n        if (n_random > 0) {\n            const { random_triplets, random_weights } = this._sample_random_triplets(X, n_random, sig);\n            triplets = triplets.concat(random_triplets, \"vertical\");\n            weights = Float64Array.from([...weights, ...random_weights]);\n        }\n        n_triplets = triplets.shape[0];\n        let max_weight = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            if (isNaN(weights[i])) {\n                weights[i] = 0;\n            }\n            if (max_weight < weights[i]) max_weight = weights[i];\n        }\n        let max_weight_2 = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight;\n            weights[i] += 0.0001;\n            weights[i] = Math.log(1 + weight_adj * weights[i]);\n            if (max_weight_2 < weights[i]) max_weight_2 = weights[i];\n        }\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight_2;\n        }\n        return {\n            triplets: triplets,\n            weights: weights,\n        };\n    }\n\n    /**\n     * Calculates the similarity matrix P\n     * @private\n     * @param {Matrix} knn_distances - matrix of pairwise knn distances\n     * @param {Float64Array} sig - scaling factor for the distances\n     * @param {Matrix} nbrs - nearest neighbors\n     * @returns {Matrix} pairwise similarity matrix\n     */\n    _find_p(knn_distances, sig, nbrs) {\n        const [N, n_neighbors] = knn_distances.shape;\n        return new Matrix(N, n_neighbors, (i, j) => {\n            return Math.exp(-(knn_distances.entry(i, j) ** 2 / sig[i] / sig[nbrs.entry(i, j)]));\n        });\n    }\n\n    /**\n     * Sample nearest neighbors triplets based on the similarity values given in P.\n     * @private\n     * @param {Matrix} P - Matrix of pairwise similarities between each point and its neighbors given in matrix nbrs.\n     * @param {Matrix} nbrs - Nearest neighbors indices for each point. The similarity values are given in matrix {@link P}. Row i corresponds to the i-th point.\n     * @param {Number} n_inliers - Number of inlier points.\n     * @param {Number} n_outliers - Number of outlier points.\n     *\n     */\n    _sample_knn_triplets(P, nbrs, n_inliers, n_outliers) {\n        const N = nbrs.shape[0];\n        const triplets = new Matrix(N * n_inliers * n_outliers, 3);\n        for (let i = 0; i < N; ++i) {\n            let n_i = i * n_inliers * n_outliers;\n            const sort_indices = this.__argsort(P.row(i));\n            for (let j = 0; j < n_inliers; ++j) {\n                let n_j = j * n_outliers;\n                const sim = nbrs.entry(i, sort_indices[j]);\n                const samples = this._rejection_sample(n_outliers, N, sort_indices.slice(0, j + 1));\n                for (let k = 0; k < n_outliers; ++k) {\n                    const index = n_i + n_j + k;\n                    const out = samples[k];\n                    triplets.set_entry(index, 0, i);\n                    triplets.set_entry(index, 1, sim);\n                    triplets.set_entry(index, 2, out);\n                }\n            }\n        }\n        return triplets;\n    }\n\n    /**\n     * Should do the same as np.argsort()\n     * @private\n     * @param {Array} A\n     */\n    __argsort(A) {\n        return linspace(0, A.length - 1).sort((i, j) => A[j] - A[i]);\n    }\n\n    /**\n     * Samples {@link n_samples} integers from a given interval [0, {@link max_int}] while rejection the values that are in the {@link rejects}.\n     * @private\n     * @param {*} n_samples\n     * @param {*} max_int\n     * @param {*} rejects\n     */\n    _rejection_sample(n_samples, max_int, rejects) {\n        const randomizer = this._randomizer;\n        const interval = linspace(0, max_int - 1).filter((d) => rejects.indexOf(d) < 0);\n        return randomizer.choice(interval, Math.min(n_samples, interval.length - 2));\n    }\n\n    /**\n     * Calculates the weights for the sampled nearest neighbors triplets\n     * @private\n     * @param {Matrix} triplets - Sampled Triplets.\n     * @param {Matrix} P - Pairwise similarity matrix.\n     * @param {Matrix} nbrs - nearest Neighbors\n     * @param {Float64Array} outlier_distances - Matrix of pairwise outlier distances\n     * @param {Float64Array} sig - scaling factor for the distances.\n     */\n    _find_weights(triplets, P, nbrs, outlier_distances, sig) {\n        const n_triplets = triplets.shape[0];\n        const weights = new Float64Array(n_triplets);\n        for (let t = 0; t < n_triplets; ++t) {\n            const i = triplets.entry(t, 0);\n            const sim = nbrs.row(i).indexOf(triplets.entry(t, 1));\n            const p_sim = P.entry(i, sim);\n            let p_out = Math.exp(-(outlier_distances[t] ** 2 / (sig[i] * sig[triplets.entry(t, 2)])));\n            if (p_out < 1e-20) p_out = 1e-20;\n            weights[t] = p_sim / p_out;\n        }\n        return weights;\n    }\n\n    /**\n     * Sample uniformly ranom triplets\n     * @private\n     * @param {Matrix} X - Data matrix.\n     * @param {Number} n_random - Number of random triplets per point\n     * @param {Float64Array} sig - Scaling factor for the distances\n     */\n    _sample_random_triplets(X, n_random, sig) {\n        const metric = this.parameter(\"metric\");\n        const randomizer = this._randomizer;\n        const N = X.shape[0];\n        const random_triplets = new Matrix(N * n_random, 3);\n        const random_weights = new Float64Array(N * n_random);\n        for (let i = 0; i < N; ++i) {\n            const n_i = i * n_random;\n            const indices = [...linspace(0, i - 1), ...linspace(i + 1, N - 1)];\n            for (let j = 0; j < n_random; ++j) {\n                let [sim, out] = randomizer.choice(indices, 2);\n                let p_sim = Math.exp(-(metric(X.row(i), X.row(sim)) ** 2 / (sig[i] * sig[sim])));\n                if (p_sim < 1e-20) p_sim = 1e-20;\n                let p_out = Math.exp(-(metric(X.row(i), X.row(out)) ** 2 / (sig[i] * sig[out])));\n                if (p_out < 1e-20) p_out = 1e-20;\n\n                if (p_sim < p_out) {\n                    [sim, out] = [out, sim];\n                    [p_sim, p_out] = [p_out, p_sim];\n                }\n                const index = n_i + j;\n                random_triplets.set_entry(index, 0, i);\n                random_triplets.set_entry(index, 1, sim);\n                random_triplets.set_entry(index, 2, out);\n                random_weights[index] = p_sim / p_out;\n            }\n        }\n        return {\n            random_triplets: random_triplets,\n            random_weights: random_weights,\n        };\n    }\n\n    /**\n     * Computes the gradient for updating the embedding.\n     * @param {Matrix} Y - The embedding\n     */\n    _grad(Y) {\n        const n_inliers = this.n_inliers;\n        const n_outliers = this.n_outliers;\n        const triplets = this.triplets;\n        const weights = this.weights;\n        const [N, dim] = Y.shape;\n        const n_triplets = triplets.shape[0];\n        const grad = new Matrix(N, dim, 0);\n        let y_ij = new Float64Array(dim);\n        let y_ik = new Float64Array(dim);\n        let d_ij = 1;\n        let d_ik = 1;\n        let n_viol = 0;\n        let loss = 0;\n        const n_knn_triplets = N * n_inliers * n_outliers;\n\n        for (let t = 0; t < n_triplets; ++t) {\n            const [i, j, k] = triplets.row(t);\n            // update y_ij, y_ik, d_ij, d_ik\n            if (t % n_outliers == 0 || t >= n_knn_triplets) {\n                d_ij = 1;\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_jd = Y.entry(j, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ij[d] = Y_id - Y_jd;\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ij += y_ij[d] ** 2;\n                    d_ik += y_ik[d] ** 2;\n                }\n                // update y_ik and d_ik only\n            } else {\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ik += y_ik[d] ** 2;\n                }\n            }\n\n            if (d_ij > d_ik) ++n_viol;\n            loss += weights[t] / (1 + d_ik / d_ij);\n            const w = (weights[t] / (d_ij + d_ik)) ** 2;\n            for (let d = 0; d < dim; ++d) {\n                const gs = y_ij[d] * d_ik * w;\n                const go = y_ik[d] * d_ij * w;\n                grad.add_entry(i, d, gs - go);\n                grad.sub_entry(j, d, gs);\n                grad.add_entry(k, d, go);\n            }\n        }\n        return { grad, loss, n_viol };\n    }\n\n    /**\n     *\n     * @param {Number} max_iteration\n     */\n    transform(max_iteration = 400) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n        }\n        return this.projection;\n    }\n\n    /**\n     * @param {Number} max_iteration\n     * @yields {Matrix}\n     * @returns {Matrix}\n     */\n    *generator(max_iteration = 800) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Does the iteration step.\n     * @private\n     * @param {Number} iter\n     */\n    _next(iter) {\n        const gamma = iter > 150 ? 0.5 : 0.3;\n        const old_C = this.C;\n        const vel = this.vel;\n        const Y = this.Y.add(vel.mult(gamma));\n        const { grad, loss, n_viol } = this._grad(Y);\n        this.C = loss;\n        this.Y = this._update_embedding(Y, iter, grad);\n        this.lr *= old_C > loss + this._parameters.tol ? 1.01 : 0.9;\n        return this.Y;\n    }\n\n    /**\n     * Updates the embedding.\n     * @private\n     * @param {Matrix} Y\n     * @param {Number} iter\n     * @param {Matrix} grad\n     */\n    _update_embedding(Y, iter, grad) {\n        const [N, dim] = Y.shape;\n        const gamma = iter > 150 ? 0.9 : 0.5; // moment parameter\n        const min_gain = 0.01;\n        const gain = this.gain;\n        const vel = this.vel;\n        const lr = this.lr;\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const new_gain = Math.sign(vel.entry(i, d)) != Math.sign(grad.entry(i, d)) ? gain.entry(i, d) + 0.2 : Math.max(gain.entry(i, d) * 0.8, min_gain);\n                gain.set_entry(i, d, new_gain);\n                vel.set_entry(i, d, gamma * vel.entry(i, d) - lr * gain.entry(i, d) * grad.entry(i, d));\n                Y.set_entry(i, d, Y.entry(i, d) + vel.entry(i, d));\n            }\n        }\n        return Y;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n/**\n * @class\n * @alias Hierarchical_Clustering\n */\nexport class Hierarchical_Clustering {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias Hierarchical_Clustering\n     * @todo needs restructuring.\n     * @param {Matrix} - Data or distance matrix if metric is 'precomputed'\n     * @param {(\"single\"|\"complete\"|\"average\")} [linkage = \"complete\"]\n     * @param {Function|\"precomputed\"} [metric = euclidean]\n     * @returns {Hierarchical_Clustering}\n     */\n    constructor(matrix, linkage = \"complete\", metric = euclidean) {\n        this._id = 0;\n        this._matrix = matrix instanceof Matrix ? matrix : Matrix.from(matrix);\n        this._metric = metric;\n        this._linkage = linkage;\n        if (metric === \"precomputed\" && this._matrix.shape[0] !== this._matrix.shape[1]) {\n            throw new Error(\"If metric is 'precomputed', then matrix has to be square!\");\n        }\n        this.init();\n        this.root = this.do();\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} value - value where to cut the tree.\n     * @param {(\"distance\"|\"depth\")} [type = \"distance\"] - type of value.\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters(value, type = \"distance\") {\n        let clusters = [];\n        let accessor;\n        switch (type) {\n            case \"distance\":\n                accessor = (d) => d.dist;\n                break;\n            case \"depth\":\n                accessor = (d) => d.depth;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        this._traverse(this.root, accessor, value, clusters);\n        return clusters;\n    }\n\n    /**\n     * @private\n     * @param {} node\n     * @param {*} f\n     * @param {*} value\n     * @param {*} result\n     */\n    _traverse(node, f, value, result) {\n        if (f(node) <= value) {\n            result.push(node.leaves());\n        } else {\n            this._traverse(node.left, f, value, result);\n            this._traverse(node.right, f, value, result);\n        }\n    }\n\n    /**\n     * computes the tree.\n     */\n    init() {\n        const metric = this._metric;\n        const A = this._matrix;\n        const n = (this._n = A.shape[0]);\n        const d_min = (this._d_min = new Float64Array(n));\n        let distance_matrix;\n        if (metric !== \"precomputed\") {\n            distance_matrix = new Matrix(n, n, 0); //new Array(n);\n            for (let i = 0; i < n; ++i) {\n                d_min[i] = 0;\n                //distance_matrix[i] = new Float64Array(n);\n                for (let j = 0; j < n; ++j) {\n                    distance_matrix.set_entry(i, j, i === j ? Infinity : metric(A.row(i), A.row(j)));\n                    if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        } else {\n            distance_matrix = this._matrix.clone();\n            for (let i = 0; i < n; ++i) {\n                for (let j = 0; j < n; ++j) {\n                    if (i === j) {\n                        distance_matrix.set_entry(i, j, Infinity);\n                    } else if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        }\n        this._distance_matrix = distance_matrix;\n        const clusters = (this._clusters = new Array(n));\n        const c_size = (this._c_size = new Uint16Array(n));\n        for (let i = 0; i < n; ++i) {\n            clusters[i] = [];\n            clusters[i][0] = new Cluster(this._id++, null, null, 0, A.row(i), i, 1, 0);\n            c_size[i] = 1;\n        }\n        return this;\n    }\n\n    /**\n     * computes the tree.\n     */\n    do() {\n        const n = this._n;\n        const d_min = this._d_min;\n        const D = this._distance_matrix;\n        const clusters = this._clusters;\n        const c_size = this._c_size;\n        const linkage = this._linkage;\n        let root = null;\n        for (let p = 0, p_max = n - 1; p < p_max; ++p) {\n            let c1 = 0;\n            for (let i = 0; i < n; ++i) {\n                let D_i_min = D.entry(i, d_min[i]);\n                for (let j = i + 1; j < n; ++j) {\n                    if (D_i_min > D.entry(i, j)) {\n                        d_min[i] = j;\n                        D_i_min = D.entry(i, d_min[i]);\n                    }\n                }\n            }\n            for (let i = 0; i < n; ++i) {\n                if (D.entry(i, d_min[i]) < D.entry(c1, d_min[c1])) {\n                    c1 = i;\n                }\n            }\n            let c2 = d_min[c1];\n            let c1_cluster = clusters[c1][0];\n            let c2_cluster = clusters[c2][0];\n            let c1_cluster_indices = c1_cluster.isLeaf ? [c1_cluster.index] : c1_cluster.index;\n            let c2_cluster_indices = c2_cluster.isLeaf ? [c2_cluster.index] : c2_cluster.index;\n            let indices = c1_cluster_indices.concat(c2_cluster_indices);\n            let new_cluster = new Cluster(this._id++, c1_cluster, c2_cluster, D.entry(c1, c2), null, indices);\n            c1_cluster.parent = new_cluster;\n            c2_cluster.parent = new_cluster;\n            clusters[c1].unshift(new_cluster);\n            c_size[c1] += c_size[c2];\n            for (let j = 0; j < n; ++j) {\n                const D_c1_j = D.entry(c1, j);\n                const D_c2_j = D.entry(c2, j);\n                let value;\n                switch (linkage) {\n                    case \"single\":\n                        value = Math.min(D_c1_j, D_c2_j);\n                        break;\n                    case \"complete\":\n                        value = Math.max(D_c1_j, D_c2_j);\n                        break;\n                    case \"average\":\n                        value = (c_size[c1] * D_c1_j + c_size[c2] * D_c2_j) / (c_size[c1] + c_size[j]);\n                        break;\n                }\n                D.set_entry(j, c1, value);\n                D.set_entry(c1, j, value);\n            }\n\n            D.set_entry(c1, c1, Infinity);\n            for (let i = 0; i < n; ++i) {\n                D.set_entry(i, c2, Infinity);\n                D.set_entry(c2, i, Infinity);\n            }\n\n            /* for (let j = 0; j < n; ++j) {\n                if (d_min[j] === c2) {\n                    d_min[j] = c1;\n                }\n                if (D.entry(c1, j) < D.entry(c1, d_min[c1])) {\n                    d_min[c1] = j;\n                }\n            } */\n            root = new_cluster;\n        }\n        return root;\n    }\n}\n\nclass Cluster {\n    constructor(id, left, right, dist, centroid, index, size, depth) {\n        this.id = id;\n        this.left = left;\n        this.right = right;\n        this.dist = dist;\n        this.index = index;\n        this.size = size ?? left.size + right.size;\n        this.depth = depth ?? 1 + Math.max(left.depth, right.depth);\n        this.centroid = centroid ?? this._calculate_centroid(left, right);\n        this.parent = null;\n        return this;\n    }\n\n    _calculate_centroid(left, right) {\n        const l_size = left.size;\n        const r_size = right.size;\n        const l_centroid = left.centroid;\n        const r_centroid = right.centroid;\n        const size = this.size;\n        const n = left.centroid.length;\n        const new_centroid = new Float64Array(n);\n        for (let i = 0; i < n; ++i) {\n            new_centroid[i] = (l_size * l_centroid[i] + r_size * r_centroid[i]) / size;\n        }\n        return new_centroid;\n    }\n\n    get isLeaf() {\n        return this.depth === 0;\n    }\n\n    leaves() {\n        if (this.isLeaf) return [this];\n        const left = this.left;\n        const right = this.right;\n        return (left.isLeaf ? [left] : left.leaves()).concat(right.isLeaf ? [right] : right.leaves());\n    }\n\n    descendants() {\n        if (this.isLeaf) return [this];\n        const left_descendants = this.left.descendants();\n        const right_descendants = this.right.descendants();\n        return left_descendants.concat(right_descendants).concat([this]);\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { linspace } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KMeans\n */\nexport class KMeans {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMeans\n     * @todo needs restructuring. \n     * @param {Matrix} matrix \n     * @param {Numbers} K \n     * @param {Function} [metric = euclidean] \n     * @param {Number} [seed = 1987]\n     * @param {Boolean} [init = true]\n     * @returns {KMeans}\n     */\n    constructor(matrix, K, metric = euclidean, seed=1987, init = true) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_centroids = this._get_random_centroids(K);\n        if (init) this.init(K, this._cluster_centroids);\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const clusters = this._clusters;\n        const result = new Array(K).fill().map(() => new Array());\n        clusters.forEach((c, i) => result[c].push(i));\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Array} points \n     * @param {Array} candidates \n     */\n    _furthest_point(points, candidates) {\n        const A = this._matrix;\n        const metric = this._metric;\n        let i = points.length;\n        let H = Heap.heapify(\n            candidates, \n            (d) => {\n                const Ad = A.row(d)\n                let sum = 0;\n                for (let j = 0; j < i; ++j) {\n                    sum += metric(Ad, points[j])\n                }\n                return sum;\n            }, \n            \"max\"\n        )\n        return H.pop().element;\n    }\n\n    _get_random_centroids(K) {\n        const N = this._N;\n        const randomizer = this._randomizer;\n        const A = this._matrix;\n        const cluster_centroids = new Array(K).fill()\n        const indices = linspace(0, N - 1);\n        const random_point = randomizer.random_int % (N - 1);\n        cluster_centroids[0] = A.row(random_point);\n        const init_points = [random_point];\n        const sample_size = Math.floor((N - K) / K);// / K\n        for (let i = 1; i < K; ++i) {\n            // sampling + kmeans++ improvement?\n            const sample = randomizer.choice(indices.filter(d => init_points.indexOf(d) == -1), sample_size);\n            const furthest_point = this._furthest_point(cluster_centroids.slice(0, i), sample);\n            init_points.push(furthest_point);\n            cluster_centroids[i] = A.row(furthest_point);\n        }\n        return cluster_centroids;\n    }\n\n    _iteration(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const metric = this._metric;\n        const clusters = this._clusters;\n        let clusters_changed = false;\n        // find nearest cluster centroid.\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i)\n            let min_dist = Infinity;\n            let min_cluster = null;\n            for (let j = 0; j < K; ++j) {\n                let d = metric(cluster_centroids[j], Ai);\n                if (d < min_dist) {\n                    min_dist = d;\n                    min_cluster = j; \n                }\n            }\n            if (clusters[i] !== min_cluster) {\n                clusters_changed = true;\n            }\n            clusters[i] = min_cluster;\n        }\n        // update cluster centroid\n        // reset cluster centroids to 0\n        for (let i = 0; i < K; ++i) {\n            const centroid = cluster_centroids[i];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] = 0;\n            }\n        }\n        // compute centroid\n        this._compute_centroid(cluster_centroids);\n\n        return {   \n            \"clusters_changed\": clusters_changed,\n            \"cluster_centroids\": cluster_centroids\n        };\n    }\n\n    _compute_centroid(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const clusters = this._clusters;\n        const cluster_counter = new Array(K).fill(0);\n\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i);\n            const ci = clusters[i];\n            cluster_counter[ci]++;\n            const centroid = cluster_centroids[ci];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] += Ai[j];\n            }\n        }\n        for (let i = 0; i < K; ++i) {\n            const n = cluster_counter[i];\n            cluster_centroids[i] = cluster_centroids[i].map(c => c / n);\n        }\n        \n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_centroids) {\n        if (!K) K = this._K;\n        if (!cluster_centroids) cluster_centroids = this._get_random_centroids(K);\n        let clusters_changed = false;\n        do {\n            const iteration_result = this._iteration(cluster_centroids)\n            cluster_centroids = iteration_result.cluster_centroids;\n            clusters_changed = iteration_result.clusters_changed;\n        } while (clusters_changed)\n    }\n    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { linspace, Matrix } from \"../matrix/index.js\";\nimport { min } from \"../util/index.js\";\n/**\n * @class\n * @alias KMedoids\n */\nexport class KMedoids {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMedoids\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - data matrix\n     * @param {Numbers} K - number of clusters\n     * @param {number} [max_iter=null] - maximum number of iterations. Default is 10 * Math.log10(N)\n     * @param {Function} [metric = euclidean] - metric defining the dissimilarity \n     * @param {Number} [seed = 1212] - seed value for random number generator\n     * @returns {KMedoids}\n     * @see {@link https://link.springer.com/chapter/10.1007/978-3-030-32047-8_16} Faster k-Medoids Clustering: Improving the PAM, CLARA, and CLARANS Algorithms\n     */\n    constructor(matrix, K, max_iter=null, metric = euclidean, seed=1212) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._A = this._matrix.to2dArray;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        this._max_iter = max_iter || 10 * Math.log10(N) \n        this._distance_matrix = new Matrix(N, N, \"zeros\");\n        /* for (let i = 1; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dist = metric(this._A[i], this._A[j]);\n                this._distance_matrix.set_entry(i, j, dist);\n                this._distance_matrix.set_entry(j, i, dist)\n            }\n        } */\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_medoids = this._get_random_medoids(K);\n        //if (init) this.init(K, this._cluster_medoids);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const A = this._A;\n        if (!this._is_initialized) {\n            this.init(K, this._cluster_medoids);\n        }\n        const result = new Array(K).fill().map(() => new Array());\n        A.forEach((x_j, j) => {\n            result[this._nearest_medoid(x_j, j).index_nearest].push(j);\n        })\n        result.medoids = this._cluster_medoids;\n        return result;\n    }\n\n    async* generator() {\n        const max_iter = this._max_iter;\n        yield this.get_clusters()\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n            yield this.get_clusters();\n        } while (!finish && ++i < max_iter)\n    }\n\n    /**\n     * Algorithm 1. FastPAM1: Improved SWAP algorithm\n     */\n    /* _iteration_1() {\n        const A = this._A;\n        const N = this._N;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        let DeltaTD = 0;\n        let m0 = null;\n        let x0 = null;\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const nearest_medoid = this._nearest_medoid(x_j, j);\n                const d_j = nearest_medoid.distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    // disance to new medoid\n                    const d_oj = this._get_distance(o, j, x_o, x_j);\n                    const {\n                        \"index_nearest\": n,\n                        \"distance_nearest\": d_n,\n                        \"distance_second\": d_s,\n                    } = this._nearest_medoid(x_o, o); \n                    this._clusters[o] = n; // cached values\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change\n                    if (d_oj < d_n) { // reassignment check\n                        deltaTD.forEach((d_i, i) => {\n                            if (n !== i) {\n                                deltaTD[i] = d_i + d_oj - d_n; // update loss change\n                            }\n                        });\n                    }\n                });\n                // choose best medoid i;\n                const i = deltaTD\n                    .map((d, i) => [d, i])\n                    .sort((d1, d2) => d1[0] - d2[0])[0][1];\n                const deltaTD_i = deltaTD[i];\n                // store\n                if (deltaTD_i < DeltaTD) {\n                    DeltaTD = deltaTD_i;\n                    m0 = i;\n                    x0 = j;\n                }\n            }\n        });\n\n        if (DeltaTD >= 0) {\n            return true // break loop if DeltaTD >= 0\n        }\n        // swap roles of medoid m and non-medoid x;\n        medoids[m0] = x0;\n        this._cluster_medoids = medoids;\n        return false\n    } */\n\n    /** Algorithm 2. FastPAM2: SWAP with multiple candidates\n     * \n     */\n    _iteration() {\n        const A = this._A;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        const cache = A.map((x_o, o) => this._nearest_medoid(x_o, o));\n        // empty best candidates array\n        const DeltaTD = new Array(K).fill(0);\n        const xs = new Array(K).fill(null);\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const d_j = cache[j].distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    if (j === o) return;\n                    const d_oj = this._get_distance(o, j, x_o, x_j); // distance to new medoid\n                    const {\"index_nearest\": n, \"distance_nearest\": d_n, \"distance_second\": d_s} = cache[o]; // cached\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change for x_o\n                    // Reassignment check\n                    if (d_oj < d_n) { \n                        // update loss change\n                        for (let i = 0; i < K; ++i) {\n                            if (i !== n) deltaTD[i] += d_oj - d_n;\n                        }\n                    }\n                });\n                // remember best swap for i;\n                deltaTD\n                    .map((d, i) => [d, i])\n                    .filter(([d, i]) => d < DeltaTD[i])\n                    .forEach(([d, i]) => {\n                        if (d < DeltaTD[i]) {\n                            DeltaTD[i] = d;\n                            xs[i] = j;\n                        }\n                    })\n            }\n        })\n        // stop if no improvements were found\n        if (min(DeltaTD) >= 0) return true; \n\n        // execute all improvements\n        while (min(DeltaTD) < 0) {\n            // swap roles of medoid m_i and non_medoid xs_i\n            const i = DeltaTD\n                .map((d, i) => [d, i])\n                .sort(([a], [b]) => a - b)[0][1];\n            if (medoids.filter(m => m == xs[i]).length == 0) {\n                medoids[i] = xs[i];\n            }\n            // disable the swap just performed\n            DeltaTD[i] = 0; \n            // recompute TD for remaining swap candidates\n            DeltaTD\n                .map((d_j, j) => [d_j, j])\n                .filter(([d_j]) => d_j < 0)\n                .forEach(([_, j]) => {\n                    const x_j = A[j];\n                    let sum = 0;\n                    A.forEach((x_o, o) => {\n                        if (medoids.findIndex(m => m != j && m == o) >= 0) return;\n                        if (i == j) return;\n                        if (cache[o].index_nearest === medoids[j])\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j), cache[o].distance_second) - cache[o].distance_nearest); \n                        else {\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j) - cache[o].distance_nearest, 0));\n                        }\n                    });\n                    DeltaTD[j] = sum;\n                })\n        }\n        this._cluster_medoids = medoids;\n        return false;\n    }\n\n    _get_distance(i, j, x_i=null, x_j=null) {\n        if (i === j) return 0;\n        const D = this._distance_matrix;\n        const A = this._A;\n        const metric = this._metric;\n        let d_ij = D.entry(i, j);\n        if (d_ij === 0) {\n            d_ij = metric(x_i || A[i], x_j || A[j]);\n            D.set_entry(i, j, d_ij);\n            D.set_entry(j, i, d_ij);\n        }\n        return d_ij;\n    }\n\n    _nearest_medoid(x_j, j) {\n        const medoids = this._cluster_medoids;\n        const A = this._A;\n        const [nearest, second] = medoids\n            .map((m, i) => {\n                const x_m = A[m]; \n                return [this._get_distance(j, m, x_j, x_m), i];\n            })\n            .sort((m1, m2) => m1[0] - m2[0]);\n        \n        return { \n            \"distance_nearest\": nearest[0], \n            \"index_nearest\": nearest[1],\n            \"distance_second\": second[0],\n            \"index_second\": second[1],\n        };\n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_medoids) {\n        if (!K) K = this._K;\n        if (!cluster_medoids) cluster_medoids = this._get_random_medoids(K);\n        const max_iter = this._max_iter;\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n        } while (!finish && ++i < max_iter)\n        return this;\n    }\n\n    /**\n     * Algorithm 3. FastPAM LAB: Linear Approximate BUILD initialization.\n     * @param {number} K - number of clusters\n     * \n     */\n    _get_random_medoids(K) {\n        const N = this._N;\n        const A = this._A;\n        const indices = linspace(0, N - 1);\n        const randomizer = this._randomizer;\n        const n = Math.min(N, 10 + Math.ceil(Math.sqrt(N)));\n        const TD = new Array(n).fill(Infinity);\n        const medoids = [];\n        // first medoid\n        let TD0 = Infinity;\n        let S = randomizer.choice(indices, n);\n        for (let j = 0; j < n; ++j) {\n            const S_j = S[j];\n            const x_j = A[S_j];\n            for (let o = 0; o < n; ++o) {\n                if (o === j) continue;\n                const x_o = A[S[o]];\n                TD[j] += this._get_distance(j, o, x_j, x_o);\n            }\n            if (TD[j] < TD0) {\n                TD0 = TD[j]; // smallest distance sum\n                medoids.push(S_j);\n            }\n        }\n        // other medoids\n        for (let i = 1; i < K; ++i) {\n            let DeltaTD = Infinity;\n            S = randomizer.choice(indices.filter(index => medoids.findIndex(d => d === index) < 0), n);\n            for (let j = 0; j < n; ++j) {\n                let deltaTD = 0;\n                const S_j = S[j];\n                const x_j = A[S_j];\n                for (let o = 0; o < n; ++o) {\n                    if (o === j) continue;\n                    const S_o = S[o];\n                    const x_o = A[S_o];\n                    let delta = this._get_distance(S_j, S_o, x_j, x_o) - min(medoids.map(m => this._get_distance(S_o, m, x_o)));\n                    if (delta < 0) {\n                        deltaTD = deltaTD + delta;\n                    }\n                }\n                // best reduction\n                if (deltaTD < DeltaTD) {\n                    DeltaTD = deltaTD;\n                    medoids.push(S_j);\n                }\n            }\n            TD0 += DeltaTD;\n        }\n        return medoids.slice(0, K);\n    }\n    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias OPTICS\n */\nexport class OPTICS {\n    /**\n     * **O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure.\n     * @constructor\n     * @memberof module:clustering\n     * @alias OPTICS\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - the data.\n     * @param {Number} epsilon - the minimum distance which defines whether a point is a neighbor or not.\n     * @param {Number} min_points - the minimum number of points which a point needs to create a cluster. (Should be higher than 1, else each point creates a cluster.)\n     * @param {Function} [metric = euclidean] - the distance metric which defines the distance between two points of the {@link matrix}.\n     * @returns {OPTICS}\n     * @see {@link https://www.dbs.ifi.lmu.de/Publikationen/Papers/OPTICS.pdf}\n     * @see {@link https://en.wikipedia.org/wiki/OPTICS_algorithm}\n     */\n    constructor(matrix, epsilon, min_points, metric = euclidean) {\n        this._matrix = matrix;\n        this._epsilon = epsilon;\n        this._min_points = min_points;\n        this._metric = metric;\n\n        this._ordered_list = [];\n        this._clusters = [];\n        this._DB = new Array(matrix.shape[0]).fill();\n        this.init();\n        return this;\n    }\n\n    /**\n     * Computes the clustering.\n     */\n    init() {\n        const ordered_list = this._ordered_list;\n        const matrix = this._matrix;\n        const N = matrix.shape[0];\n        const DB = this._DB;\n        const clusters = this._clusters;\n        let cluster_index = this._cluster_index = 0;\n\n        for (let i = 0; i < N; ++i) {\n            DB[i] = {\n                \"element\": matrix.row(i),\n                \"index\": i,\n                \"reachability_distance\": undefined,\n                \"processed\": false,\n            }\n        }\n        for (const p of DB) {\n            if (p.processed) continue;\n            p.neighbors = this._get_neighbors(p);\n            p.processed = true;\n            clusters.push([p.index])\n            cluster_index = clusters.length - 1;\n            ordered_list.push(p);\n            if (this._core_distance(p) != undefined) {\n                const seeds = new Heap(null, d => d.reachability_distance, \"min\")\n                this._update(p, seeds);\n                this._expand_cluster(seeds, clusters[cluster_index]);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Array} An array consisting of the {@link epsilon}-neighborhood of {@link p}.\n     */\n    _get_neighbors(p) {\n        if (\"neighbors\" in p) return p.neighbors;\n        const DB = this._DB;\n        const metric = this._metric;\n        const epsilon = this._epsilon;\n        const neighbors = [];\n        for (const q of DB) {\n            if (q.index == p.index) continue;\n            if (metric(p.element, q.element) < epsilon) {\n                neighbors.push(q);\n            }\n        }\n        return neighbors;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Number} The distance to the {@link min_points}-th nearest point of {@link p}, or undefined if the {@link epsilon}-neighborhood has fewer elements than {@link min_points}.\n     */\n    _core_distance(p) {\n        const min_points = this._min_points;\n        const metric = this._metric;\n        if (p.neighbors && p.neighbors.length <= min_points) {\n            return undefined;\n        }\n        return metric(p.element, p.neighbors[min_points].element);\n    }\n\n    /**\n     * Updates the reachability distance of the points.\n     * @private\n     * @param {Object} p \n     * @param {Heap} seeds \n     */\n    _update(p, seeds) {\n        const metric = this._metric;\n        const core_distance = this._core_distance(p);\n        const neighbors = this._get_neighbors(p);//p.neighbors;\n        for (const q of neighbors) {\n            if (q.processed) continue;\n            const new_reachability_distance = Math.max(core_distance, metric(p.element, q.element));\n            //if (q.reachability_distance == undefined) { // q is not in seeds\n            if (seeds.raw_data().findIndex(d => d.element == q) < 0) {\n                q.reachability_distance = new_reachability_distance;\n                seeds.push(q);\n            } else { // q is in seeds\n                if (new_reachability_distance < q.reachability_distance) {\n                    q.reachability_distance = new_reachability_distance;\n                    seeds = Heap.heapify(seeds.data(), d => d.reachability_distance, \"min\"); // seeds change key =/\n                }\n            }\n        }\n    }\n\n    /**\n     * Expands the {@link cluster} with points in {@link seeds}.\n     * @private\n     * @param {Heap} seeds \n     * @param {Array} cluster \n     */\n    _expand_cluster(seeds, cluster) {\n        const ordered_list = this._ordered_list;\n        while (!seeds.empty) {\n            const q = seeds.pop().element;\n            q.neighbors = this._get_neighbors(q);\n            q.processed = true;\n            cluster.push(q.index);\n            ordered_list.push(q);\n            if (this._core_distance(q) != undefined) {\n                this._update(q, seeds);\n                this._expand_cluster(seeds, cluster);\n            }\n        }\n    }\n\n    /**\n     * Returns an array of clusters.\n     * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters() {\n        const clusters = [];\n        const outliers = [];\n        const min_points = this._min_points;\n        for (const cluster of this._clusters) {\n            if (cluster.length < min_points) {\n                outliers.push(...cluster);\n            } else {\n                clusters.push(cluster);\n            }\n        }\n        clusters.push(outliers);\n        return clusters;\n    }\n\n    /**\n     * @returns {Array} Returns an array, where the ith entry defines the cluster affirmation of the ith point of {@link matrix}. (-1 stands for outlier)\n     */\n    get_cluster_affirmation() {\n        const N = this._matrix.shape[0];\n        const result = new Array(N).fill();\n        const clusters = this.get_clusters();\n        for (let i = 0, n = clusters.length; i < n; ++i) {\n            const cluster = clusters[i]\n            for (const index of cluster) {\n                result[index] = (i < n - 1) ? i : -1;\n            }\n        }\n        return result;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\nimport { MDS } from \"./MDS.js\";\nimport { KMedoids } from \"../clustering/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\n/**\n * @class\n * @alias LSP\n * @extends DR\n */\nexport class LSP extends DR {\n    /**\n     * Least Squares Projection.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LSP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.neighbors = Math.max(Math.floor(N / 10), 2)] - number of neighbors to consider.\n     * @param {Number} [parameters.control_points = Math.ceil(Math.sqrt(N))] - number of controlpoints\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {LSP}\n     * @see {@link https://ieeexplore.ieee.org/document/4378370}\n     * @todo accept precomputed distance matrix.\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, control_points: undefined, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        this.parameter(\"control_points\", Math.min(parameters.control_points ?? Math.ceil(Math.sqrt(this._N)), this._N - 1));\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     *\n     * @param {DR} DR - method used for position control points.\n     * @param {Object} DR_parameters - Object containing parameters for the DR method which projects the control points\n     * @returns {LSP}\n     */\n    init(DR = MDS, DR_parameters = {}, KNN = BallTree) {\n        if (this._is_initialized) return this;\n        const X = this.X;\n        const N = this._N;\n        const K = this.parameter(\"neighbors\");\n        const d = this.parameter(\"d\");\n        const seed = this.parameter(\"seed\");\n        const metric = this.parameter(\"metric\");\n        DR_parameters = Object.assign({d, metric, seed }, DR_parameters);\n        const nc = this.parameter(\"control_points\");\n        const control_points = new KMedoids(X, nc, null, metric).get_clusters().medoids;\n        const C = new Matrix(nc, N, \"zeros\");\n        control_points.forEach((c_i, i) => {\n            C.set_entry(i, c_i, 1);\n        });\n        const Y_C = new DR(Matrix.from(control_points.map((c_i) => X.row(c_i))), DR_parameters).transform();\n\n        const XA = X.to2dArray;\n        const knn = new KNN(XA, metric);\n        const L = new Matrix(N, N, \"I\");\n        const alpha = -1 / K;\n        XA.forEach((x_i, i) => {\n            for (const { index: j } of knn.search(x_i, K).iterate()) {\n                if (i === j) continue;\n                L.set_entry(i, j, alpha);\n            }\n        });\n        const A = L.concat(C, \"vertical\");\n\n        const z = new Matrix(N, d, \"zeros\");\n        const b = z.concat(Y_C, \"vertical\");\n\n        this._A = A;\n        this._b = b;\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const A = this._A;\n        const b = this._b;\n        const ATA = A.transDot(A);\n        const ATb = A.transDot(b);\n        this.Y = Matrix.solve_CG(ATA, ATb, this._randomizer);\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { DisjointSet } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias TopoMap\n * @memberof module:dimensionality_reduction\n * @extends DR\n */\nexport class TopoMap extends DR {\n    /**\n     * TopoMap: A 0-dimensional Homology Preserving Projection of High-Dimensional Data.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TopoMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TopoMap}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._distance_matrix = new Matrix(this._N, this._N, 0);\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    __lazy_distance_matrix(i, j, metric) {\n        const D = this._distance_matrix;\n        const X = this.X;\n        const D_ij = D.entry(i, j);\n        if (D_ij === 0) {\n            let dist = metric(X.row(i), X.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n            return dist;\n        }\n        return D_ij;\n    }\n\n    /**\n     * Computes the minimum spanning tree, using a given metric\n     * @private\n     * @param {Function} metric\n     * @see {@link https://en.wikipedia.org/wiki/Kruskal%27s_algorithm}\n     */\n    _make_minimum_spanning_tree(metric = euclidean) {\n        const N = this._N;\n        const X = [...this.X];\n\n        let disjoint_set = new DisjointSet(X);\n        const F = [];\n        let E = [];\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                E.push([i, j, this.__lazy_distance_matrix(i, j, metric)]);\n            }\n        }\n        E = E.sort((a, b) => a[2] - b[2]);\n\n        for (const [u, v, w] of E) {\n            const set_u = disjoint_set.find(X[u]);\n            const set_v = disjoint_set.find(X[v]);\n            if (set_u !== set_v) {\n                F.push([u, v, w]);\n                disjoint_set.union(set_u, set_v);\n            }\n        }\n\n        return F.sort((a, b) => a[2] - b[2]);\n    }\n\n    /**\n     * initializes TopoMap. Sets all projcted points to zero, and computes a minimum spanning tree.\n     */\n    init() {\n        const { metric} = this._parameters\n        this.Y = new Matrix(this._N, 2, 0);\n        this._Emst = this._make_minimum_spanning_tree(metric);\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Returns true if Point C is left of line AB.\n     * @private\n     * @param {Array} PointA - Point A of line AB\n     * @param {Array} PointB - Point B of line AB\n     * @param {Array} PointC - Point C\n     * @returns {Boolean}\n     */\n    __hull_cross([ax, ay], [bx, by], [sx, sy]) {\n        return (bx - ax) * (sy - ay) - (by - ay) * (sx - ax) <= 0;\n    }\n\n    /**\n     * Computes the convex hull of the set of Points S\n     * @private\n     * @param {Array} S - Set of Points.\n     * @see {@link https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript}\n     * @returns {Array} convex hull of S. Starts at the bottom-most point and continues counter-clockwise.\n     */\n    __hull(S) {\n        const points = S.sort(([x1, y1], [x2, y2]) => y1 - y2 || x1 - x2);\n        const N = points.length;\n        if (N <= 2) return points;\n\n        const lower = [];\n        for (let i = 0; i < N; ++i) {\n            while (lower.length >= 2 && this.__hull_cross(lower[lower.length - 2], lower[lower.length - 1], points[i])) {\n                lower.pop();\n            }\n            lower.push(points[i]);\n        }\n        const upper = [];\n        for (let i = N - 1; i >= 0; --i) {\n            while (upper.length >= 2 && this.__hull_cross(upper[upper.length - 2], upper[upper.length - 1], points[i])) {\n                upper.pop();\n            }\n            upper.push(points[i]);\n        }\n        upper.pop();\n        lower.pop();\n        return lower.concat(upper);\n    }\n\n    /**\n     * Finds the angle to rotate Point A and B to lie on a line parallel to the x-axis.\n     * @private\n     * @param {Array} PointA\n     * @param {Array} PointB\n     * @return {Object} Object containing the sinus- and cosinus-values for a rotation.\n     */\n    __findAngle([p1x, p1y], [p2x, p2y]) {\n        const n = euclidean([p1x, p1y], [p2x, p2y]);\n        if (n === 0)\n            return {\n                sin: 0,\n                cos: 1,\n            };\n        const vec = [(p2x - p1x) / n, (p2y - p1y) / n];\n        const cos = vec[0];\n        let sin = Math.sqrt(1 - cos * cos);\n        sin = vec[1] >= 0 ? -sin : sin;\n        return {\n            sin: sin,\n            cos: cos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Array} hull\n     * @param {Array} p\n     * @param {Bool} topEdge\n     */\n    __align_hull(hull, p, topEdge) {\n        let v = -1;\n        let d2;\n        for (let i = 0; i < hull.length; ++i) {\n            const d = euclidean(hull[i], p);\n            if (v === -1) {\n                d2 = d;\n                v = i;\n            } else {\n                if (d2 > d) {\n                    d2 = d;\n                    v = i;\n                }\n            }\n        }\n\n        let v1;\n        let v2;\n        if (topEdge) {\n            v1 = hull[v];\n            v2 = hull[(v + 1) % hull.length];\n        } else {\n            if (v == 0) v = hull.length - 1;\n            v1 = hull[v];\n            v2 = hull[(v - 1) % hull.length];\n        }\n\n        const transformation = {\n            tx: -hull[v][0],\n            ty: -hull[v][1],\n        };\n\n        if (hull.length >= 2) {\n            const { sin, cos } = this.__findAngle(v1, v2);\n            transformation.sin = sin;\n            transformation.cos = cos;\n        } else {\n            transformation.sin = 0;\n            transformation.cos = 1;\n        }\n\n        return transformation;\n    }\n\n    /**\n     * @private\n     * @param {Array} Point - The point which should get transformed.\n     * @param {Object} Transformation - contains the values for translation and rotation.\n     */\n    __transform([px, py], { tx, ty, sin, cos }) {\n        let x = px + tx;\n        let y = py + ty;\n        let xx = x * cos - y * sin;\n        let yy = x * sin + y * cos;\n        return [xx, yy];\n    }\n\n    /**\n     * Calls {@link __transform} for each point in Set C\n     * @private\n     * @param {Array} C - Set of points.\n     * @param {Object} t - Transform object.\n     * @param {Number} yOffset - value to offset set C.\n     */\n    __transform_component(C, t, yOffset) {\n        const N = C.length;\n        for (let i = 0; i < N; ++i) {\n            const c = C[i];\n            const [cx, cy] = this.__transform(c, t);\n            c[0] = cx;\n            c[1] = cy + yOffset;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Array} u - point u\n     * @param {Array} v - point v\n     * @param {Number} w - edge weight w\n     */\n    __align_components(u, v, w) {\n        const points_u = [...u.__disjoint_set.children];\n        const points_v = [...v.__disjoint_set.children];\n\n        const hull_u = this.__hull(points_u);\n        const hull_v = this.__hull(points_v);\n\n        const t_u = this.__align_hull(hull_u, u, false);\n        const t_v = this.__align_hull(hull_v, v, true);\n\n        this.__transform_component(points_u, t_u, 0);\n        this.__transform_component(points_v, t_v, w);\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality 2.\n     */\n    transform() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n        }\n        return this.projection;\n    }\n\n    *generator() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA, MDS } from \"./index.js\";\nimport { distance_matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias SAMMON\n * @extends DR\n */\nexport class SAMMON extends DR {\n    /**\n     * SAMMON's Mapping\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias SAMMON\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {\"PCA\"|\"MDS\"|\"random\"} [parameters.init = \"random\"] - Either \"PCA\" or \"MDS\", with which SAMMON initialiates the projection. With \"random\" a random matrix gets used as starting point.\n     * @param {Object} [parameters.init_parameters] - Parameters for the {@link init}-DR method.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {SAMMON}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { magic: 0.1, d: 2, metric: euclidean, seed: 1212, init_DR: \"random\", init_parameters: {} }, parameters);\n        return this;\n    }\n\n    /**\n     * initializes the projection.\n     * @private\n     */\n    init() {\n        const N = this.X.shape[0];\n        const { d, metric, init_DR: init_DR, init_parameters: DR_parameters } = this._parameters;\n        if (init_DR === \"random\") {\n            const randomizer = this._randomizer;\n            this.Y = new Matrix(N, d, () => randomizer.random);\n        } else if ([\"PCA\", \"MDS\"].includes(init_DR)) {\n            this.Y = Matrix.from(init_DR == \"PCA\" ? PCA.transform(this.X, DR_parameters) : MDS.transform(this.X, DR_parameters));\n        } else {\n            throw new Error('init_DR needs to be either \"random\" or a DR method!')\n        }\n        this.distance_matrix = metric == \"precomputed\" ? Matrix.from(this.X) : distance_matrix(this.X, metric);\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Matrix|Array} - The projection of {@link X}.\n     */\n    transform(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n        }\n        return this.projection;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Generator} - A generator yielding the intermediate steps of the projection of {@link X}.\n     */\n    *generator(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n            yield this.projection;\n        }\n\n        return this.projection;\n    }\n\n    _step() {\n        const MAGIC = this.parameter(\"magic\");\n        const D = this.distance_matrix;\n        const N = this.X.shape[0];\n        const { d, metric } = this._parameters;\n        let Y = this.Y;\n\n        let G = new Matrix(N, d, 0);\n\n        let sum = new Float64Array(d);\n        for (let i = 0; i < N; ++i) {\n            let e1 = new Float64Array(d);\n            let e2 = new Float64Array(d);\n            const Yi = Y.row(i);\n            for (let j = 0; j < N; ++j) {\n                if (i === j) continue;\n                const Yj = Y.row(j);\n                const delta = new Float64Array(d);\n                for (let k = 0; k < d; ++k) {\n                    delta[k] = Yi[k] - Yj[k];\n                }\n                const dY = metric(Yi, Yj);\n                const dX = D.entry(i, j);\n                const dq = dX - dY;\n                const dr = Math.max(dX * dY, 1e-2);\n                for (let k = 0; k < d; ++k) {\n                    e1[k] += (delta[k] * dq) / dr;\n                    e2[k] += (dq - (Math.pow(delta[k], 2) * (1 + dq / dY)) / dY) / dr;\n                }\n            }\n            for (let k = 0; k < d; ++k) {\n                const val = Y.entry(i, k) + ((MAGIC * e1[k]) / Math.abs(e2[k]) || 0);\n                G.set_entry(i, k, val);\n                sum[k] += val;\n            }\n        }\n        for (let k = 0; k < d; ++k) {\n            sum[k] /= N;\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let k = 0; k < d; ++k) {\n                Y.set_entry(i, k, G.entry(i, k) - sum[k]);\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix, linspace, norm } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA } from \"./index.js\";\n\nexport class SQDMDS extends DR {\n    /**\n     * SQuadMDS: a lean Stochastic Quartet MDS improving global structure preservation in neighbor embedding like t-SNE and UMAP.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @param {Matrix|Number[][]} X\n     * @param {Object} [parameters]\n     * @param {Number} [parameters.d=2]\n     * @param {Function} [parameters.metric = euclidean]\n     * @param {Number} [parameters.decay_start = 0.1] - Percentage of iterations using exaggeration phase. If random init: it is recommended to start the decay later to give the time for the global config to adjust with big steps.\n     * @param {Number} [parameters.decay_cte = 0.34] - Controls the decay of the learning parameter.\n     * @param {Object} [parameters.init_DR]\n     * @returns {SQDMDS}\n     * @see {@link https://arxiv.org/pdf/2202.12087.pdf}\n     */\n    constructor(X, parameters) {\n        super(\n            X,\n            {\n                d: 2,\n                metric: euclidean,\n                seed: 1212,\n                decay_start: 0.1,\n                decay_cte: 0.34, // 0.34\n                init_DR: {type: \"random\"}\n            },\n            parameters\n        );\n\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    init() {\n        const N = this._N;\n        const d = this.parameter(\"d\");\n\n        // initialize helpers.\n        this._add = this.__add(d);\n        this._sub_div = this.__sub_div(d);\n        this._minus = this.__minus(d);\n        this._mult = this.__mult(d);\n        this._LR_init = Math.max(2, 0.005 * N);\n        this._LR = this._LR_init;\n        this._offset = -Math.exp(-1 / this.parameter(\"decay_cte\"));\n        this._momentums = new Matrix(N, d, 0);\n        this._grads = new Matrix(N, d, 0);\n        this._indices = linspace(0, N - 1);\n        // initialize projection.\n        const R = this._randomizer;\n        this.Y = new Matrix(N, d, () => R.random - 0.5);\n\n        // preparing metric for optimization.\n        const this_metric = this.parameter(\"metric\");\n        if (this_metric === \"precomputed\") {\n            this._HD_metric = function (i, j, X) {\n                return X.entry(i, j);\n            };\n            this._HD_metric_exaggeration = function (i, j, X) {\n                return Math.pow(X.entry(i, j), 2);\n            };\n        } else {\n            this._HD_metric = function (i, j, X) {\n                return this_metric(X.row(i), X.row(j));\n            };\n            if (this_metric == euclidean) {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return euclidean_squared(X.row(i), X.row(j));\n                };\n            } else {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return Math.pow(this_metric(X.row(i), X.row(j)), 2);\n                };\n            }\n        }\n        return;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {Number} [iterations=500] - Number of iterations.\n     * @returns {Matrix|Number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n        }\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Number[][]} the intermediate steps of the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Performs an optimization step.\n     * @private\n     * @param {Number} i - Acutal iteration.\n     * @param {Number} iterations - Number of iterations.\n     */\n    _step(i, iterations) {\n        const decay_start = this._decay_start;\n        if (i > decay_start) {\n            const decay_cte = this.parameter(\"decay_cte\");\n            const offset = this._offset;\n            const ratio = (i - decay_start) / (iterations - decay_start);\n            this._LR = this._LR_init * (Math.exp(-(ratio * ratio) / decay_cte) + offset);\n            this._distance_exaggeration = false;\n        } else {\n            this._distance_exaggeration = true;\n        }\n        this._nestrov_iteration(this._distance_exaggeration);\n    }\n\n    /**\n     * Creates quartets of non overlapping indices.\n     * @private\n     * @returns {Number[][]}\n     */\n    __quartets() {\n        const N = this._N;\n        const max_N = N - (N % 4);\n        const R = this._randomizer;\n        const shuffled_indices = R.choice(this._indices, max_N);\n        const result = [];\n        for (let i = 0; i < max_N; i += 4) {\n            result.push(Uint32Array.of(shuffled_indices[i], shuffled_indices[i + 1], shuffled_indices[i + 2], shuffled_indices[i + 3]));\n        }\n        return result;\n    }\n\n    /**\n     * Computes and applies gradients, and updates momentum.\n     * @private\n     * @param {Boolean} distance_exaggeration\n     */\n    _nestrov_iteration(distance_exaggeration) {\n        const momentums = this._momentums.mult(0.99, { inline: true });\n        const LR = this._LR;\n        const grads = this._fill_MDS_grads(this.Y.add(momentums), this._grads, distance_exaggeration);\n        const [n, d] = momentums.shape;\n        for (let i = 0; i < n; ++i) {\n            const g_i = grads.row(i);\n            const g_i_norm = norm(g_i);\n            if (g_i_norm == 0) continue;\n            const mul = LR / g_i_norm;\n            const m_i = momentums.row(i);\n            for (let j = 0; j < d; ++j) {\n                m_i[j] -= mul * g_i[j];\n            }\n        } // momentums -= (LR / norm) * grads\n        this.Y.add(momentums, { inline: true });\n    }\n\n    /**\n     * Computes the gradients.\n     * @param {Matrix} Y - The Projection.\n     * @param {Matrix} grads - The gradients.\n     * @param {Boolean} [exaggeration = false] - Whether or not to use early exaggeration.\n     * @param {Boolean} [zero_grad = true] - Whether or not to reset the gradient in the beginning.\n     * @returns {Matrix} the gradients.\n     */\n    _fill_MDS_grads(Y, grads, exaggeration = false, zero_grad = true) {\n        if (zero_grad) {\n            // compute new gradients\n            grads.values.fill(0);\n        }\n        const add = this._add;\n        const X = this.X;\n        let HD_metric;\n        if (exaggeration == true) {\n            HD_metric = this._HD_metric_exaggeration;\n        } else {\n            HD_metric = this._HD_metric;\n        }\n\n        const D_quartet = new Float64Array(6);\n        const quartets = this.__quartets();\n        for (const [i, j, k, l] of quartets) {\n            // compute quartet's HD distances.\n            D_quartet[0] = HD_metric(i, j, X);\n            D_quartet[1] = HD_metric(i, k, X);\n            D_quartet[2] = HD_metric(i, l, X);\n            D_quartet[3] = HD_metric(j, k, X);\n            D_quartet[4] = HD_metric(j, l, X);\n            D_quartet[5] = HD_metric(k, l, X);\n\n            const D_quartet_sum = neumair_sum(D_quartet);\n\n            if (D_quartet_sum > 0) {\n                for (let i = 0; i < 6; ++i) {\n                    D_quartet[i] /= D_quartet_sum;\n                    D_quartet[i] += 1e-11;\n                }\n            }\n            const [gi, gj, gk, gl] = this._compute_quartet_grads(Y, [i, j, k, l], D_quartet);\n\n            // add is inline, row acces the matrix\n            add(grads.row(i), gi);\n            add(grads.row(j), gj);\n            add(grads.row(k), gk);\n            add(grads.row(l), gl);\n        }\n        return grads;\n    }\n\n    /**\n     * Quartet gradients for a projection.\n     * @private\n     * @param {Matrix} Y - The acutal projection.\n     * @param {Number[]} quartet - The indices of the quartet.\n     * @param {Number[]} D_hd - The high-dimensional distances of the quartet.\n     * @returns {Number[][]} the gradients for the quartet.\n     */\n    _compute_quartet_grads(Y, quartet, [p_ab, p_ac, p_ad, p_bc, p_bd, p_cd]) {\n        const [a, b, c, d] = quartet.map((index) => Y.row(index));\n        // LD distances, add a small number just in case\n        const d_ab = euclidean(a, b) + 1e-12;\n        const d_ac = euclidean(a, c) + 1e-12;\n        const d_ad = euclidean(a, d) + 1e-12;\n        const d_bc = euclidean(b, c) + 1e-12;\n        const d_bd = euclidean(b, d) + 1e-12;\n        const d_cd = euclidean(c, d) + 1e-12;\n        const sum_LD_dist = neumair_sum([d_ab, d_ac, d_ad, d_bc, d_bd, d_cd]);\n\n        // for each element of the sum: use the same gradient function and just permute the points given in input.\n        const [gA1, gB1, gC1, gD1] = this._ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist);\n        const [gA2, gC2, gB2, gD2] = this._ABCD_grads(a, c, b, d, d_ac, d_ab, d_ad, d_bc, d_cd, d_bd, p_ac, sum_LD_dist);\n        const [gA3, gD3, gC3, gB3] = this._ABCD_grads(a, d, c, b, d_ad, d_ac, d_ab, d_cd, d_bd, d_bc, p_ad, sum_LD_dist);\n        const [gB4, gC4, gA4, gD4] = this._ABCD_grads(b, c, a, d, d_bc, d_ab, d_bd, d_ac, d_cd, d_ad, p_bc, sum_LD_dist);\n        const [gB5, gD5, gA5, gC5] = this._ABCD_grads(b, d, a, c, d_bd, d_ab, d_bc, d_ad, d_cd, d_ac, p_bd, sum_LD_dist);\n        const [gC6, gD6, gA6, gB6] = this._ABCD_grads(c, d, a, b, d_cd, d_ac, d_bc, d_ad, d_bd, d_ab, p_cd, sum_LD_dist);\n\n        const add = this._add;\n        const gA = add(gA1, gA2, gA3, gA4, gA5, gA6);\n        const gB = add(gB1, gB2, gB3, gB4, gB5, gB6);\n        const gC = add(gC1, gC2, gC3, gC4, gC5, gC6);\n        const gD = add(gD1, gD2, gD3, gD4, gD5, gD6);\n\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Gradients for one element of the loss function's sum.\n     * @private\n     */\n    _ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist) {\n        const ratio = d_ab / sum_LD_dist;\n        const twice_ratio = 2 * ((p_ab - ratio) / sum_LD_dist);\n        const minus = this._minus;\n        const add = this._add;\n        const mult = this._mult;\n        const sub_div = this._sub_div;\n        // no side effects because sub_div creates new arrays, and the inline functions work on this new created arrays.\n        const gA = mult(minus(mult(add(sub_div(a, b, d_ab), sub_div(a, c, d_ac), sub_div(a, d, d_ad)), ratio), sub_div(a, b, d_ab)), twice_ratio);\n        const gB = mult(minus(mult(add(sub_div(b, a, d_ab), sub_div(b, c, d_bc), sub_div(b, d, d_bd)), ratio), sub_div(b, a, d_ab)), twice_ratio);\n        const gC = mult(add(sub_div(c, a, d_ac), sub_div(c, b, d_bc), sub_div(c, d, d_cd)), ratio * twice_ratio);\n        const gD = mult(add(sub_div(d, a, d_ad), sub_div(d, b, d_bd), sub_div(d, c, d_cd)), ratio * twice_ratio);\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Inline!\n     */\n    __minus(d) {\n        return (a, b) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] -= b[i];\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __add(d) {\n        return (...summands) => {\n            const n = summands.length;\n            const s1 = summands[0];\n            for (let j = 1; j < n; ++j) {\n                const summand = summands[j];\n                for (let i = 0; i < d; ++i) {\n                    s1[i] += summand[i];\n                }\n            }\n            return s1;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __mult(d) {\n        return (a, v) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] *= v;\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Creates a new array <code>(x - y) / div</code>\n     */\n    __sub_div(d) {\n        return (x, y, div) => {\n            return Float64Array.from({ length: d }, (_, i) => (x[i] - y[i]) / div);\n        };\n    }\n}\n"],"names":["euclidean","a","b","Math","sqrt","euclidean_squared","length","n","sum","i","a_b","cosine","sum_a","sum_b","acos","manhattan","abs","chebyshev","res","push","max","canberra","jaccard","num_non_zero","num_equal","x","y","hamming","disagree","sokal_michener","num_not_equal","yule","num_true_true","num_true_false","num_false_true","k_nearest_neighbors","A","k","metric","rows","shape","D","distance_matrix","nN","Array","row","from","map","distance","col","j","sort","slice","Matrix","A_i","dist","set_entry","linspace","start","end","number","round","result","norm","v","vector","cols","Error","Float64Array","normalize","v_norm","value","kahan_sum","summands","t","compensation","neumair_sum","summand","qr_gramschmidt","Q","R","q","q_dot_v","q_","qr_householder","clone","x_norm","x0","entry","rho","sign","u1","u","divide","beta","u_outer_u","outer","R_block","get_block","new_R","sub","dot","mult","Q_block","new_Q","set_block","simultaneous_poweriteration","seed","max_iterations","qr","tol","randomizer","Randomizer","random","oldQ","QR","values","eigenvalues","diag","eigenvectors","transpose","to2dArray","inner_product","N","constructor","this","_rows","_cols","_data","static","type","isArray","m","_","data","subarray","iterate_rows","Symbol","iterator","set_row","offset","swap_rows","row1","row2","result_col","add_entry","sub_entry","T","inverse","B","max_idx","max_val","val","A_col","B_col","A_row","B_row","f","s","rows_A","cols_A","rows_B","cols_B","join","B_val","C","e","transDot","A_val","dotTrans","B_i","l","concat","X","offset_row","offset_col","min","start_row","start_col","end_row","end_col","new_row","new_col","gather","row_indices","col_indices","row_index","col_index","_apply_array","_apply_rowwise_array","_apply_colwise_array","_apply","value_rows","value_cols","inline","add","asArray","min_row_col","mean","meanRows","meanCols","b_i","r","d","z","alpha","r_next","L","U","LU","L_diag","U_diag","det","M","MtM","MMt","V","Sigma","sigma","Float32Array","_seed","_N","_M","_MATRIX_A","_UPPER_MASK","_LOWER_MASK","_mt","_mti","Date","getTime","mt","mti","random_int","mag01","kk","N_M","M_N","gauss_random","_val","c","log","choice","sample","index_list","random_index","splice","undefined","Heap","elements","accessor","comparator","heapify","_accessor","_container","_comparator","heap","container","element","floor","_heapify_down","_swap","index_a","index_b","_heapify_up","index","parentIndex","node","start_index","left","right","pop","item","first","iterate","toArray","raw_data","empty","DisjointSet","_list","Set","make_set","list","has","__disjoint_set","parent","children","size","find","union","node_x","node_y","forEach","BallTree","_Node","pivot","child1","child2","radius","_Leaf","points","_metric","_root","_construct","_greatest_spread","sorted_elements","p_index","p","Infinity","spread","reduce","acc","current","search","_search","KNN","_elements","_D","distances","H","nearest_element_index","nearest_dist","Number","isInteger","DR","default_parameters","parameters","_parameters","Object","assign","seal","_type","_randomizer","_is_initialized","parameter","name","hasOwnProperty","para","transform","check_init","projection","generator","init","Y","async","args","PCA","super","eig_args","principal_components","X_cent","MDS","ai_","a_j","a__","_d_X","stress","d_X","d_Y","top_sum","bottom_sum","pow","ISOMAP","neighbors","kNearestNeighbors","G","other","min_val","FASTMAP","_choose_distant_objects","a_index","b_index","max_dist","d_ai","d_bi","_col","old_dist","d_ab","y_i","LDA","labels","unique_labels","label_id","count","id","X_mean","V_mean","label","v_mean","S_b","S_w","row_v","LLE","O","W","nN_row","Z","C_trace","w","solve_CG","IW","LTSA","I_i","X_i","g","G_i_t","W_i","TSNE","perplexity","epsilon","_iter","Htarget","Delta","druid","P","_ystep","_gains","dist_i","prow","psum","betamin","betamax","cnt","done","dp_sum","pj","exp","N2","_P","iterations","next","iter","ystep","gains","dim","pmul","Qu","qsum","dsum","dhere","qu","grad","premult","ymean","gid","sid","gainid","newgain","newsid","powell","max_iter","pfx","fx","convergence","fxi","dx","UMAP","n_neighbors","local_connectivity","min_dist","_spread","_set_op_mix_ratio","_repulsion_strength","_negative_sample_rate","_n_epochs","_initial_alpha","_find_ab_params","xv","yv","xv_i","error","_compute_membership_strengths","sigmas","rhos","curr_dist","_smooth_knn_dist","knn","SMOOTH_K_TOLERANCE","MIN_K_DIST_SCALE","target","log2","reverse","x_i","interpolation","lo","hi","mid","search_result","non_zero_dist","filter","non_zero_dist_length","mean_ithd","mean_d","_fuzzy_simplicial_set","distances_i","transposed_result","prod_matrix","_make_epochs_per_sample","n_epochs","weights","_weights","fill","weight_scl","_tocoo","graph","rows_n","cols_n","_a","_b","_graph","_head","_tail","_epochs_per_sample","_epochs_per_negative_sample","_epoch_of_next_sample","_epoch_of_next_negative_sample","_clip","_optimize_layout","head_embedding","tail_embedding","head","tail","_alpha","epochs_per_sample","epochs_per_negative_sample","epoch_of_next_negative_sample","epoch_of_next_sample","clip","tail_length","grad_coeff","grad_d","n_neg_samples","TriMap","weight_adj","pca","n_inliers","n_outliers","n_random","triplets","_generate_triplets","lr","vel","gain","n_extra","nbrs","knn_distances","sig","_find_p","_sample_knn_triplets","n_triplets","outlier_distances","_find_weights","random_triplets","random_weights","_sample_random_triplets","max_weight","isNaN","max_weight_2","n_i","sort_indices","__argsort","n_j","sim","samples","_rejection_sample","out","n_samples","max_int","rejects","interval","indexOf","p_sim","p_out","indices","_grad","y_ij","y_ik","d_ij","d_ik","n_viol","loss","n_knn_triplets","Y_id","Y_jd","Y_kd","gs","go","max_iteration","_next","gamma","old_C","_update_embedding","new_gain","Hierarchical_Clustering","matrix","linkage","_id","_matrix","_linkage","root","do","get_clusters","clusters","depth","_traverse","leaves","_n","d_min","_d_min","_distance_matrix","_clusters","c_size","_c_size","Uint16Array","Cluster","p_max","c1","D_i_min","c2","c1_cluster","c2_cluster","c1_cluster_indices","isLeaf","c2_cluster_indices","new_cluster","unshift","D_c1_j","D_c2_j","centroid","_calculate_centroid","l_size","r_size","l_centroid","r_centroid","new_centroid","descendants","left_descendants","right_descendants","KMeans","K","_K","_cluster_centroids","_get_random_centroids","_furthest_point","candidates","Ad","cluster_centroids","random_point","init_points","sample_size","furthest_point","_iteration","clusters_changed","Ai","min_cluster","_compute_centroid","cluster_counter","ci","iteration_result","KMedoids","_A","_max_iter","log10","_cluster_medoids","_get_random_medoids","x_j","_nearest_medoid","index_nearest","medoids","finish","cache","x_o","o","DeltaTD","xs","findIndex","d_j","distance_nearest","deltaTD","d_oj","_get_distance","d_n","distance_second","d_s","nearest","second","x_m","m1","m2","index_second","cluster_medoids","ceil","TD","TD0","S","S_j","S_o","delta","OPTICS","min_points","_epsilon","_min_points","_ordered_list","_DB","ordered_list","DB","cluster_index","_cluster_index","reachability_distance","processed","_get_neighbors","_core_distance","seeds","_update","_expand_cluster","core_distance","new_reachability_distance","cluster","outliers","get_cluster_affirmation","LSP","control_points","DR_parameters","nc","c_i","Y_C","XA","ATA","ATb","TopoMap","__lazy_distance_matrix","D_ij","_make_minimum_spanning_tree","disjoint_set","F","E","set_u","set_v","_Emst","__hull_cross","ax","ay","bx","by","sx","sy","__hull","x1","y1","x2","y2","lower","upper","__findAngle","p1x","p1y","p2x","p2y","sin","cos","vec","__align_hull","hull","topEdge","d2","v1","v2","transformation","tx","ty","__transform","px","py","__transform_component","yOffset","cx","cy","__align_components","points_u","points_v","hull_u","hull_v","t_u","t_v","Emst","components","component_u","component_v","SAMMON","magic","init_DR","init_parameters","includes","_step","MAGIC","e1","e2","Yi","Yj","dY","dX","dq","dr","SQDMDS","decay_start","decay_cte","_add","__add","_sub_div","__sub_div","_minus","__minus","_mult","__mult","_LR_init","_LR","_offset","_momentums","_grads","_indices","this_metric","_HD_metric","_HD_metric_exaggeration","_decay_start","ratio","_distance_exaggeration","_nestrov_iteration","__quartets","max_N","shuffled_indices","Uint32Array","of","distance_exaggeration","momentums","LR","grads","_fill_MDS_grads","g_i","g_i_norm","mul","m_i","exaggeration","zero_grad","HD_metric","D_quartet","quartets","D_quartet_sum","gi","gj","gk","gl","_compute_quartet_grads","quartet","p_ab","p_ac","p_ad","p_bc","p_bd","p_cd","d_ac","d_ad","d_bc","d_bd","d_cd","sum_LD_dist","gA1","gB1","gC1","gD1","_ABCD_grads","gA2","gC2","gB2","gD2","gA3","gD3","gC3","gB3","gB4","gC4","gA4","gD4","gB5","gD5","gA5","gC5","gC6","gD6","gA6","gB6","twice_ratio","minus","sub_div","s1","div"],"mappings":";;;;;;;;;AASe,SAAAA,UAAUC,EAAGC,GACxB,OAAOC,KAAKC,KAAKC,kBAAkBJ,EAAGC,GAC1C;;;;;;;;GCHe,SAAAG,kBAAUJ,EAAGC,GACxB,GAAID,EAAEK,QAAUJ,EAAEI,OAAQ,OAC1B,MAAMC,EAAIN,EAAEK,OACZ,IAAIE,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxB,MAAMC,EAAMT,EAAEQ,GAAKP,EAAEO,GACrBD,GAAOE,EAAMA,CAChB,CACD,OAAOF,CACX;;;;;;;;;;;;;;GCHe,SAAAG,OAAUV,EAAGC,GACxB,GAAID,EAAEK,SAAWJ,EAAEI,OAAQ,OAC3B,IAAIC,EAAIN,EAAEK,OACNE,EAAM,EACNI,EAAQ,EACRC,EAAQ,EACZ,IAAK,IAAIJ,EAAI,EAAGA,EAAIF,IAAKE,EACrBD,GAAOP,EAAEQ,GAAKP,EAAEO,GAChBG,GAASX,EAAEQ,GAAKR,EAAEQ,GAClBI,GAASX,EAAEO,GAAKP,EAAEO,GAEtB,OAAON,KAAKW,KAAKN,GAAOL,KAAKC,KAAKQ,GAAST,KAAKC,KAAKS,IACzD;;;;;;;;GClBe,SAAAE,UAAUd,EAAGC,GACxB,GAAID,EAAEK,QAAUJ,EAAEI,OAAQ,OAC1B,MAAMC,EAAIN,EAAEK,OACZ,IAAIE,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,IAAKE,EACrBD,GAAOL,KAAKa,IAAIf,EAAEQ,GAAKP,EAAEO,IAE7B,OAAOD,CACX;;;;;;;;GCRe,SAAAS,UAAUhB,EAAGC,GACxB,GAAID,EAAEK,QAAUJ,EAAEI,OAAQ,OAC1B,MAAMC,EAAIN,EAAEK,OACZ,IAAIY,EAAM,GACV,IAAK,IAAIT,EAAI,EAAGA,EAAIF,IAAKE,EACrBS,EAAIC,KAAKhB,KAAKa,IAAIf,EAAEQ,GAAKP,EAAEO,KAE/B,OAAON,KAAKiB,OAAOF,EACvB;;;;;;;;;GCPe,SAAAG,SAASpB,EAAGC,GACvB,GAAID,EAAEK,SAAWJ,EAAEI,OAAQ,OAC3B,MAAMC,EAAIN,EAAEK,OACZ,IAAIE,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,IAAKE,EACrBD,GAAQL,KAAKa,IAAIf,EAAEQ,GAAKP,EAAEO,KAAON,KAAKa,IAAIf,EAAEQ,IAAMN,KAAKa,IAAId,EAAEO,KAEjE,OAAOD,CACX;;;;;;;;GCTe,SAAAc,QAAUrB,EAAGC,GACxB,GAAID,EAAEK,QAAUJ,EAAEI,OAAQ,OAC1B,MAAMC,EAAIN,EAAEK,OACZ,IAAIiB,EAAe,EACfC,EAAY,EAChB,IAAK,IAAIf,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxB,MAAMgB,EAAY,GAARxB,EAAEQ,GACNiB,EAAY,GAARxB,EAAEO,GACZc,GAAgBE,GAAKC,EACrBF,GAAaC,GAAKC,CACrB,CACD,OAAQH,EAAeC,GAAaD,CACxC;;;;;;;;GCZe,SAAAI,QAAU1B,EAAGC,GACxB,GAAID,EAAEK,QAAUJ,EAAEI,OAAQ,OAC1B,MAAMC,EAAIN,EAAEK,OACZ,IAAIsB,EAAW,EACf,IAAK,IAAInB,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CAGxBmB,GAFU3B,EAAEQ,IACFP,EAAEO,EAEf,CACD,OAAOmB,EAAWrB,CACtB;;;;;;;;GCVe,SAAAsB,eAAS5B,EAAGC,GACvB,GAAID,EAAEK,QAAUJ,EAAEI,OAAQ,OAC1B,MAAMC,EAAIN,EAAEK,OACZ,IAAIwB,EAAgB,EACpB,IAAK,IAAIrB,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CAGxBqB,GAFkB,GAAR7B,EAAEQ,KACM,GAARP,EAAEO,GAEf,CACD,OAAQ,EAAIqB,GAAkBvB,EAAIuB,EACtC;;;;;;;;GCVe,SAAAC,KAAU9B,EAAGC,GACxB,GAAID,EAAEK,QAAUJ,EAAEI,OAAQ,OAC1B,MAAMC,EAAIN,EAAEK,OACZ,IAAI0B,EAAgB,EAChBC,EAAiB,EACjBC,EAAiB,EACrB,IAAK,IAAIzB,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxB,MAAMgB,EAAY,GAARxB,EAAEQ,GACNiB,EAAY,GAARxB,EAAEO,GACZuB,GAAiBP,GAAKC,EACtBO,GAAkBR,IAAMC,EACxBQ,IAAmBT,GAAKA,CAC3B,CAED,OAAyB,GAAlBQ,GAAyC,GAAlBC,EAAsB,EAAK,EAAID,EAAiBC,GAAmBF,GADzEzB,EAAIyB,EAAgBC,EAAiBC,GACsED,EAAiBC,EACxJ;;;;;;;;;GCXe,SAAQC,oBAAEC,EAAGC,EAAGC,EAAStC,WACpC,MAAMuC,EAAOH,EAAEI,MAAM,GACrB,IAAIC,EAAc,eAAVH,EAA0BF,EAAIM,gBAAgBN,EAAGE,GACrDK,EAAK,IAAIC,MAAML,GACnB,IAAK,IAAIM,EAAM,EAAGA,EAAMN,IAAQM,EAC5BF,EAAGE,GAAOD,MAAME,KAAKL,EAAEI,IAAIA,IACtBE,KAAI,CAACC,EAAUC,KACL,CACHxC,EAAGoC,EACHK,EAAGD,EACHD,SAAUA,MAGjBG,MAAK,CAAClD,EAAGC,IAAMD,EAAE+C,SAAW9C,EAAE8C,WAC9BI,MAAM,EAAGf,EAAI,GAEtB,OAAOM,CACX;;;;;;;;GClBe,SAAAD,gBAAUN,EAAGE,EAAStC,WACjC,IAAIO,EAAI6B,EAAEI,MAAM,GAChB,MAAMC,EAAI,IAAIY,OAAO9C,EAAGA,GACxB,IAAK,IAAIE,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxB,MAAM6C,EAAMlB,EAAES,IAAIpC,GAClB,IAAK,IAAIyC,EAAIzC,EAAI,EAAGyC,EAAI3C,IAAK2C,EAAG,CAC5B,MAAMK,EAAOjB,EAAOgB,EAAKlB,EAAES,IAAIK,IAC/BT,EAAEe,UAAU/C,EAAGyC,EAAGK,GAClBd,EAAEe,UAAUN,EAAGzC,EAAG8C,EACrB,CACJ,CACD,OAAOd,CACX;;;;;;;;;;GCbe,SAAQgB,SAAEC,EAAOC,EAAKC,EAAS,MAI1C,GAHKA,IACDA,EAASzD,KAAKiB,IAAIjB,KAAK0D,MAAMF,EAAMD,GAAS,EAAG,IAE/CE,EAAS,EACT,OAAkB,IAAXA,EAAe,CAACF,GAAS,GAEpC,IAAII,EAAS,IAAIlB,MAAMgB,GAEvB,IAAK,IAAInD,EADTmD,GAAU,EACWnD,GAAK,IAAKA,EAC3BqD,EAAOrD,IAAMA,EAAIkD,GAAOC,EAASnD,GAAKiD,GAASE,EAEnD,OAAOE,CACX;;;;;;;;;GCXe,SAAAC,KAAUC,EAAG1B,EAAStC,WACjC,IAAIiE,EAAS,KACb,GAAID,aAAaX,OAAQ,CACrB,IAAKd,EAAM2B,GAAQF,EAAExB,MACrB,GAAa,IAATD,EAAY0B,EAASD,EAAEnB,IAAI,OAC1B,IAAa,IAATqB,EACJ,MAAM,IAAIC,MAAM,sBADAF,EAASD,EAAEf,IAAI,EACM,CAClD,MACQgB,EAASD,EAEb,MAAMzD,EAAI0D,EAAO3D,OAEjB,OAAOgC,EAAO2B,EADA,IAAIG,aAAa7D,GAEnC;;;;;;;;GCde,SAAA8D,UAASL,EAAG1B,EAAStC,WAChC,MAAMsE,EAASP,KAAKC,EAAG1B,GACvB,OAAO0B,EAAEjB,KAAIwB,GAASA,EAAQD,GAClC;;;;;;;;GCNe,SAAQE,UAAEC,GACrB,IAGI/C,EAAGgD,EAHHnE,EAAIkE,EAASnE,OACbE,EAAM,EACNmE,EAAe,EAGnB,IAAK,IAAIlE,EAAI,EAAGA,EAAIF,IAAKE,EACrBiB,EAAI+C,EAAShE,GAAKkE,EAClBD,EAAIlE,EAAMkB,EACViD,EAAeD,EAAIlE,EAAMkB,EACzBlB,EAAMkE,EAEV,OAAOlE,CACX;;;;;;;;GCbe,SAAQoE,YAAEH,GACrB,MAAMlE,EAAIkE,EAASnE,OACnB,IAAIE,EAAM,EACNmE,EAAe,EAEnB,IAAK,IAAIlE,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxB,MAAMoE,EAAUJ,EAAShE,GACnBiE,EAAIlE,EAAMqE,EACZ1E,KAAKa,IAAIR,IAAQL,KAAKa,IAAI6D,GAC1BF,GAAgBnE,EAAMkE,EAAIG,EAE1BF,GAAgBE,EAAUH,EAAIlE,EAElCA,EAAMkE,CACT,CACD,OAAOlE,EAAMmE,CACjB;;;;;;;;GCZe,SAAQG,eAAE1C,GACrB,MAAOG,EAAM2B,GAAQ9B,EAAEI,MACjBuC,EAAI,IAAI1B,OAAOd,EAAM2B,EAAM,YAC3Bc,EAAI,IAAI3B,OAAOa,EAAMA,EAAM,GAEjC,IAAK,IAAIhB,EAAI,EAAGA,EAAIgB,IAAQhB,EAAG,CAC3B,IAAIc,EAAI5B,EAAEa,IAAIC,GACd,IAAK,IAAIzC,EAAI,EAAGA,EAAIyC,IAAKzC,EAAG,CACxB,MAAMwE,EAAIF,EAAE9B,IAAIxC,GACVyE,EAAUN,YAAYK,EAAElC,KAAI,CAACoC,EAAI9C,IAAM8C,EAAKnB,EAAE3B,MACpD,IAAK,IAAIA,EAAI,EAAGA,EAAIE,IAAQF,EACxB2B,EAAE3B,IAAM6C,EAAUD,EAAE5C,GAExB2C,EAAExB,UAAU/C,EAAGyC,EAAGgC,EACrB,CACD,MAAMZ,EAASP,KAAKC,EAAGhE,WACvB,IAAK,IAAIqC,EAAI,EAAGA,EAAIE,IAAQF,EACxB0C,EAAEvB,UAAUnB,EAAGa,EAAGc,EAAE3B,GAAKiC,GAE7BU,EAAExB,UAAUN,EAAGA,EAAGoB,EACrB,CACD,MAAO,CAAEU,IAAGD,IAChB;;;;;;;;;GCvBe,SAAQK,eAAEhD,GACrB,MAAOG,EAAM2B,GAAQ9B,EAAEI,MACjBuC,EAAI,IAAI1B,OAAOd,EAAMA,EAAM,KAC3ByC,EAAI5C,EAAEiD,QAEZ,IAAK,IAAInC,EAAI,EAAGA,EAAIgB,IAAQhB,EAAG,CAC3B,MAAMzB,EAAI4B,OAAOP,KAAKkC,EAAE/B,IAAIC,GAAGE,MAAMF,IAC/BoC,EAASvB,KAAKtC,GACd8D,EAAK9D,EAAE+D,MAAM,EAAG,GAChBC,GAAOtF,KAAKuF,KAAKH,GACjBI,EAAKJ,EAAKE,EAAMH,EAChBM,EAAInE,EAAEoE,OAAOF,GAAInC,UAAU,EAAG,EAAG,GACjCsC,GAASL,EAAME,EAAML,EAErBS,EAAYH,EAAEI,MAAMJ,GACpBK,EAAUjB,EAAEkB,UAAUhD,EAAG,GACzBiD,EAAQF,EAAQG,IAAIL,EAAUM,IAAIJ,GAASK,KAAKR,IAChDS,EAAUxB,EAAEmB,UAAU,EAAGhD,GACzBsD,EAAQD,EAAQH,IAAIG,EAAQF,IAAIN,GAAWO,KAAKR,IACtDd,EAAEyB,UAAUvD,EAAG,EAAGiD,GAClBpB,EAAE0B,UAAU,EAAGvD,EAAGsD,EACrB,CACD,MAAO,CAAExB,IAAGD,IAChB;;;;;;;;;;;;;GChBe,SAAQ2B,4BAAEtE,EAAGC,EAAI,GAAGsE,KAACA,EAAO,KAAIC,eAAEA,EAAiB,IAAGC,GAAEA,EAAK/B,eAAcgC,IAAEA,EAAM,MAAQ,CAAA,GACtG,MAAMC,EAAaJ,aAAgBK,WAAaL,EAAO,IAAIK,WAAWL,GAChEvE,aAAaiB,SAASjB,EAAIiB,OAAOP,KAAKV,IAC5C,MAAM7B,EAAI6B,EAAEI,MAAM,GAClB,IAAIuC,EAAEA,EAACC,EAAEA,GAAM6B,EAAG,IAAIxD,OAAO9C,EAAG8B,GAAG,IAAiC,GAA1B0E,EAAWE,OAAS,OAC9D,KAAOL,KAAkB,CACrB,MAAMM,EAAOnC,EAEPoC,EAAKN,EADDzE,EAAEiE,IAAItB,IAEhBA,EAAIoC,EAAGpC,EACPC,EAAImC,EAAGnC,EAEP,GADc3E,kBAAkB0E,EAAEqC,OAAQF,EAAKE,QACnCN,EACR,KAEP,CAID,MAAO,CAAEO,YAFWrC,EAAEsC,KAEAC,aADDxC,EAAEyC,YAAYC,UAEvC;;;;;;;;GC5Be,SAAAC,cAAUzH,EAAGC,GACxB,MAAMyH,EAAI1H,EAAEK,OACZ,GAAIqH,GAAKzH,EAAEI,OACP,MAAM,IAAI6D,MAAM,4CAEpB,IAAI3D,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGA,EAAIkH,IAAKlH,EACrBD,GAAOP,EAAIC,EAEf,OAAOM,CACX;;;;;GCZO,MAAM6C;;;;;;;;;;;;;;;;;;;AAmBTuE,YAAYrF,EAAO,KAAM2B,EAAO,KAAMK,EAAQ,MAI1C,GAHAsD,KAAKC,MAAQvF,EACbsF,KAAKE,MAAQ7D,EACb2D,KAAKG,MAAQ,KACTzF,GAAQ2B,EAAM,CACd,IAAKK,EAED,OADAsD,KAAKG,MAAQ,IAAI5D,aAAa7B,EAAO2B,GAC9B2D,KAEX,GAAqB,mBAAVtD,EAAsB,CAC7BsD,KAAKG,MAAQ,IAAI5D,aAAa7B,EAAO2B,GACrC,IAAK,IAAIrB,EAAM,EAAGA,EAAMN,IAAQM,EAC5B,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,EAC5B4E,KAAKG,MAAMnF,EAAMqB,EAAOjB,GAAOsB,EAAM1B,EAAKI,GAGlD,OAAO4E,IACV,CACD,GAAqB,iBAAVtD,EAAoB,CAC3B,GAAc,UAAVA,EACA,OAAO,IAAIlB,OAAOd,EAAM2B,EAAM,GAElC,GAAc,aAAVK,GAAkC,MAAVA,EAAe,CACvCsD,KAAKG,MAAQ,IAAI5D,aAAa7B,EAAO2B,GACrC,IAAK,IAAIrB,EAAM,EAAGA,EAAMN,IAAQM,EAC5BgF,KAAKG,MAAMnF,EAAMqB,EAAOrB,GAAO,EAEnC,OAAOgF,IACV,CACD,GAAc,WAAVtD,GAAsBhC,GAAQ2B,EAAM,CACpC2D,KAAKG,MAAQ,IAAI5D,aAAa7B,EAAO2B,GACrCK,EAAQ,CAAC9D,EAAGyC,KAAOzC,IAAMyC,EAAI,EAAI,GAAK,EAAIX,EAC1C,IAAK,IAAIM,EAAM,EAAGA,EAAMN,IAAQM,EAC5B,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,EAC5B4E,KAAKG,MAAMnF,EAAMqB,EAAOjB,GAAOsB,EAAM1B,EAAKI,GAGlD,OAAO4E,IACV,CACJ,CACD,GAAqB,iBAAVtD,EAAoB,CAC3BsD,KAAKG,MAAQ,IAAI5D,aAAa7B,EAAO2B,GACrC,IAAK,IAAIrB,EAAM,EAAGA,EAAMN,IAAQM,EAC5B,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,EAC5B4E,KAAKG,MAAMnF,EAAMqB,EAAOjB,GAAOsB,EAGvC,OAAOsD,IACV,CACJ,CACD,OAAOA,IACV;;;;;;;;;;OAYDI,YAAY7F,EAAG8F,EAAO,OAClB,GAAI9F,aAAaiB,OACb,OAAOjB,EAAEiD,QACN,GAAIhC,OAAO8E,QAAQ/F,GAAI,CAC1B,IAAIgG,EAAIhG,EAAE9B,OACV,GAAU,IAAN8H,EAAS,MAAM,IAAIjE,MAAM;KAE7B;GAAKd,OAAO8E,QAAQ/F,EAAE,IAWf,CACH,IAAI7B,EAAI6B,EAAE,GAAG9B,OACb,IAAK,IAAIuC,EAAM,EAAGA,EAAMuF,IAAKvF,EACzB,GAAIT,EAAES,GAAKvC,SAAWC,EAClB,MAAM,IAAI4D,MAAM,yBAGxB,OAAO,IAAId,OAAO+E,EAAG7H,GAAG,CAACE,EAAGyC,IAAMd,EAAE3B,GAAGyC,IAC1C,CAlBG,GAAa,QAATgF,EACA,OAAO,IAAI7E,OAAO,EAAG+E,GAAG,CAACC,EAAGnF,IAAMd,EAAEc;KACjC;GAAa,QAATgF,EACP,OAAO,IAAI7E,OAAO+E,EAAG,GAAI3H,GAAM2B,EAAE3B,KAC9B,GAAa,SAATyH,EACP,OAAO,IAAI7E,OAAO+E,EAAGA,GAAG,CAAC3H,EAAGyC,IAAOzC,GAAKyC,EAAId,EAAE3B,GAAK,IAEnD,MAAM,IAAI0D,MAAM,2BAYpC,CAAe,GAAiB,iBAAN/B,EACd,OAAO,IAAIiB,OAAO,EAAG,EAAGjB,GAExB,MAAM,IAAI+B,MAAM,QAEvB;;;;;OAODtB,IAAIA,GACA,MAAMyF,EAAOT,KAAKT,OACZlD,EAAO2D,KAAKE,MAClB,OAAOO,EAAKC,SAAS1F,EAAMqB,GAAOrB,EAAM,GAAKqB,EAChD;;;;OAMDsE,gBACI,MAAMtE,EAAO2D,KAAKE,MACZxF,EAAOsF,KAAKC,MACZQ,EAAOT,KAAKT,OAClB,IAAK,IAAIvE,EAAM,EAAGA,EAAMN,IAAQM,QACtByF,EAAKC,SAAS1F,EAAMqB,GAAOrB,EAAM,GAAKqB,EAEnD;;;;OAMD,EAAEuE,OAAOC,YACL,IAAK,MAAM7F,KAAOgF,KAAKW,qBACb3F,CAEb;;;;;;OAQD8F,QAAQ9F,EAAKuE,GACT,MAAMlD,EAAO2D,KAAKE,MAClB,GAAI1E,OAAO8E,QAAQf,IAAWA,EAAO9G,SAAW4D,EAAM,CAClD,MAAM0E,EAAS/F,EAAMqB,EACrB,IAAK,IAAIjB,EAAM,EAAGA,EAAMiB,IAAQjB,EAC5B4E,KAAKT,OAAOwB,EAAS3F,GAAOmE,EAAOnE,EAE1C,KAAM,MAAImE,aAAkB/D,QAAU+D,EAAO5E,MAAM,KAAO0B,GAA4B,IAApBkD,EAAO5E,MAAM,IAM5E,MAAM,IAAI2B,MAAM,uFANsE,CACtF,MAAMyE,EAAS/F,EAAMqB,EACrB,IAAK,IAAIjB,EAAM,EAAGA,EAAMiB,IAAQjB,EAC5B4E,KAAKT,OAAOwB,EAAS3F,GAAOmE,EAAOY,MAAM/E,EAEzD,CAES,CACD,OAAO4E,IACV;;;;;;OAQDgB,UAAUC,EAAMC,GACZ,MAAM7E,EAAO2D,KAAKE,MACZO,EAAOT,KAAKT,OAClB,IAAK,IAAI3G,EAAIqI,EAAO5E,EAAMhB,EAAI6F,EAAO7E,EAAMjB,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,IAAKyC,EAAG,CAC7E,MAAMwB,EAAI4D,EAAK7H,GACf6H,EAAK7H,GAAK6H,EAAKpF,GACfoF,EAAKpF,GAAKwB,CACb,CACJ;;;;;OAODzB,IAAIA,GACA,MAAM+F,EAAa,IAAI5E,aAAayD,KAAKC,OACzC,IAAK,IAAIjF,EAAM,EAAGA,EAAMgF,KAAKC,QAASjF,EAClCmG,EAAWnG,GAAOgF,KAAKT,OAAOvE,EAAMgF,KAAKE,MAAQ9E,GAErD,OAAO+F,CACV;;;;;;OAQDxD,MAAM3C,EAAKI,GACP,OAAO4E,KAAKT,OAAOvE,EAAMgF,KAAKE,MAAQ9E,EACzC;;;;;;;OASDO,UAAUX,EAAKI,EAAKsB,GAEhB,OADAsD,KAAKT,OAAOvE,EAAMgF,KAAKE,MAAQ9E,GAAOsB,EAC/BsD,IACV;;;;;;;OASDoB,UAAUpG,EAAKI,EAAKsB,GAElB,OADAsD,KAAKT,OAAOvE,EAAMgF,KAAKE,MAAQ9E,IAAQsB,EAChCsD,IACR;;;;;;;OASDqB,UAAUrG,EAAKI,EAAKsB,GAElB,OADAsD,KAAKT,OAAOvE,EAAMgF,KAAKE,MAAQ9E,IAAQsB,EAChCsD,IACR;;;;OAMDL,YAEI,OADQ,IAAInE,OAAOwE,KAAKE,MAAOF,KAAKC,OAAO,CAACjF,EAAKI,IAAQ4E,KAAKrC,MAAMvC,EAAKJ,IAE5E;;;;OAMGsG,QACA,OAAOtB,KAAKL,WACf;;;;OAMD4B,UACI,MAAM7G,EAAOsF,KAAKC,MACZ5D,EAAO2D,KAAKE,MACZ3F,EAAIyF,KAAKxC,QACTgE,EAAI,IAAIhG,OAAOd,EAAM2B,EAAM;;AAGjC,IAAK,IAAIjB,EAAM,EAAGA,EAAMiB,IAAQjB,EAAK;;AAEjC,IAAIqG,EAAUrG,EACVsG,EAAUpJ,KAAKa,IAAIoB,EAAEoD,MAAMvC,EAAKA,IACpC,IAAK,IAAIJ,EAAMI,EAAM,EAAGJ,EAAMN,IAAQM,EAAK,CACvC,MAAM2G,EAAMrJ,KAAKa,IAAIoB,EAAEoD,MAAM3C,EAAKI,IAC9BsG,EAAUC,IACVF,EAAUzG,EACV0G,EAAUC,EAEjB,CACD,GAAgB,IAAZD,EACA,MAAM,IAAIpF,MAAM;oCAGhBmF;IAAYrG,IACZb,EAAEyG,UAAU5F,EAAKqG,GACjBD,EAAER,UAAU5F,EAAKqG;0DAIrB;MAAMG,EAAQrH,EAAES,IAAII,GACdyG,EAAQL,EAAExG,IAAII,GACpB,IAAK,IAAIJ,EAAM,EAAGA,EAAMN,IAAQM,EAC5B,GAAIA,IAAQI,EAAK;;AAEb,MAAM0G,EAAQvH,EAAES,IAAIA,GACd+G,EAAQP,EAAExG,IAAIA,GACpB,GAAmB,IAAf8G,EAAM1G,GAAY,CAClB,MAAM4G,EAAIF,EAAM1G,GAAOwG,EAAMxG;gEAE7B;IAAK,IAAI6G,EAAI7G,EAAK6G,EAAI5F,IAAQ4F,EAC1BH,EAAMG,IAAOD,EAAIJ,EAAMK,GAE3B,IAAK,IAAIA,EAAI,EAAGA,EAAI5F,IAAQ4F,EACxBF,EAAME,IAAOD,EAAIH,EAAMI,EAE9B,CACrB,KAAuB;;;AAGH,MAAMD,EAAIJ,EAAMxG,GAChB,IAAK,IAAI6G,EAAI7G,EAAK6G,EAAI5F,IAAQ4F,EAC1BL,EAAMK,IAAMD,EAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAI5F,IAAQ4F,EACxBJ,EAAMI,IAAMD,CAEnB,CAER,CACD,OAAOR,CACV;;;;;OAODhD,IAAIgD,GACA,GAAIA,aAAahG,OAAQ,CACrB,IAAIjB,EAAIyF,KACR,MAAOkC,EAAQC,GAAU5H,EAAEI,OACpByH,EAAQC,GAAUb,EAAE7G,MAC3B,GAAIwH,IAAWC,EACX,MAAM,IAAI9F,MAAM,oBAAoB/B,EAAEI,MAAM2H,KAAK,yBAAyBd,EAAE7G,MAAM2H,KAAK,yCAC/EH,gBAAqBC,2CAYjC,OATU,IAAI5G,OAAO0G,EAAQG,GAAQ,CAACrH,EAAKI,KACvC,MAAMK,EAAMlB,EAAES,IAAIA,GACZuH,EAAQf,EAAEjC,OAChB,IAAI5G,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGyC,EAAID,EAAKxC,EAAIuJ,IAAUvJ,EAAGyC,GAAKgH,EAC3C1J,GAAO8C,EAAI7C,GAAK2J,EAAMlH,GAE1B,OAAO1C,CAAG,GAGjB,CAAM,GAAI6C,OAAO8E,QAAQkB,GAAI,CAC1B,IAAI9G,EAAOsF,KAAKC,MAChB,GAAIuB,EAAE/I,SAAWiC,EACb,MAAM,IAAI4B,MAAM,mBAAmB5B,oBAAuB8G,EAAE/I,+BAEhE,IAAI+J,EAAI,IAAIzH,MAAML,GAClB,IAAK,IAAIM,EAAM,EAAGA,EAAMN,IAAQM,EAC5BwH,EAAExH,GAAO+B,YAAYiD,KAAKhF,IAAIA,GAAKE,KAAKuH,GAAMA,EAAIjB,EAAExG,MAExD,OAAOwH,CACnB,CACY,MAAM,IAAIlG,MAAM,4BAEvB;;;;;;;OASDoG,SAASlB,GACL,GAAIA,aAAahG,OAAQ,CACrB,IAAIjB,EAAIyF,KACR,MAAOmC,EAAQD,GAAU3H,EAAEI,OACpByH,EAAQC,GAAUb,EAAE7G,yBAC3B;GAAIwH,IAAWC,EACX,MAAM,IAAI9F,MAAM,oBAAoB,CAAC4F,EAAQC,GAAQG,KAAK,yBAAyBd,EAAE7G,MAAM2H,KAAK,yCACxFH,gBAAqBC;;uCAajC;OATU,IAAI5G,OAAO0G,EAAQG,GAAQ,CAACrH,EAAKI,KACvC,MAAMuH,EAAQpI,EAAEgF,OACVgD,EAAQf,EAAEjC,OAChB,IAAI5G,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGyC,EAAIL,EAAKR,EAAIY,EAAKxC,EAAIuJ,IAAUvJ,EAAGyC,GAAK6G,EAAQ1H,GAAK6H,EACjE1J,GAAOgK,EAAMtH,GAAKkH,EAAM/H,GAE5B,OAAO7B,CAAG,GAGjB,CAAM,GAAI6C,OAAO8E,QAAQkB,GAAI,CAC1B,IAAI9G,EAAOsF,KAAKE,MAChB,GAAIsB,EAAE/I,SAAWiC,EACb,MAAM,IAAI4B,MAAM,mBAAmB5B,oBAAuB8G,EAAE/I,+BAEhE,IAAI+J,EAAI,IAAIzH,MAAML,GAClB,IAAK,IAAIM,EAAM,EAAGA,EAAMN,IAAQM,EAC5BwH,EAAExH,GAAO+B,YAAYiD,KAAK5E,IAAIJ,GAAKE,KAAKuH,GAAMA,EAAIjB,EAAExG,MAExD,OAAOwH,CACnB,CACY,MAAM,IAAIlG,MAAM,4BAEvB;;;;;;;OASDsG,SAASpB,GACL,GAAIA,aAAahG,OAAQ,CACrB,IAAIjB,EAAIyF,KACR,MAAOkC,EAAQC,GAAU5H,EAAEI,OACpB0H,EAAQD,GAAUZ,EAAE7G,MAC3B,GAAIwH,IAAWC,EACX,MAAM,IAAI9F,MAAM,oBAAoB/B,EAAEI,MAAM2H,KAAK,yBAAyB,CAACF,EAAQC,GAAQC,KAAK,yCACxFH,gBAAqBC,gCAWjC,OATU,IAAI5G,OAAO0G,EAAQG,GAAQ,CAACrH,EAAKI,KACvC,MAAMK,EAAMlB,EAAES,IAAIA,GACZ6H,EAAMrB,EAAExG,IAAII,GAClB,IAAIzC,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGA,EAAIuJ,IAAUvJ,EAC1BD,GAAO8C,EAAI7C,GAAKiK,EAAIjK,GAExB,OAAOD,CAAG,GAGjB,CAAM,GAAI6C,OAAO8E,QAAQkB,GAAI,CAC1B,IAAI9G,EAAOsF,KAAKC,MAChB,GAAIuB,EAAE/I,SAAWiC,EACb,MAAM,IAAI4B,MAAM,mBAAmB5B,oBAAuB8G,EAAE/I,+BAEhE,IAAI+J,EAAI,IAAIzH,MAAML,GAClB,IAAK,IAAIM,EAAM,EAAGA,EAAMN,IAAQM,EAC5BwH,EAAExH,GAAO+B,YAAYiD,KAAKhF,IAAIA,GAAKE,KAAKuH,GAAMA,EAAIjB,EAAExG,MAExD,OAAOwH,CACnB,CACY,MAAM,IAAIlG,MAAM,4BAEvB;;;;;OAOD6B,MAAMqD,GACF,IAAIjH,EAAIyF,KACJ8C,EAAIvI,EAAE4F,MAAM1H,OAEhB,GAAIqK,GADItB,EAAErB,MAAM1H,OACJ,OACZ,IAAI+J,EAAI,IAAIhH,OAYZ,OAXAgH,EAAE7H,MAAQ,CACNmI,EACAA,EACA,CAAClK,EAAGyC,IACIzC,GAAKyC,EACEd,EAAE4F,MAAMvH,GAAK4I,EAAErB,MAAM9E,GAErBmH,EAAE7E,MAAMtC,EAAGzC,IAIvB4J,CACV;;;;;;;;;;;;;;OAgBDO,OAAOvB,EAAGnB,EAAO,cACb,MAAM9F,EAAIyF,MACHkC,EAAQC,GAAU5H,EAAEI,OACpByH,EAAQC,GAAUb,EAAE7G,MAC3B,GAAY,cAAR0F,EAAsB,CACtB,GAAI6B,GAAUE,EACV,MAAM,IAAI9F,MAAM,sEAAsE4F,iBAAsBE,WAEhH,MAAMY,EAAI,IAAIxH,OAAO0G,EAAQC,EAASE,EAAQ,SAG9C,OAFAW,EAAEpE,UAAU,EAAG,EAAGrE,GAClByI,EAAEpE,UAAU,EAAGuD,EAAQX,GAChBwB,CACnB,CAAe,GAAY,YAAR3C,EAAoB,CAC3B,GAAI8B,GAAUE,EACV,MAAM,IAAI/F,MAAM,uEAAuE6F,oBAAyBE,cAEpH,MAAMW,EAAI,IAAIxH,OAAO0G,EAASE,EAAQD,EAAQ,SAG9C,OAFAa,EAAEpE,UAAU,EAAG,EAAGrE,GAClByI,EAAEpE,UAAUsD,EAAQ,EAAGV,GAChBwB,CACnB,CAAe,GAAY,QAAR3C,EAAgB,CACvB,MAAM2C,EAAI,IAAIxH,OAAO0G,EAASE,EAAQD,EAASE,EAAQ,SAGvD,OAFAW,EAAEpE,UAAU,EAAG,EAAGrE,GAClByI,EAAEpE,UAAUsD,EAAQC,EAAQX,GACrBwB,CACnB,CACY,MAAM,IAAI1G,MAAM,wDAAwD+D,KAE/E;;;;;;;OASDzB,UAAUqE,EAAYC,EAAY1B,GAC9B,MAAM9G,EAAOpC,KAAK6K,IAAInD,KAAKC,MAAQgD,EAAYzB,EAAE7G,MAAM,IACjD0B,EAAO/D,KAAK6K,IAAInD,KAAKE,MAAQgD,EAAY1B,EAAE7G,MAAM,IACvD,IAAK,IAAIK,EAAM,EAAGA,EAAMN,IAAQM,EAC5B,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,EAC5B4E,KAAKrE,UAAUX,EAAMiI,EAAY7H,EAAM8H,EAAY1B,EAAE7D,MAAM3C,EAAKI,IAGxE,OAAO4E,IACV;;;;;;;;;;;;;;;;;OAmBD3B,UAAU+E,EAAWC,EAAWC,EAAU,KAAMC,EAAU,MACtD,MAAO7I,EAAM2B,GAAQ2D,KAAKrF,MAG1B,GADA4I,EAAUA,GAAWlH,GADrBiH,EAAUA,GAAW5I,IAEN0I,GAAaG,GAAWF,EACnC,MAAM,IAAI/G,MAAM,yJAGAgH,kBAAwBF,gBAAwBG,sBAA4BF,MAEhG,MAAML,EAAI,IAAIxH,OAAO8H,EAAUF,EAAWG,EAAUF,EAAW,SAC/D,IAAK,IAAIrI,EAAMoI,EAAWI,EAAU,EAAGxI,EAAMsI,IAAWtI,IAAOwI,EAC3D,IAAK,IAAIpI,EAAMiI,EAAWI,EAAU,EAAGrI,EAAMmI,IAAWnI,IAAOqI,EAC3DT,EAAErH,UAAU6H,EAASC,EAASzD,KAAKrC,MAAM3C,EAAKI,IAGtD,OAAO4H;kHAEV;;;;;;;OAQDU,OAAOC,EAAaC,GAChB,MAAM9D,EAAI6D,EAAYlL,OAChBmC,EAAIgJ,EAAYnL,OAEhB0E,EAAI,IAAI3B,OAAOsE,EAAGlF,GACxB,IAAK,IAAIhC,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAMiL,EAAYF,EAAY/K,GAC9B,IAAK,IAAIyC,EAAI,EAAGA,EAAIyE,IAAKzE,EAAG,CACxB,MAAMyI,EAAYF,EAAYvI,GAC9B8B,EAAExB,UAAU/C,EAAGyC,EAAG2E,KAAKrC,MAAMkG,EAAWC,GAC3C,CACJ,CAED,OAAO3G,CACV;;;;;;OAQD4G,aAAa/B,EAAG7F,GACZ,MAAMsE,EAAOT,KAAKT,QACX7E,EAAM2B,GAAQ2D,KAAKrF,MAC1B,IAAK,IAAI/B,EAAI,EAAGoC,EAAM,EAAGA,EAAMN,IAAQM,EACnC,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,EACnC6H,EAAK7H,GAAKoJ,EAAEvB,EAAK7H,GAAIuD,EAAEnB,EAAKI,IAGpC,OAAO4E,IACV,CAEDgE,qBAAqBzE,EAAQyC,GACzB,OAAOhC,KAAK+D,aAAa/B,GAAG,CAACxB,EAAGnF,IAAMkE,EAAOlE,IAChD,CAED4I,qBAAqB1E,EAAQyC,GACzB,MAAMvB,EAAOT,KAAKT,QACX7E,EAAM2B,GAAQ2D,KAAKrF,MAC1B,IAAK,IAAI/B,EAAI,EAAGoC,EAAM,EAAGA,EAAMN,IAAQM,EAAK,CACxC,MAAM2G,EAAMpC,EAAOvE,GACnB,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,EACnC6H,EAAK7H,GAAKoJ,EAAEvB,EAAK7H,GAAI+I,EAE5B,CACD,OAAO3B,IACV,CAEDkE,OAAOxH,EAAOsF,GACV,MAAMvB,EAAOT,KAAKT,QACX7E,EAAM2B,GAAQ2D,KAAKrF,MAC1B,GAAI+B,aAAiBlB,OAAQ,CACzB,MAAM+D,EAAS7C,EAAM6C,QACd4E,EAAYC,GAAc1H,EAAM/B,MACvC,GAAmB,IAAfwJ,EAAkB,CAClB,GAAI9H,IAAS+H,EACT,MAAM,IAAI9H,MAAM,uBAEpB,IAAK,IAAI1D,EAAI,EAAGoC,EAAM,EAAGA,EAAMN,IAAQM,EACnC,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,EACnC6H,EAAK7H,GAAKoJ,EAAEvB,EAAK7H,GAAI2G,EAAOnE,GAGpD,MAAmB,GAAmB,IAAfgJ,EAAkB,CACzB,GAAI1J,IAASyJ,EACT,MAAM,IAAI7H,MAAM,uBAEpB,IAAK,IAAI1D,EAAI,EAAGoC,EAAM,EAAGA,EAAMN,IAAQM,EAAK,CACxC,MAAMmB,EAAKoD,EAAOvE,GAClB,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,EACnC6H,EAAK7H,GAAKoJ,EAAEvB,EAAK7H,GAAIuD,EAE5B,CACJ,KAAM,IAAIzB,GAAQyJ,GAAc9H,GAAQ+H,EAKrC,MAAM,IAAI9H,MAAM,SAJhB,IAAK,IAAI1D,EAAI,EAAGF,EAAIgC,EAAO2B,EAAMzD,EAAIF,IAAKE,EACtC6H,EAAK7H,GAAKoJ,EAAEvB,EAAK7H,GAAI2G,EAAO3G,GAInC,CACJ,MAAM,GAAI4C,OAAO8E,QAAQ5D,GACtB,GAAIA,EAAMjE,SAAWiC,EACjB,IAAK,IAAI9B,EAAI,EAAGoC,EAAM,EAAGA,EAAMN,IAAQM,EAAK,CACxC,MAAMmB,EAAIO,EAAM1B,GAChB,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,EACnC6H,EAAK7H,GAAKoJ,EAAEvB,EAAK7H,GAAIuD,EAE5B,KACE,IAAIO,EAAMjE,SAAW4D,EAOxB,MAAM,IAAIC,MAAM,SANhB,IAAK,IAAI1D,EAAI,EAAGoC,EAAM,EAAGA,EAAMN,IAAQM,EACnC,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,EACnC6H,EAAK7H,GAAKoJ,EAAEvB,EAAK7H,GAAI8D,EAAMtB,GAKtC;AAED,IAAK,IAAIxC,EAAI,EAAGF,EAAIgC,EAAO2B,EAAMzD,EAAIF,IAAKE,EACtC6H,EAAK7H,GAAKoJ,EAAEvB,EAAK7H,GAAI8D,GAG7B,OAAOsD,IACV;;;;OAMDxC,QACI,IAAIgE,EAAI,IAAIhG,OAIZ,OAHAgG,EAAEvB,MAAQD,KAAKC,MACfuB,EAAEtB,MAAQF,KAAKE,MACfsB,EAAErB,MAAQH,KAAKT,OAAOhE,MAAM,GACrBiG,CACV;;;;;;;;;;;;;;OAgBD/C,KAAK/B,GAAO2H,OAAEA,GAAS,GAAU,CAAA,GAE7B,OADUA,EAASrE,KAAOA,KAAKxC,SACtB0G,OAAOxH,GAAO,CAACtE,EAAGC,IAAMD,EAAIC,GACxC;;;;;;;;;;;;;;OAgBD2F,OAAOtB,GAAO2H,OAAEA,GAAS,GAAU,CAAA,GAE/B,OADUA,EAASrE,KAAOA,KAAKxC,SACtB0G,OAAOxH,GAAO,CAACtE,EAAGC,IAAMD,EAAIC,GACxC;;;;;;;;;;;;;;OAgBDiM,IAAI5H,GAAO2H,OAACA,GAAS,GAAS,CAAA,GAE1B,OADUA,EAASrE,KAAOA,KAAKxC,SACtB0G,OAAOxH,GAAO,CAACtE,EAAGC,IAAMD,EAAIC,GACxC;;;;;;;;;;;;;;OAgBDkG,IAAI7B,GAAO2H,OAAEA,GAAS,GAAU,CAAA,GAE5B,OADUA,EAASrE,KAAOA,KAAKxC,SACtB0G,OAAOxH,GAAO,CAACtE,EAAGC,IAAMD,EAAIC,GACxC;;;;OAMGsC,YACA,MAAO,CAACqF,KAAKC,MAAOD,KAAKE,MAC5B;;;;;OAOGvF,WAAOD,EAAM2B,EAAMK,EAAQ,KAAM,KACjCsD,KAAKC,MAAQvF,EACbsF,KAAKE,MAAQ7D,EACb2D,KAAKG,MAAQ,IAAI5D,aAAa7B,EAAO2B,GACrC,IAAK,IAAIzD,EAAI,EAAGoC,EAAM,EAAGA,EAAMN,IAAQM,EACnC,IAAK,IAAII,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,EACnCoH,KAAKG,MAAMvH,GAAK8D,EAAM1B,EAAKI,GAGnC,OAAO4E,IACV;;;;OAMGJ,gBACA,MAAM3D,EAAS,GACf,IAAK,MAAMjB,KAAOgF,KAAKW,eACnB1E,EAAO3C,KAAK0B,GAEhB,OAAOiB,CACV;;;;OAMGsI,cACA,MAAMtI,EAAS,GACf,IAAK,MAAMjB,KAAOgF,KAAKW,eACnB1E,EAAO3C,KAAKyB,MAAME,KAAKD,IAE3B,OAAOiB,CACV;;;;OAMGwD,WACA,MAAM/E,EAAOsF,KAAKC,MACZ5D,EAAO2D,KAAKE,MACZsE,EAAclM,KAAK6K,IAAIzI,EAAM2B,GACnC,IAAIJ,EAAS,IAAIM,aAAaiI,GAC9B,IAAK,IAAI5L,EAAI,EAAGA,EAAI4L,IAAe5L,EAC/BqD,EAAOrD,GAAKoH,KAAKrC,MAAM/E,EAAGA,GAE9B,OAAOqD,CACV;;;;OAMGwI,WAGA,OAFYzE,KAAKrH,KACPqH,KAAKC,MAAQD,KAAKE,MAE/B;;;;OAMGvH,UAEA,OAAOoE,YADMiD,KAAKT,OAErB;;;;OAMGA,aAEA,OADaS,KAAKG,KAErB;;;;OAMGuE,eACA,MAAMjE,EAAOT,KAAKT,OACZ7E,EAAOsF,KAAKC,MACZ5D,EAAO2D,KAAKE,MACZjE,EAASM,aAAatB,KAAK,CAAExC,OAAQiC,IAC3C,IAAK,IAAI9B,EAAI,EAAGoC,EAAM,EAAGA,EAAMN,IAAQM,EAAK,CACxC,IAAIrC,EAAM,EACV,IAAK,IAAIyC,EAAM,EAAGA,EAAMiB,IAAQjB,IAAOxC,EACnCD,GAAO8H,EAAK7H,GAEhBqD,EAAOjB,GAAOrC,EAAM0D,CACvB,CACD,OAAOJ,CACV;;;OAKG0I,eACA,MAAMlE,EAAOT,KAAKT,OACZ7E,EAAOsF,KAAKC,MACZ5D,EAAO2D,KAAKE,MACZjE,EAASM,aAAatB,KAAK,CAAExC,OAAQ4D,IAC3C,IAAK,IAAIjB,EAAM,EAAGA,EAAMiB,IAAQjB,EAAK,CACjC,IAAIzC,EAAM,EACV,IAAK,IAAIC,EAAIwC,EAAKJ,EAAM,EAAGA,EAAMN,IAAQM,EAAKpC,GAAKyD,EAC/C1D,GAAO8H,EAAK7H,GAEhBqD,EAAOb,GAAOzC,EAAM+B,CACvB,CACD,OAAOuB,CACV;;;;;;;;OAUDmE,gBAAgB7F,EAAGlC,EAAG6G,EAAYD,EAAM,MACjB,OAAfC,IACAA,EAAa,IAAIC,YAErB,MAAMzE,EAAOH,EAAEI,MAAM,GACf0B,EAAOhE,EAAEsC,MAAM,GACrB,IAAIsB,EAAS,IAAIT,OAAOd,EAAM,GAC9B,IAAK,IAAI9B,EAAI,EAAGA,EAAIyD,IAAQzD,EAAG,CAC3B,MAAMgM,EAAMpJ,OAAOP,KAAK5C,EAAE+C,IAAIxC,IAAI0I,EAClC,IAAI1H,EAAI,IAAI4B,OAAOd,EAAM,GAAG,IAAMwE,EAAWE,SACzCyF,EAAID,EAAIrG,IAAIhE,EAAEiE,IAAI5E,IAClBkL,EAAID,EAAErH,QACV,EAAG,CACC,MAAMuH,EAAIxK,EAAEiE,IAAIsG,GACVE,EAAQH,EAAEnC,SAASmC,GAAGlH,MAAM,EAAG,GAAKmH,EAAEpC,SAASqC,GAAGpH,MAAM,EAAG,GACjE/D,EAAIA,EAAE0K,IAAIQ,EAAErG,KAAKuG,IACjB,MAAMC,EAASJ,EAAEtG,IAAIwG,EAAEtG,KAAKuG,IACtB/G,EAAOgH,EAAOvC,SAASuC,GAAQtH,MAAM,EAAG,GAAKkH,EAAEnC,SAASmC,GAAGlH,MAAM,EAAG,GAC1EmH,EAAIG,EAAOX,IAAIQ,EAAErG,KAAKR,IACtB4G,EAAII,CACP,OAAQ3M,KAAKa,IAAI0L,EAAEJ,MAAQxF,GAC5BhD,EAASA,EAAO8G,OAAOnJ,EAAG,aAC7B,CACD,OAAOqC,CACV;;;;;;OAQDmE,aAAa7F,EAAGlC,GACZ,IAAM6M,EAAGA,EAAGC,EAAGA,GAAM,MAAO5K,GAAK,MAAOA,EAAIA,EAAIiB,OAAO4J,GAAG7K,GACtDG,EAAOwK,EAAEvK,MAAM,GACff,EAAIvB,EAAEmF;;AAGV,IAAK,IAAIxC,EAAM,EAAGA,EAAMN,IAAQM,EAAK,CACjC,IAAK,IAAII,EAAM,EAAGA,EAAMJ,EAAM,IAAKI,EAC/BxB,EAAEyH,UAAU,EAAGrG,EAAKkK,EAAEvH,MAAM3C,EAAKI,GAAOxB,EAAE+D,MAAM,EAAGvC,IAEvDxB,EAAE+B,UAAU,EAAGX,EAAKpB,EAAE+D,MAAM,EAAG3C,GAAOkK,EAAEvH,MAAM3C,EAAKA,GACtD;WAGD;IAAK,IAAIA,EAAMN,EAAO,EAAGM,GAAO,IAAKA,EAAK,CACtC,IAAK,IAAII,EAAMV,EAAO,EAAGU,EAAMJ,IAAOI,EAClCxB,EAAEyH,UAAU,EAAGrG,EAAKmK,EAAExH,MAAM3C,EAAKI,GAAOxB,EAAE+D,MAAM,EAAGvC,IAEvDxB,EAAE+B,UAAU,EAAGX,EAAKpB,EAAE+D,MAAM,EAAG3C,GAAOmK,EAAExH,MAAM3C,EAAKA,GACtD,CAED,OAAOpB,CACV;;;;;OAODwG,UAAU7F,GACN,MAAMG,EAAOH,EAAEI,MAAM,GACfuK,EAAI,IAAI1J,OAAOd,EAAMA,EAAM,SAC3ByK,EAAI,IAAI3J,OAAOd,EAAMA,EAAM,YAEjC,IAAK,IAAIW,EAAI,EAAGA,EAAIX,IAAQW,EAAG,CAC3B,IAAK,IAAIzC,EAAIyC,EAAGzC,EAAI8B,IAAQ9B,EAAG,CAC3B,IAAID,EAAM,EACV,IAAK,IAAI6B,EAAI,EAAGA,EAAIa,IAAKb,EACrB7B,GAAOuM,EAAEvH,MAAM/E,EAAG4B,GAAK2K,EAAExH,MAAMnD,EAAGa,GAEtC6J,EAAEvJ,UAAU/C,EAAGyC,EAAGd,EAAEoD,MAAM/E,EAAGyC,GAAK1C,EACrC,CACD,IAAK,IAAIC,EAAIyC,EAAGzC,EAAI8B,IAAQ9B,EAAG,CAC3B,GAAsB,IAAlBsM,EAAEvH,MAAMtC,EAAGA,GACX,OAEJ,IAAI1C,EAAM,EACV,IAAK,IAAI6B,EAAI,EAAGA,EAAIa,IAAKb,EACrB7B,GAAOuM,EAAEvH,MAAMtC,EAAGb,GAAK2K,EAAExH,MAAMnD,EAAG5B,GAEtCuM,EAAExJ,UAAUN,EAAGzC,GAAI2B,EAAEoD,MAAMtC,EAAGzC,GAAKD,GAAOuM,EAAEvH,MAAMtC,EAAGA,GACxD,CACJ,CAED,MAAO,CAAE6J,EAAGA,EAAGC,EAAGA,EACrB;;;;;OAOD/E,WAAW7F,GACP,MAAMG,EAAOH,EAAEI,MAAM,IACfuK,EAAEA,EAACC,EAAEA,GAAM3J,OAAO4J,GAAG7K,GACrB8K,EAASH,EAAEzF,KACX6F,EAASH,EAAE1F,KACjB,IAAI8F,EAAMF,EAAO,GAAKC,EAAO,GAC7B,IAAK,IAAItK,EAAM,EAAGA,EAAMN,IAAQM,EAC5BuK,GAAOF,EAAOrK,GAAOsK,EAAOtK,GAEhC,OAAOuK,CACV;;;;;;OAQDnF,WAAWoF,EAAGhL,EAAI,GACd,IAAIiL,EAAMD,EAAE9C,SAAS8C,GACjBE,EAAMF,EAAE5C,SAAS4C,IACf9F,aAAciG,EAAGnG,YAAaoG,GAAU/G,4BAA4B4G,EAAKjL,IACzEkF,aAAcyF,GAAMtG,4BAA4B6G,EAAKlL,GAC3D,MAAO,CAAE2K,EAAGA,EAAGS,MAAOA,EAAM1K,KAAK2K,GAAUvN,KAAKC,KAAKsN,KAASF,EAAGA;;;;;;;;;6CAWpE,CAEDvF,eAAe7F,GACb,OAAOQ,MAAMuF,QAAQ/F,IAAMA,aAAagC,cAAgBhC,aAAauL,YACtE;;;;;GCzhCE,MAAM3G;;;;;;;AAOTY,YAAYgG,GAUR,OATA/F,KAAKgG,GAAK,IACVhG,KAAKiG,GAAK,IACVjG,KAAKkG,UAAY,WACjBlG,KAAKmG,YAAc,WACnBnG,KAAKoG,YAAc,WACnBpG,KAAKqG,IAAM,IAAItL,MAAMiF,KAAKgG,IAC1BhG,KAAKsG,KAAOtG,KAAKF,EAAI,EAErBE,KAAKlB,KAAOiH,IAAS,IAAIQ,MAAOC,UACzBxG,IACV,CAEGlB,SAAKiH,GACL/F,KAAK+F,MAAQA,EACb,IAAIU,EAAKzG,KAAKqG,IAGd,IADAI,EAAG,GAAKV,IAAU,EACb/F,KAAKsG,KAAO,EAAGtG,KAAKsG,KAAOtG,KAAKgG,GAAIhG,KAAKsG,MAAQ,EAAG,CACrD,IAAII,EAAM1G,KAAKsG,KACXrE,EAAIwE,EAAGC,EAAM,GAAMD,EAAGC,EAAM,KAAO,GACvCD,EAAGC,IAAqC,aAAtB,WAAJzE,KAAoB,KAAqB,IAAyB,YAAd,MAAJA,GAA+ByE,EAC7FD,EAAGC,MAAU,CAChB,CACJ;;;;OAMG5H,WACA,OAAOkB,KAAK+F,KACf;;;;OAMG3G,aACA,OAAOY,KAAK2G,YAAc,EAAM,WACnC;;;;OAMGA,iBACA,IAAI9M,EACA+M,EAAQ,IAAI7L,MAAM,EAAKiF,KAAKkG,WAChC,GAAIlG,KAAKsG,MAAQtG,KAAKgG,GAAI,CACtB,IAAIa,EAMAC,EAAM9G,KAAKgG,GAAKhG,KAAKiG,GACrBc,EAAM/G,KAAKiG,GAAKjG,KAAKgG;;;gBAEzB,IAAKa,EAAK,EAAGA,EAAKC,IAAOD,EACrBhN,EAAKmG,KAAKqG,IAAIQ,GAAM7G,KAAKmG,YAAgBnG,KAAKqG,IAAIQ,EAAK,GAAK7G,KAAKoG,YACjEpG,KAAKqG,IAAIQ,GAAM7G,KAAKqG,IAAIQ,EAAK7G,KAAKiG,IAAOpM,IAAM,EAAK+M,EAAU,EAAJ/M,GAE9D,KAAOgN,EAAK7G,KAAKgG,GAAK,IAAKa,EACvBhN,EAAKmG,KAAKqG,IAAIQ,GAAM7G,KAAKmG,YAAgBnG,KAAKqG,IAAIQ,EAAK,GAAK7G,KAAKoG,YACjEpG,KAAKqG,IAAIQ,GAAM7G,KAAKqG,IAAIQ,EAAKE,GAAQlN,IAAM,EAAK+M,EAAU,EAAJ/M,GAG1DA,EAAKmG,KAAKqG,IAAIrG,KAAKgG,GAAK,GAAKhG,KAAKmG,YAAgBnG,KAAKqG,IAAI,GAAKrG,KAAKoG,YACrEpG,KAAKqG,IAAIrG,KAAKgG,GAAK,GAAKhG,KAAKqG,IAAIrG,KAAKiG,GAAK,GAAMpM,IAAM,EAAK+M,EAAU,EAAJ/M,GAElEmG,KAAKsG,KAAO,CACf,CAQD,OANAzM,EAAImG,KAAKqG,IAAKrG,KAAKsG,MAAQ,GAC3BzM,GAAKA,IAAM,GACXA,GAAMA,GAAK,EAAK,WAChBA,GAAMA,GAAK,GAAM,WACjBA,GAAKA,IAAM,GAEJA,IAAM,CAChB,CAEDmN,eACI,IAAIpN,EAAGC,EAAGgL,EACV,GAAiB,MAAb7E,KAAKiH,KAEL,OADArN,EAAIoG,KAAKiH,KAAMjH,KAAKiH,KAAO,KACpBrN,EACJ,GACHA,EAAI,EAAIoG,KAAKZ,OAAS,EACtBvF,EAAI,EAAImG,KAAKZ,OAAS,EACtByF,EAAIjL,EAAIA,EAAIC,EAAIA,SACVgL,GAAKA,EAAI,GACnB,MAAMqC,EAAI5O,KAAKC,MAAM,EAAID,KAAK6O,IAAItC,GAAKA;AAEvC,OADA7E,KAAKiH,KAAOpN,EAAIqN,EACTtN,EAAIsN,CACd;;;;;;OAQDE,OAAO7M,EAAG7B,GACN,GAAI6B,aAAaiB,OAAQ,CACrB,IAAId,EAAOH,EAAEI,MAAM,GACnB,GAAIjC,EAAIgC,EACJ,MAAM,IAAI4B,MAAM,oBAEpB,IAAI+K,EAAS,IAAItM,MAAMrC,GACnB4O,EAAa1L,SAAS,EAAGlB,EAAO,GACpC,IAAK,IAAI9B,EAAI,EAAGkK,EAAIwE,EAAW7O,OAAQG,EAAIF,IAAKE,IAAKkK,EAAG,CACpD,IAAIyE,EAAevH,KAAK2G,WAAa7D,EACrCuE,EAAOzO,GAAK0O,EAAWE,OAAOD,EAAc,GAAG,EAClD,CACD,OAAOF,EAAOnM,KAAK4J,GAAMvK,EAAES,IAAI8J,IAC3C,CAAe,GAAI/J,MAAMuF,QAAQ/F,IAAMA,aAAagC,aAAc,CACtD,IAAI7B,EAAOH,EAAE9B,OACb,GAAIC,EAAIgC,EACJ,MAAM,IAAI4B,MAAM,oBAEpB,IAAI+K,EAAS,IAAItM,MAAMrC,GACnB4O,EAAa1L,SAAS,EAAGlB,EAAO,GACpC,IAAK,IAAI9B,EAAI,EAAGkK,EAAIwE,EAAW7O,OAAQG,EAAIF,IAAKE,IAAKkK,EAAG,CACpD,IAAIyE,EAAevH,KAAK2G,WAAa7D,EACrCuE,EAAOzO,GAAK0O,EAAWE,OAAOD,EAAc,GAAG,EAClD,CACD,OAAOF,EAAOnM,KAAK4J,GAAMvK,EAAEuK,IAC9B,CACJ;;;;;;;;OAUD1E,cAAc7F,EAAG7B,EAAGoG,EAAO,MAEvB,OADU,IAAIK,WAAWL,GAChBsI,OAAO7M,EAAG7B;;;;;;;;;;;;;;8CAetB;;;;;;;GCpKU,SAAQa,IAAEgG,GACrB,IAAIhG,EACJ,IAAK,MAAMmD,KAAS6C,EACH,MAAT7C,IAAkBnD,EAAMmD,QAAkB+K,IAARlO,GAAqBmD,GAASA,KAChEnD,EAAMmD,GAGd,OAAOnD,CACX;;;;;;;GCRe,SAAQ4J,IAAE5D,GACrB,IAAI4D,EACJ,IAAK,MAAMzG,KAAS6C,EACH,MAAT7C,IAAkByG,EAAMzG,QAAkB+K,IAARtE,GAAqBzG,GAASA,KAChEyG,EAAMzG,GAGd,OAAOyG,CACX;;;;GCXO,MAAMuE;;;;;;;;;;;;AAYT3H,YAAY4H,EAAW,KAAMC,EAAW9C,IAAKA,GAAG+C,EAAa,OACzD,OAAIF,EACOD,KAAKI,QAAQH,EAAUC,EAAUC,IAExC7H,KAAK+H,UAAYH,EACjB5H,KAAKgI,WAAa,GAEdhI,KAAKiI,YADS,OAAdJ,EACmB,CAACzP,EAAGC,IAAMD,EAAIC,EACZ,OAAdwP,EACY,CAACzP,EAAGC,IAAMD,EAAIC,EAEdwP,EAEhB7H,KAEd;;;;;;;OASDI,eAAeuH,EAAUC,EAAW9C,IAAKA,GAAG+C,EAAa,OACrD,MAAMK,EAAO,IAAIR,KAAK,KAAME,EAAUC,GAChCM,EAAYD,EAAKF,WACvB,IAAK,MAAMvF,KAAKkF,EACZQ,EAAU7O,KAAK,CACX8O,QAAW3F,EACX/F,MAASkL,EAASnF,KAG1B,IAAK,IAAI7J,EAAIN,KAAK+P,MAAOV,EAASlP,OAAS,EAAK,GAAIG,GAAK,IAAKA,EAC1DsP,EAAKI,cAAc1P,GAEvB,OAAOsP,CACV;;;;;;OAQDK,MAAMC,EAASC,GACX,MAAMN,EAAYnI,KAAKgI,YACtBG,EAAUM,GAAUN,EAAUK,IAAY,CAACL,EAAUK,GAAUL,EAAUM,GAE7E;;;OAKDC,cACI,MAAMP,EAAYnI,KAAKgI,WACvB,IAAIW,EAAQR,EAAU1P,OAAS,EAC/B,KAAOkQ,EAAQ,GAAG,CACd,IAAIC,EAActQ,KAAK+P,OAAOM,EAAQ,GAAK,GAC3C,IAAK3I,KAAKiI,YAAYE,EAAUQ,GAAOjM,MAAOyL,EAAUS,GAAalM,OACjE,MAEJsD,KAAKuI,MAAMK,EAAaD,GACxBA,EAAQC,CAEX,CACJ;;;;;OAODtP,KAAK8O,GACD,MAEMS,EAAO,CAACT,QAAWA,EAAS1L,MAFpBsD,KAAK+H,UAAUK;wCAK7B;OAFApI,KAAKgI,WAAW1O,KAAKuP,GACrB7I,KAAK0I,cACE1I,IACV;;;;OAMDsI,cAAcQ,EAAY,GACtB,MAAMX,EAAYnI,KAAKgI,WACjBH,EAAa7H,KAAKiI,YAClBxP,EAAS0P,EAAU1P,OACzB,IAAIsQ,EAAO,EAAID,EAAc,EACzBE,EAAQ,EAAIF,EAAc,EAC1BH,EAAQG,EACZ,GAAIH,EAAQlQ,EAAQ,KAAM,2BACtBsQ,EAAOtQ,GAAUoP,EAAWM,EAAUY,GAAMrM,MAAOyL,EAAUQ,GAAOjM,SACpEiM,EAAQI,GAERC,EAAQvQ,GAAUoP,EAAWM,EAAUa,GAAOtM,MAAOyL,EAAUQ,GAAOjM,SACtEiM,EAAQK,GAERL,IAAUG,IACV9I,KAAKuI,MAAMO,EAAaH,GACxB3I,KAAKsI,cAAcK,GAE1B;;;;OAMDM,MACI,MAAMd,EAAYnI,KAAKgI,WACvB,GAAyB,IAArBG,EAAU1P,OACV,OAAO,KACJ,GAAyB,IAArB0P,EAAU1P,OACjB,OAAO0P,EAAUc,MAErBjJ,KAAKuI,MAAM,EAAGJ,EAAU1P,OAAS,GACjC,MAAMyQ,EAAOf,EAAUc,MAEvB,OADAjJ,KAAKsI,gBACEY,CACV;;;;OAMGC,YACA,OAAOnJ,KAAKgI,WAAWvP,OAAS,EAAIuH,KAAKgI,WAAW,GAAK,IAC5D;;;;OAODoB,WACI,IAAK,IAAIxQ,EAAI,EAAGF,EAAIsH,KAAKgI,WAAWvP,OAAQG,EAAIF,IAAKE,QAC3CoH,KAAKgI,WAAWpP,GAAGwP,OAEhC;;;;OAMDiB,UACI,OAAOrJ,KAAKS,OACPnF,MAAK,CAAClD,EAAEC,IAAM2H,KAAKiI,YAAY7P,EAAGC,IAAM,EAAI,GACpD;;;;OAMDoI,OACI,OAAOT,KAAKgI,WACP9M,KAAI4J,GAAKA,EAAEsD,SACnB;;;;OAMDkB,WACI,OAAOtJ,KAAKgI,UACf;;;;OAMGvP,aACA,OAAOuH,KAAKgI,WAAWvP,MAC1B;;;;OAMG8Q,YACA,OAAuB,IAAhBvJ,KAAKvH,MACf;;;;;GCjME,MAAM+Q;;;;;;;;AAQTzJ,YAAY4H,EAAW,MAEnB,GADA3H,KAAKyJ,MAAQ,IAAIC,IACb/B,EACA,IAAK,MAAMlF,KAAKkF,EACZ3H,KAAK2J,SAASlH,GAGtB,OAAOzC,IACV,CAED2J,SAAS/P,GACL,MAAMgQ,EAAO5J,KAAKyJ,MAQlB,OAPKG,EAAKC,IAAIjQ,KACVgQ,EAAKtF,IAAI1K,GACTA,EAAEkQ,eAAiB,GACnBlQ,EAAEkQ,eAAeC,OAASnQ,EAC1BA,EAAEkQ,eAAeE,SAAW,IAAIN,IAAI,CAAC9P,IACrCA,EAAEkQ,eAAeG,KAAO,GAErBjK,IACV,CAEDkK,KAAKtQ,GAED,OADaoG,KAAKyJ,MACTI,IAAIjQ,GACLA,EAAEkQ,eAAeC,SAAWnQ,GAC5BA,EAAEkQ,eAAeE,SAAS1F,OAAO1K,GACjCA,EAAEkQ,eAAeC,OAAS/J,KAAKkK,KAAKtQ,EAAEkQ,eAAeC,QAC9CnQ,EAAEkQ,eAAeC,QAEjBnQ,EAGJ,IAEd,CAEDuQ,MAAMvQ,EAAGC,GACL,IAAIuQ,EAASpK,KAAKkK,KAAKtQ,GACnByQ,EAASrK,KAAKkK,KAAKrQ,GAEvB,OAAIuQ,IAAWC,IACXD,EAAON,eAAeG,KAAOI,EAAOP,eAAeG,QAAOG,EAAQC,GAAU,CAACA,EAAQD,IAEzFC,EAAOP,eAAeC,OAASK;;AAE/BC,EAAOP,eAAeE,SAASM,QAAQF,EAAON,eAAeE,SAAS1F,IAAK8F,EAAON,eAAeE,UACjGI,EAAON,eAAeG,MAAQI,EAAOP,eAAeG,MANtBjK,IASjC;;;;GCzDE,MAAMuK;;;;;;;;;;;;AAYTxK,YAAY4H,EAAW,KAAMlN,EAAStC,WAkBlC,OAjBA6H,KAAKwK,MAAQ,MACTzK,YAAY0K,EAAOC,EAAO,KAAMC,EAAO,KAAMC,EAAO,MAChD5K,KAAKyK,MAAQA,EACbzK,KAAK0K,OAASA,EACd1K,KAAK2K,OAASA,EACd3K,KAAK4K,OAASA,CACjB,GAEL5K,KAAK6K,MAAQ,MACT9K,YAAY+K,GACR9K,KAAK8K,OAASA,CACjB,GAEL9K,KAAK+K,QAAUtQ,EACXkN,GACA3H,KAAKsE,IAAIqD,GAEN3H,IACV;;;;;OAODsE,IAAIqD,GAKA,OAJAA,EAAWA,EAASzM,KAAI,CAACkN,EAASO,KACvB,CAACA,MAAOA,EAAOP,QAASA,MAEnCpI,KAAKgL,MAAQhL,KAAKiL,WAAWtD,GACtB3H,IACV;;;;;OAODiL,WAAWtD,GACP,GAAwB,IAApBA,EAASlP,OACT,OAAO,IAAIuH,KAAK6K,MAAMlD,GACnB,CACH,IAQInG,EARA0F,EAAIlH,KAAKkL,iBAAiBvD,GAC1BwD,EAAkBxD,EAASrM,MAAK,CAAClD,EAAGC,IAAMD,EAAEgQ,QAAQlB,GAAK7O,EAAE+P,QAAQlB,KACnExO,EAAIyS,EAAgB1S,OACpB2S,EAAU9S,KAAK+P,MAAM3P,EAAI,GACzB2S,EAAI1D,EAASyD,GACblG,EAAIiG,EAAgB5P,MAAM,EAAG6P,GAC7BjO,EAAIgO,EAAgB5P,MAAM6P,EAAS1S,GACnCkS,EAAStS,KAAKiB,OAAOoO,EAASzM,KAAI4J,GAAK9E,KAAK+K,QAAQM,EAAEjD,QAAStD,EAAEsD,YAOrE,OAJI5G,EADA0D,EAAEzM,OAAS,GAAK0E,EAAE1E,OAAS,EACvB,IAAIuH,KAAKwK,MAAMa,EAAGrL,KAAKiL,WAAW/F,GAAIlF,KAAKiL,WAAW9N,GAAIyN,GAE1D,IAAI5K,KAAK6K,MAAMlD,GAEhBnG,CACV,CACJ;;;;;OAOD0J,iBAAiB1J,GACb,IAAIsD,EAAItD,EAAE,GAAG4G,QAAQ3P,OACjBoD,EAAQ,IAAId,MAAM+J,GAEtB,IAAK,IAAIlM,EAAI,EAAGA,EAAIkM,IAAKlM,EACrBiD,EAAMjD,GAAK,CAAC0S,KAAWA,KAG3B,IAAIC,EAAS/J,EAAEgK,QAAO,CAACC,EAAKC,KACxB,IAAK,IAAI9S,EAAI,EAAGA,EAAIkM,IAAKlM,EACrB6S,EAAI7S,GAAG,GAAKN,KAAK6K,IAAIsI,EAAI7S,GAAG,GAAI8S,EAAQtD,QAAQxP,IAChD6S,EAAI7S,GAAG,GAAKN,KAAKiB,IAAIkS,EAAI7S,GAAG,GAAI8S,EAAQtD,QAAQxP,IAEpD,OAAO6S,CAAG,GACX5P,GACH0P,EAASA,EAAOrQ,KAAI4J,GAAKA,EAAE,GAAKA,EAAE,KAElC,IAAIoC,EAAI,EACR,IAAK,IAAItO,EAAI,EAAGA,EAAIkM,IAAKlM,EACrBsO,EAAIqE,EAAO3S,GAAK2S,EAAOrE,GAAKtO,EAAIsO,EAEpC,OAAOA,CACV;;;;;;OAQDyE,OAAO9O,EAAGrC,EAAI,GACV,OAAOwF,KAAK4L,QAAQ/O,EAAGrC,EAAG,IAAIkN,KAAK,MAAM5C,GAAK9E,KAAK+K,QAAQjG,EAAEsD,QAASvL,IAAI,OAAQmD,KAAKgL,MAC1F;;;;;;;OASDY,QAAQ/O,EAAGrC,EAAG0C,EAAGsE;;AAEb,GAAItE,EAAEzE,QAAU+B,GAAKgH,EAAEiJ,OAASjJ,EAAEoJ,QAAU5K,KAAK+K,QAAQlO,EAAG2E,EAAEiJ,MAAMrC,SAAW5G,EAAEoJ,QAAU1N,EAAEiM,MAAMzM,MAC/F,OAAOQ;;AAMX,GAJIsE,EAAEkJ,QAAQ1K,KAAK4L,QAAQ/O,EAAGrC,EAAG0C,EAAGsE,EAAEkJ,QAClClJ,EAAEmJ,QAAQ3K,KAAK4L,QAAQ/O,EAAGrC,EAAG0C,EAAGsE,EAAEmJ,QAGlCnJ,EAAEsJ,OACF,IAAK,IAAIlS,EAAI,EAAGF,EAAI8I,EAAEsJ,OAAOrS,OAAQG,EAAIF,IAAKE,EAAG,CAC7C,IAAIyS,EAAI7J,EAAEsJ,OAAOlS,GACb4B,EAAI0C,EAAEzE,OACNyE,EAAE5D,KAAK+R,IAEPnO,EAAE5D,KAAK+R,GACPnO,EAAE+L,MAET,CAEL,OAAO/L,CACV;;;;GC1IE,MAAM2O;;;;;;;;;;AAUT9L,YAAY4H,EAAS,KAAMlN,EAAOtC,WAC9B6H,KAAK+K,QAAUtQ,EACfuF,KAAK8L,UAAYnE,aAAoBnM,OAASmM,EAAWnM,OAAOP,KAAK0M,GACrE,MAAM7H,EAAIE,KAAK8L,UAAUnR,MAAM,GAE3BqF,KAAK+L,GADM,gBAAXtR,EACUuF,KAAK8L,UAAUtO,QAEf3C,gBAAgBmF,KAAK8L,UAAWrR,GAE9CuF,KAAK6L,IAAM,GACX,IAAK,IAAI7Q,EAAM,EAAGA,EAAM8E,IAAK9E,EAAK,CAC9B,MAAMgR,EAAYhM,KAAK+L,GAAG/Q,IAAIA,GACxBiR,EAAI,IAAIvE,KAAK,MAAM5C,GAAKA,EAAEpI,OAAO,OACvC,IAAK,IAAIrB,EAAI,EAAGA,EAAIyE,IAAKzE,EACrB4Q,EAAE3S,KAAK,CACHoD,MAAOsP,EAAU3Q,GACjBsN,MAAOtN,IAGf2E,KAAK6L,IAAIvS,KAAK2S,EACjB,CACJ;;;;;;OAQDN,OAAO9O,EAAGrC,EAAI,GACV,MAAMC,EAASuF,KAAK+K,QACdc,EAAM7L,KAAK6L,IACjB,IAAII,EACJ,GAAIlR,MAAMuF,QAAQzD,GAAI,CAClB,GAAoB,eAAhBmD,KAAK+K,QACL,KAAM,yFAEV,MAAMpD,EAAW3H,KAAK8L,UAChBhM,EAAI+L,EAAIpT,OACd,IAAIyT,EAAwB,KACxBC,EAAeb,IACnB,IAAK,IAAI1S,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MACM8C,EAAOjB,EAAOoC,EADJ8K,EAAS3M,IAAIpC,IAEzB8C,EAAOyQ,IACPD,EAAwBtT,EACxBuT,EAAezQ,EAEtB,CACDuQ,EAAIJ,EAAIK,EACX,MAAUE,OAAOC,UAAUxP,KACxBoP,EAAIJ,EAAIhP,IAGZ,IAAIZ,EAAS,GACb,IAAK,IAAIrD,EAAI,EAAGA,EAAI4B,IAAK5B,EACrBqD,EAAO3C,KAAK2S,EAAEhD,OAGlB,OADAhN,EAAOqO,SAAQjR,GAAO4S,EAAE3S,KAAKD,EAAI+O,WAC1BnM,CACV;;;;;;GCpEE,MAAMqQ;;;;;;;;;;;;;AAaTvM,YAAYiD,EAAGuJ,EAAoBC,GAE/B,GADAxM,KAAKyM,YAAcC,OAAOC,OAAOD,OAAOE,KAAKL,GAAqBC,GAC9DzR,MAAMuF,QAAQ0C,GACdhD,KAAK6M,MAAQ,QACb7M,KAAKgD,EAAIxH,OAAOP,KAAK+H,OAClB,MAAIA,aAAaxH,QAIpB,MAAM,IAAIc,MAAM,wBAHhB0D,KAAK6M,MAAQ,SACb7M,KAAKgD,EAAIA,CAGZ,CAID,OAHChD,KAAKgG,GAAIhG,KAAK+L,IAAM/L,KAAKgD,EAAErI,MAC5BqF,KAAK8M,YAAc,IAAI3N,WAAWa,KAAKyM,YAAY3N,MACnDkB,KAAK+M,iBAAkB,EAChB/M,IACV;;;;;;;;;;;;;;;;OAkBDgN,UAAUC,EAAO,KAAMvQ,EAAQ,MAC3B,GAAa,OAATuQ,EACA,OAAOP,OAAOC,OAAO,CAAE,EAAE3M,KAAKyM,aAElC,IAAKzM,KAAKyM,YAAYS,eAAeD,GACjC,MAAM,IAAI3Q,MAAM,GAAG2Q,+BAEvB,OAAc,OAAVvQ,GACAsD,KAAKyM,YAAYQ,GAAQvQ,EACzBsD,KAAK+M,iBAAkB,EAChB/M,MAEAA,KAAKyM,YAAYQ,EAE/B,CAEDE,KAAKF,EAAO,KAAMvQ,EAAQ,MACtB,OAAOsD,KAAKgN,UAAUC,EAAMvQ,EAC/B,CAED2O,EAAE4B,EAAO,KAAMvQ,EAAQ,MACnB,OAAOsD,KAAKgN,UAAUC,EAAMvQ,EAC/B;;;;OAMD0Q,YAEI,OADApN,KAAKqN,aACErN,KAAKsN,UACf;;;;OAMDC,aACI,OAAOvN,KAAKoN,WACf;;;;OAMDC,aAKI,OAJKrN,KAAK+M,iBAAwC,mBAAd/M,KAAKwN,OACrCxN,KAAKwN,OACLxN,KAAK+M,iBAAkB,GAEpB/M,IACV;;;OAKGsN,iBACA,GAAItN,KAAKkN,eAAe,KAEpB,OADAlN,KAAKqN,aACiB,WAAfrN,KAAK6M,MAAqB7M,KAAKyN,EAAIzN,KAAKyN,EAAE7N,UAEjD,MAAM,IAAItD,MAAM,sCAEvB;;;;;OAODoR,yBAAyBC,GACrB,OAAO3N,KAAKoN,aAAaO,EAC5B;;;;;;OAQDvN,oBAAoBuN,GAEhB,OADS,IAAI3N,QAAQ2N,GACXP,WACb;;;;;;OAQDhN,gCAAgCuN,GAC5B,OAAO3N,KAAKoN,aAAaO,EAC5B;;;;;;OAQDvN,oBAAqBuN,GACjB,MACMJ,EADK,IAAIvN,QAAQ2N,GACFJ,YACrB,IAAK,MAAMtR,KAAUsR,QACXtR,CAEb;;;;;GC1JE,MAAM2R,YAAYtB;;;;;;;;;;;;AAYrBvM,YAAYiD,EAAGwJ,GAKX,OAJAqB,MAAM7K,EAAG,CAAE8B,EAAG,EAAGhG,KAAM,KAAMgP,SAAU,CAAA,GAAMtB,GACxCxM,KAAKyM,YAAYqB,SAASZ,eAAe,UAC1ClN,KAAKyM,YAAYqB,SAAShP,KAAOkB,KAAK8M,aAEnC9M,IACV;;;;;OAODoN,UAAU7S,EAAI,MACV,MAAMoL,EAAI3F,KAAK+N,uBACf,GAAS,MAALxT,EAAW,CACX,MAAMyI,EAAIhD,KAAKgD,EAEf,OADAhD,KAAKyN,EAAIzK,EAAExE,IAAImH,GACR3F,KAAKsN,UACf,CAAM,GAAIvS,MAAMuF,QAAQ/F,GACrB,OAAOiB,OAAOP,KAAKV,GAAGiE,IAAImH,GAAGpB,QAC1B,GAAIhK,aAAaiB,OACpB,OAAOjB,EAAEiE,IAAImH,GAEb,MAAM,IAAIrJ,MAAM,uBAEvB;;;;OAMDyR,uBACI,GAAI/N,KAAK2F,EACL,OAAO3F,KAAK2F,EAEhB,MAAMb,EAAEA,EAACgJ,SAAEA,GAAa9N,KAAKyM,YACvBzJ,EAAIhD,KAAKgD,EACTgL,EAAShL,EAAEzE,IAAIyE,EAAE2B,UACjBnC,EAAIwL,EAAOtL,SAASsL,IAClBtO,aAAciG,GAAM9G,4BAA4B2D,EAAGsC,EAAGgJ,GAE9D,OADA9N,KAAK2F,EAAInK,OAAOP,KAAK0K,GAAGhG,YACjBK,KAAK2F,CACf,CAEDvF,4BAA4B4C,EAAGwJ,GAE3B,OADW,IAAIxM,KAAKgD,EAAGwJ,GACbuB,sBACb;;;;;GC3DE,MAAME,YAAY3B;;;;;;;;;;;;;AAarBvM,YAAYiD,EAAGwJ,GAKX,OAJAqB,MAAM7K,EAAG,CAAE8B,EAAG,EAAGrK,OAAQtC,UAAW2G,KAAM,KAAMgP,SAAU,IAAMtB,GAC3DxM,KAAKyM,YAAYqB,SAASZ,eAAe,UAC1ClN,KAAKyM,YAAYqB,SAAShP,KAAOkB,KAAK8M,aAEnC9M,IACV;;;;OAMDoN,YACI,MAAMpK,EAAIhD,KAAKgD,EACTtI,EAAOsI,EAAErI,MAAM,IACfmK,EAAEA,EAACrK,OAAEA,EAAMqT,SAAEA,GAAa9N,KAAKyM,YAC/BlS,EAAe,gBAAXE,EAA2BuI,EAAInI,gBAAgBmI,EAAGvI,GACtDyT,EAAM3T,EAAEoK,SACRwJ,EAAM5T,EAAEmK,SACR0J,EAAM7T,EAAEkK,KAEdzE,KAAKqO,KAAO9T,EACZ,MAAMiH,EAAI,IAAIhG,OAAOd,EAAMA,GAAM,CAAC9B,EAAGyC,IAAMd,EAAEoD,MAAM/E,EAAGyC,GAAK6S,EAAItV,GAAKuV,EAAI9S,GAAK+S,KAErE1O,aAAciG,GAAM9G,4BAA4B2C,EAAGsD,EAAGgJ,GAG9D,OAFA9N,KAAKyN,EAAIjS,OAAOP,KAAK0K,GAAGhG,YAEjBK,KAAKsN,UACf;;;OAKDgB,SACI,MAAMxO,EAAIE,KAAKgD,EAAErI,MAAM,GACjB8S,EAAIzN,KAAKyN,EACTc,EAAMvO,KAAKqO,KACXG,EAAM,IAAIhT,OAChBgT,EAAI7T,MAAQ,CACRmF,EACAA,EACA,CAAClH,EAAGyC,IACOzC,EAAIyC,EAAIlD,UAAUsV,EAAEzS,IAAIpC,GAAI6U,EAAEzS,IAAIK,IAAMmT,EAAI7Q,MAAMtC,EAAGzC,IAGpE,IAAI6V,EAAU,EACVC,EAAa,EACjB,IAAK,IAAI9V,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIyC,EAAIzC,EAAI,EAAGyC,EAAIyE,IAAKzE,EACzBoT,GAAWnW,KAAKqW,IAAIJ,EAAI5Q,MAAM/E,EAAGyC,GAAKmT,EAAI7Q,MAAM/E,EAAGyC,GAAI,GACvDqT,GAAcpW,KAAKqW,IAAIJ,EAAI5Q,MAAM/E,EAAGyC,GAAI,GAGhD,OAAO/C,KAAKC,KAAKkW,EAAUC,EAC9B;;;;;GClEE,MAAME,eAAetC;;;;;;;;;;;;;;;AAexBvM,YAAYiD,EAAGwJ,GAMX,OALAqB,MAAM7K,EAAG,CAAE6L,eAAWpH,EAAW3C,EAAG,EAAGrK,OAAQtC,UAAW2G,KAAM,KAAMgP,SAAU,CAAA,GAAMtB,GACtFxM,KAAKgN,UAAU,YAAa1U,KAAK6K,IAAInD,KAAKyM,YAAYoC,WAAavW,KAAKiB,IAAIjB,KAAK+P,MAAMrI,KAAKgD,EAAErI,MAAM,GAAK,IAAK,GAAIqF,KAAKgG,GAAK,IACvHhG,KAAKyM,YAAYqB,SAASZ,eAAe,UAC1ClN,KAAKyM,YAAYqB,SAAShP,KAAOkB,KAAK8M,aAEnC9M,IACV;;;;OAMDoN,YACIpN,KAAKqN,aACL,MAAMrK,EAAIhD,KAAKgD,EACTtI,EAAOsF,KAAKgG,IACZlB,EAAEA,EAACrK,OAAEA,EAAMqT,SAAEA,EAAQe,UAAEA,GAAc7O,KAAKyM,YAE1C7R,EAAI,IAAIY,OACdZ,EAAED,MAAQ,CAACD,EAAMA,EAAM,CAAC9B,EAAGyC,IAAOzC,GAAKyC,EAAIZ,EAAOuI,EAAEhI,IAAIpC,GAAIoK,EAAEhI,IAAIK,IAAMT,EAAE+C,MAAMtC,EAAGzC,IACnF,MAAMkW,EAAoB,GAC1B,IAAK,IAAIlW,EAAI,EAAGA,EAAI8B,IAAQ9B,EAAG,CAC3B,MAAMoC,EAAM,GACZ,IAAK,IAAIK,EAAI,EAAGA,EAAIX,IAAQW,EACxBL,EAAI1B,KAAK,CACLqP,MAAOtN,EACPF,SAAUP,EAAE+C,MAAM/E,EAAGyC,KAG7B,MAAM4Q,EAAI,IAAIvE,KAAK1M,GAAM8J,GAAMA,EAAE3J,UAAU,OAC3C2T,EAAkBxV,KAAK2S,EAAE5C,UAAU9N,MAAM,EAAGsT,EAAY,GAC3D;;;;kFAMD,MAAME,EAAI,IAAIvT,OAAOd,EAAMA,GAAM,CAAC9B,EAAGyC,KACjC,MAAM2T,EAAQF,EAAkBlW,GAAGsR,MAAMxR,GAAMA,EAAEiQ,QAAUtN,IAC3D,OAAO2T,EAAQA,EAAM7T,SAAWmQ,GAAQ,IAG5C,IAAK,IAAI1S,EAAI,EAAGA,EAAI8B,IAAQ9B,EACxB,IAAK,IAAIyC,EAAI,EAAGA,EAAIX,IAAQW,EAAG,CAC3B,IAAI4T,EAAUF,EAAEpR,MAAM/E,EAAGyC,GACzB,IAAK,IAAIb,EAAI,EAAGA,EAAIE,IAAQF,EACxByU,EAAU3W,KAAK6K,IAAI8L,EAASF,EAAEpR,MAAM/E,EAAG4B,GAAKuU,EAAEpR,MAAMnD,EAAGa,IAE3D0T,EAAEpT,UAAU/C,EAAGyC,EAAG4T,EACrB,CAGL,IAAIf,EAAM,IAAI3R,aAAa7B,GACvByT,EAAM,IAAI5R,aAAa7B,GACvB0T,EAAM,EACV,MAAM7T,EAAI,IAAIiB,OAAOd,EAAMA,GAAM,CAAC9B,EAAGyC,KACjC,IAAIsG,EAAMoN,EAAEpR,MAAM/E,EAAGyC,GAKrB,OAJAsG,EAAMA,IAAQ2J,IAAW,EAAI3J,EAC7BuM,EAAItV,IAAM+I,EACVwM,EAAI9S,IAAMsG,EACVyM,GAAOzM,EACAA,CAAG,IAGduM,EAAMA,EAAIhT,KAAKiB,GAAMA,EAAIzB,IACzByT,EAAMA,EAAIjT,KAAKiB,GAAMA,EAAIzB,IACzB0T,GAAO1T,GAAQ,EACf,MAAM8G,EAAI,IAAIhG,OAAOd,EAAMA,GAAM,CAAC9B,EAAGyC,IAAMd,EAAEoD,MAAM/E,EAAGyC,GAAK6S,EAAItV,GAAKuV,EAAI9S,GAAK+S,KAGrE1O,aAAciG,GAAM9G,4BAA4B2C,EAAGsD,EAAGgJ;;;AAG9D,OAFA9N,KAAKyN,EAAIjS,OAAOP,KAAK0K,GAAGhG,YAEjBK,KAAKsN,UACf;;;;;GC7FE,MAAM4B,gBAAgB5C;;;;;;;;;;;;;;AAczBvM,YAAYiD,EAAGwJ,GAEX,OADAqB,MAAM7K,EAAG,CAAE8B,EAAG,EAAGrK,OAAQtC,UAAW2G,KAAM,MAAQ0N,GAC3CxM,IACV;;;;;;OAQDmP,wBAAwBzT,GACpB,MACMoE,EADIE,KAAKgD,EACHrI,MAAM,GAClB,IAAIyU,EAAWpP,KAAK8M,YAAYnG,WAAa7G,EAAK,EAC9CuP,EAAU,KACVC,GAAYhE,IAChB,IAAK,IAAI1S,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAM2W,EAAO7T,EAAK0T,EAASxW,GACvB2W,EAAOD,IACPA,EAAWC,EACXF,EAAUzW,EAEjB,CACD0W,GAAYhE,IACZ,IAAK,IAAI1S,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAM4W,EAAO9T,EAAK2T,EAASzW,GACvB4W,EAAOF,IACPA,EAAWE,EACXJ,EAAUxW,EAEjB,CACD,MAAO,CAACwW,EAASC,EAASC,EAC7B;;;;OAMDlC,YACI,MAAMpK,EAAIhD,KAAKgD,EACTlD,EAAIkD,EAAErI,MAAM,IACZmK,EAAEA,EAACrK,OAAEA,GAAWuF,KAAKyM,YACrBgB,EAAI,IAAIjS,OAAOsE,EAAGgF,EAAG,GAC3B,IAAIpJ,KAAO,CAACtD,EAAGC,IAAMoC,EAAOuI,EAAEhI,IAAI5C,GAAI4K,EAAEhI,IAAI3C,IAE5C,IAAK,IAAIoX,EAAO,EAAGA,EAAO3K,IAAK2K,EAAM,CACjC,IAAIC,EAAWhU;uBAEf;MAAO0T,EAASC,EAASM,GAAQ3P,KAAKmP,wBAAwBzT,MAC9D,GAAa,IAATiU,EAAY;;AAEZ,IAAK,IAAI/W,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAEMgX,GAFOlU,KAAK0T,EAASxW,IAEN,EAAI+W,GAAQ,EADpBjU,KAAK2T,EAASzW,IACkB,IAAM,EAAI+W,GACvDlC,EAAE9R,UAAU/C,EAAG6W,EAAMG,EACxB;;;;+BAKDlU;KAAO,CAACtD,EAAGC,IAAMC,KAAKC,KAAKmX,EAAStX,EAAGC,IAAM,GAAKoV,EAAE9P,MAAMvF,EAAGqX,GAAQhC,EAAE9P,MAAMtF,EAAGoX,KAAU,EAC7F,CACJ;oBAGD;OADAzP,KAAKyN,EAAIA,EACFzN,KAAKsN,UACf;;;;;GCjFE,MAAMuC,YAAYvD;;;;;;;;;;;;;;AAcrBvM,YAAYiD,EAAGwJ,GAKX,OAJAqB,MAAM7K,EAAG,CAAE8M,OAAQ,KAAMhL,EAAG,EAAGhG,KAAM,KAAMgP,SAAU,IAAMtB,GACtDxM,KAAKyM,YAAYqB,SAASZ,eAAe,UAC1ClN,KAAKyM,YAAYqB,SAAShP,KAAOkB,KAAK8M,aAEnC9M,IACV;;;OAKDoN,YACI,MAAMpK,EAAIhD,KAAKgD,GACRtI,EAAM2B,GAAQ2G,EAAErI,OACjBmK,EAAEA,EAACgL,OAAEA,EAAMhC,SAAEA,GAAa9N,KAAKyM,YACrC,GAAe,OAAXqD,GAAmBA,EAAOrX,QAAUiC,EACpC,MAAM,IAAI4B,MAAM,yDAEpB,MAAMyT,EAAgB,CAAA,EACtB,IAAIC,EAAW,EACfF,EAAOxF,SAAQ,CAACxH,EAAGlK,KACXkK,KAAKiN,GACLA,EAAcjN,GAAGmN,QACjBF,EAAcjN,GAAGpI,KAAKpB,KAAK0J,EAAEhI,IAAIpC,KAEjCmX,EAAcjN,GAAK,CACfoN,GAAIF,IACJC,MAAO,EACPvV,KAAM,CAACsI,EAAEhI,IAAIpC,IAEpB;;AAIL,MAAMuX,EAASnN,EAAEyB,KACX2L,EAAS,IAAI5U,OAAOwU,EAAU3T,GACpC,IAAK,MAAMgU,KAASN,EAAe,CAC/B,MACMO,EADI9U,OAAOP,KAAK8U,EAAcM,GAAO3V,MAC1BiK,SACjB,IAAK,IAAItJ,EAAI,EAAGA,EAAIgB,IAAQhB,EACxB+U,EAAOzU,UAAUoU,EAAcM,GAAOH,GAAI7U,EAAGiV,EAAOjV,GAE3D;kBAED;IAAIkV,EAAM,IAAI/U,OAAOa,EAAMA,GAC3B,IAAK,MAAMgU,KAASN,EAAe,CAC/B,MAAM5T,EAAIiU,EAAOpV,IAAI+U,EAAcM,GAAOH,IACpC3P,EAAI,IAAI/E,OAAOa,EAAM,GAAIhB,GAAMc,EAAEd,GAAK8U,IACtCrQ,EAAIiQ,EAAcM,GAAOJ,MAC/BM,EAAMA,EAAIjM,IAAI/D,EAAEqC,SAASrC,GAAG9B,KAAKqB,GACpC;iBAGD;IAAI0Q,EAAM,IAAIhV,OAAOa,EAAMA,GAC3B,IAAK,MAAMgU,KAASN,EAAe,CAC/B,MAAM5T,EAAIiU,EAAOpV,IAAI+U,EAAcM,GAAOH,IACpC3P,EAAI,IAAI/E,OAAOa,EAAM,GAAIhB,GAAMc,EAAEd,KACjC8B,EAAI4S,EAAcM,GAAO3V,KAC/B,IAAK,IAAI9B,EAAI,EAAGF,EAAIqX,EAAcM,GAAOJ,MAAOrX,EAAIF,IAAKE,EAAG,CACxD,MAAM6X,EAAQ,IAAIjV,OAAOa,EAAM,GAAG,CAAChB,EAAGmF,IAAMrD,EAAEvE,GAAGyC,GAAKkF,EAAE5C,MAAMtC,EAAG,KACjEmV,EAAMA,EAAIlM,IAAImM,EAAM7N,SAAS6N,GAChC,CACJ,CAED,IAAM/Q,aAAciG,GAAM9G,4BAA4B2R,EAAIjP,UAAU/C,IAAI+R,GAAMzL,EAAGgJ;;AAKjF,OAJAnI,EAAInK,OAAOP,KAAK0K,GAAGhG,YACnBK,KAAKyN,EAAIzK,EAAExE,IAAImH,GAGR3F,KAAKsN,UACf;;;;;GCjFE,MAAMoD,YAAYpE;;;;;;;;;;;;;;;AAerBvM,YAAYiD,EAAGwJ,GAMX,OALAqB,MAAM7K,EAAG,CAAE6L,eAAWpH,EAAW3C,EAAG,EAAGrK,OAAQtC,UAAW2G,KAAM,KAAMgP,SAAU,CAAA,GAAMtB,GACtFxM,KAAKgN,UAAU,YAAa1U,KAAK6K,IAAIqJ,EAAWqC,WAAavW,KAAKiB,IAAIjB,KAAK+P,MAAMrI,KAAKgG,GAAK,IAAK,GAAIhG,KAAKgG,GAAK,IACzGhG,KAAKyM,YAAYqB,SAASZ,eAAe,UAC1ClN,KAAKyM,YAAYqB,SAAShP,KAAOkB,KAAK8M,aAEnC9M,IACV;;;OAKDoN,YACI,MAAMpK,EAAIhD,KAAKgD,EACTtI,EAAOsF,KAAKgG,GACZ3J,EAAO2D,KAAK+L,IACZ8C,UAAEA,EAAS/J,EAAEA,EAACgJ,SAAEA,EAAQrT,OAAEA,GAAWuF,KAAKyM,YAC1C3R,EAAKR,oBAAoB0I,EAAG6L,EAAWpU,GACvCkW,EAAI,IAAInV,OAAOqT,EAAW,EAAG,GAC7B+B,EAAI,IAAIpV,OAAOd,EAAMA,GAE3B,IAAK,IAAIM,EAAM,EAAGA,EAAMN,IAAQM,EAAK,CACjC,MAAM6V,EAAS/V,EAAGE,GACZ8V,EAAI,IAAItV,OAAOqT,EAAWxS,GAAM,CAACzD,EAAGyC,IAAM2H,EAAErF,MAAMkT,EAAOjY,GAAGyC,EAAGA,GAAK2H,EAAErF,MAAM3C,EAAKK,KACjFmH,EAAIsO,EAAElO,SAASkO,GACrB,GAAIjC,EAAYxS,EAAM,CAClB,MAAM0U,EAAUhU,YAAYyF,EAAE/C,MAAQ,IACtC,IAAK,IAAIpE,EAAI,EAAGA,EAAIwT,IAAaxT,EAC7BmH,EAAEpB,UAAU/F,EAAGA,EAAG0V,EAEzB;eAED;IAAIC,EAAIxV,OAAOyV,SAASzO,EAAGmO,EAAG3Q,KAAK8M,aACnCkE,EAAIA,EAAEhT,OAAOgT,EAAErY,KACf,IAAK,IAAI0C,EAAI,EAAGA,EAAIwT,IAAaxT,EAC7BuV,EAAEjV,UAAUX,EAAK6V,EAAOxV,GAAGA,EAAG2V,EAAErT,MAAMtC,EAAG,GAEhD;iBAED;MACM6V,EADI,IAAI1V,OAAOd,EAAMA,EAAM,YACpB6D,IAAIqS,GACXpL,EAAI0L,EAAGxO,SAASwO,IACdxR,aAAciG,GAAM9G,4BAA4B2G,EAAElE,EAAEC,UAAWuD,EAAI,EAAGgJ;;AAI9E,OAHA9N,KAAKyN,EAAIjS,OAAOP,KAAK0K,EAAEpK,MAAM,EAAG,EAAIuJ,IAAIxD,EAGjCtB,KAAKsN,UACf;;;;;GChEE,MAAM6D,aAAa7E;;;;;;;;;;;;;;;AAetBvM,YAAYiD,EAAGwJ,GAMX,GALAqB,MAAM7K,EAAG,CAAE6L,eAAWpH,EAAW3C,EAAG,EAAGrK,OAAQtC,UAAW2G,KAAM,KAAMgP,SAAU,CAAA,GAAMtB,GACtFxM,KAAKgN,UAAU,YAAa1U,KAAK6K,IAAIqJ,EAAWqC,WAAavW,KAAKiB,IAAIjB,KAAK+P,MAAMrI,KAAKgG,GAAK,IAAK,GAAIhG,KAAKgG,GAAK,IACzGhG,KAAKyM,YAAYqB,SAASZ,eAAe,UAC1ClN,KAAKyM,YAAYqB,SAAShP,KAAOkB,KAAK8M,aAEtC9M,KAAK+L,IAAM/L,KAAKgN,UAAU,KAC1B,MAAM,IAAI1Q,MAAM,4BAA4B0D,KAAK+L,2EAA2E/L,KAAKgN,UAAU,UAE/I,OAAOhN,IACV;;;OAKDoN,YACI,MAAMpK,EAAIhD,KAAKgD,GACRtI,EAAME,GAAKoI,EAAErI,OACdmK,EAAEA,EAAC+J,UAAEA,EAASpU,OAAEA,EAAMqT,SAAEA,GAAa9N,KAAKyM,YAE1C3R,EAAKR,oBAAoB0I,EAAG6L,EAAWpU,GAEvCkW,EAAI,IAAInV,OAAOZ,EAAGA,EAAG,UACrB4G,EAAI,IAAIhG,OAAOd,EAAMA,EAAM,GAEjC,IAAK,IAAIM,EAAM,EAAGA,EAAMN,IAAQM,EAAK;;AAEjC,MAAMoW,EAAM,CAACpW,KAAQF,EAAGE,GAAKE,KAAKxC,GAAMA,EAAE2C,KAC1C,IAAIgW,EAAM7V,OAAOP,KAAKmW,EAAIlW,KAAKxC,GAAMsK,EAAEhI,IAAItC;aAE3C2Y;EAAMA,EAAI7S,IAAImS;;AAEd,MAAMnO,EAAI6O,EAAIzO,SAASyO,IACf3R,aAAc4R,GAAMzS,4BAA4B2D,EAAGsC,EAAGgJ,GAExDyD,EAAQ/V,OAAOP,KAAKqW,GAEpBE,EAAMD,EAAM7O,SAAS6O,GACtBjN,IAAI,EAAIhM,KAAKC,KAAKsW,EAAY,IACnC,IAAK,IAAIjW,EAAI,EAAGA,EAAIiW,EAAY,IAAKjW,EACjC,IAAK,IAAIyC,EAAI,EAAGA,EAAIwT,EAAY,IAAKxT,EACjCmG,EAAEJ,UAAUgQ,EAAIxY,GAAIwY,EAAI/V,GAAImW,EAAI7T,MAAM/E,EAAGyC,IAAMzC,IAAMyC,EAAI,EAAI,GAGxE;iCAGD;MAAQqE,aAAc+N,GAAM5O,4BAA4B2C,EAAGsD,EAAI,EAAGgJ;;AAIlE,OAHA9N,KAAKyN,EAAIjS,OAAOP,KAAKwS,EAAElS,MAAM,IAAIoE,YAG1BK,KAAKsN,UACf;;;;;GCpEE,MAAMmE,aAAanF;;;;;;;;;;;;;;;AAetBvM,YAAYiD,EAAGwJ,GAKX,OAJAqB,MAAM7K,EAAG,CAAE0O,WAAY,GAAIC,QAAS,GAAI7M,EAAG,EAAGrK,OAAQjC,kBAAmBsG,KAAM,MAAQ0N,IACtFxM,KAAKgG,GAAIhG,KAAK+L,IAAM/L,KAAKgD,EAAErI,MAC5BqF,KAAK4R,MAAQ,EACb5R,KAAKyN,EAAI,IAAIjS,OAAOwE,KAAKgG,GAAIhG,KAAKgN,UAAU,MAAM,IAAwC,KAAlChN,KAAK8M,YAAY9F,iBAClEhH,IACV;;;;OAMDwN;;AAEI,MAAMqE,EAAUvZ,KAAK6O,IAAInH,KAAKgN,UAAU,eAClClN,EAAIE,KAAKgG,GACTpL,EAAIoF,KAAK+L,IACTtR,OAACA,GAAUuF,KAAKyM,YAChBzJ,EAAIhD,KAAKgD,EACf,IAAI8O,EACJ,GAAa,eAATrX,EACAqX,EAAQC,MAAMvW,OAAOP,KAAK+H,OACvB,CACH8O,EAAQ,IAAItW,OAAOsE,EAAGA,GACtB,IAAK,IAAIlH,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAMyY,EAAMrO,EAAEhI,IAAIpC,GAClB,IAAK,IAAIyC,EAAIzC,EAAI,EAAGyC,EAAIyE,IAAKzE,EAAG,CAC5B,MAAMF,EAAWV,EAAO4W,EAAKrO,EAAEhI,IAAIK,IACnCyW,EAAMnW,UAAU/C,EAAGyC,EAAGF,GACtB2W,EAAMnW,UAAUN,EAAGzC,EAAGuC,EACzB,CACJ,CACJ,CAED,MAAM6W,EAAI,IAAIxW,OAAOsE,EAAGA,EAAG,GAE3BE,KAAKiS,OAAS,IAAIzW,OAAOsE,EAAGlF,EAAG,GAC/BoF,KAAKkS,OAAS,IAAI1W,OAAOsE,EAAGlF,EAAG,GAK/B,IAAK,IAAIhC,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAMuZ,EAASL,EAAM9W,IAAIpC,GACnBwZ,EAAOJ,EAAEhX,IAAIpC,GACnB,IAKIyZ,EALAC,GAAWhH,IACXiH,EAAUjH,IACVrN,EAAO,EACPuU,EAPS,GAQTC,GAAO,EAGX,MAAQA,GAAQD,KAAO;;AAEnBH,EAAO,EACP,IAAIK,EAAS,EACb,IAAK,IAAIrX,EAAI,EAAGA,EAAIyE,IAAKzE,EAAG,CACxB,MAAMK,EAAOyW,EAAO9W,GACdsX,EAAM/Z,IAAMyC,EAAK/C,KAAKsa,KAAKlX,EAAOuC,GAAQ,EAChDyU,GAAUhX,EAAOiX,EACjBP,EAAK/W,GAAKsX,EACVN,GAAQM,CACX;kBAED;MAAM1G,EAAIoG,EAAO,EAAI/Z,KAAK6O,IAAIkL,GAAQpU,EAAOyU,EAASL,EAAO,EACzDpG,EAAI4F,GACJS,EAAUrU,EACVA,EAAOsU,IAAYjH,IAAkB,EAAPrN,GAAYA,EAAOsU,GAAW,IAE5DA,EAAUtU,EACVA,EAAOqU,KAAahH,IAAWrN,EAAO,GAAKA,EAAOqU,GAAW,GAEjEG,EAAOna,KAAKa,IAAI8S,EAAI4F,GAhChB,IAiCP;cAED;IAAK,IAAIxW,EAAI,EAAGA,EAAIyE,IAAKzE,EACrB+W,EAAK/W,IAAMgX,CAElB;wBAGD;MAAMQ,EAAS,EAAJ/S,EACX,IAAK,IAAIlH,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIyC,EAAIzC,EAAGyC,EAAIyE,IAAKzE,EAAG,CACxB,MAAMgQ,EAAI/S,KAAKiB,KAAKyY,EAAErU,MAAM/E,EAAGyC,GAAK2W,EAAErU,MAAMtC,EAAGzC,IAAMia,EAAI,QACzDb,EAAErW,UAAU/C,EAAGyC,EAAGgQ,GAClB2G,EAAErW,UAAUN,EAAGzC,EAAGyS,EACrB,CAGL,OADArL,KAAK8S,GAAKd,EACHhS,IACV;;;;;OAODoN,UAAU2F,EAAa,KACnB/S,KAAKqN,aACL,IAAK,IAAIzU,EAAI,EAAGA,EAAIma,IAAcna,EAC9BoH,KAAKgT,OAET,OAAOhT,KAAKsN,UACf;;;;;OAODC,WAAWwF,EAAa,KACpB/S,KAAKqN,aACL,IAAK,IAAIzU,EAAI,EAAGA,EAAIma,IAAcna,EAC9BoH,KAAKgT,aACChT,KAAKsN,WAEf,OAAOtN,KAAKsN,UACf;;;;;OAOD0F,OACI,MAAMC,IAASjT,KAAK4R,MACdI,EAAIhS,KAAK8S,GACTI,EAAQlT,KAAKiS,OACbkB,EAAQnT,KAAKkS,OACbpS,EAAIE,KAAKgG,IACPlB,EAAGsO,EAAGzB,QAAEA,GAAW3R,KAAKyM,YAChC,IAAIgB,EAAIzN,KAAKyN;qBAGb;MAAM4F,EAAOJ,EAAO,IAAM,EAAI,EAGxBK,EAAK,IAAI9X,OAAOsE,EAAGA,EAAG;gCAC5B;IAAIyT,EAAO,EACX,IAAK,IAAI3a,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIyC,EAAIzC,EAAI,EAAGyC,EAAIyE,IAAKzE,EAAG,CAC5B,IAAImY,EAAO,EACX,IAAK,IAAI1O,EAAI,EAAGA,EAAIsO,IAAOtO,EAAG,CAC1B,MAAM2O,EAAQhG,EAAE9P,MAAM/E,EAAGkM,GAAK2I,EAAE9P,MAAMtC,EAAGyJ,GACzC0O,GAAQC,EAAQA,CACnB,CACD,MAAMC,EAAK,GAAK,EAAIF,GACpBF,EAAG3X,UAAU/C,EAAGyC,EAAGqY,GACnBJ,EAAG3X,UAAUN,EAAGzC,EAAG8a,GACnBH,GAAQ,EAAIG,CACf;mBAIL;MAAMxW,EAAI,IAAI1B,OAAOsE,EAAGA,EAAG,GAC3B,IAAK,IAAIlH,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIyC,EAAIzC,EAAI,EAAGyC,EAAIyE,IAAKzE,EAAG,CAC5B,MAAMsG,EAAMrJ,KAAKiB,IAAI+Z,EAAG3V,MAAM/E,EAAGyC,GAAKkY,EAAM,QAC5CrW,EAAEvB,UAAU/C,EAAGyC,EAAGsG,GAClBzE,EAAEvB,UAAUN,EAAGzC,EAAG+I,EACrB,CAGL,MAAMgS,EAAO,IAAInY,OAAOsE,EAAGsT,EAAK,SAChC,IAAK,IAAIxa,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIyC,EAAI,EAAGA,EAAIyE,IAAKzE,EAAG,CACxB,MAAMuY,EAAU,GAAKP,EAAOrB,EAAErU,MAAM/E,EAAGyC,GAAK6B,EAAES,MAAM/E,EAAGyC,IAAMiY,EAAG3V,MAAM/E,EAAGyC,GACzE,IAAK,IAAIyJ,EAAI,EAAGA,EAAIsO,IAAOtO,EACvB6O,EAAKvS,UAAUxI,EAAGkM,EAAG8O,GAAWnG,EAAE9P,MAAM/E,EAAGkM,GAAK2I,EAAE9P,MAAMtC,EAAGyJ,IAElE;wBAIL;IAAI+O,EAAQ,IAAItX,aAAa6W,GAC7B,IAAK,IAAIxa,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIkM,EAAI,EAAGA,EAAIsO,IAAOtO,EAAG,CAC1B,MAAMgP,EAAMH,EAAKhW,MAAM/E,EAAGkM,GACpBiP,EAAMb,EAAMvV,MAAM/E,EAAGkM,GACrBkP,EAASb,EAAMxV,MAAM/E,EAAGkM,GAE9B,IAAImP,EAAU3b,KAAKuF,KAAKiW,KAASxb,KAAKuF,KAAKkW,GAAgB,GAATC,EAAeA,EAAS,GACtEC,EAAU,MAAMA,EAAU,KAC9Bd,EAAMxX,UAAU/C,EAAGkM,EAAGmP,GAEtB,MACMC,GADSjB,EAAO,IAAM,GAAM,IACVc,EAAMpC,EAAUsC,EAAUH,EAClDZ,EAAMvX,UAAU/C,EAAGkM,EAAGoP,GAEtBzG,EAAErM,UAAUxI,EAAGkM,EAAGoP,GAClBL,EAAM/O,IAAM2I,EAAE9P,MAAM/E,EAAGkM,EAC1B,CAGL,IAAK,IAAIlM,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIkM,EAAI,EAAGA,EAAIsO,IAAOtO,EACvB2I,EAAEpM,UAAUzI,EAAGkM,EAAG+O,EAAM/O,GAAKhF,GAIrC,OAAOE,KAAKyN,CACf;;;;;;;;;;GCxNU,SAAQ0G,OAAEnS,EAAGtE,EAAI0W,EAAW,KACvC,MACM1b,EAAIgF,EAAGjF,OACb,IAAIuM,EAAQ,KACRqP,EAAM,IACNza,EAAI8D,EAAGnC,QACP+Y,EAAKtS,EAAEpI,GACP2a,GAAc,EAElB,KAAOH,MAAc,IAAMG,GAAa,CACpCA,GAAc,EACd,IAAK,IAAI3b,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxBgB,EAAEhB,IAAM,KACR,IAAI4b,EAAMxS,EAAEpI,GACZA,EAAEhB,IAAM,KACR,IAAI6b,GAAMD,EAAMF,GAAM,KAClBhc,KAAKa,IAAIsb,GAfL,MAgBJF,GAAc,GAElB3a,EAAEhB,IAAMoM,EAAQyP,EAChBH,EAAKtS,EAAEpI,EACV,CACDoL,GAASqP,GAAOC,EAAK,KAAO,GAC5BD,EAAMC,CACT,CACD,OAAO1a,CACX;;;;;GCrBO,MAAM8a,aAAapI;;;;;;;;;;;;;;;;;;;;;;AAsBtBvM,YAAYiD,EAAGwJ;;;;AAMX,GALAqB,MAAM7K,EAAG,CAAE2R,YAAa,GAAIC,mBAAoB,EAAGC,SAAU,EAAG/P,EAAG,EAAGrK,OAAQtC,UAAW2G,KAAM,KAAMgW,QAAS,EAAGC,kBAAmB,EAAGC,oBAAqB,EAAGC,sBAAuB,EAAGC,UAAW,IAAKC,eAAgB,GAAK3I,IAC7NxM,KAAKgG,GAAIhG,KAAK+L,IAAM/L,KAAKgD,EAAErI,MAIxBqF,KAAKgN,UAAU,eAAiBhN,KAAKgG,GACrC,MAAM,IAAI1J,MAAM,2BAA2B0D,KAAKgN,UAAU,4DAA4DhN,KAAKgG,QAE/H,GAAIhG,KAAKgN,UAAU,sBAAwBhN,KAAKgN,UAAU,eACtD,MAAM,IAAI1Q,MAAM,kCAAkC0D,KAAKgN,UAAU,2EAA2EhN,KAAKgN,UAAU,mBAE/JhN,KAAK4R,MAAQ,EACb,MAAM1S,EAAac,KAAK8M,YAExB,OADA9M,KAAKyN,EAAI,IAAIjS,OAAOwE,KAAKgG,GAAIhG,KAAKgN,UAAU,MAAM,IAAM9N,EAAWE,SAC5DY,IACV;;;;;;OAQDoV,gBAAgB7J,EAAQsJ,GACpB,MACMQ,EAAKzZ,SAAS,EAAY,EAAT2P,EAAY,KAC7B+J,EAAK1Z,SAAS,EAAY,EAAT2P,EAAY,KAEnC,IAAK,IAAI3S,EAAI,EAAGF,EAAI2c,EAAG5c,OAAQG,EAAIF,IAAKE,EAAG,CACvC,MAAM2c,EAAOF,EAAGzc,GAChB0c,EAAG1c,GAAK2c,EAAOV,EAAW,EAAIvc,KAAKsa,MAAM2C,EAAOV,GAAYtJ,EAC/D,CAOD,OAAO4I,QALM9I,IACT,MAAMmK,EAAQ5Z,SAAS,EAAG,KAAKV,KAAI,CAACsF,EAAG5H,KAAM0c,SAAG1c,IAVrCgB,EAUgDyb,EAAGzc,GAVhDR,EAUoDiT,EAAE,GAVnDhT,EAUuDgT,EAAE,GAVnD,GAAK,EAAIjT,EAAIE,KAAKqW,IAAI/U,EAAG,EAAIvB,KAA1C,IAACuB,EAAGxB,EAAGC,CAU4D,IAC7E,OAAOC,KAAKC,KAAKwE,YAAYyY,EAAMta,KAAKuH,GAAMA,EAAIA,KAAI,GAGvC,CAAC,EAAG,GAC1B;;;;;;;OASDgT,8BAA8BzJ,EAAW0J,EAAQC,GAC7C,IAAK,IAAI/c,EAAI,EAAGF,EAAIsT,EAAUvT,OAAQG,EAAIF,IAAKE,EAAG,CAC9C,MAAMgF,EAAM+X,EAAK/c,GACXgd,EAAY5J,EAAUpT,GAC5B,IAAK,IAAIyC,EAAI,EAAGkF,EAAIqV,EAAUnd,OAAQ4C,EAAIkF,IAAKlF,EAAG,CAC9C,MAAMc,EAAIyZ,EAAUva,GAAGqB,MAAQkB,EAC/BgY,EAAUva,GAAGqB,MAAQP,EAAI,EAAI7D,KAAKsa,KAAKzW,EAAIuZ,EAAO9c,IAAM,CAC3D,CACJ,CACD,OAAOoT,CACV;;;;;;OAQD6J,iBAAiBC,EAAKtb,GAClB,MAAMub,EAAqB,KACrBC,EAAmB,MAEnBpB,mBAAEA,EAAkBna,OAAEA,GAAWuF,KAAKyM,YACtCwJ,EAAS3d,KAAK4d,KAAK1b,GACnBmb,EAAO,GACPD,EAAS,GACT1S,EAAIhD,KAAKgD,EACTlD,EAAIkD,EAAErI,MAAM,GAGZqR,EAAY,GAClB,GAAe,gBAAXvR,EACA,IAAK,IAAI7B,EAAI,EAAGA,EAAIkH,IAAKlH,EACrBoT,EAAU1S,KAAKwc,EAAInK,OAAO/S,EAAG4B,GAAG2b,gBAGpC,IAAK,MAAMC,KAAOpT,EACdgJ,EAAU1S,KAAKwc,EAAInK,OAAOyK,EAAK5b,GAAG8O,WAAW6M,WAIrD,MAAMxN,EAAQrQ,KAAK+P,MAAMuM,GACnByB,EAAgBzB,EAAqBjM,EAC3C,IAAK,IAAI/P,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,IAAI0d,EAAK,EACLC,EAAKjL,IACLkL,EAAM,EACN5Y,EAAM,EAEV,MAAM6Y,EAAgBzK,EAAUpT,GAC1B8d,EAAgBD,EAAcE,QAAQ7R,GAAMA,EAAEpI,MAAQ,IACtDka,EAAuBF,EAAcje,OACvCme,GAAwBhC,EACpBjM,EAAQ,GACR/K,EAAM8Y,EAAc/N,EAAQ,GAAGjM,MAC3B2Z,EAAgBN,IAChBnY,GAAOyY,GAAiBK,EAAc/N,GAAOjM,MAAQga,EAAc/N,EAAQ,GAAGjM,SAGlFkB,EAAMyY,EAAgBK,EAAc,GAAGha,MAEpCka,EAAuB,IAC9BhZ,EAAM8Y,EAAcE,EAAuB,GAAGla,OAElD,IAAK,IAAI9C,EAAI,EAAGA,EA3CL,KA2CmBA,EAAG,CAC7B,IAAIyY,EAAO,EACX,IAAK,IAAIhX,EAAI,EAAGA,EAAIb,IAAKa,EAAG,CACxB,MAAMyJ,EAAI2R,EAAcpb,GAAGqB,MAAQkB,EACnCyU,GAAQvN,EAAI,EAAIxM,KAAKsa,KAAM9N,EAAI0R,GAAQ,CAC1C,CACD,GAAIle,KAAKa,IAAIkZ,EAAO4D,GAAUF,EAC1B,MAEA1D,EAAO4D,GACNM,EAAIC,GAAO,CAACA,GAAMF,EAAKC,GAAM,IAGzBD,EAAIE,GADLD,IAAOjL,IACK,CAACkL,EAAW,EAANA,GAEN,CAACA,GAAMF,EAAKC,GAAM,EAGzC;oBAGD;GAAI3Y,EAAM,EAAG,CACT,MAAMiZ,EAAYJ,EAAcjL,QAAO,CAACpT,EAAGC,IAAMD,EAAIC,EAAEqE,OAAO,GAAK+Z,EAAche,OAC7E+d,EAAMR,EAAmBa,IACzBL,EAAMR,EAAmBa,EAE7C,KAAmB,CACH,MAAMC,EAAS9K,EAAUR,QAAO,CAACC,EAAKpS,IAAQoS,EAAMpS,EAAImS,QAAO,CAACpT,EAAGC,IAAMD,EAAIC,EAAEqE,OAAO,GAAKrD,EAAIZ,SAC3F+d,EAAMR,EAAmBc,IACzBN,EAAMR,EAAmBc,EAEhC,CACDnB,EAAK/c,GAAKgF,EACV8X,EAAO9c,GAAK4d,CACf,CACD,MAAO,CACHxK,UAAWA,EACX0J,OAAQA,EACRC,KAAMA,EAEb;;;;;;OAQDoB,sBAAsB/T,EAAG2R,GACrB,MAAM7U,EAAIkD,EAAErI,MAAM,IACZF,OAAEA,EAAMsa,kBAAEA,GAAsB/U,KAAKyM,YACrCqJ,EAAiB,gBAAXrb,EAA2B,IAAIoR,IAAI7I,EAAG,eAAiB,IAAIuH,SAASvH,EAAEpD,UAAWnF,GAC7F,IAAIuR,UAAEA,EAAS0J,OAAEA,EAAMC,KAAEA,GAAS3V,KAAK6V,iBAAiBC,EAAKnB,GAC7D3I,EAAYhM,KAAKyV,8BAA8BzJ,EAAW0J,EAAQC,GAClE,MAAM1Z,EAAS,IAAIT,OAAOsE,EAAGA,EAAG,SAChC,IAAK,IAAIlH,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAMoe,EAAchL,EAAUpT,GAC9B,IAAK,IAAIyC,EAAI,EAAGA,EAAI2b,EAAYve,SAAU4C,EACtCY,EAAON,UAAU/C,EAAGoe,EAAY3b,GAAG+M,QAAQO,MAAOqO,EAAY3b,GAAGqB,MAExE,CAED,MAAMua,EAAoBhb,EAAOqF,EAC3B4V,EAAcjb,EAAOwC,KAAKwY,GAChC,OAAOhb,EACFqI,IAAI2S,GACJ1Y,IAAI2Y,GACJzY,KAAKsW,GACLzQ,IAAI4S,EAAYzY,KAAK,EAAIsW,GACjC;;;;;OAODoC,wBAAwBC,GACpB,MAAMC,EAAUrX,KAAKsX,SACfrb,EAAS,IAAI6J,aAAauR,EAAQ5e,QAAQ8e,MAAM,GAChDC,EAAaJ,EAAW7d,IAAI8d,GAKlC,OAJAA,EAAQ/M,SAAQ,CAAC0G,EAAGpY,KAClB,MAAMyO,EAAS2J,EAAIwG,EACfnQ,EAAS,IAAGpL,EAAOrD,GAAKN,KAAK0D,MAAMob,EAAW/P,GAAO,IAEpDpL,CACV;;;;;OAODwb,OAAOC,GACH,MAAMhd,EAAO,GACP2B,EAAO,GACPoE,EAAO,IACNkX,EAAQC,GAAUF,EAAM/c,MAC/B,IAAK,IAAIK,EAAM,EAAGA,EAAM2c,IAAU3c,EAC9B,IAAK,IAAII,EAAM,EAAGA,EAAMwc,IAAUxc,EAAK,CACnC,MAAMuC,EAAQ+Z,EAAM/Z,MAAM3C,EAAKI,GACjB,IAAVuC,IACAjD,EAAKpB,KAAK0B,GACVqB,EAAK/C,KAAK8B,GACVqF,EAAKnH,KAAKqE,GAEjB,CAEL,MAAO,CACHjD,KAAMA,EACN2B,KAAMA,EACNoE,KAAMA,EAEb;;;;OAMD+M,OACI,MAAMsH,QAAEA,EAAOD,SAAEA,EAAQF,YAAEA,EAAWO,UAAEA,EAASD,sBAAEA,GAA0BjV,KAAKyM,aAC3ErU,EAAGC,GAAK2H,KAAKoV,gBAAgBN,EAASD,GAC7C7U,KAAK6X,GAAKzf,EACV4H,KAAK8X,GAAKzf,EACV2H,KAAK+X,OAAS/X,KAAK+W,sBAAsB/W,KAAKgD,EAAG2R,GACjD,MAAMja,KAAEA,EAAI2B,KAAEA,EAAMoE,KAAM4W,GAAYrX,KAAKyX,OAAOzX,KAAK+X,QAQvD,OAPA/X,KAAKgY,MAAQtd,EACbsF,KAAKiY,MAAQ5b,EACb2D,KAAKsX,SAAWD,EAChBrX,KAAKkY,mBAAqBlY,KAAKmX,wBAAwBjC,GACvDlV,KAAKmY,4BAA8BnY,KAAKkY,mBAAmBhd,KAAK4J,GAAMA,EAAImQ,IAC1EjV,KAAKoY,sBAAwBpY,KAAKkY,mBAAmB3c,QACrDyE,KAAKqY,+BAAiCrY,KAAKmY,4BAA4B5c,QAChEyE,IACV,CAED0X,QAEI,OADA1X,KAAKqN,aACE,CAAEhR,KAAM2D,KAAKgY,MAAOtd,KAAMsF,KAAKiY,MAAOZ,QAASrX,KAAKsX,SAC9D;;;;;OAODlK,UAAU2F,EAAa,KACf/S,KAAKgN,UAAU,cAAgB+F,IAC/B/S,KAAKgN,UAAU,YAAa+F,GAC5B/S,KAAKwN,QAETxN,KAAKqN,aACL,IAAK,IAAIzU,EAAI,EAAGA,EAAIma,IAAcna,EAC9BoH,KAAKgT,OAET,OAAOhT,KAAKsN,UACf;;;;;OAODC,WAAWwF,EAAa,KAChB/S,KAAKgN,UAAU,cAAgB+F,IAC/B/S,KAAKgN,UAAU,YAAa+F,GAC5B/S,KAAKwN,QAETxN,KAAKqN,aACL,IAAK,IAAIzU,EAAI,EAAGA,EAAIma,IAAcna,EAC9BoH,KAAKgT,aACChT,KAAKsN,WAEf,OAAOtN,KAAKsN,UACf;;;;;OAODgL,MAAM1e,GACF,OAAIA,EAAI,EAAU,EACdA,GAAK,GAAW,EACbA,CACV;;;;;;;;;OAWD2e,iBAAiBC,EAAgBC,EAAgBC,EAAMC,GACnD,MAAMzZ,EAAac,KAAK8M,aAClBkI,oBAAEA,EAAqBlQ,EAAGsO,GAAQpT,KAAKyM,aACrCmM,OAAQ5T,EAAO6S,GAAIzf,EAAG0f,GAAIzf,EAAG6f,mBAAoBW,EAAmBV,4BAA6BW,EAA4BT,+BAAgCU,EAA+BX,sBAAuBY,EAAsBV,MAAOW,GAASjZ,KAC3PkZ,EAAcP,EAAKlgB,OAEzB,IAAK,IAAIG,EAAI,EAAGF,EAAImgB,EAAkBpgB,OAAQG,EAAIF,IAAKE,EACnD,GAAIogB,EAAqBpgB,IAAMoH,KAAK4R,MAAO,CACvC,MAAMvW,EAAIqd,EAAK9f,GACT4B,EAAIme,EAAK/f,GACT8S,EAAU8M,EAAexd,IAAIK,GAC7B2T,EAAQyJ,EAAezd,IAAIR,GAC3BkB,EAAOlD,kBAAkBkT,EAASsD,GACxC,GAAItT,EAAO,EAAG,CACV,MAAMyd,GAAe,EAAI/gB,EAAIC,EAAIC,KAAKqW,IAAIjT,EAAMrD,EAAI,IAAOD,EAAIE,KAAKqW,IAAIjT,EAAMrD,GAAK,GACnF,IAAK,IAAIyM,EAAI,EAAGA,EAAIsO,IAAOtO,EAAG,CAC1B,MAAMsU,EAASH,EAAKE,GAAczN,EAAQ5G,GAAKkK,EAAMlK,KAAOE,EAC5D0G,EAAQ5G,IAAMsU,EACdpK,EAAMlK,IAAMsU,CACf,CACJ,CACDJ,EAAqBpgB,IAAMigB,EAAkBjgB,GAC7C,MAAMygB,GAAiBrZ,KAAK4R,MAAQmH,EAA8BngB,IAAMkgB,EAA2BlgB,GACnG,IAAK,IAAIyS,EAAI,EAAGA,EAAIgO,IAAiBhO,EAAG,CACpC,MAAM7Q,EAAI0E,EAAWyH,WAAauS,EAC5BlK,EAAQyJ,EAAezd,IAAI2d,EAAKne,IAChCkB,EAAOlD,kBAAkBkT,EAASsD,GACxC,GAAItT,EAAO,EAAG,CACV,MAAMyd,EAAc,EAAInE,EAAsB3c,IAAO,IAAOqD,IAAStD,EAAIE,KAAKqW,IAAIjT,EAAMrD,GAAK,IAC7F,IAAK,IAAIyM,EAAI,EAAGA,EAAIsO,IAAOtO,EAAG,CAC1B,MAAMsU,EAASH,EAAKE,GAAczN,EAAQ5G,GAAKkK,EAAMlK,KAAOE,EAC5D0G,EAAQ5G,IAAMsU,EACdpK,EAAMlK,IAAMsU,CACf,CACzB,MAA2B,GAAI/d,IAAMb,EACb,QAEP,CACDue,EAA8BngB,IAAMygB,EAAgBP,EAA2BlgB,EAClF,CAEL,OAAO4f,CACV;;;;OAMDxF,OACI,MAAMC,IAASjT,KAAK4R,MACdnE,EAAIzN,KAAKyN,GACT0H,eAAEA,EAAcD,UAAEA,GAAclV,KAAKyM,YAI3C,OAHAzM,KAAK4Y,OAASzD,GAAkB,EAAIlC,EAAOiC,GAC3ClV,KAAKyN,EAAIzN,KAAKuY,iBAAiB9K,EAAGA,EAAGzN,KAAKgY,MAAOhY,KAAKiY,OAE/CjY,KAAKyN,CACf;;;;;GCtYE,MAAM6L,eAAehN;;;;;;;;;;;;;;;;;;AAkBxBvM,YAAYiD,EAAGwJ,GAEX,OADAqB,MAAM7K,EAAG,CAAEuW,WAAY,IAAKrS,EAAG,EAAGpC,EAAG,EAAGrK,OAAQtC,UAAW8G,IAAK,KAAMH,KAAM,MAAQ0N,GAC7ExM,IACV;;;;;OAODwN,KAAKgM,EAAM,KAAM1D,EAAM,MACnB,MAAM9S,EAAIhD,KAAKgD,EACTlD,EAAIkD,EAAErI,MAAM,IACZuM,EAAEA,EAACpC,EAAEA,EAACrK,OAAEA,EAAMqE,KAAEA,GAASkB,KAAKyM,YACpCzM,KAAKyZ,UAAY,EAAIvS,EACrBlH,KAAK0Z,WAAa,EAAIxS,EACtBlH,KAAK2Z,SAAW,EAAIzS,EACpBlH,KAAKyN,EAAI+L,GAAO,IAAI5L,IAAI5K,EAAG,CAAE8B,IAAGhG,SAAQsO,YACxCpN,KAAK8V,IAAMA,GAAO,IAAIvL,SAASvH,EAAEpD,UAAWnF,GAC5C,MAAMmf,SAAEA,EAAQvC,QAAEA,GAAYrX,KAAK6Z,mBAAmB7Z,KAAKyZ,UAAWzZ,KAAK0Z,WAAY1Z,KAAK2Z,UAO5F,OANA3Z,KAAK4Z,SAAWA,EAChB5Z,KAAKqX,QAAUA,EACfrX,KAAK8Z,GAAM,IAAOha,EAAK8Z,EAASjf,MAAM,GACtCqF,KAAKwC,EAAI8I,IACTtL,KAAK+Z,IAAM,IAAIve,OAAOsE,EAAGgF,EAAG,GAC5B9E,KAAKga,KAAO,IAAIxe,OAAOsE,EAAGgF,EAAG,GACtB9E,IACV;;;;;;OAQD6Z,mBAAmBJ,EAAWC,EAAYC,GACtC,MAAMlf,OAAEA,EAAM8e,WAAEA,GAAevZ,KAAKyM,YAC9BzJ,EAAIhD,KAAKgD,EACTlD,EAAIkD,EAAErI,MAAM,GACZmb,EAAM9V,KAAK8V,IACXmE,EAAU3hB,KAAK6K,IAAIsW,EAAY,GAAI3Z,GACnCoa,EAAO,IAAI1e,OAAOsE,EAAGma,GACrBE,EAAgB,IAAI3e,OAAOsE,EAAGma,GACpC,IAAK,IAAIrhB,EAAI,EAAGA,EAAIkH,IAAKlH,EACrBkd,EAAInK,OAAO3I,EAAEhI,IAAIpC,GAAIqhB,EAAU,GAC1B3Q,WACAqN,QAAQ7R,GAAiB,GAAXA,EAAEpI,QAChBpB,MAAK,CAAClD,EAAGC,IAAMD,EAAEsE,MAAQrE,EAAEqE,QAC3B4N,SAAQ,CAACxF,EAAGzJ,KACT6e,EAAKve,UAAU/C,EAAGyC,EAAGyJ,EAAEsD,QAAQO,OAC/BwR,EAAcxe,UAAU/C,EAAGyC,EAAGyJ,EAAEpI,MAAM;kBAIlD;MAAM0d,EAAM,IAAI7d,aAAauD,GAC7B,IAAK,IAAIlH,EAAI,EAAGA,EAAIkH,IAAKlH,EACrBwhB,EAAIxhB,GAAKN,KAAKiB,KAAK4gB,EAAcxc,MAAM/E,EAAG,GAAKuhB,EAAcxc,MAAM/E,EAAG,GAAKuhB,EAAcxc,MAAM/E,EAAG,GAAKuhB,EAAcxc,MAAM/E,EAAG,IAAM,EAAG,OAG3I,MAAMoZ,EAAIhS,KAAKqa,QAAQF,EAAeC,EAAKF,GAE3C,IAAIN,EAAW5Z,KAAKsa,qBAAqBtI,EAAGkI,EAAMT,EAAWC,GACzDa,EAAaX,EAASjf,MAAM,GAChC,MAAM6f,EAAoB,IAAIje,aAAage,GAC3C,IAAK,IAAI3hB,EAAI,EAAGA,EAAI2hB,IAAc3hB,EAAG,CACjC,MAAMyC,EAAIue,EAASjc,MAAM/E,EAAG,GACtB4B,EAAIof,EAASjc,MAAM/E,EAAG,GAC5B4hB,EAAkB5hB,GAAK6B,EAAOuI,EAAEhI,IAAIK,GAAI2H,EAAEhI,IAAIR,GACjD,CACD,IAAI6c,EAAUrX,KAAKya,cAAcb,EAAU5H,EAAGkI,EAAMM,EAAmBJ,GAEvE,GAAIT,EAAW,EAAG,CACd,MAAMe,gBAAEA,EAAeC,eAAEA,GAAmB3a,KAAK4a,wBAAwB5X,EAAG2W,EAAUS,GACtFR,EAAWA,EAAS7W,OAAO2X,EAAiB,YAC5CrD,EAAU9a,aAAatB,KAAK,IAAIoc,KAAYsD,GAC/C,CACDJ,EAAaX,EAASjf,MAAM,GAC5B,IAAIkgB,GAAcvP,IAClB,IAAK,IAAI1S,EAAI,EAAGA,EAAI2hB,IAAc3hB,EAC1BkiB,MAAMzD,EAAQze,MACdye,EAAQze,GAAK,GAEbiiB,EAAaxD,EAAQze,KAAIiiB,EAAaxD,EAAQze,IAEtD,IAAImiB,GAAgBzP,IACpB,IAAK,IAAI1S,EAAI,EAAGA,EAAI2hB,IAAc3hB,EAC9Bye,EAAQze,IAAMiiB,EACdxD,EAAQze,IAAM,KACdye,EAAQze,GAAKN,KAAK6O,IAAI,EAAIoS,EAAalC,EAAQze,IAC3CmiB,EAAe1D,EAAQze,KAAImiB,EAAe1D,EAAQze,IAE1D,IAAK,IAAIA,EAAI,EAAGA,EAAI2hB,IAAc3hB,EAC9Bye,EAAQze,IAAMmiB,EAElB,MAAO,CACHnB,SAAUA,EACVvC,QAASA,EAEhB;;;;;;;;OAUDgD,QAAQF,EAAeC,EAAKF,GACxB,MAAOpa,EAAG6U,GAAewF,EAAcxf,MACvC,OAAO,IAAIa,OAAOsE,EAAG6U,GAAa,CAAC/b,EAAGyC,IAC3B/C,KAAKsa,MAAMuH,EAAcxc,MAAM/E,EAAGyC,IAAM,GAAI+e,EAAIxhB,GAAKwhB,EAAIF,EAAKvc,MAAM/E,EAAGyC,MAErF;;;;;;;;;OAWDif,qBAAqBtI,EAAGkI,EAAMT,EAAWC,GACrC,MAAM5Z,EAAIoa,EAAKvf,MAAM,GACfif,EAAW,IAAIpe,OAAOsE,EAAI2Z,EAAYC,EAAY,GACxD,IAAK,IAAI9gB,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,IAAIoiB,EAAMpiB,EAAI6gB,EAAYC,EAC1B,MAAMuB,EAAejb,KAAKkb,UAAUlJ,EAAEhX,IAAIpC,IAC1C,IAAK,IAAIyC,EAAI,EAAGA,EAAIoe,IAAape,EAAG,CAChC,IAAI8f,EAAM9f,EAAIqe,EACd,MAAM0B,EAAMlB,EAAKvc,MAAM/E,EAAGqiB,EAAa5f,IACjCggB,EAAUrb,KAAKsb,kBAAkB5B,EAAY5Z,EAAGmb,EAAa1f,MAAM,EAAGF,EAAI,IAChF,IAAK,IAAIb,EAAI,EAAGA,EAAIkf,IAAclf,EAAG,CACjC,MAAMmO,EAAQqS,EAAMG,EAAM3gB,EACpB+gB,EAAMF,EAAQ7gB,GACpBof,EAASje,UAAUgN,EAAO,EAAG/P,GAC7BghB,EAASje,UAAUgN,EAAO,EAAGyS,GAC7BxB,EAASje,UAAUgN,EAAO,EAAG4S,EAChC,CACJ,CACJ,CACD,OAAO3B,CACV;;;;;OAODsB,UAAU3gB,GACN,OAAOqB,SAAS,EAAGrB,EAAE9B,OAAS,GAAG6C,MAAK,CAAC1C,EAAGyC,IAAMd,EAAEc,GAAKd,EAAE3B,IAC5D;;;;;;;OASD0iB,kBAAkBE,EAAWC,EAASC,GAClC,MAAMxc,EAAac,KAAK8M,YAClB6O,EAAW/f,SAAS,EAAG6f,EAAU,GAAG9E,QAAQ7R,GAAM4W,EAAQE,QAAQ9W,GAAK,IAC7E,OAAO5F,EAAWkI,OAAOuU,EAAUrjB,KAAK6K,IAAIqY,EAAWG,EAASljB,OAAS,GAC5E;;;;;;;;;OAWDgiB,cAAcb,EAAU5H,EAAGkI,EAAMM,EAAmBJ,GAChD,MAAMG,EAAaX,EAASjf,MAAM,GAC5B0c,EAAU,IAAI9a,aAAage,GACjC,IAAK,IAAI1d,EAAI,EAAGA,EAAI0d,IAAc1d,EAAG,CACjC,MAAMjE,EAAIghB,EAASjc,MAAMd,EAAG,GACtBue,EAAMlB,EAAKlf,IAAIpC,GAAGgjB,QAAQhC,EAASjc,MAAMd,EAAG,IAC5Cgf,EAAQ7J,EAAErU,MAAM/E,EAAGwiB,GACzB,IAAIU,EAAQxjB,KAAKsa,MAAM4H,EAAkB3d,IAAM,IAAKud,EAAIxhB,GAAKwhB,EAAIR,EAASjc,MAAMd,EAAG,MAC/Eif,EAAQ,QAAOA,EAAQ,OAC3BzE,EAAQxa,GAAKgf,EAAQC,CACxB,CACD,OAAOzE,CACV;;;;;;;OASDuD,wBAAwB5X,EAAG2W,EAAUS,GACjC,MAAM3f,EAASuF,KAAKgN,UAAU,UACxB9N,EAAac,KAAK8M,YAClBhN,EAAIkD,EAAErI,MAAM,GACZ+f,EAAkB,IAAIlf,OAAOsE,EAAI6Z,EAAU,GAC3CgB,EAAiB,IAAIpe,aAAauD,EAAI6Z,GAC5C,IAAK,IAAI/gB,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAMoiB,EAAMpiB,EAAI+gB,EACVoC,EAAU,IAAIngB,SAAS,EAAGhD,EAAI,MAAOgD,SAAShD,EAAI,EAAGkH,EAAI,IAC/D,IAAK,IAAIzE,EAAI,EAAGA,EAAIse,IAAYte,EAAG,CAC/B,IAAK+f,EAAKG,GAAOrc,EAAWkI,OAAO2U,EAAS,GACxCF,EAAQvjB,KAAKsa,MAAMnY,EAAOuI,EAAEhI,IAAIpC,GAAIoK,EAAEhI,IAAIogB,KAAS,IAAKhB,EAAIxhB,GAAKwhB,EAAIgB,KACrES,EAAQ,QAAOA,EAAQ,OAC3B,IAAIC,EAAQxjB,KAAKsa,MAAMnY,EAAOuI,EAAEhI,IAAIpC,GAAIoK,EAAEhI,IAAIugB,KAAS,IAAKnB,EAAIxhB,GAAKwhB,EAAImB,KACrEO,EAAQ,QAAOA,EAAQ,OAEvBD,EAAQC,KACPV,EAAKG,GAAO,CAACA,EAAKH,IAClBS,EAAOC,GAAS,CAACA,EAAOD,IAE7B,MAAMlT,EAAQqS,EAAM3f,EACpBqf,EAAgB/e,UAAUgN,EAAO,EAAG/P,GACpC8hB,EAAgB/e,UAAUgN,EAAO,EAAGyS,GACpCV,EAAgB/e,UAAUgN,EAAO,EAAG4S,GACpCZ,EAAehS,GAASkT,EAAQC,CACnC,CACJ,CACD,MAAO,CACHpB,gBAAiBA,EACjBC,eAAgBA,EAEvB;;;;OAMDqB,MAAMvO,GACF,MAAMgM,EAAYzZ,KAAKyZ,UACjBC,EAAa1Z,KAAK0Z,WAClBE,EAAW5Z,KAAK4Z,SAChBvC,EAAUrX,KAAKqX,SACdvX,EAAGsT,GAAO3F,EAAE9S,MACb4f,EAAaX,EAASjf,MAAM,GAC5BgZ,EAAO,IAAInY,OAAOsE,EAAGsT,EAAK,GAChC,IAAI6I,EAAO,IAAI1f,aAAa6W,GACxB8I,EAAO,IAAI3f,aAAa6W,GACxB+I,EAAO,EACPC,EAAO,EACPC,EAAS,EACTC,EAAO,EACX,MAAMC,EAAiBzc,EAAI2Z,EAAYC,EAEvC,IAAK,IAAI7c,EAAI,EAAGA,EAAI0d,IAAc1d,EAAG,CACjC,MAAOjE,EAAGyC,EAAGb,GAAKof,EAAS5e,IAAI6B;gCAE/B;GAAIA,EAAI6c,GAAc,GAAK7c,GAAK0f,EAAgB,CAC5CJ,EAAO,EACPC,EAAO,EACP,IAAK,IAAItX,EAAI,EAAGA,EAAIsO,IAAOtO,EAAG,CAC1B,MAAM0X,EAAO/O,EAAE9P,MAAM/E,EAAGkM,GAClB2X,EAAOhP,EAAE9P,MAAMtC,EAAGyJ,GAClB4X,EAAOjP,EAAE9P,MAAMnD,EAAGsK,GACxBmX,EAAKnX,GAAK0X,EAAOC,EACjBP,EAAKpX,GAAK0X,EAAOE,EACjBP,GAAQF,EAAKnX,IAAM,EACnBsX,GAAQF,EAAKpX,IAAM,CACtB;4BAEjB;KAAmB,CACHsX,EAAO,EACP,IAAK,IAAItX,EAAI,EAAGA,EAAIsO,IAAOtO,EAAG,CAC1B,MAAM0X,EAAO/O,EAAE9P,MAAM/E,EAAGkM,GAClB4X,EAAOjP,EAAE9P,MAAMnD,EAAGsK,GACxBoX,EAAKpX,GAAK0X,EAAOE,EACjBN,GAAQF,EAAKpX,IAAM,CACtB,CACJ,CAEGqX,EAAOC,KAAQC,EACnBC,GAAQjF,EAAQxa,IAAM,EAAIuf,EAAOD,GACjC,MAAMnL,GAAKqG,EAAQxa,IAAMsf,EAAOC,KAAU,EAC1C,IAAK,IAAItX,EAAI,EAAGA,EAAIsO,IAAOtO,EAAG,CAC1B,MAAM6X,EAAKV,EAAKnX,GAAKsX,EAAOpL,EACtB4L,EAAKV,EAAKpX,GAAKqX,EAAOnL,EAC5B2C,EAAKvS,UAAUxI,EAAGkM,EAAG6X,EAAKC,GAC1BjJ,EAAKtS,UAAUhG,EAAGyJ,EAAG6X,GACrBhJ,EAAKvS,UAAU5G,EAAGsK,EAAG8X,EACxB,CACJ,CACD,MAAO,CAAEjJ,OAAM2I,OAAMD,SACxB;;;;OAMDjP,UAAUyP,EAAgB,KACtB7c,KAAKqN,aACL,IAAK,IAAI4F,EAAO,EAAGA,EAAO4J,IAAiB5J,EACvCjT,KAAK8c,MAAM7J,GAEf,OAAOjT,KAAKsN,UACf;;;;;OAODC,WAAWsP,EAAgB,KACvB7c,KAAKqN,aACL,IAAK,IAAI4F,EAAO,EAAGA,EAAO4J,IAAiB5J,EACvCjT,KAAK8c,MAAM7J,SACLjT,KAAKsN,WAEf,OAAOtN,KAAKsN,UACf;;;;;OAODwP,MAAM7J,GACF,MAAM8J,EAAQ9J,EAAO,IAAM,GAAM,GAC3B+J,EAAQhd,KAAKwC,EACbuX,EAAM/Z,KAAK+Z,IACXtM,EAAIzN,KAAKyN,EAAEnJ,IAAIyV,EAAItb,KAAKse,KACxBpJ,KAAEA,EAAI2I,KAAEA,EAAID,OAAEA,GAAWrc,KAAKgc,MAAMvO,GAI1C,OAHAzN,KAAKwC,EAAI8Z,EACTtc,KAAKyN,EAAIzN,KAAKid,kBAAkBxP,EAAGwF,EAAMU,GACzC3T,KAAK8Z,IAAMkD,EAAQV,EAAOtc,KAAKyM,YAAYxN,IAAM,KAAO,GACjDe,KAAKyN,CACf;;;;;;;OASDwP,kBAAkBxP,EAAGwF,EAAMU,GACvB,MAAO7T,EAAGsT,GAAO3F,EAAE9S,MACboiB,EAAQ9J,EAAO,IAAM,GAAM,GAE3B+G,EAAOha,KAAKga,KACZD,EAAM/Z,KAAK+Z,IACXD,EAAK9Z,KAAK8Z,GAChB,IAAK,IAAIlhB,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIkM,EAAI,EAAGA,EAAIsO,IAAOtO,EAAG,CAC1B,MAAMoY,EAAW5kB,KAAKuF,KAAKkc,EAAIpc,MAAM/E,EAAGkM,KAAOxM,KAAKuF,KAAK8V,EAAKhW,MAAM/E,EAAGkM,IAAMkV,EAAKrc,MAAM/E,EAAGkM,GAAK,GAAMxM,KAAKiB,IAAuB,GAAnBygB,EAAKrc,MAAM/E,EAAGkM,GANpH,KAOTkV,EAAKre,UAAU/C,EAAGkM,EAAGoY,GACrBnD,EAAIpe,UAAU/C,EAAGkM,EAAGiY,EAAQhD,EAAIpc,MAAM/E,EAAGkM,GAAKgV,EAAKE,EAAKrc,MAAM/E,EAAGkM,GAAK6O,EAAKhW,MAAM/E,EAAGkM,IACpF2I,EAAE9R,UAAU/C,EAAGkM,EAAG2I,EAAE9P,MAAM/E,EAAGkM,GAAKiV,EAAIpc,MAAM/E,EAAGkM,GAClD,CAEL,OAAO2I,CACV;;;;GC5XE,MAAM0P;;;;;;;;;;;AAWTpd,YAAYqd,EAAQC,EAAU,WAAY5iB,EAAStC,WAK/C,GAJA6H,KAAKsd,IAAM,EACXtd,KAAKud,QAAUH,aAAkB5hB,OAAS4hB,EAAS5hB,OAAOP,KAAKmiB,GAC/Dpd,KAAK+K,QAAUtQ,EACfuF,KAAKwd,SAAWH,EACD,gBAAX5iB,GAA4BuF,KAAKud,QAAQ5iB,MAAM,KAAOqF,KAAKud,QAAQ5iB,MAAM,GACzE,MAAM,IAAI2B,MAAM,6DAIpB,OAFA0D,KAAKwN,OACLxN,KAAKyd,KAAOzd,KAAK0d,KACV1d,IACV;;;;;;OAQD2d,aAAajhB,EAAO2D,EAAO,YACvB,IACIuH,EADAgW,EAAW,GAEf,OAAQvd,GACJ,IAAK,WACDuH,EAAY9C,GAAMA,EAAEpJ,KACpB,MACJ,IAAK,QACDkM,EAAY9C,GAAMA,EAAE+Y,MACpB,MACJ,QACI,MAAM,IAAIvhB,MAAM,gBAGxB,OADA0D,KAAK8d,UAAU9d,KAAKyd,KAAM7V,EAAUlL,EAAOkhB,GACpCA,CACV;;;;;;;OASDE,UAAUjV,EAAM7G,EAAGtF,EAAOT,GAClB+F,EAAE6G,IAASnM,EACXT,EAAO3C,KAAKuP,EAAKkV,WAEjB/d,KAAK8d,UAAUjV,EAAKE,KAAM/G,EAAGtF,EAAOT,GACpC+D,KAAK8d,UAAUjV,EAAKG,MAAOhH,EAAGtF,EAAOT,GAE5C;;;OAKDuR,OACI,MAAM/S,EAASuF,KAAK+K,QACdxQ,EAAIyF,KAAKud,QACT7kB,EAAKsH,KAAKge,GAAKzjB,EAAEI,MAAM,GACvBsjB,EAASje,KAAKke,OAAS,IAAI3hB,aAAa7D,GAC9C,IAAImC,EACJ,GAAe,gBAAXJ,EAA0B,CAC1BI,EAAkB,IAAIW,OAAO9C,EAAGA,EAAG;AACnC,IAAK,IAAIE,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxBqlB,EAAMrlB,GAAK;;AAEX,IAAK,IAAIyC,EAAI,EAAGA,EAAI3C,IAAK2C,EACrBR,EAAgBc,UAAU/C,EAAGyC,EAAGzC,IAAMyC,EAAIiQ,IAAW7Q,EAAOF,EAAES,IAAIpC,GAAI2B,EAAES,IAAIK,KACxER,EAAgB8C,MAAM/E,EAAGqlB,EAAMrlB,IAAMiC,EAAgB8C,MAAM/E,EAAGyC,KAC9D4iB,EAAMrlB,GAAKyC,EAGtB,CACb,KAAe,CACHR,EAAkBmF,KAAKud,QAAQ/f,QAC/B,IAAK,IAAI5E,EAAI,EAAGA,EAAIF,IAAKE,EACrB,IAAK,IAAIyC,EAAI,EAAGA,EAAI3C,IAAK2C,EACjBzC,IAAMyC,EACNR,EAAgBc,UAAU/C,EAAGyC,EAAGiQ,KACzBzQ,EAAgB8C,MAAM/E,EAAGqlB,EAAMrlB,IAAMiC,EAAgB8C,MAAM/E,EAAGyC,KACrE4iB,EAAMrlB,GAAKyC,EAI1B,CACD2E,KAAKme,iBAAmBtjB,EACxB,MAAM+iB,EAAY5d,KAAKoe,UAAY,IAAIrjB,MAAMrC,GACvC2lB,EAAUre,KAAKse,QAAU,IAAIC,YAAY7lB,GAC/C,IAAK,IAAIE,EAAI,EAAGA,EAAIF,IAAKE,EACrBglB,EAAShlB,GAAK,GACdglB,EAAShlB,GAAG,GAAK,IAAI4lB,QAAQxe,KAAKsd,MAAO,KAAM,KAAM,EAAG/iB,EAAES,IAAIpC,GAAIA,EAAG,EAAG,GACxEylB,EAAOzlB,GAAK,EAEhB,OAAOoH,IACV;;;OAKD0d,KACI,MAAMhlB,EAAIsH,KAAKge,GACTC,EAAQje,KAAKke,OACbtjB,EAAIoF,KAAKme,iBACTP,EAAW5d,KAAKoe,UAChBC,EAASre,KAAKse,QACdjB,EAAUrd,KAAKwd,SACrB,IAAIC,EAAO,KACX,IAAK,IAAIpS,EAAI,EAAGoT,EAAQ/lB,EAAI,EAAG2S,EAAIoT,IAASpT,EAAG,CAC3C,IAAIqT,EAAK,EACT,IAAK,IAAI9lB,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxB,IAAI+lB,EAAU/jB,EAAE+C,MAAM/E,EAAGqlB,EAAMrlB,IAC/B,IAAK,IAAIyC,EAAIzC,EAAI,EAAGyC,EAAI3C,IAAK2C,EACrBsjB,EAAU/jB,EAAE+C,MAAM/E,EAAGyC,KACrB4iB,EAAMrlB,GAAKyC,EACXsjB,EAAU/jB,EAAE+C,MAAM/E,EAAGqlB,EAAMrlB,IAGtC,CACD,IAAK,IAAIA,EAAI,EAAGA,EAAIF,IAAKE,EACjBgC,EAAE+C,MAAM/E,EAAGqlB,EAAMrlB,IAAMgC,EAAE+C,MAAM+gB,EAAIT,EAAMS,MACzCA,EAAK9lB,GAGb,IAAIgmB,EAAKX,EAAMS,GACXG,EAAajB,EAASc,GAAI,GAC1BI,EAAalB,EAASgB,GAAI,GAC1BG,EAAqBF,EAAWG,OAAS,CAACH,EAAWlW,OAASkW,EAAWlW,MACzEsW,EAAqBH,EAAWE,OAAS,CAACF,EAAWnW,OAASmW,EAAWnW,MACzEoT,EAAUgD,EAAmBhc,OAAOkc,GACpCC,EAAc,IAAIV,QAAQxe,KAAKsd,MAAOuB,EAAYC,EAAYlkB,EAAE+C,MAAM+gB,EAAIE,GAAK,KAAM7C,GACzF8C,EAAW9U,OAASmV,EACpBJ,EAAW/U,OAASmV,EACpBtB,EAASc,GAAIS,QAAQD,GACrBb,EAAOK,IAAOL,EAAOO,GACrB,IAAK,IAAIvjB,EAAI,EAAGA,EAAI3C,IAAK2C,EAAG,CACxB,MAAM+jB,EAASxkB,EAAE+C,MAAM+gB,EAAIrjB,GACrBgkB,EAASzkB,EAAE+C,MAAMihB,EAAIvjB,GAC3B,IAAIqB,EACJ,OAAQ2gB,GACJ,IAAK,SACD3gB,EAAQpE,KAAK6K,IAAIic,EAAQC,GACzB,MACJ,IAAK,WACD3iB,EAAQpE,KAAKiB,IAAI6lB,EAAQC,GACzB,MACJ,IAAK,UACD3iB,GAAS2hB,EAAOK,GAAMU,EAASf,EAAOO,GAAMS,IAAWhB,EAAOK,GAAML,EAAOhjB,IAGnFT,EAAEe,UAAUN,EAAGqjB,EAAIhiB,GACnB9B,EAAEe,UAAU+iB,EAAIrjB,EAAGqB,EACtB,CAED9B,EAAEe,UAAU+iB,EAAIA,EAAIpT,KACpB,IAAK,IAAI1S,EAAI,EAAGA,EAAIF,IAAKE,EACrBgC,EAAEe,UAAU/C,EAAGgmB,EAAItT,KACnB1Q,EAAEe,UAAUijB,EAAIhmB,EAAG0S;;;;;;;;gBAWvBmS,EAAOyB,CACV,CACD,OAAOzB,CACV,EAGL,MAAMe,QACFze,YAAYmQ,EAAInH,EAAMC,EAAOtN,EAAM4jB,EAAU3W,EAAOsB,EAAM4T,GAUtD,OATA7d,KAAKkQ,GAAKA,EACVlQ,KAAK+I,KAAOA,EACZ/I,KAAKgJ,MAAQA,EACbhJ,KAAKtE,KAAOA,EACZsE,KAAK2I,MAAQA,EACb3I,KAAKiK,KAAOA,GAAQlB,EAAKkB,KAAOjB,EAAMiB,KACtCjK,KAAK6d,MAAQA,GAAS,EAAIvlB,KAAKiB,IAAIwP,EAAK8U,MAAO7U,EAAM6U,OACrD7d,KAAKsf,SAAWA,GAAYtf,KAAKuf,oBAAoBxW,EAAMC,GAC3DhJ,KAAK+J,OAAS,KACP/J,IACV,CAEDuf,oBAAoBxW,EAAMC,GACtB,MAAMwW,EAASzW,EAAKkB,KACdwV,EAASzW,EAAMiB,KACfyV,EAAa3W,EAAKuW,SAClBK,EAAa3W,EAAMsW,SACnBrV,EAAOjK,KAAKiK,KACZvR,EAAIqQ,EAAKuW,SAAS7mB,OAClBmnB,EAAe,IAAIrjB,aAAa7D,GACtC,IAAK,IAAIE,EAAI,EAAGA,EAAIF,IAAKE,EACrBgnB,EAAahnB,IAAM4mB,EAASE,EAAW9mB,GAAK6mB,EAASE,EAAW/mB,IAAMqR,EAE1E,OAAO2V,CACV,CAEGZ,aACA,OAAsB,IAAfhf,KAAK6d,KACf,CAEDE,SACI,GAAI/d,KAAKgf,OAAQ,MAAO,CAAChf,MACzB,MAAM+I,EAAO/I,KAAK+I,KACZC,EAAQhJ,KAAKgJ,MACnB,OAAQD,EAAKiW,OAAS,CAACjW,GAAQA,EAAKgV,UAAUhb,OAAOiG,EAAMgW,OAAS,CAAChW,GAASA,EAAM+U,SACvF,CAED8B,cACI,GAAI7f,KAAKgf,OAAQ,MAAO,CAAChf,MACzB,MAAM8f,EAAmB9f,KAAK+I,KAAK8W,cAC7BE,EAAoB/f,KAAKgJ,MAAM6W,cACrC,OAAOC,EAAiB/c,OAAOgd,GAAmBhd,OAAO,CAAC/C,MAC7D;;;;GCjOE,MAAMggB;;;;;;;;;;;;;AAaTjgB,YAAYqd,EAAQ6C,EAAGxlB,EAAStC,UAAW2G,EAAK,KAAM0O,GAAO,GACzDxN,KAAK+K,QAAUtQ,EACfuF,KAAKud,QAAUH,EACfpd,KAAKkgB,GAAKD,EACV,MAAOngB,EAAGlF,GAAKwiB,EAAOziB,MAQtB,OAPAqF,KAAKgG,GAAKlG,EACVE,KAAK+L,GAAKnR,EACNqlB,EAAIngB,IAAGmgB,EAAIngB,GACfE,KAAK8M,YAAc,IAAI3N,WAAWL,GAClCkB,KAAKoe,UAAY,IAAIrjB,MAAM+E,GAAGyX,UAAK9P,GACnCzH,KAAKmgB,mBAAqBngB,KAAKogB,sBAAsBH,GACjDzS,GAAMxN,KAAKwN,KAAKyS,EAAGjgB,KAAKmgB,oBACrBngB,IACV;;;OAKD2d,eACI,MAAMsC,EAAIjgB,KAAKkgB,GACTtC,EAAW5d,KAAKoe,UAChBniB,EAAS,IAAIlB,MAAMklB,GAAG1I,OAAOrc,KAAI,IAAM,IAAIH,QAEjD,OADA6iB,EAAStT,SAAQ,CAACpD,EAAGtO,IAAMqD,EAAOiL,GAAG5N,KAAKV,KACnCqD,CACV;;;;;OAODokB,gBAAgBvV,EAAQwV,GACpB,MAAM/lB,EAAIyF,KAAKud,QACT9iB,EAASuF,KAAK+K,QACpB,IAAInS,EAAIkS,EAAOrS,OAaf,OAZQiP,KAAKI,QACTwY,GACCxb,IACG,MAAMyb,EAAKhmB,EAAES,IAAI8J,GACjB,IAAInM,EAAM,EACV,IAAK,IAAI0C,EAAI,EAAGA,EAAIzC,IAAKyC,EACrB1C,GAAO8B,EAAO8lB,EAAIzV,EAAOzP,IAE7B,OAAO1C,CAAG,GAEd,OAEKsQ,MAAMb,OAClB,CAEDgY,sBAAsBH,GAClB,MAAMngB,EAAIE,KAAKgG,GACT9G,EAAac,KAAK8M,YAClBvS,EAAIyF,KAAKud,QACTiD,EAAoB,IAAIzlB,MAAMklB,GAAG1I,OACjCwE,EAAUngB,SAAS,EAAGkE,EAAI,GAC1B2gB,EAAevhB,EAAWyH,YAAc7G,EAAI,GAClD0gB,EAAkB,GAAKjmB,EAAES,IAAIylB,GAC7B,MAAMC,EAAc,CAACD,GACfE,EAAcroB,KAAK+P,OAAOvI,EAAImgB,GAAKA;AACzC,IAAK,IAAIrnB,EAAI,EAAGA,EAAIqnB,IAAKrnB,EAAG;;AAExB,MAAMyO,EAASnI,EAAWkI,OAAO2U,EAAQpF,QAAO7R,IAAgC,GAA3B4b,EAAY9E,QAAQ9W,KAAW6b,GAC9EC,EAAiB5gB,KAAKqgB,gBAAgBG,EAAkBjlB,MAAM,EAAG3C,GAAIyO,GAC3EqZ,EAAYpnB,KAAKsnB,GACjBJ,EAAkB5nB,GAAK2B,EAAES,IAAI4lB,EAChC,CACD,OAAOJ,CACV,CAEDK,WAAWL,GACP,MAAMP,EAAIO,EAAkB/nB,OACtBqH,EAAIE,KAAKgG,GACTpL,EAAIoF,KAAK+L,GACTxR,EAAIyF,KAAKud,QACT9iB,EAASuF,KAAK+K,QACd6S,EAAW5d,KAAKoe,UACtB,IAAI0C,GAAmB;iCAEvB;IAAK,IAAIloB,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAMmoB,EAAKxmB,EAAES,IAAIpC,GACjB,IAAIic,EAAWvJ,IACX0V,EAAc,KAClB,IAAK,IAAI3lB,EAAI,EAAGA,EAAI4kB,IAAK5kB,EAAG,CACxB,IAAIyJ,EAAIrK,EAAO+lB,EAAkBnlB,GAAI0lB,GACjCjc,EAAI+P,IACJA,EAAW/P,EACXkc,EAAc3lB,EAErB,CACGuiB,EAAShlB,KAAOooB,IAChBF,GAAmB,GAEvBlD,EAAShlB,GAAKooB,CACjB;;+BAGD;IAAK,IAAIpoB,EAAI,EAAGA,EAAIqnB,IAAKrnB,EAAG,CACxB,MAAM0mB,EAAWkB,EAAkB5nB,GACnC,IAAK,IAAIyC,EAAI,EAAGA,EAAIT,IAAKS,EACrBikB,EAASjkB,GAAK,CAErB;mBAID;OAFA2E,KAAKihB,kBAAkBT,GAEhB,CACHM,iBAAoBA,EACpBN,kBAAqBA,EAE5B,CAEDS,kBAAkBT,GACd,MAAMP,EAAIO,EAAkB/nB,OACtBqH,EAAIE,KAAKgG,GACTpL,EAAIoF,KAAK+L,GACTxR,EAAIyF,KAAKud,QACTK,EAAW5d,KAAKoe,UAChB8C,EAAkB,IAAInmB,MAAMklB,GAAG1I,KAAK,GAE1C,IAAK,IAAI3e,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAMmoB,EAAKxmB,EAAES,IAAIpC,GACXuoB,EAAKvD,EAAShlB,GACpBsoB,EAAgBC,KAChB,MAAM7B,EAAWkB,EAAkBW,GACnC,IAAK,IAAI9lB,EAAI,EAAGA,EAAIT,IAAKS,EACrBikB,EAASjkB,IAAM0lB,EAAG1lB,EAEzB,CACD,IAAK,IAAIzC,EAAI,EAAGA,EAAIqnB,IAAKrnB,EAAG,CACxB,MAAMF,EAAIwoB,EAAgBtoB,GAC1B4nB,EAAkB5nB,GAAK4nB,EAAkB5nB,GAAGsC,KAAIgM,GAAKA,EAAIxO,GAC5D,CAEJ;;;;OAMD8U,KAAKyS,EAAGO,GACCP,IAAGA,EAAIjgB,KAAKkgB,IACZM,IAAmBA,EAAoBxgB,KAAKogB,sBAAsBH,IACvE,IAAIa,GAAmB,EACvB,EAAG,CACC,MAAMM,EAAmBphB,KAAK6gB,WAAWL,GACzCA,EAAoBY,EAAiBZ,kBACrCM,EAAmBM,EAAiBN,gBACvC,OAAQA,EACZ;;;;GCnKE,MAAMO;;;;;;;;;;;;;;AAcTthB,YAAYqd,EAAQ6C,EAAG7L,EAAS,KAAM3Z,EAAStC,UAAW2G,EAAK,MAC3DkB,KAAK+K,QAAUtQ,EACfuF,KAAKud,QAAUH,EACfpd,KAAKshB,GAAKthB,KAAKud,QAAQ3d,UACvBI,KAAKkgB,GAAKD,EACV,MAAOngB,EAAGlF,GAAKwiB,EAAOziB,MAkBtB,OAjBAqF,KAAKgG,GAAKlG,EACVE,KAAK+L,GAAKnR,EACVoF,KAAKuhB,UAAYnN,GAAY,GAAK9b,KAAKkpB,MAAM1hB,GAC7CE,KAAKme,iBAAmB,IAAI3iB,OAAOsE,EAAGA,EAAG;;;;;;;;AAQrCmgB,EAAIngB,IAAGmgB,EAAIngB,GACfE,KAAK8M,YAAc,IAAI3N,WAAWL,GAClCkB,KAAKoe,UAAY,IAAIrjB,MAAM+E,GAAGyX,UAAK9P,GACnCzH,KAAKyhB,iBAAmBzhB,KAAK0hB,oBAAoBzB;;AAEjDjgB,KAAK+M,iBAAkB,EAChB/M,IACV;;;OAKD2d,eACI,MAAMsC,EAAIjgB,KAAKkgB,GACT3lB,EAAIyF,KAAKshB,GACVthB,KAAK+M,iBACN/M,KAAKwN,KAAKyS,EAAGjgB,KAAKyhB,kBAEtB,MAAMxlB,EAAS,IAAIlB,MAAMklB,GAAG1I,OAAOrc,KAAI,IAAM,IAAIH,QAKjD,OAJAR,EAAE+P,SAAQ,CAACqX,EAAKtmB,KACZY,EAAO+D,KAAK4hB,gBAAgBD,EAAKtmB,GAAGwmB,eAAevoB,KAAK+B,EAAE,IAE9DY,EAAO6lB,QAAU9hB,KAAKyhB,iBACfxlB,CACV,CAEDyR,kBACI,MAAM0G,EAAWpU,KAAKuhB,gBAChBvhB,KAAK2d,eACX,IAAIoE,GAAS,EACTnpB,EAAI,EACR,GACImpB,EAAS/hB,KAAK6gB,mBACR7gB,KAAK2d,sBACLoE,KAAYnpB,EAAIwb,EAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA8DDyM,aACI,MAAMtmB,EAAIyF,KAAKshB,GACTrB,EAAIjgB,KAAKkgB,GACT4B,EAAU9hB,KAAKyhB,iBACfO,EAAQznB,EAAEW,KAAI,CAAC+mB,EAAKC,IAAMliB,KAAK4hB,gBAAgBK,EAAKC,KAEpDC,EAAU,IAAIpnB,MAAMklB,GAAG1I,KAAK,GAC5B6K,EAAK,IAAIrnB,MAAMklB,GAAG1I,KAAK;;AA+B7B,GA9BAhd,EAAE+P,SAAQ,CAACqX,EAAKtmB,KACZ,GAAIymB,EAAQO,WAAU9hB,GAAKA,IAAMlF,IAAK,EAAG,CACrC,MAAMinB,EAAMN,EAAM3mB,GAAGknB,iBACfC,EAAU,IAAIznB,MAAMklB,GAAG1I,MAAM+K;;AACnC/nB,EAAE+P,SAAQ,CAAC2X,EAAKC,KACZ,GAAI7mB,IAAM6mB,EAAG,OACb,MAAMO,EAAOziB,KAAK0iB,cAAcR,EAAG7mB,EAAG4mB,EAAKN,IACpCE,cAAiBnpB,EAAG6pB,iBAAoBI,EAAKC,gBAAmBC,GAAOb,EAAME;;;AAGpF;AAFAM,EAAQ9pB,IAAMJ,KAAK6K,IAAIsf,EAAMI,GAAOF,EAEhCF,EAAOE;;AAEP,IAAK,IAAI/pB,EAAI,EAAGA,EAAIqnB,IAAKrnB,EACjBA,IAAMF,IAAG8pB,EAAQ5pB,IAAM6pB,EAAOE,EAEzC;;AAGLH,EACKtnB,KAAI,CAAC4J,EAAGlM,IAAM,CAACkM,EAAGlM,KAClB+d,QAAO,EAAE7R,EAAGlM,KAAOkM,EAAIqd,EAAQvpB,KAC/B0R,SAAQ,EAAExF,EAAGlM,MACNkM,EAAIqd,EAAQvpB,KACZupB,EAAQvpB,GAAKkM,EACbsd,EAAGxpB,GAAKyC,EACX,GAEZ,KAGD8H,IAAIgf,IAAY,EAAG,OAAO;2BAG9B;KAAOhf,IAAIgf,GAAW,GAAG;;AAErB,MAAMvpB,EAAIupB,EACLjnB,KAAI,CAAC4J,EAAGlM,IAAM,CAACkM,EAAGlM,KAClB0C,MAAK,EAAElD,IAAKC,KAAOD,EAAIC,IAAG,GAAG,GACY,GAA1CypB,EAAQnL,QAAOpW,GAAKA,GAAK6hB,EAAGxpB,KAAIH,SAChCqpB,EAAQlpB,GAAKwpB,EAAGxpB;;AAGpBupB,EAAQvpB,GAAK;;AAEbupB,EACKjnB,KAAI,CAAConB,EAAKjnB,IAAM,CAACinB,EAAKjnB,KACtBsb,QAAO,EAAE2L,KAASA,EAAM,IACxBhY,SAAQ,EAAE9J,EAAGnF,MACV,MAAMsmB,EAAMpnB,EAAEc,GACd,IAAI1C,EAAM,EACV4B,EAAE+P,SAAQ,CAAC2X,EAAKC,KACRJ,EAAQO,WAAU9hB,GAAKA,GAAKlF,GAAKkF,GAAK2hB,KAAM,GAC5CtpB,GAAKyC,IACL2mB,EAAME,GAAGL,gBAAkBC,EAAQzmB,GACnC1C,GAAQL,KAAK6K,IAAInD,KAAK0iB,cAAcR,EAAG7mB,EAAG4mB,EAAKN,GAAMK,EAAME,GAAGU,iBAAmBZ,EAAME,GAAGK,iBAE1F5pB,GAAQL,KAAK6K,IAAInD,KAAK0iB,cAAcR,EAAG7mB,EAAG4mB,EAAKN,GAAOK,EAAME,GAAGK,iBAAkB,GACpF,IAELJ,EAAQ9mB,GAAK1C,CAAG,GAE3B,CAED,OADAqH,KAAKyhB,iBAAmBK,GACjB,CACV,CAEDY,cAAc9pB,EAAGyC,EAAG+a,EAAI,KAAMuL,EAAI,MAC9B,GAAI/oB,IAAMyC,EAAG,OAAO,EACpB,MAAMT,EAAIoF,KAAKme,iBACT5jB,EAAIyF,KAAKshB,GACT7mB,EAASuF,KAAK+K,QACpB,IAAIoR,EAAOvhB,EAAE+C,MAAM/E,EAAGyC,GAMtB,OALa,IAAT8gB,IACAA,EAAO1hB,EAAO2b,GAAO7b,EAAE3B,GAAI+oB,GAAOpnB,EAAEc,IACpCT,EAAEe,UAAU/C,EAAGyC,EAAG8gB,GAClBvhB,EAAEe,UAAUN,EAAGzC,EAAGujB,IAEfA,CACV,CAEDyF,gBAAgBD,EAAKtmB,GACjB,MAAMymB,EAAU9hB,KAAKyhB,iBACflnB,EAAIyF,KAAKshB,IACRwB,EAASC,GAAUjB,EACrB5mB,KAAI,CAACqF,EAAG3H,KACL,MAAMoqB,EAAMzoB,EAAEgG,GACd,MAAO,CAACP,KAAK0iB,cAAcrnB,EAAGkF,EAAGohB,EAAKqB,GAAMpqB,EAAE,IAEjD0C,MAAK,CAAC2nB,EAAIC,IAAOD,EAAG,GAAKC,EAAG,KAEjC,MAAO,CACHX,iBAAoBO,EAAQ,GAC5BjB,cAAiBiB,EAAQ,GACzBF,gBAAmBG,EAAO,GAC1BI,aAAgBJ,EAAO,GAE9B;;;;OAMDvV,KAAKyS,EAAGmD,GACCnD,IAAGA,EAAIjgB,KAAKkgB,IACZkD,IAAiBA,EAAkBpjB,KAAK0hB,oBAAoBzB,IACjE,MAAM7L,EAAWpU,KAAKuhB,UACtB,IAAIQ,GAAS,EACTnpB,EAAI,EACR,GACImpB,EAAS/hB,KAAK6gB,oBACRkB,KAAYnpB,EAAIwb,GAC1B,OAAOpU,IACV;;;;;OAOD0hB,oBAAoBzB,GAChB,MAAMngB,EAAIE,KAAKgG,GACTzL,EAAIyF,KAAKshB,GACTvF,EAAUngB,SAAS,EAAGkE,EAAI,GAC1BZ,EAAac,KAAK8M,YAClBpU,EAAIJ,KAAK6K,IAAIrD,EAAG,GAAKxH,KAAK+qB,KAAK/qB,KAAKC,KAAKuH,KACzCwjB,EAAK,IAAIvoB,MAAMrC,GAAG6e,KAAKjM,KACvBwW,EAAU;;AAEhB,IAAIyB,EAAMjY,IACNkY,EAAItkB,EAAWkI,OAAO2U,EAASrjB,GACnC,IAAK,IAAI2C,EAAI,EAAGA,EAAI3C,IAAK2C,EAAG,CACxB,MAAMooB,EAAMD,EAAEnoB,GACRsmB,EAAMpnB,EAAEkpB,GACd,IAAK,IAAIvB,EAAI,EAAGA,EAAIxpB,IAAKwpB,EAAG,CACxB,GAAIA,IAAM7mB,EAAG,SACb,MAAM4mB,EAAM1nB,EAAEipB,EAAEtB,IAChBoB,EAAGjoB,IAAM2E,KAAK0iB,cAAcrnB,EAAG6mB,EAAGP,EAAKM,EAC1C,CACGqB,EAAGjoB,GAAKkoB,IACRA,EAAMD,EAAGjoB;AACTymB,EAAQxoB,KAAKmqB,GAEpB;gBAED;IAAK,IAAI7qB,EAAI,EAAGA,EAAIqnB,IAAKrnB,EAAG,CACxB,IAAIupB,EAAU7W,IACdkY,EAAItkB,EAAWkI,OAAO2U,EAAQpF,QAAOhO,GAASmZ,EAAQO,WAAUvd,GAAKA,IAAM6D,IAAS,IAAIjQ,GACxF,IAAK,IAAI2C,EAAI,EAAGA,EAAI3C,IAAK2C,EAAG,CACxB,IAAImnB,EAAU,EACd,MAAMiB,EAAMD,EAAEnoB,GACRsmB,EAAMpnB,EAAEkpB,GACd,IAAK,IAAIvB,EAAI,EAAGA,EAAIxpB,IAAKwpB,EAAG,CACxB,GAAIA,IAAM7mB,EAAG,SACb,MAAMqoB,EAAMF,EAAEtB,GACRD,EAAM1nB,EAAEmpB,GACd,IAAIC,EAAQ3jB,KAAK0iB,cAAce,EAAKC,EAAK/B,EAAKM,GAAO9e,IAAI2e,EAAQ5mB,KAAIqF,GAAKP,KAAK0iB,cAAcgB,EAAKnjB,EAAG0hB,MACjG0B,EAAQ,IACRnB,GAAoBmB,EAE3B;iBAEGnB;EAAUL,IACVA,EAAUK,EACVV,EAAQxoB,KAAKmqB,GAEpB,CACDF,GAAOpB,CACV,CACD,OAAOL,EAAQvmB,MAAM,EAAG0kB,EAC3B;;;;GClTE,MAAM2D;;;;;;;;;;;;;;;AAeT7jB,YAAYqd,EAAQzL,EAASkS,EAAYppB,EAAStC,WAU9C,OATA6H,KAAKud,QAAUH,EACfpd,KAAK8jB,SAAWnS,EAChB3R,KAAK+jB,YAAcF,EACnB7jB,KAAK+K,QAAUtQ,EAEfuF,KAAKgkB,cAAgB,GACrBhkB,KAAKoe,UAAY,GACjBpe,KAAKikB,IAAM,IAAIlpB,MAAMqiB,EAAOziB,MAAM,IAAI4c,OACtCvX,KAAKwN,OACExN,IACV;;;OAKDwN,OACI,MAAM0W,EAAelkB,KAAKgkB,cACpB5G,EAASpd,KAAKud,QACdzd,EAAIsd,EAAOziB,MAAM,GACjBwpB,EAAKnkB,KAAKikB,IACVrG,EAAW5d,KAAKoe,UACtB,IAAIgG,EAAgBpkB,KAAKqkB,eAAiB,EAE1C,IAAK,IAAIzrB,EAAI,EAAGA,EAAIkH,IAAKlH,EACrBurB,EAAGvrB,GAAK,CACJwP,QAAWgV,EAAOpiB,IAAIpC,GACtB+P,MAAS/P,EACT0rB,2BAAyB7c,EACzB8c,WAAa,GAGrB,IAAK,MAAMlZ,KAAK8Y,EACZ,IAAI9Y,EAAEkZ,YACNlZ,EAAEwD,UAAY7O,KAAKwkB,eAAenZ,GAClCA,EAAEkZ,WAAY,EACd3G,EAAStkB,KAAK,CAAC+R,EAAE1C,QACjByb,EAAgBxG,EAASnlB,OAAS,EAClCyrB,EAAa5qB,KAAK+R,GACY5D,MAA1BzH,KAAKykB,eAAepZ,IAAiB,CACrC,MAAMqZ,EAAQ,IAAIhd,KAAK,MAAM5C,GAAKA,EAAEwf,uBAAuB,OAC3DtkB,KAAK2kB,QAAQtZ,EAAGqZ,GAChB1kB,KAAK4kB,gBAAgBF,EAAO9G,EAASwG,GACxC,CAEL,OAAOpkB,IACV;;;;;;OAQDwkB,eAAenZ,GACX,GAAI,cAAeA,EAAG,OAAOA,EAAEwD,UAC/B,MAAMsV,EAAKnkB,KAAKikB,IACVxpB,EAASuF,KAAK+K,QACd4G,EAAU3R,KAAK8jB,SACfjV,EAAY,GAClB,IAAK,MAAMzR,KAAK+mB,EACR/mB,EAAEuL,OAAS0C,EAAE1C,OACblO,EAAO4Q,EAAEjD,QAAShL,EAAEgL,SAAWuJ,GAC/B9C,EAAUvV,KAAK8D,GAGvB,OAAOyR,CACV;;;;;;OAQD4V,eAAepZ,GACX,MAAMwY,EAAa7jB,KAAK+jB,YAClBtpB,EAASuF,KAAK+K,QACpB,KAAIM,EAAEwD,WAAaxD,EAAEwD,UAAUpW,QAAUorB,GAGzC,OAAOppB,EAAO4Q,EAAEjD,QAASiD,EAAEwD,UAAUgV,GAAYzb,QACpD;;;;;;OAQDuc,QAAQtZ,EAAGqZ,GACP,MAAMjqB,EAASuF,KAAK+K,QACd8Z,EAAgB7kB,KAAKykB,eAAepZ,GACpCwD,EAAY7O,KAAKwkB,eAAenZ;AACtC,IAAK,MAAMjO,KAAKyR,EAAW,CACvB,GAAIzR,EAAEmnB,UAAW,SACjB,MAAMO,EAA4BxsB,KAAKiB,IAAIsrB,EAAepqB,EAAO4Q,EAAEjD,QAAShL,EAAEgL;kEAE1Esc;EAAMpb,WAAW+Y,WAAUvd,GAAKA,EAAEsD,SAAWhL,IAAK,GAClDA,EAAEknB,sBAAwBQ,EAC1BJ,EAAMprB,KAAK8D;AAEP0nB,EAA4B1nB,EAAEknB,wBAC9BlnB,EAAEknB,sBAAwBQ,EAC1BJ,EAAQhd,KAAKI,QAAQ4c,EAAMjkB,QAAQqE,GAAKA,EAAEwf,uBAAuB,OAG5E,CACJ;;;;;;OAQDM,gBAAgBF,EAAOK,GACnB,MAAMb,EAAelkB,KAAKgkB,cAC1B,MAAQU,EAAMnb,OAAO,CACjB,MAAMnM,EAAIsnB,EAAMzb,MAAMb,QACtBhL,EAAEyR,UAAY7O,KAAKwkB,eAAepnB,GAClCA,EAAEmnB,WAAY,EACdQ,EAAQzrB,KAAK8D,EAAEuL,OACfub,EAAa5qB,KAAK8D,GACYqK,MAA1BzH,KAAKykB,eAAernB,KACpB4C,KAAK2kB,QAAQvnB,EAAGsnB,GAChB1kB,KAAK4kB,gBAAgBF,EAAOK,GAEnC,CACJ;;;;OAMDpH,eACI,MAAMC,EAAW,GACXoH,EAAW,GACXnB,EAAa7jB,KAAK+jB,YACxB,IAAK,MAAMgB,KAAW/kB,KAAKoe,UACnB2G,EAAQtsB,OAASorB,EACjBmB,EAAS1rB,QAAQyrB,GAEjBnH,EAAStkB,KAAKyrB,GAItB,OADAnH,EAAStkB,KAAK0rB,GACPpH,CACV;;;OAKDqH,0BACI,MAAMnlB,EAAIE,KAAKud,QAAQ5iB,MAAM,GACvBsB,EAAS,IAAIlB,MAAM+E,GAAGyX,OACtBqG,EAAW5d,KAAK2d,eACtB,IAAK,IAAI/kB,EAAI,EAAGF,EAAIklB,EAASnlB,OAAQG,EAAIF,IAAKE,EAAG,CAC7C,MAAMmsB,EAAUnH,EAAShlB,GACzB,IAAK,MAAM+P,KAASoc,EAChB9oB,EAAO0M,GAAU/P,EAAIF,EAAI,EAAKE,GAAK,CAE1C,CACD,OAAOqD,CACV;;;;;GC/KE,MAAMipB,YAAY5Y;;;;;;;;;;;;;;;;;AAiBrBvM,YAAYiD,EAAGwJ,GAKX,OAJAqB,MAAM7K,EAAG,CAAE6L,eAAWpH,EAAW0d,oBAAgB1d,EAAW3C,EAAG,EAAGrK,OAAQtC,UAAW2G,KAAM,MAAQ0N,GACnGxM,KAAKgN,UAAU,YAAa1U,KAAK6K,IAAIqJ,EAAWqC,WAAavW,KAAKiB,IAAIjB,KAAK+P,MAAMrI,KAAKgG,GAAK,IAAK,GAAIhG,KAAKgG,GAAK,IAC9GhG,KAAKgN,UAAU,iBAAkB1U,KAAK6K,IAAIqJ,EAAW2Y,gBAAkB7sB,KAAK+qB,KAAK/qB,KAAKC,KAAKyH,KAAKgG,KAAMhG,KAAKgG,GAAK,IAChHhG,KAAK+M,iBAAkB,EAChB/M,IACV;;;;;;OAQDwN,KAAKlB,EAAK2B,IAAKmX,EAAgB,CAAE,EAAEvZ,EAAMtB,UACrC,GAAIvK,KAAK+M,gBAAiB,OAAO/M,KACjC,MAAMgD,EAAIhD,KAAKgD,EACTlD,EAAIE,KAAKgG,GACTia,EAAIjgB,KAAKgN,UAAU,aACnBlI,EAAI9E,KAAKgN,UAAU,KACnBlO,EAAOkB,KAAKgN,UAAU,QACtBvS,EAASuF,KAAKgN,UAAU,UAC9BoY,EAAgB1Y,OAAOC,OAAO,CAAC7H,IAAGrK,SAAQqE,QAAQsmB,GAClD,MAAMC,EAAKrlB,KAAKgN,UAAU,kBACpBmY,EAAiB,IAAI9D,SAASre,EAAGqiB,EAAI,KAAM5qB,GAAQkjB,eAAemE,QAClEtf,EAAI,IAAIhH,OAAO6pB,EAAIvlB,EAAG,SAC5BqlB,EAAe7a,SAAQ,CAACgb,EAAK1sB,KACzB4J,EAAE7G,UAAU/C,EAAG0sB,EAAK,EAAE,IAE1B,MAAMC,EAAM,IAAIjZ,EAAG9Q,OAAOP,KAAKkqB,EAAejqB,KAAKoqB,GAAQtiB,EAAEhI,IAAIsqB,MAAQF,GAAehY,YAElFoY,EAAKxiB,EAAEpD,UACPkW,EAAM,IAAIjK,EAAI2Z,EAAI/qB,GAClByK,EAAI,IAAI1J,OAAOsE,EAAGA,EAAG,KACrBkF,GAAS,EAAIib,EACnBuF,EAAGlb,SAAQ,CAAC8L,EAAKxd,KACb,IAAK,MAAQ+P,MAAOtN,KAAOya,EAAInK,OAAOyK,EAAK6J,GAAG7W,UACtCxQ,IAAMyC,GACV6J,EAAEvJ,UAAU/C,EAAGyC,EAAG2J,EACrB,IAEL,MAAMzK,EAAI2K,EAAEnC,OAAOP,EAAG,YAGhBnK,EADI,IAAImD,OAAOsE,EAAGgF,EAAG,SACf/B,OAAOwiB,EAAK,YAKxB,OAHAvlB,KAAKshB,GAAK/mB,EACVyF,KAAK8X,GAAKzf,EACV2H,KAAK+M,iBAAkB,EAChB/M,IACV;;;;OAMDoN,YACIpN,KAAKqN,aACL,MAAM9S,EAAIyF,KAAKshB,GACTjpB,EAAI2H,KAAK8X,GACT2N,EAAMlrB,EAAEmI,SAASnI,GACjBmrB,EAAMnrB,EAAEmI,SAASrK,GAEvB,OADA2H,KAAKyN,EAAIjS,OAAOyV,SAASwU,EAAKC,EAAK1lB,KAAK8M,aACjC9M,KAAKsN,UACf;;;;;;GCjFE,MAAMqY,gBAAgBrZ;;;;;;;;;;;;;AAazBvM,YAAYiD,EAAGwJ,GAIX,OAHAqB,MAAM7K,EAAG,CAAEvI,OAAQtC,UAAW2G,KAAM,MAAQ0N,IAC3CxM,KAAKgG,GAAIhG,KAAK+L,IAAM/L,KAAKgD,EAAErI,MAC5BqF,KAAKme,iBAAmB,IAAI3iB,OAAOwE,KAAKgG,GAAIhG,KAAKgG,GAAI,GAC9ChG,IACV;;;OAKD4lB,uBAAuBhtB,EAAGyC,EAAGZ,GACzB,MAAMG,EAAIoF,KAAKme,iBACTnb,EAAIhD,KAAKgD,EACT6iB,EAAOjrB,EAAE+C,MAAM/E,EAAGyC,GACxB,GAAa,IAATwqB,EAAY,CACZ,IAAInqB,EAAOjB,EAAOuI,EAAEhI,IAAIpC,GAAIoK,EAAEhI,IAAIK,IAGlC,OAFAT,EAAEe,UAAU/C,EAAGyC,EAAGK,GAClBd,EAAEe,UAAUN,EAAGzC,EAAG8C,GACXA,CACV,CACD,OAAOmqB,CACV;;;;;;OAQDC,4BAA4BrrB,EAAStC,WACjC,MAAM2H,EAAIE,KAAKgG,GACThD,EAAI,IAAIhD,KAAKgD,GAEnB,IAAI+iB,EAAe,IAAIvc,YAAYxG,GACnC,MAAMgjB,EAAI,GACV,IAAIC,EAAI,GACR,IAAK,IAAIrtB,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAIyC,EAAIzC,EAAI,EAAGyC,EAAIyE,IAAKzE,EACzB4qB,EAAE3sB,KAAK,CAACV,EAAGyC,EAAG2E,KAAK4lB,uBAAuBhtB,EAAGyC,EAAGZ,KAGxDwrB,EAAIA,EAAE3qB,MAAK,CAAClD,EAAGC,IAAMD,EAAE,GAAKC,EAAE,KAE9B,IAAK,MAAO0F,EAAG5B,EAAG6U,KAAMiV,EAAG,CACvB,MAAMC,EAAQH,EAAa7b,KAAKlH,EAAEjF,IAC5BooB,EAAQJ,EAAa7b,KAAKlH,EAAE7G,IAC9B+pB,IAAUC,IACVH,EAAE1sB,KAAK,CAACyE,EAAG5B,EAAG6U,IACd+U,EAAa5b,MAAM+b,EAAOC,GAEjC,CAED,OAAOH,EAAE1qB,MAAK,CAAClD,EAAGC,IAAMD,EAAE,GAAKC,EAAE,IACpC;;;OAKDmV,OACI,MAAM/S,OAAEA,GAAUuF,KAAKyM,YAIvB,OAHAzM,KAAKyN,EAAI,IAAIjS,OAAOwE,KAAKgG,GAAI,EAAG,GAChChG,KAAKomB,MAAQpmB,KAAK8lB,4BAA4BrrB,GAC9CuF,KAAK+M,iBAAkB,EAChB/M,IACV;;;;;;;;OAUDqmB,cAAcC,EAAIC,IAAMC,EAAIC,IAAMC,EAAIC,IAClC,OAAQH,EAAKF,IAAOK,EAAKJ,IAAOE,EAAKF,IAAOG,EAAKJ,IAAO,CAC3D;;;;;;;OASDM,OAAOpD,GACH,MAAM1Y,EAAS0Y,EAAEloB,MAAK,EAAEurB,EAAIC,IAAMC,EAAIC,KAAQF,EAAKE,GAAMH,EAAKE,IACxDjnB,EAAIgL,EAAOrS,OACjB,GAAIqH,GAAK,EAAG,OAAOgL,EAEnB,MAAMmc,EAAQ,GACd,IAAK,IAAIruB,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,KAAOquB,EAAMxuB,QAAU,GAAKuH,KAAKqmB,aAAaY,EAAMA,EAAMxuB,OAAS,GAAIwuB,EAAMA,EAAMxuB,OAAS,GAAIqS,EAAOlS,KACnGquB,EAAMhe,MAEVge,EAAM3tB,KAAKwR,EAAOlS,GACrB,CACD,MAAMsuB,EAAQ,GACd,IAAK,IAAItuB,EAAIkH,EAAI,EAAGlH,GAAK,IAAKA,EAAG,CAC7B,KAAOsuB,EAAMzuB,QAAU,GAAKuH,KAAKqmB,aAAaa,EAAMA,EAAMzuB,OAAS,GAAIyuB,EAAMA,EAAMzuB,OAAS,GAAIqS,EAAOlS,KACnGsuB,EAAMje,MAEVie,EAAM5tB,KAAKwR,EAAOlS,GACrB,CAGD,OAFAsuB,EAAMje,MACNge,EAAMhe,MACCge,EAAMlkB,OAAOmkB,EACvB;;;;;;;OASDC,aAAaC,EAAKC,IAAOC,EAAKC,IAC1B,MAAM7uB,EAAIP,UAAU,CAACivB,EAAKC,GAAM,CAACC,EAAKC,IACtC,GAAU,IAAN7uB,EACA,MAAO,CACH8uB,IAAK,EACLC,IAAK,GAEb,MAAMC,EAAM,EAAEJ,EAAMF,GAAO1uB,GAAI6uB,EAAMF,GAAO3uB,GACtC+uB,EAAMC,EAAI,GAChB,IAAIF,EAAMlvB,KAAKC,KAAK,EAAIkvB,EAAMA,GAE9B,OADAD,EAAME,EAAI,IAAM,GAAKF,EAAMA,EACpB,CACHA,IAAKA,EACLC,IAAKA,EAEZ;;;;;;OAQDE,aAAaC,EAAMvc,EAAGwc,GAClB,IACIC,EAcAC,EACAC,EAhBA7rB,GAAK,EAET,IAAK,IAAIvD,EAAI,EAAGA,EAAIgvB,EAAKnvB,SAAUG,EAAG,CAClC,MAAMkM,EAAI3M,UAAUyvB,EAAKhvB,GAAIyS,KAClB,IAAPlP,GAII2rB,EAAKhjB,KAHTgjB,EAAKhjB,EACL3I,EAAIvD,EAOX,CAIGivB,GACAE,EAAKH,EAAKzrB,GACV6rB,EAAKJ,GAAMzrB,EAAI,GAAKyrB,EAAKnvB,UAEhB,GAAL0D,IAAQA,EAAIyrB,EAAKnvB,OAAS,GAC9BsvB,EAAKH,EAAKzrB,GACV6rB,EAAKJ,GAAMzrB,EAAI,GAAKyrB,EAAKnvB,SAG7B,MAAMwvB,EAAiB,CACnBC,IAAKN,EAAKzrB,GAAG,GACbgsB,IAAKP,EAAKzrB,GAAG,IAGjB,GAAIyrB,EAAKnvB,QAAU,EAAG,CAClB,MAAM+uB,IAAEA,EAAGC,IAAEA,GAAQznB,KAAKmnB,YAAYY,EAAIC,GAC1CC,EAAeT,IAAMA,EACrBS,EAAeR,IAAMA,CACjC,MACYQ,EAAeT,IAAM,EACrBS,EAAeR,IAAM,EAGzB,OAAOQ,CACV;;;;;OAODG,aAAaC,EAAIC,IAAKJ,GAAEA,EAAEC,GAAEA,EAAEX,IAAEA,EAAGC,IAAEA,IACjC,IAAI7tB,EAAIyuB,EAAKH,EACTruB,EAAIyuB,EAAKH,EAGb,MAAO,CAFEvuB,EAAI6tB,EAAM5tB,EAAI2tB,EACd5tB,EAAI4tB,EAAM3tB,EAAI4tB,EAE1B;;;;;;;OASDc,sBAAsB/lB,EAAG3F,EAAG2rB,GACxB,MAAM1oB,EAAI0C,EAAE/J,OACZ,IAAK,IAAIG,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,MAAMsO,EAAI1E,EAAE5J,IACL6vB,EAAIC,GAAM1oB,KAAKooB,YAAYlhB,EAAGrK,GACrCqK,EAAE,GAAKuhB,EACPvhB,EAAE,GAAKwhB,EAAKF,CACf,CACJ;;;;;;OAQDG,mBAAmB5qB,EAAG5B,EAAG6U,GACrB,MAAM4X,EAAW,IAAI7qB,EAAE+L,eAAeE,UAChC6e,EAAW,IAAI1sB,EAAE2N,eAAeE,UAEhC8e,EAAS9oB,KAAK4mB,OAAOgC,GACrBG,EAAS/oB,KAAK4mB,OAAOiC,GAErBG,EAAMhpB,KAAK2nB,aAAamB,EAAQ/qB,GAAG,GACnCkrB,EAAMjpB,KAAK2nB,aAAaoB,EAAQ5sB,GAAG,GAEzC6D,KAAKuoB,sBAAsBK,EAAUI,EAAK,GAC1ChpB,KAAKuoB,sBAAsBM,EAAUI,EAAKjY,EAC7C;;;OAKD5D,YACSpN,KAAK+M,iBAAiB/M,KAAKwN,OAChC,MAAM0b,EAAOlpB,KAAKomB,MACZ3Y,EAAIzN,KAAKyN,EAAE7N,UACXupB,EAAa,IAAI3f,YACnBiE,EAAEvS,KAAI,CAACrB,EAAGjB,KACNiB,EAAEjB,EAAIA,EACCiB,MAIf,IAAK,MAAOkE,EAAG5B,EAAG6U,KAAMkY,EAAM,CAC1B,MAAME,EAAcD,EAAWjf,KAAKuD,EAAE1P,IAChCsrB,EAAcF,EAAWjf,KAAKuD,EAAEtR,IAClCitB,IAAgBC,IACpBrpB,KAAK2oB,mBAAmBS,EAAaC,EAAarY,GAClDmY,EAAWhf,MAAMif,EAAaC,GACjC,CACD,OAAOrpB,KAAKsN,UACf,CAEDC,aACSvN,KAAK+M,iBAAiB/M,KAAKwN,OAChC,MAAM0b,EAAOlpB,KAAKomB,MACZ3Y,EAAIzN,KAAKyN,EAAE7N,UACXupB,EAAa,IAAI3f,YACnBiE,EAAEvS,KAAI,CAACrB,EAAGjB,KACNiB,EAAEjB,EAAIA,EACCiB,MAIf,IAAK,MAAOkE,EAAG5B,EAAG6U,KAAMkY,EAAM,CAC1B,MAAME,EAAcD,EAAWjf,KAAKuD,EAAE1P,IAChCsrB,EAAcF,EAAWjf,KAAKuD,EAAEtR,IAClCitB,IAAgBC,IACpBrpB,KAAK2oB,mBAAmBS,EAAaC,EAAarY,GAClDmY,EAAWhf,MAAMif,EAAaC,SACxBrpB,KAAKsN,WACd,CACD,OAAOtN,KAAKsN,UACf;;;;;GClSE,MAAMgc,eAAehd;;;;;;;;;;;;;;;;AAgBxBvM,YAAYiD,EAAGwJ,GAEX,OADAqB,MAAM7K,EAAG,CAAEumB,MAAO,GAAKzkB,EAAG,EAAGrK,OAAQtC,UAAW2G,KAAM,KAAM0qB,QAAS,SAAUC,gBAAiB,CAAE,GAAIjd,GAC/FxM,IACV;;;;OAMDwN,OACI,MAAM1N,EAAIE,KAAKgD,EAAErI,MAAM,IACjBmK,EAAEA,EAACrK,OAAEA,EAAQ+uB,QAASA,EAASC,gBAAiBrE,GAAkBplB,KAAKyM,YAC7E,GAAgB,WAAZ+c,EAAsB,CACtB,MAAMtqB,EAAac,KAAK8M,YACxB9M,KAAKyN,EAAI,IAAIjS,OAAOsE,EAAGgF,GAAG,IAAM5F,EAAWE,QACvD,KAAe,KAAI,CAAC,MAAO,OAAOsqB,SAASF,GAG/B,MAAM,IAAIltB,MAAM,uDAFhB0D,KAAKyN,EAAIjS,OAAOP,KAAgB,OAAXuuB,EAAmB5b,IAAIR,UAAUpN,KAAKgD,EAAGoiB,GAAiBnX,IAAIb,UAAUpN,KAAKgD,EAAGoiB,GAGxG,CAED,OADAplB,KAAKnF,gBAA4B,eAAVJ,EAA0Be,OAAOP,KAAK+E,KAAKgD,GAAKnI,gBAAgBmF,KAAKgD,EAAGvI,GACxFuF,IACV;;;;;OAODoN,UAAUgH,EAAW,KACZpU,KAAK+M,iBAAiB/M,KAAKwN,OAChC,IAAK,IAAInS,EAAI,EAAGA,EAAI+Y,IAAY/Y,EAC5B2E,KAAK2pB,QAET,OAAO3pB,KAAKsN,UACf;;;;;OAODC,WAAW6G,EAAW,KACbpU,KAAK+M,iBAAiB/M,KAAKwN,OAEhC,IAAK,IAAInS,EAAI,EAAGA,EAAI+Y,IAAY/Y,EAC5B2E,KAAK2pB,cACC3pB,KAAKsN,WAGf,OAAOtN,KAAKsN,UACf,CAEDqc,QACI,MAAMC,EAAQ5pB,KAAKgN,UAAU,SACvBpS,EAAIoF,KAAKnF,gBACTiF,EAAIE,KAAKgD,EAAErI,MAAM,IACjBmK,EAAEA,EAACrK,OAAEA,GAAWuF,KAAKyM,YAC3B,IAAIgB,EAAIzN,KAAKyN,EAETsB,EAAI,IAAIvT,OAAOsE,EAAGgF,EAAG,GAErBnM,EAAM,IAAI4D,aAAauI,GAC3B,IAAK,IAAIlM,EAAI,EAAGA,EAAIkH,IAAKlH,EAAG,CACxB,IAAIixB,EAAK,IAAIttB,aAAauI,GACtBglB,EAAK,IAAIvtB,aAAauI,GAC1B,MAAMilB,EAAKtc,EAAEzS,IAAIpC,GACjB,IAAK,IAAIyC,EAAI,EAAGA,EAAIyE,IAAKzE,EAAG,CACxB,GAAIzC,IAAMyC,EAAG,SACb,MAAM2uB,EAAKvc,EAAEzS,IAAIK,GACXsoB,EAAQ,IAAIpnB,aAAauI,GAC/B,IAAK,IAAItK,EAAI,EAAGA,EAAIsK,IAAKtK,EACrBmpB,EAAMnpB,GAAKuvB,EAAGvvB,GAAKwvB,EAAGxvB,GAE1B,MAAMyvB,EAAKxvB,EAAOsvB,EAAIC,GAChBE,EAAKtvB,EAAE+C,MAAM/E,EAAGyC,GAChB8uB,EAAKD,EAAKD,EACVG,EAAK9xB,KAAKiB,IAAI2wB,EAAKD,EAAI,KAC7B,IAAK,IAAIzvB,EAAI,EAAGA,EAAIsK,IAAKtK,EACrBqvB,EAAGrvB,IAAOmpB,EAAMnpB,GAAK2vB,EAAMC,EAC3BN,EAAGtvB,KAAO2vB,EAAM7xB,KAAKqW,IAAIgV,EAAMnpB,GAAI,IAAM,EAAI2vB,EAAKF,GAAOA,GAAMG,CAEtE,CACD,IAAK,IAAI5vB,EAAI,EAAGA,EAAIsK,IAAKtK,EAAG,CACxB,MAAMmH,EAAM8L,EAAE9P,MAAM/E,EAAG4B,IAAOovB,EAAQC,EAAGrvB,GAAMlC,KAAKa,IAAI2wB,EAAGtvB,KAAO,GAClEuU,EAAEpT,UAAU/C,EAAG4B,EAAGmH,GAClBhJ,EAAI6B,IAAMmH,CACb,CACJ,CACD,IAAK,IAAInH,EAAI,EAAGA,EAAIsK,IAAKtK,EACrB7B,EAAI6B,IAAMsF,EAGd,IAAK,IAAIlH,EAAI,EAAGA,EAAIkH,IAAKlH,EACrB,IAAK,IAAI4B,EAAI,EAAGA,EAAIsK,IAAKtK,EACrBiT,EAAE9R,UAAU/C,EAAG4B,EAAGuU,EAAEpR,MAAM/E,EAAG4B,GAAK7B,EAAI6B,IAG9C,OAAOiT,CACV,ECxHE,MAAM4c,eAAe/d;;;;;;;;;;;;;;;AAexBvM,YAAYiD,EAAGwJ,GAcX,OAbAqB,MACI7K,EACA,CACI8B,EAAG,EACHrK,OAAQtC,UACR2G,KAAM,KACNwrB,YAAa,GACbC,UAAW;AACXf,QAAS,CAACnpB,KAAM,WAEpBmM,GAGGxM,IACV;;;OAKDwN,OACI,MAAM1N,EAAIE,KAAKgG,GACTlB,EAAI9E,KAAKgN,UAAU;;AAGzBhN,KAAKwqB,KAAOxqB,KAAKyqB,MAAM3lB,GACvB9E,KAAK0qB,SAAW1qB,KAAK2qB,UAAU7lB,GAC/B9E,KAAK4qB,OAAS5qB,KAAK6qB,QAAQ/lB,GAC3B9E,KAAK8qB,MAAQ9qB,KAAK+qB,OAAOjmB,GACzB9E,KAAKgrB,SAAW1yB,KAAKiB,IAAI,EAAG,KAAQuG,GACpCE,KAAKirB,IAAMjrB,KAAKgrB,SAChBhrB,KAAKkrB,SAAW5yB,KAAKsa,KAAK,EAAI5S,KAAKgN,UAAU,cAC7ChN,KAAKmrB,WAAa,IAAI3vB,OAAOsE,EAAGgF,EAAG,GACnC9E,KAAKorB,OAAS,IAAI5vB,OAAOsE,EAAGgF,EAAG,GAC/B9E,KAAKqrB,SAAWzvB,SAAS,EAAGkE,EAAI;;AAEhC,MAAM3C,EAAI6C,KAAK8M,YACf9M,KAAKyN,EAAI,IAAIjS,OAAOsE,EAAGgF,GAAG,IAAM3H,EAAEiC,OAAS;;AAG3C,MAAMksB,EAActrB,KAAKgN,UAAU,UACf,gBAAhBse,GACAtrB,KAAKurB,WAAa,SAAU3yB,EAAGyC,EAAG2H,GAC9B,OAAOA,EAAErF,MAAM/E,EAAGyC,EAClC,EACY2E,KAAKwrB,wBAA0B,SAAU5yB,EAAGyC,EAAG2H,GAC3C,OAAO1K,KAAKqW,IAAI3L,EAAErF,MAAM/E,EAAGyC,GAAI,EAC/C,IAEY2E,KAAKurB,WAAa,SAAU3yB,EAAGyC,EAAG2H,GAC9B,OAAOsoB,EAAYtoB,EAAEhI,IAAIpC,GAAIoK,EAAEhI,IAAIK,GACnD,EAEgB2E,KAAKwrB,wBADLF,GAAenzB,UACgB,SAAUS,EAAGyC,EAAG2H,GAC3C,OAAOxK,kBAAkBwK,EAAEhI,IAAIpC,GAAIoK,EAAEhI,IAAIK,GAC7D,EAE+C,SAAUzC,EAAGyC,EAAG2H,GAC3C,OAAO1K,KAAKqW,IAAI2c,EAAYtoB,EAAEhI,IAAIpC,GAAIoK,EAAEhI,IAAIK,IAAK,EACrE,EAIK;;;;;OAOD+R,UAAU2F,EAAa,KACnB/S,KAAKqN,aACLrN,KAAKyrB,aAAenzB,KAAK0D,MAAMgE,KAAKgN,UAAU,eAAiB+F,GAC/D,IAAK,IAAIna,EAAI,EAAGA,EAAIma,IAAcna,EAC9BoH,KAAK2pB,MAAM/wB,EAAGma,GAElB,OAAO/S,KAAKsN,UACf;;;;;OAODC,WAAWwF,EAAa,KACpB/S,KAAKqN,aACLrN,KAAKyrB,aAAenzB,KAAK0D,MAAMgE,KAAKgN,UAAU,eAAiB+F,GAC/D,IAAK,IAAIna,EAAI,EAAGA,EAAIma,IAAcna,EAC9BoH,KAAK2pB,MAAM/wB,EAAGma,SACR/S,KAAKsN,WAEf,OAAOtN,KAAKsN,UACf;;;;;;OAQDqc,MAAM/wB,EAAGma,GACL,MAAMuX,EAActqB,KAAKyrB,aACzB,GAAI7yB,EAAI0xB,EAAa,CACjB,MAAMC,EAAYvqB,KAAKgN,UAAU,aAC3BjM,EAASf,KAAKkrB,QACdQ,GAAS9yB,EAAI0xB,IAAgBvX,EAAauX,GAChDtqB,KAAKirB,IAAMjrB,KAAKgrB,UAAY1yB,KAAKsa,KAAM8Y,EAAQA,EAASnB,GAAaxpB,GACrEf,KAAK2rB,wBAAyB,CAC1C,MACY3rB,KAAK2rB,wBAAyB,EAElC3rB,KAAK4rB,mBAAmB5rB,KAAK2rB,uBAChC;;;;;OAODE,aACI,MAAM/rB,EAAIE,KAAKgG,GACT8lB,EAAQhsB,EAAKA,EAAI,EAEjBisB,EADI/rB,KAAK8M,YACY1F,OAAOpH,KAAKqrB,SAAUS,GAC3C7vB,EAAS,GACf,IAAK,IAAIrD,EAAI,EAAGA,EAAIkzB,EAAOlzB,GAAK,EAC5BqD,EAAO3C,KAAK0yB,YAAYC,GAAGF,EAAiBnzB,GAAImzB,EAAiBnzB,EAAI,GAAImzB,EAAiBnzB,EAAI,GAAImzB,EAAiBnzB,EAAI,KAE3H,OAAOqD,CACV;;;;;OAOD2vB,mBAAmBM,GACf,MAAMC,EAAYnsB,KAAKmrB,WAAW1sB,KAAK,IAAM,CAAE4F,QAAQ,IACjD+nB,EAAKpsB,KAAKirB,IACVoB,EAAQrsB,KAAKssB,gBAAgBtsB,KAAKyN,EAAEnJ,IAAI6nB,GAAYnsB,KAAKorB,OAAQc,IAChExzB,EAAGoM,GAAKqnB,EAAUxxB,MACzB,IAAK,IAAI/B,EAAI,EAAGA,EAAIF,IAAKE,EAAG,CACxB,MAAM2zB,EAAMF,EAAMrxB,IAAIpC,GAChB4zB,EAAWtwB,KAAKqwB,GACtB,GAAgB,GAAZC,EAAe,SACnB,MAAMC,EAAML,EAAKI,EACXE,EAAMP,EAAUnxB,IAAIpC,GAC1B,IAAK,IAAIyC,EAAI,EAAGA,EAAIyJ,IAAKzJ,EACrBqxB,EAAIrxB,IAAMoxB,EAAMF,EAAIlxB,EAE3B,oCACD2E;KAAKyN,EAAEnJ,IAAI6nB,EAAW,CAAE9nB,QAAQ,GACnC;;;;;;;;OAUDioB,gBAAgB7e,EAAG4e,EAAOM,GAAe,EAAOC,GAAY,GACpDA;;AAEAP,EAAM9sB,OAAOgY,KAAK,GAEtB,MAAMjT,EAAMtE,KAAKwqB,KACXxnB,EAAIhD,KAAKgD,EACf,IAAI6pB,EAEAA,EADgB,GAAhBF,EACY3sB,KAAKwrB,wBAELxrB,KAAKurB,WAGrB,MAAMuB,EAAY,IAAIvwB,aAAa,GAC7BwwB,EAAW/sB,KAAK6rB,aACtB,IAAK,MAAOjzB,EAAGyC,EAAGb,EAAGsI,KAAMiqB,EAAU;;AAEjCD,EAAU,GAAKD,EAAUj0B,EAAGyC,EAAG2H,GAC/B8pB,EAAU,GAAKD,EAAUj0B,EAAG4B,EAAGwI,GAC/B8pB,EAAU,GAAKD,EAAUj0B,EAAGkK,EAAGE,GAC/B8pB,EAAU,GAAKD,EAAUxxB,EAAGb,EAAGwI,GAC/B8pB,EAAU,GAAKD,EAAUxxB,EAAGyH,EAAGE,GAC/B8pB,EAAU,GAAKD,EAAUryB,EAAGsI,EAAGE,GAE/B,MAAMgqB,EAAgBjwB,YAAY+vB,GAElC,GAAIE,EAAgB,EAChB,IAAK,IAAIp0B,EAAI,EAAGA,EAAI,IAAKA,EACrBk0B,EAAUl0B,IAAMo0B,EAChBF,EAAUl0B,IAAM,MAGxB,MAAOq0B,EAAIC,EAAIC,EAAIC,GAAMptB,KAAKqtB,uBAAuB5f,EAAG,CAAC7U,EAAGyC,EAAGb,EAAGsI,GAAIgqB;sCAGtExoB;EAAI+nB,EAAMrxB,IAAIpC,GAAIq0B,GAClB3oB,EAAI+nB,EAAMrxB,IAAIK,GAAI6xB,GAClB5oB,EAAI+nB,EAAMrxB,IAAIR,GAAI2yB,GAClB7oB,EAAI+nB,EAAMrxB,IAAI8H,GAAIsqB,EACrB,CACD,OAAOf,CACV;;;;;;;;OAUDgB,uBAAuB5f,EAAG6f,GAAUC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,IAC9D,MAAOx1B,EAAGC,EAAG6O,EAAGpC,GAAKwoB,EAAQpyB,KAAKyN,GAAU8E,EAAEzS,IAAI2N,KAE5CgH,EAAOxX,UAAUC,EAAGC,GAAK,MACzBw1B,EAAO11B,UAAUC,EAAG8O,GAAK,MACzB4mB,EAAO31B,UAAUC,EAAG0M,GAAK,MACzBipB,EAAO51B,UAAUE,EAAG6O,GAAK,MACzB8mB,EAAO71B,UAAUE,EAAGyM,GAAK,MACzBmpB,EAAO91B,UAAU+O,EAAGpC,GAAK,MACzBopB,EAAcnxB,YAAY,CAAC4S,EAAMke,EAAMC,EAAMC,EAAMC,EAAMC,KAGxDE,EAAKC,EAAKC,EAAKC,GAAOtuB,KAAKuuB,YAAYn2B,EAAGC,EAAG6O,EAAGpC,EAAG6K,EAAMke,EAAMC,EAAMC,EAAMC,EAAMC,EAAMV,EAAMW,IAC7FM,EAAKC,EAAKC,EAAKC,GAAO3uB,KAAKuuB,YAAYn2B,EAAG8O,EAAG7O,EAAGyM,EAAG+oB,EAAMle,EAAMme,EAAMC,EAAME,EAAMD,EAAMR,EAAMU,IAC7FU,EAAKC,EAAKC,EAAKC,GAAO/uB,KAAKuuB,YAAYn2B,EAAG0M,EAAGoC,EAAG7O,EAAGy1B,EAAMD,EAAMle,EAAMse,EAAMD,EAAMD,EAAMN,EAAMS,IAC7Fc,EAAKC,EAAKC,EAAKC,GAAOnvB,KAAKuuB,YAAYl2B,EAAG6O,EAAG9O,EAAG0M,EAAGipB,EAAMpe,EAAMqe,EAAMH,EAAMI,EAAMH,EAAMJ,EAAMQ,IAC7FkB,EAAKC,EAAKC,EAAKC,GAAOvvB,KAAKuuB,YAAYl2B,EAAGyM,EAAG1M,EAAG8O,EAAG8mB,EAAMre,EAAMoe,EAAMD,EAAMG,EAAMJ,EAAMF,EAAMO,IAC7FsB,EAAKC,EAAKC,EAAKC,GAAO3vB,KAAKuuB,YAAYrnB,EAAGpC,EAAG1M,EAAGC,EAAG41B,EAAMJ,EAAME,EAAMD,EAAME,EAAMre,EAAMie,EAAMM,GAE9F5pB,EAAMtE,KAAKwqB;gDAMjB;MAAO,CALIlmB,EAAI6pB,EAAKK,EAAKI,EAAKM,EAAKI,EAAKI,GAC7BprB,EAAI8pB,EAAKM,EAAKK,EAAKC,EAAKI,EAAKO,GAC7BrrB,EAAI+pB,EAAKI,EAAKK,EAAKG,EAAKM,EAAKC,GAC7BlrB,EAAIgqB,EAAKK,EAAKE,EAAKM,EAAKE,EAAKI,GAG3C;;;;OAMDlB,YAAYn2B,EAAGC,EAAG6O,EAAGpC,EAAG6K,EAAMke,EAAMC,EAAMC,EAAMC,EAAMC,EAAMV,EAAMW,GAC9D,MAAMxC,EAAQ/b,EAAOue,EACf0B,GAAoBrC,EAAO7B,GAASwC,EAAtB,EACd2B,EAAQ7vB,KAAK4qB,OACbtmB,EAAMtE,KAAKwqB,KACX/rB,EAAOuB,KAAK8qB,MACZgF,EAAU9vB,KAAK0qB,SAMrB,MAAO,CAJIjsB,EAAKoxB,EAAMpxB,EAAK6F,EAAIwrB,EAAQ13B,EAAGC,EAAGsX,GAAOmgB,EAAQ13B,EAAG8O,EAAG2mB,GAAOiC,EAAQ13B,EAAG0M,EAAGgpB,IAAQpC,GAAQoE,EAAQ13B,EAAGC,EAAGsX,IAAQigB,GAClHnxB,EAAKoxB,EAAMpxB,EAAK6F,EAAIwrB,EAAQz3B,EAAGD,EAAGuX,GAAOmgB,EAAQz3B,EAAG6O,EAAG6mB,GAAO+B,EAAQz3B,EAAGyM,EAAGkpB,IAAQtC,GAAQoE,EAAQz3B,EAAGD,EAAGuX,IAAQigB,GAClHnxB,EAAK6F,EAAIwrB,EAAQ5oB,EAAG9O,EAAGy1B,GAAOiC,EAAQ5oB,EAAG7O,EAAG01B,GAAO+B,EAAQ5oB,EAAGpC,EAAGmpB,IAAQvC,EAAQkE,GACjFnxB,EAAK6F,EAAIwrB,EAAQhrB,EAAG1M,EAAG01B,GAAOgC,EAAQhrB,EAAGzM,EAAG21B,GAAO8B,EAAQhrB,EAAGoC,EAAG+mB,IAAQvC,EAAQkE,GAE/F;;;OAKD/E,QAAQ/lB,GACJ,MAAO,CAAC1M,EAAGC,KACP,IAAK,IAAIO,EAAI,EAAGA,EAAIkM,IAAKlM,EACrBR,EAAEQ,IAAMP,EAAEO,GAEd,OAAOR,CAAC,CAEf;;;OAKDqyB,MAAM3lB,GACF,MAAO,IAAIlI,KACP,MAAMlE,EAAIkE,EAASnE,OACbs3B,EAAKnzB,EAAS,GACpB,IAAK,IAAIvB,EAAI,EAAGA,EAAI3C,IAAK2C,EAAG,CACxB,MAAM2B,EAAUJ,EAASvB,GACzB,IAAK,IAAIzC,EAAI,EAAGA,EAAIkM,IAAKlM,EACrBm3B,EAAGn3B,IAAMoE,EAAQpE,EAExB,CACD,OAAOm3B,CAAE,CAEhB;;;OAKDhF,OAAOjmB,GACH,MAAO,CAAC1M,EAAG+D,KACP,IAAK,IAAIvD,EAAI,EAAGA,EAAIkM,IAAKlM,EACrBR,EAAEQ,IAAMuD,EAEZ,OAAO/D,CAAC,CAEf;;;OAKDuyB,UAAU7lB,GACN,MAAO,CAAClL,EAAGC,EAAGm2B,IACHzzB,aAAatB,KAAK,CAAExC,OAAQqM,IAAK,CAACtE,EAAG5H,KAAOgB,EAAEhB,GAAKiB,EAAEjB,IAAMo3B,GAEzE"}