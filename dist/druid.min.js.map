{"version":3,"file":"druid.min.js","sources":["../metrics/euclidean.js","../numerical/neumair_sum.js","../metrics/euclidean_squared.js","../matrix/k_nearest_neighbors.js","../matrix/distance_matrix.js","../matrix/linspace.js","../matrix/norm.js","../linear_algebra/qr.js","../linear_algebra/simultaneous_poweriteration.js","../matrix/Matrix.js","../util/randomizer.js","../util/max.js","../util/min.js","../datastructure/Heap.js","../datastructure/DisjointSet.js","../knn/BallTree.js","../knn/KNN.js","../dimred/DR.js","../dimred/PCA.js","../dimred/MDS.js","../optimization/powell.js","../clustering/Hierarchical_Clustering.js","../clustering/KMedoids.js","../dimred/FASTMAP.js","../dimred/ISOMAP.js","../clustering/KMeans.js","../dimred/LDA.js","../dimred/LLE.js","../dimred/LSP.js","../dimred/LTSA.js","../clustering/OPTICS.js","../dimred/SAMMON.js","../dimred/TSNE.js","../dimred/TopoMap.js","../dimred/TriMap.js","../dimred/UMAP.js","../metrics/canberra.js","../metrics/chebyshev.js","../metrics/cosine.js","../metrics/hamming.js","../linear_algebra/inner_product.js","../metrics/jaccard.js","../numerical/kahan_sum.js","../metrics/manhattan.js","../matrix/normalize.js","../linear_algebra/qr_householder.js","../metrics/sokal_michener.js","../metrics/yule.js"],"sourcesContent":["import { euclidean_squared } from \"../metrics/index.js\";\n/**\n * Computes the euclidean distance (l<sub>2</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias euclidean\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the euclidean distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    return Math.sqrt(euclidean_squared(a, b));\n}\n","/**\n * Numerical stable summation with the Neumair summation algorithm.\n * @memberof module:numerical\n * @alias neumair_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n\n    for (let i = 0; i < n; ++i) {\n        let summand = summands[i];\n        let t = sum + summand;\n        if (Math.abs(sum) >= Math.abs(summand)) {\n            compensation += sum - t + summand;\n        } else {\n            compensation += summand - t + sum;\n        }\n        sum = t;\n    }\n    return sum + compensation;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n/**\n * Computes the squared euclidean distance (l<sub>2</sub><sup>2</sup>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias euclidean_squared\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the squared euclidean distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    let n = a.length;\n    let s = new Array(n);\n    for (let i = 0; i < n; ++i) {\n        let x = a[i];\n        let y = b[i];\n        s[i] = (x - y) * (x - y);\n    }\n    return neumair_sum(s);\n}\n","import { distance_matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Computes the k-nearest neighbors of each row of {@link A}.\n * @memberof module:matrix\n * @alias k_nearest_neigbhors\n * @param {Matrix} A - Either the data matrix, or a distance matrix.\n * @param {Number} k - The number of neighbors to compute.\n * @param {Function|\"precomputed\"} [metric=euclidean]\n * @returns {Array<Object>} -\n */\nexport default function (A, k, metric = euclidean) {\n    const rows = A.shape[0];\n    let D = metric == \"precomputed\" ? A : distance_matrix(A, metric);\n    let nN = new Array(rows);\n    for (let row = 0; row < rows; ++row) {\n        nN[row] = Array.from(D.row(row))\n            .map((distance, col) => {\n                return {\n                    i: row,\n                    j: col,\n                    distance: distance,\n                };\n            })\n            .sort((a, b) => a.distance - b.distance)\n            .slice(1, k + 1);\n    }\n    return nN;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"./index.js\";\n\n/**\n * Computes the distance matrix of datamatrix {@link A}.\n * @memberof module:matrix\n * @alias distance_matrix\n * @param {Matrix} A - Matrix.\n * @param {Function} [metric=euclidean] - The diistance metric.\n * @returns {Matrix} D - The distance matrix of {@link A}.\n */\nexport default function (A, metric = euclidean) {\n    let n = A.shape[0];\n    const D = new Matrix(n, n);\n    for (let i = 0; i < n; ++i) {\n        const A_i = A.row(i);\n        for (let j = i + 1; j < n; ++j) {\n            const dist = metric(A_i, A.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n        }\n    }\n    return D;\n}\n","/**\n * Creates an Array containing {@link number} numbers from {@link start} to {@link end}.\n * If <code>{@link number} = null</null>.\n * @memberof module:matrix\n * @alias linspace\n * @param {Number} start - Start value.\n * @param {Number} end - End value.\n * @param {Number} [number = null] - Number of number between {@link start} and {@link end}.\n * @returns {Array} - An array with {@link number} entries, beginning at {@link start} ending at {@link end}.\n */\nexport default function (start, end, number = null) {\n    if (!number) {\n        number = Math.max(Math.round(end - start) + 1, 1);\n    }\n    if (number < 2) {\n        return number === 1 ? [start] : [];\n    }\n    let result = new Array(number);\n    number -= 1;\n    for (let i = number; i >= 0; --i) {\n        result[i] = (i * end + (number - i) * start) / number;\n    }\n    return result;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n//import { neumair_sum } from \"../numerical/index\";\n\n/**\n * Computes the norm of a vector, by computing its distance to **0**.\n * @memberof module:matrix\n * @alias norm\n * @param {Matrix|Array<Number>|Float64Array} v - Vector. \n * @param {Function} [metric = euclidean] - Which metric should be used to compute the norm.\n * @returns {Number} - The norm of {@link v}.\n */\nexport default function (v, metric = euclidean) {\n    let vector = null;\n    if (v instanceof Matrix) {\n        let [rows, cols] = v.shape;\n        if (rows === 1) vector = v.row(0);\n        else if (cols === 1) vector = v.col(0);\n        else throw new Error(\"Matrix must be 1d!\");\n    } else {\n        vector = v;\n    }\n    const n = vector.length;\n    const zeros = Float64Array.from({ length: n }, () => 0);\n    return metric(vector, zeros);\n}\n","import { Matrix, norm } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} using Gram-Schmidt process.\n * @memberof module:linear_algebra\n * @alias qr\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_the_Gram%E2%80%93Schmidt_process}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, cols, \"identity\");\n    const R = new Matrix(cols, cols, 0);\n\n    for (let j = 0; j < cols; ++j) {\n        let v = A.col(j);\n        for (let i = 0; i < j; ++i) {\n            const q = Q.col(i);\n            const q_dot_v = neumair_sum(q.map((q_, k) => q_ * v[k]));\n            R.set_entry(i, j, q_dot_v);\n            v = v.map((v_, k) => v_ - q_dot_v * q[k]);\n        }\n        const v_norm = norm(v, euclidean);\n        for (let k = 0; k < rows; ++k) {\n            Q.set_entry(k, j, v[k] / v_norm);\n        }\n        R.set_entry(j, j, v_norm);\n    }\n    return { R, Q };\n}\n","import { qr as qr_gramschmidt } from \"./index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\n\n/**\n * Computes the {@link k} biggest Eigenvectors and Eigenvalues from Matrix {@link A} with the QR-Algorithm.\n * @memberof module:linear_algebra\n * @alias simultaneous_poweriteration\n * @param {Matrix} A - The Matrix\n * @param {Number} k - The number of eigenvectors and eigenvalues to compute.\n * @param {Object} parameters - Object containing parameterization of the simultanious poweriteration method.\n * @param {Number} [parameters.max_iterations=100] - The number of maxiumum iterations the algorithm should run.\n * @param {Number|Randomizer} [parameters.seed=1212] - The seed value or a randomizer used in the algorithm.\n * @param {Function} [parameters.qr=qr_gramschmidt] - The QR technique to use.\n * @param {Number} [parameters.tol=1e-8] - Allowed error for stopping criteria\n * @returns {{eigenvalues: Array, eigenvectors: Array}} - The {@link k} biggest eigenvectors and eigenvalues of Matrix {@link A}.\n */\nexport default function (A, k = 2, {seed = 1212, max_iterations = 100, qr = qr_gramschmidt, tol = 1e-8} = {}) {\n    const randomizer = seed instanceof Randomizer ? seed : new Randomizer(seed);\n    if (!(A instanceof Matrix)) A = Matrix.from(A);\n    const n = A.shape[0];\n    let { Q, R } = qr(new Matrix(n, k, () => (randomizer.random - .5) * 2));\n    while (max_iterations--) {\n        const oldQ = Q.clone();\n        const Z = A.dot(Q);\n        const QR = qr(Z);\n        Q = QR.Q;\n        R = QR.R;\n        const error = euclidean_squared(Q.values, oldQ.values);\n        if (error < tol) {\n            break;\n        }\n    }\n\n    const eigenvalues = R.diag;\n    const eigenvectors = Q.transpose().to2dArray;\n    return { eigenvalues, eigenvectors };\n}\n","import { neumair_sum } from \"../numerical/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n/**\n * @class\n * @alias Matrix\n * @requires module:numerical/neumair_sum\n */\nexport class Matrix {\n    /**\n     * creates a new Matrix. Entries are stored in a Float64Array.\n     * @constructor\n     * @memberof module:matrix\n     * @alias Matrix\n     * @param {number} rows - The amount of rows of the matrix.\n     * @param {number} cols - The amount of columns of the matrix.\n     * @param {(function|string|number)} value=0 - Can be a function with row and col as parameters, a number, or \"zeros\", \"identity\" or \"I\", or \"center\".\n     *  - **function**: for each entry the function gets called with the parameters for the actual row and column.\n     *  - **string**: allowed are\n     *      - \"zero\", creates a zero matrix.\n     *      - \"identity\" or \"I\", creates an identity matrix.\n     *      - \"center\", creates an center matrix.\n     *  - **number**: create a matrix filled with the given value.\n     * @example\n     *\n     * let A = new Matrix(10, 10, () => Math.random()); //creates a 10 times 10 random matrix.\n     * let B = new Matrix(3, 3, \"I\"); // creates a 3 times 3 identity matrix.\n     * @returns {Matrix} returns a {@link rows} times {@link cols} Matrix filled with {@link value}.\n     */\n    constructor(rows = null, cols = null, value = null) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = null;\n        if (rows && cols) {\n            if (!value) {\n                this._data = new Float64Array(rows * cols);\n                return this;\n            }\n            if (typeof value === \"function\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value(row, col);\n                    }\n                }\n                return this;\n            }\n            if (typeof value === \"string\") {\n                if (value === \"zeros\") {\n                    return new Matrix(rows, cols, 0);\n                }\n                if (value === \"identity\" || value === \"I\") {\n                    this._data = new Float64Array(rows * cols);\n                    for (let row = 0; row < rows; ++row) {\n                        this._data[row * cols + row] = 1;\n                    }\n                    return this;\n                }\n                if (value === \"center\" && rows == cols) {\n                    this._data = new Float64Array(rows * cols);\n                    value = (i, j) => (i === j ? 1 : 0) - 1 / rows;\n                    for (let row = 0; row < rows; ++row) {\n                        for (let col = 0; col < cols; ++col) {\n                            this._data[row * cols + col] = value(row, col);\n                        }\n                    }\n                    return this;\n                }\n            }\n            if (typeof value === \"number\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value;\n                    }\n                }\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Creates a Matrix out of {@link A}.\n     * @param {(Matrix|Array|Float64Array|number)} A - The matrix, array, or number, which should converted to a Matrix.\n     * @param {\"row\"|\"col\"|\"diag\"} [type = \"row\"] - If {@link A} is a Array or Float64Array, then type defines if it is a row- or a column vector.\n     * @returns {Matrix}\n     *\n     * @example\n     * let A = Matrix.from([[1, 0], [0, 1]]); //creates a two by two identity matrix.\n     * let S = Matrix.from([1, 2, 3], \"diag\"); // creates a 3 by 3 matrix with 1, 2, 3 on its diagonal. [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n     */\n    static from(A, type = \"row\") {\n        if (A instanceof Matrix) {\n            return A.clone();\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let m = A.length;\n            if (m === 0) throw new Error(\"Array is empty\");\n            // 1d\n            if (!Array.isArray(A[0]) && !(A[0] instanceof Float64Array)) {\n                if (type === \"row\") {\n                    return new Matrix(1, m, (_, j) => A[j]);\n                } else if (type === \"col\") {\n                    return new Matrix(m, 1, (i) => A[i]);\n                } else if (type === \"diag\") {\n                    return new Matrix(m, m, (i, j) => (i == j ? A[i] : 0));\n                } else {\n                    throw new Error(\"1d array has NaN entries\");\n                }\n                // 2d\n            } else if (Array.isArray(A[0]) || A[0] instanceof Float64Array) {\n                let n = A[0].length;\n                for (let row = 0; row < m; ++row) {\n                    if (A[row].length !== n) {\n                        throw new Error(\"various array lengths\");\n                    }\n                }\n                return new Matrix(m, n, (i, j) => A[i][j]);\n            }\n        } else if (typeof A === \"number\") {\n            return new Matrix(1, 1, A);\n        } else {\n            throw new Error(\"error\");\n        }\n    }\n\n    /**\n     * Returns the {@link row}<sup>th</sup> row from the Matrix.\n     * @param {Number} row\n     * @returns {Float64Array}\n     */\n    row(row) {\n        const data = this.values;\n        const cols = this._cols;\n        return data.subarray(row * cols, (row + 1) * cols);\n    }\n\n    /**\n     * Returns an generator yielding each row of the Matrix.\n     * @yields {Float64Array}\n     */\n    *iterate_rows() {\n        const cols = this._cols;\n        const rows = this._rows;\n        const data = this.values;\n        for (let row = 0; row < rows; ++row) {\n            yield data.subarray(row * cols, (row + 1) * cols);\n        }\n    }\n\n    /**\n     * Makes a {@link Matrix} object an iterable object.\n     * @yields {Float64Array}\n     */\n    *[Symbol.iterator]() {\n        for (const row of this.iterate_rows()) {\n            yield row;\n        }\n    }\n\n    /**\n     * Sets the entries of {@link row}<sup>th</sup> row from the Matrix to the entries from {@link values}.\n     * @param {int} row\n     * @param {Array} values\n     * @returns {Matrix}\n     */\n    set_row(row, values) {\n        let cols = this._cols;\n        if (Array.isArray(values) && values.length === cols) {\n            let offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values[col];\n            }\n        } else if (values instanceof Matrix && values.shape[1] === cols && values.shape[0] === 1) {\n            let offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values._data[col];\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> column from the Matrix.\n     * @param {int} col\n     * @returns {Array}\n     */\n    col(col) {\n        let result_col = new Float64Array(this._rows);\n        for (let row = 0; row < this._rows; ++row) {\n            result_col[row] = this.values[row * this._cols + col];\n        }\n        return result_col;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @returns {float64}\n     */\n    entry(row, col) {\n        return this.values[row * this._cols + col];\n    }\n\n    /**\n     * Sets the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix to the given {@link value}.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    set_entry(row, col, value) {\n        this.values[row * this._cols + col] = value;\n        return this;\n    }\n\n    /**\n     * Returns a new transposed Matrix.\n     * @returns {Matrix}\n     */\n    transpose() {\n        let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n        return B;\n    }\n\n    /**\n     * Returns a new transposed Matrix. Short-form of {@function transpose}.\n     * @returns {Matrix}\n     */\n    get T() {\n        return this.transpose();\n    }\n\n    /**\n     * Returns the inverse of the Matrix.\n     * @returns {Matrix}\n     */\n    inverse() {\n        const rows = this._rows;\n        const cols = this._cols;\n        let B = new Matrix(rows, 2 * cols, (i, j) => {\n            if (j >= cols) {\n                return i === j - cols ? 1 : 0;\n            } else {\n                return this.entry(i, j);\n            }\n        });\n        let h = 0;\n        let k = 0;\n        while (h < rows && k < cols) {\n            var i_max = 0;\n            let max_val = -Infinity;\n            for (let i = h; i < rows; ++i) {\n                let val = Math.abs(B.entry(i, k));\n                if (max_val < val) {\n                    i_max = i;\n                    max_val = val;\n                }\n            }\n            if (B.entry(i_max, k) == 0) {\n                k++;\n            } else {\n                // swap rows\n                for (let j = 0; j < 2 * cols; ++j) {\n                    let h_val = B.entry(h, j);\n                    let i_val = B.entry(i_max, j);\n                    B.set_entry(h, j, h_val);\n                    B.set_entry(i_max, j, i_val);\n                }\n                for (let i = h + 1; i < rows; ++i) {\n                    let f = B.entry(i, k) / B.entry(h, k);\n                    B.set_entry(i, k, 0);\n                    for (let j = k + 1; j < 2 * cols; ++j) {\n                        B.set_entry(i, j, B.entry(i, j) - B.entry(h, j) * f);\n                    }\n                }\n                h++;\n                k++;\n            }\n        }\n\n        for (let row = 0; row < rows; ++row) {\n            let f = B.entry(row, row);\n            for (let col = row; col < 2 * cols; ++col) {\n                B.set_entry(row, col, B.entry(row, col) / f);\n            }\n        }\n\n        for (let row = rows - 1; row >= 0; --row) {\n            let B_row_row = B.entry(row, row);\n            for (let i = 0; i < row; i++) {\n                let B_i_row = B.entry(i, row);\n                let f = B_i_row / B_row_row;\n                for (let j = i; j < 2 * cols; ++j) {\n                    let B_i_j = B.entry(i, j);\n                    let B_row_j = B.entry(row, j);\n                    B_i_j = B_i_j - B_row_j * f;\n                    B.set_entry(i, j, B_i_j);\n                }\n            }\n        }\n\n        return new Matrix(rows, cols, (i, j) => B.entry(i, j + cols));\n    }\n\n    /**\n     * Returns the dot product. If {@link B} is an Array or Float64Array then an Array gets returned. If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            if (A.shape[1] !== B.shape[0]) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix: \n                A has ${A.shape[1]} cols and B ${B.shape[0]} rows. \n                Must be equal!`);\n            }\n            let I = A.shape[1];\n            let C = new Matrix(A.shape[0], B.shape[1], (row, col) => {\n                const A_i = A.row(row);\n                const B_i = B.col(col);\n                let sum = 0;\n                for (let i = 0; i < I; ++i) {\n                    sum += A_i[i] * B_i[i];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Array.isArray(B) || B instanceof Float64Array) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Computes the outer product from {@link this} and {@link B}.\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    outer(B) {\n        let A = this;\n        let l = A._data.length;\n        let r = B._data.length;\n        if (l != r) return undefined;\n        let C = new Matrix();\n        C.shape = [\n            l,\n            l,\n            (i, j) => {\n                if (i <= j) {\n                    return A._data[i] * B._data[j];\n                } else {\n                    return C.entry(j, i);\n                }\n            },\n        ];\n        return C;\n    }\n\n    /**\n     * Appends matrix {@link B} to the matrix.\n     * @param {Matrix} B - matrix to append.\n     * @param {\"horizontal\"|\"vertical\"|\"diag\"} [type = \"horizontal\"] - type of concatenation.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 1], [1, 1]]); // 2 by 2 matrix filled with ones.\n     * let B = Matrix.from([[2, 2], [2, 2]]); // 2 by 2 matrix filled with twos.\n     *\n     * A.concat(B, \"horizontal\"); // 2 by 4 matrix. [[1, 1, 2, 2], [1, 1, 2, 2]]\n     * A.concat(B, \"vertical\"); // 4 by 2 matrix. [[1, 1], [1, 1], [2, 2], [2, 2]]\n     * A.concat(B, \"diag\"); // 4 by 4 matrix. [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 2, 2], [0, 0, 2, 2]]\n     */\n    concat(B, type = \"horizontal\") {\n        const A = this;\n        const [rows_A, cols_A] = A.shape;\n        const [rows_B, cols_B] = B.shape;\n        if (type == \"horizontal\") {\n            if (rows_A != rows_B) {\n                throw new Error(`A.concat(B, \"horizontal\"): A and B need same number of rows, A has ${rows_A} rows, B has ${rows_B} rows.`);\n            }\n            const X = new Matrix(rows_A, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(0, cols_A, B);\n            return X;\n        } else if (type == \"vertical\") {\n            if (cols_A != cols_B) {\n                throw new Error(`A.concat(B, \"vertical\"): A and B need same number of columns, A has ${cols_A} columns, B has ${cols_B} columns.`);\n            }\n            const X = new Matrix(rows_A + rows_B, cols_A, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, 0, B);\n            return X;\n        } else if (type == \"diag\") {\n            const X = new Matrix(rows_A + rows_B, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, cols_A, B);\n            return X;\n        } else {\n            throw new Error(`type must be \"horizontal\" or \"vertical\", but type is ${type}!`);\n        }\n    }\n\n    /**\n     * Writes the entries of B in A at an offset position given by {@link offset_row} and {@link offset_col}.\n     * @param {int} offset_row\n     * @param {int} offset_col\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    set_block(offset_row, offset_col, B) {\n        let [rows, cols] = B.shape;\n        for (let row = 0; row < rows; ++row) {\n            if (row > this._rows) {\n                continue;\n            }\n            for (let col = 0; col < cols; ++col) {\n                if (col > this._cols) {\n                    continue;\n                }\n                this.set_entry(row + offset_row, col + offset_col, B.entry(row, col));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Extracts the entries from the {@link start_row}<sup>th</sup> row to the {@link end_row}<sup>th</sup> row, the {@link start_col}<sup>th</sup> column to the {@link end_col}<sup>th</sup> column of the matrix.\n     * If {@link end_row} or {@link end_col} is empty, the respective value is set to {@link this.rows} or {@link this.cols}.\n     * @param {Number} start_row\n     * @param {Number} start_col\n     * @param {Number} [end_row = null]\n     * @param {Number} [end_col = null]\n     * @returns {Matrix} Returns a end_row - start_row times end_col - start_col matrix, with respective entries from the matrix.\n     * @example\n     *\n     * let A = Matrix.from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // a 3 by 3 matrix.\n     *\n     * A.get_block(1, 1); // [[5, 6], [8, 9]]\n     * A.get_block(0, 0, 1, 1); // [[1]]\n     * A.get_block(1, 1, 2, 2); // [[5]]\n     * A.get_block(0, 0, 2, 2); // [[1, 2], [4, 5]]\n     */\n    get_block(start_row, start_col, end_row = null, end_col = null) {\n        const [rows, cols] = this.shape;\n        end_row = end_row ?? rows;\n        end_col = end_col ?? cols;\n        if (end_row <= start_row || end_col <= start_col) {\n            throw new Error(`\n                end_row must be greater than start_row, and \n                end_col must be greater than start_col, but\n                end_row = ${end_row}, start_row = ${start_row}, end_col = ${end_col}, and start_col = ${start_col}!`);\n        }\n        const X = new Matrix(end_row - start_row, end_col - start_col, \"zeros\");\n        for (let row = start_row, new_row = 0; row < end_row; ++row, ++new_row) {\n            for (let col = start_col, new_col = 0; col < end_col; ++col, ++new_col) {\n                X.set_entry(new_row, new_col, this.entry(row, col));\n            }\n        }\n        return X;\n        //return new Matrix(end_row - start_row, end_col - start_col, (i, j) => this.entry(i + start_row, j + start_col));\n    }\n\n    /**\n     * Returns a new array gathering entries defined by the indices given by argument.\n     * @param {Array<Number>} row_indices - Array consists of indices of rows for gathering entries of this matrix\n     * @param {Array<Number>} col_indices  - Array consists of indices of cols for gathering entries of this matrix\n     * @returns {Matrix}\n     */\n    gather(row_indices, col_indices) {\n        const N = row_indices.length;\n        const D = col_indices.length;\n\n        const R = new Matrix(N, D);\n        for (let i = 0; i < N; ++i) {\n            const row_index = row_indices[i];\n            for (let j = 0; j < N; ++j) {\n                const col_index = col_indices[j];\n                R.set_entry(i, j, this.entry(row_index, col_index));\n            }\n        }\n\n        return R;\n    }\n\n    /**\n     * Applies a function to each entry of the matrix.\n     * @private\n     * @param {function} f function takes 2 parameters, the value of the actual entry and a value given by the function {@link v}. The result of {@link f} gets writen to the Matrix.\n     * @param {function} v function takes 2 parameters for row and col, and returns a value witch should be applied to the colth entry of the rowth row of the matrix.\n     */\n    _apply_array(f, v) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let row = 0; row < rows; ++row) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                const i = offset + col;\n                data[i] = f(data[i], v(row, col));\n            }\n        }\n        return this;\n    }\n\n    _apply_rowwise_array(values, f) {\n        return this._apply_array(f, (_, j) => values[j]);\n    }\n\n    _apply_colwise_array(values, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let row = 0; row < rows; ++row) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                const i = offset + col;\n                data[i] = f(data[i], values[row]);\n            }\n        }\n        return this;\n    }\n\n    _apply(value, f) {\n        let data = this.values;\n        if (value instanceof Matrix) {\n            let [value_rows, value_cols] = value.shape;\n            let [rows, cols] = this.shape;\n            if (value_rows === 1) {\n                if (cols !== value_cols) {\n                    throw new Error(`cols !== value_cols`);\n                }\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(0, col));\n                    }\n                }\n            } else if (value_cols === 1) {\n                if (rows !== value_rows) {\n                    throw new Error(`rows !== value_rows`);\n                }\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(row, 0));\n                    }\n                }\n            } else if (rows == value_rows && cols == value_cols) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(row, col));\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else if (Array.isArray(value)) {\n            let rows = this._rows;\n            let cols = this._cols;\n            if (value.length === rows) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value[row]);\n                    }\n                }\n            } else if (value.length === cols) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value[col]);\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else {\n            for (let i = 0, n = this._rows * this._cols; i < n; ++i) {\n                data[i] = f(data[i], value);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Clones the Matrix.\n     * @returns {Matrix}\n     */\n    clone() {\n        let B = new Matrix();\n        B._rows = this._rows;\n        B._cols = this._cols;\n        B._data = this.values.slice(0);\n        return B;\n    }\n\n    /**\n     * Entrywise multiplication with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.mult(2); // [[2, 4], [6, 8]];\n     * A.mult(B); // [[1, 4], [9, 16]];\n     */\n    mult(value) {\n        return this.clone()._apply(value, (a, b) => a * b);\n    }\n\n    /**\n     * Entrywise division with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.divide(2); // [[0.5, 1], [1.5, 2]];\n     * A.divide(B); // [[1, 1], [1, 1]];\n     */\n    divide(value) {\n        return this.clone()._apply(value, (a, b) => a / b);\n    }\n\n    /**\n     * Entrywise addition with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.add(2); // [[3, 4], [5, 6]];\n     * A.add(B); // [[2, 4], [6, 8]];\n     */\n    add(value) {\n        return this.clone()._apply(value, (a, b) => a + b);\n    }\n\n    /**\n     * Entrywise subtraction with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.sub(2); // [[-1, 0], [1, 2]];\n     * A.sub(B); // [[0, 0], [0, 0]];\n     */\n    sub(value) {\n        return this.clone()._apply(value, (a, b) => a - b);\n    }\n\n    /**\n     * Returns the number of rows and columns of the Matrix.\n     * @returns {Array} An Array in the form [rows, columns].\n     */\n    get shape() {\n        return [this._rows, this._cols];\n    }\n\n    /**\n     * Returns the matrix in the given shape with the given function which returns values for the entries of the matrix.\n     * @param {Array} parameter - takes an Array in the form [rows, cols, value], where rows and cols are the number of rows and columns of the matrix, and value is a function which takes two parameters (row and col) which has to return a value for the colth entry of the rowth row.\n     * @returns {Matrix}\n     */\n    set shape([rows, cols, value = () => 0]) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = new Float64Array(rows * cols);\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n                this._data[row * cols + col] = value(row, col);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Float64Arrays.\n     * @returns {Array<Float64Array>}\n     */\n    get to2dArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(row);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Arrays.\n     * @returns {Array<Array>}\n     */\n    get asArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(Array.from(row));\n        }\n        return result;\n    }\n\n    /**\n     * Returns the diagonal of the Matrix.\n     * @returns {Float64Array}\n     */\n    get diag() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const min_row_col = Math.min(rows, cols);\n        let result = new Float64Array(min_row_col);\n        for (let i = 0; i < min_row_col; ++i) {\n            result[i] = this.entry(i, i);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the mean of all entries of the Matrix.\n     * @returns {Number}\n     */\n    get mean() {\n        const sum = this.sum;\n        const n = this._rows * this._cols;\n        return sum / n;\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Number}\n     */\n    get sum() {\n        const data = this.values;\n        return neumair_sum(data);\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Float64Array}\n     */\n    get values() {\n        const data = this._data;\n        return data;\n    }\n\n    /**\n     * Returns the mean of each row of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanRows() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: rows });\n        for (let row = 0; row < rows; ++row) {\n            result[row] = 0;\n            for (let col = 0; col < cols; ++col) {\n                result[row] += data[row * cols + col];\n            }\n            result[row] /= cols;\n        }\n        return result;\n    }\n\n    /** Returns the mean of each column of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanCols() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: cols });\n        for (let col = 0; col < cols; ++col) {\n            result[col] = 0;\n            for (let row = 0; row < rows; ++row) {\n                result[col] += data[row * cols + col];\n            }\n            result[col] /= rows;\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b} using the conjugate gradient method. Returns the result x.\n     * @param {Matrix} A - Matrix\n     * @param {Matrix} b - Matrix\n     * @param {Randomizer} [randomizer=null]\n     * @param {Number} [tol=1e-3]\n     * @returns {Matrix}\n     */\n    static solve_CG(A, b, randomizer, tol = 1e-3) {\n        if (randomizer === null) {\n            randomizer = new Randomizer();\n        }\n        const rows = A.shape[0];\n        const cols = b.shape[1];\n        let result = new Matrix(rows, 0);\n        for (let i = 0; i < cols; ++i) {\n            const b_i = Matrix.from(b.col(i)).T;\n            let x = new Matrix(rows, 1, () => randomizer.random);\n            let r = b_i.sub(A.dot(x));\n            let d = r.clone();\n            do {\n                const z = A.dot(d);\n                const alpha = r.T.dot(r).entry(0, 0) / d.T.dot(z).entry(0, 0);\n                x = x.add(d.mult(alpha));\n                const r_next = r.sub(z.mult(alpha));\n                const beta = r_next.T.dot(r_next).entry(0, 0) / r.T.dot(r).entry(0, 0);\n                d = r_next.add(d.mult(beta));\n                r = r_next;\n            } while (Math.abs(r.mean) > tol);\n            result = result.concat(x, \"horizontal\");\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b}. Returns the result x.\n     * @param {Matrix} A - Matrix or LU Decomposition\n     * @param {Matrix} b - Matrix\n     * @returns {Matrix}\n     */\n    static solve(A, b) {\n        let { L: L, U: U } = \"L\" in A && \"U\" in A ? A : Matrix.LU(A);\n        let rows = L.shape[0];\n        let x = b.clone();\n\n        // forward\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < row - 1; ++col) {\n                x.set_entry(0, row, x.entry(0, row) - L.entry(row, col) * x.entry(1, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / L.entry(row, row));\n        }\n\n        // backward\n        for (let row = rows - 1; row >= 0; --row) {\n            for (let col = rows - 1; col > row; --col) {\n                x.set_entry(0, row, x.entry(0, row) - U.entry(row, col) * x.entry(0, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / U.entry(row, row));\n        }\n\n        return x;\n    }\n\n    /**\n     * {@link L}{@link U} decomposition of the Matrix {@link A}. Creates two matrices, so that the dot product LU equals A.\n     * @param {Matrix} A\n     * @returns {{L: Matrix, U: Matrix}} result - Returns the left triangle matrix {@link L} and the upper triangle matrix {@link U}.\n     */\n    static LU(A) {\n        const rows = A.shape[0];\n        const L = new Matrix(rows, rows, \"zeros\");\n        const U = new Matrix(rows, rows, \"identity\");\n\n        for (let j = 0; j < rows; ++j) {\n            for (let i = j; i < rows; ++i) {\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(i, k) * U.entry(k, j);\n                }\n                L.set_entry(i, j, A.entry(i, j) - sum);\n            }\n            for (let i = j; i < rows; ++i) {\n                if (L.entry(j, j) === 0) {\n                    return undefined;\n                }\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(j, k) * U.entry(k, i);\n                }\n                U.set_entry(j, i, (A.entry(j, i) - sum) / L.entry(j, j));\n            }\n        }\n\n        return { L: L, U: U };\n    }\n\n    /**\n     * Computes the determinante of {@link A}, by using the LU decomposition of {@link A}.\n     * @param {Matrix} A\n     * @returns {Number} det - Returns the determinate of the Matrix {@link A}.\n     */\n    static det(A) {\n        const rows = A.shape[0];\n        const { L, U } = Matrix.LU(A);\n        const L_diag = L.diag;\n        const U_diag = U.diag;\n        let det = L_diag[0] * U_diag[0];\n        for (let row = 1; row < rows; ++row) {\n            det *= L_diag[row] * U_diag[row];\n        }\n        return det;\n    }\n\n    /**\n     * Computes the {@link k} components of the SVD decomposition of the matrix {@link M}\n     * @param {Matrix} M\n     * @param {int} [k=2]\n     * @returns {{U: Matrix, Sigma: Matrix, V: Matrix}}\n     */\n    static SVD(M, k = 2) {\n        const MT = M.T;\n        let MtM = MT.dot(M);\n        let MMt = M.dot(MT);\n        let { eigenvectors: V, eigenvalues: Sigma } = simultaneous_poweriteration(MtM, k);\n        let { eigenvectors: U } = simultaneous_poweriteration(MMt, k);\n        return { U: U, Sigma: Sigma.map((sigma) => Math.sqrt(sigma)), V: V };\n\n        //Algorithm 1a: Householder reduction to bidiagonal form:\n        /* const [m, n] = A.shape;\n        let U = new Matrix(m, n, (i, j) => i == j ? 1 : 0);\n        console.log(U.to2dArray)\n        let V = new Matrix(n, m, (i, j) => i == j ? 1 : 0);\n        console.log(V.to2dArray)\n        let B = Matrix.bidiagonal(A.clone(), U, V);\n        console.log(U,V,B)\n        return { U: U, \"Sigma\": B, V: V }; */\n    }\n}\n","import { linspace, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @memberof module:utils\n * @alias Randomizer\n */\nexport class Randomizer {\n    /**\n     * Mersenne Twister random number generator.\n     * @constructor\n     * @param {Number} [_seed=new Date().getTime()] - The seed for the random number generator. If <code>_seed == null</code> then the actual time gets used as seed.\n     * @see https://github.com/bmurray7/mersenne-twister-examples/blob/master/javascript-mersenne-twister.js\n     */\n    constructor(_seed) {\n        this._N = 624;\n        this._M = 397;\n        this._MATRIX_A = 0x9908b0df;\n        this._UPPER_MASK = 0x80000000;\n        this._LOWER_MASK = 0x7fffffff;\n        this._mt = new Array(this._N);\n        this._mti = this.N + 1;\n\n        this.seed = _seed || new Date().getTime();\n        return this;\n    }\n\n    set seed(_seed) {\n        this._seed = _seed;\n        let mt = this._mt;\n\n        mt[0] = _seed >>> 0;\n        for (this._mti = 1; this._mti < this._N; this._mti += 1) {\n            let mti = this._mti;\n            let s = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n            mt[mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + mti;\n            mt[mti] >>>= 0;\n        }\n    }\n\n    /**\n     * Returns the seed of the random number generator.\n     * @returns {Number} - The seed.\n     */\n    get seed() {\n        return this._seed;\n    }\n\n    /**\n     * Returns a float between 0 and 1.\n     * @returns {Number} - A random number between [0, 1]\n     */\n    get random() {\n        return this.random_int * (1.0 / 4294967296.0);\n    }\n\n    /**\n     * Returns an integer between 0 and MAX_INTEGER.\n     * @returns {Integer} - A random integer.\n     */\n    get random_int() {\n        let y,\n            mag01 = new Array(0x0, this._MATRIX_A);\n        if (this._mti >= this._N) {\n            let kk;\n\n            /* if (this._mti == this._N + 1) {\n                this.seed = 5489;\n            } */\n\n            let N_M = this._N - this._M;\n            let M_N = this._M - this._N;\n\n            for (kk = 0; kk < N_M; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + this._M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (; kk < this._N - 1; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + M_N] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            y = (this._mt[this._N - 1] & this._UPPER_MASK) | (this._mt[0] & this._LOWER_MASK);\n            this._mt[this._N - 1] = this._mt[this._M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this._mti = 0;\n        }\n\n        y = this._mt[(this._mti += 1)];\n        y ^= y >>> 11;\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= y >>> 18;\n\n        return y >>> 0;\n    }\n\n    /**\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    choice(A, n) {\n        if (A instanceof Matrix) {\n            let rows = A.shape[0];\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A.row(d));\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let rows = A.length;\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A[d]);\n        }\n    }\n\n    /**\n     * @static\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @param {Number} seed - The seed for the random number generator.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    static choice(A, n, seed = 1212) {\n        const R = new Randomizer(seed);\n        return R.choice(A, n);\n        /* let rows = A.shape[0];\n        if (n > rows) {\n            throw new Error(\"n bigger than A!\");\n        }\n        let rand = new Randomizer(seed);\n        let sample = new Array(n);\n        let index_list = linspace(0, rows - 1);\n        for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n            let random_index = rand.random_int % l;\n            sample[i] = index_list.splice(random_index, 1)[0];\n        }\n        //return result;\n        //return new Matrix(n, cols, (row, col) => A.entry(sample[row], col))\n        return sample.map((d) => A.row(d)); */\n    }\n}\n","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias max\n * @param {Array} values \n * @returns {Number}\n */\nexport default function (values) {\n    let max;\n    for (const value of values) {\n        if (value != null && (max < value || (max === undefined && value >= value))) {\n            max = value;\n        }\n    }\n    return max;\n}","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias min\n * @param {Array} values\n * @returns {Number}\n */\nexport default function (values) {\n    let min;\n    for (const value of values) {\n        if (value != null && (min > value || (min === undefined && value <= value))) {\n            min = value;\n        }\n    }\n    return min;\n}","/**\n * @class\n * @alias Heap\n */\nexport class Heap {\n    /**\n     * A heap is a datastructure holding its elements in a specific way, so that the top element would be the first entry of an ordered list.\n     * @constructor\n     * @memberof module:datastructure\n     * @alias Heap\n     * @param {Array=} elements - Contains the elements for the Heap. {@link elements} can be null.\n     * @param {Function} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(\"min\"|\"max\"|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     * @see {@link https://en.wikipedia.org/wiki/Binary_heap}\n     */\n    constructor(elements = null, accessor = d => d, comparator = \"min\") {\n        if (elements) {\n            return Heap.heapify(elements, accessor, comparator);\n        } else {\n            this._accessor = accessor;\n            this._container = [];\n            if (comparator == \"min\") {\n                this._comparator = (a, b) => a < b;\n            } else if (comparator == \"max\") {\n                this._comparator = (a, b) => a > b;\n            } else {\n                this._comparator = comparator;\n            }\n            return this\n        }\n    }\n\n    /**\n     * Creates a Heap from an Array\n     * @param {Array|Set} elements - Contains the elements for the Heap.\n     * @param {Function=} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(String=|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     */\n    static heapify(elements, accessor = d => d, comparator = \"min\") {\n        const heap = new Heap(null, accessor, comparator);\n        const container = heap._container;\n        for (const e of elements) {\n            container.push({\n                \"element\": e,\n                \"value\": accessor(e),\n            });\n        }\n        for (let i = Math.floor((elements.length / 2) - 1); i >= 0; --i) {\n            heap._heapify_down(i);\n        }\n        return heap;\n    }\n\n    /**\n     * Swaps elements of container array.\n     * @private\n     * @param {Number} index_a \n     * @param {Number} index_b \n     */\n    _swap(index_a, index_b) {\n        const container = this._container;\n        [container[index_b], container[index_a]] = [container[index_a], container[index_b]];\n        return;\n    }\n\n    /**\n     * @private\n     */\n    _heapify_up() {\n        const container = this._container;\n        let index = container.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (!this._comparator(container[index].value, container[parentIndex].value)) {\n                break;\n            } else {\n            this._swap(parentIndex, index)\n            index = parentIndex;\n            }\n        }\n    }\n\n    /**\n     * Pushes the element to the heap.\n     * @param {} element\n     * @returns {Heap}\n     */\n    push(element) {\n        const value = this._accessor(element);\n        //const node = new Node(element, value);\n        const node = {\"element\": element, \"value\": value};\n        this._container.push(node);\n        this._heapify_up();\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} [start_index = 0] \n     */\n    _heapify_down(start_index=0) {\n        const container = this._container;\n        const comparator = this._comparator;\n        const length = container.length;\n        let left = 2 * start_index + 1;\n        let right = 2 * start_index + 2;\n        let index = start_index;\n        if (index > length) throw \"index higher than length\"\n        if (left < length && comparator(container[left].value, container[index].value)) {\n            index = left;\n        }\n        if (right < length && comparator(container[right].value, container[index].value)) {\n            index = right;\n        }\n        if (index !== start_index) {\n            this._swap(start_index, index);\n            this._heapify_down(index);\n        }\n    }\n\n    /**\n     * Removes and returns the top entry of the heap.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    pop() {\n        const container = this._container;\n        if (container.length === 0) {\n            return null;\n        } else if (container.length === 1) {\n            return container.pop();\n        }\n        this._swap(0, container.length - 1);\n        const item = container.pop();\n        this._heapify_down();\n        return item;\n    }\n\n    /**\n     * Returns the top entry of the heap without removing it.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    get first() {\n        return this._container.length > 0 ? this._container[0] : null;\n    }\n\n\n    /**\n     * Yields the raw data\n     * @yields {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    * iterate() {\n        for (let i = 0, n = this._container.length; i < n; ++i) {\n            yield this._container[i].element;\n        }\n    }\n\n    /**\n     * Returns the heap as ordered array.\n     * @returns {Array} Array consisting the elements ordered by {@link comparator}.\n     */\n    toArray() {\n        return this.data()\n            .sort((a,b) => this._comparator(a, b) ? -1 : 0)\n    }\n\n    /**\n     * Returns elements of container array.\n     * @returns {Array} Array consisting the elements.\n     */\n    data() {\n        return this._container\n            .map(d => d.element)\n    }\n\n    /**\n     * Returns the container array.\n     * @returns {Array} The container array.\n     */\n    raw_data() {\n        return this._container;\n    }\n\n    /**\n     * The size of the heap.\n     * @returns {Number}\n     */\n    get length() {\n        return this._container.length;\n    }\n\n    /**\n     * Returns false if the the heap has entries, true if the heap has no entries.\n     * @returns {Boolean}\n     */\n    get empty() {\n        return this.length === 0;\n    }\n}","/**\n * @class\n * @alias DisjointSet\n * @see {@link https://en.wikipedia.org/wiki/Disjoint-set_data_structure}\n */\nexport class DisjointSet {\n    /**\n     * @constructor\n     * @alias DisjointSet\n     * @memberof module:datastructure\n     * @param {Array=} elements \n     * @returns {DisjointSet}\n     */\n    constructor(elements = null) {\n        this._list = new Set();\n        if (elements) {\n            for (const e of elements) {\n                this.make_set(e);\n            }\n        }\n        return this;\n    }\n\n    make_set(x) {\n        const list = this._list;\n        if (!list.has(x)) {\n            list.add(x);\n            x.__disjoint_set = {};\n            x.__disjoint_set.parent = x;\n            x.__disjoint_set.children = new Set([x]);\n            x.__disjoint_set.size = 1;\n        }\n        return this;\n    }\n\n    find(x) {\n        const list = this._list;\n        if (list.has(x)) {\n            if (x.__disjoint_set.parent !== x) {\n                x.__disjoint_set.children.add(...x);\n                x.__disjoint_set.parent = this.find(x.__disjoint_set.parent);\n                return x.__disjoint_set.parent;\n            } else {\n                return x;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    union(x, y) {\n        let node_x = this.find(x);\n        let node_y = this.find(y);\n\n        if (node_x === node_y) return this;\n        if (node_x.__disjoint_set.size < node_y.__disjoint_set.size) [node_x, node_y] = [node_y, node_x];\n\n        node_y.__disjoint_set.parent = node_x;\n        // keep track of children?\n        node_y.__disjoint_set.children.forEach(node_x.__disjoint_set.children.add, node_x.__disjoint_set.children);\n        node_x.__disjoint_set.size += node_y.__disjoint_set.size;\n\n        return this;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n/**\n * @class\n * @alias BallTree\n */\nexport class BallTree {\n    /**\n     * Generates a BallTree with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias BallTree\n     * @param {Array=} elements - Elements which should be added to the BallTree\n     * @param {Function} [metric = euclidean] metric to use: (a, b) => distance\n     * @see {@link https://en.wikipedia.org/wiki/Ball_tree}\n     * @see {@link https://github.com/invisal/noobjs/blob/master/src/tree/BallTree.js}\n     * @returns {BallTree}\n     */\n    constructor(elements = null, metric = euclidean) {\n        this._Node = class {\n            constructor(pivot, child1=null, child2=null, radius=null) {\n                this.pivot = pivot;\n                this.child1 = child1;\n                this.child2 = child2;\n                this.radius = radius;\n            }\n        }\n        this._Leaf = class {\n            constructor(points) {\n                this.points = points;\n            }\n        }\n        this._metric = metric;\n        if (elements) {\n            this.add(elements);\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @param {Array<*>} elements - new elements.\n     * @returns {BallTree}\n     */\n    add(elements) {\n        elements = elements.map((element, index) => {\n            return {index: index, element: element}\n        })\n        this._root = this._construct(elements);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Array<*>} elements \n     * @returns {Node} root of balltree.\n     */\n    _construct(elements) {\n        if (elements.length === 1) {\n            return new this._Leaf(elements);\n        } else {\n            let c = this._greatest_spread(elements);\n            let sorted_elements = elements.sort((a, b) => a.element[c] - b.element[c]);\n            let n = sorted_elements.length;\n            let p_index = Math.floor(n / 2);\n            let p = elements[p_index];\n            let L = sorted_elements.slice(0, p_index);\n            let R = sorted_elements.slice(p_index, n);\n            let radius = Math.max(...elements.map(d => this._metric(p.element, d.element)));\n            let B\n            if (L.length > 0 && R.length > 0) {         \n                B = new this._Node(p, this._construct(L), this._construct(R), radius);\n            } else {\n                B = new this._Leaf(elements);\n            }\n            return B;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Node} B \n     * @returns {Number}\n     */\n    _greatest_spread(B) {\n        let d = B[0].element.length;\n        let start = new Array(d);\n\n        for (let i = 0; i < d; ++i) {\n            start[i] = [Infinity, -Infinity];\n        }\n\n        let spread = B.reduce((acc, current) => {\n            for (let i = 0; i < d; ++i) {\n                acc[i][0] = Math.min(acc[i][0], current.element[i]);\n                acc[i][1] = Math.max(acc[i][1], current.element[i]);\n            }\n            return acc;\n        }, start);\n        spread = spread.map(d => d[1] - d[0]);\n        \n        let c = 0;\n        for (let i = 0; i < d; ++i) {\n            c = spread[i] > spread[c] ? i : c;\n        }\n        return c;\n    }\n\n    /**\n     * \n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        return this._search(t, k, new Heap(null, d => this._metric(d.element, t), \"max\"), this._root);\n    }\n\n    /**\n     * @private\n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @param {Heap} Q - Heap consists of the currently found {@link k} nearest neighbors.\n     * @param {Node|Leaf} B \n     */\n    _search(t, k, Q, B) {\n        // B is Node\n        if (Q.length >= k && B.pivot && B.radius && this._metric(t, B.pivot.element) - B.radius >= Q.first.value) {\n            return Q;\n        } \n        if (B.child1) this._search(t, k, Q, B.child1);\n        if (B.child2) this._search(t, k, Q, B.child2);\n        \n        // B is leaf\n        if (B.points) {\n            for (let i = 0, n = B.points.length; i < n; ++i) {\n                let p = B.points[i];\n                if (k > Q.length) {\n                    Q.push(p);\n                } else {\n                    Q.push(p);\n                    Q.pop();\n                }\n            }\n        }\n        return Q;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KNN\n */\nexport class KNN {\n    /**\n     * Generates a KNN list with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias KNN\n     * @param {Array=} elements - Elements which should be added to the KNN list\n     * @param {Function|\"precomputed\"} [metric = euclidean] metric is either precomputed or a function to use: (a, b) => distance\n     * @returns {KNN}\n     */\n    constructor(elements=null, metric=euclidean) {\n        this._metric = metric;\n        this._elements = elements instanceof Matrix ? elements : Matrix.from(elements);\n        const N = this._elements.shape[0];\n        if (metric === \"precomputed\") {\n            this._D = this._elements.clone();\n        } else {\n            this._D = distance_matrix(this._elements, metric);\n        }\n        this.KNN = [];\n        for (let row = 0; row < N; ++row) {\n            const distances = this._D.row(row);\n            const H = new Heap(null, d => d.value, \"min\");\n            for (let j = 0; j < N; ++j) {\n                H.push({\n                    value: distances[j],\n                    index: j,\n                });\n            }\n            this.KNN.push(H);\n        }\n    }\n\n    /**\n     * \n     * @param {Array|Number} t - query element or index.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        const metric = this._metric;\n        const KNN = this.KNN;\n        let H;\n        if (Array.isArray(t)) {\n            if (this._metric == \"precomputed\") {\n                throw \"Search by query element is only possible when not using a precomputed distance matrix!\"\n            } \n            const elements = this._elements;\n            const N = KNN.length;\n            let nearest_element_index = null;\n            let nearest_dist = Infinity;\n            for (let i = 0; i < N; ++i) {\n                const element = elements.row(i);\n                const dist = metric(t, element);\n                if (dist < nearest_dist) {\n                    nearest_element_index = i;\n                    nearest_dist = dist;\n                }\n            }\n            H = KNN[nearest_element_index];\n        } else if (Number.isInteger(t)) {\n            H = KNN[t]\n        }\n\n        let result = []\n        for (let i = 0; i < k; ++i) {\n            result.push(H.pop())\n        }\n        result.forEach(res => H.push(res.element))\n        return result\n    }    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n\n/**\n * @class\n * @alias DR\n * @borrows DR#parameter as DR#para\n * @borrows DR#parameter as DR#p\n */\nexport class DR {\n    /**\n     * Takes the default parameters and seals them, remembers the type of input {@link X}, and initializes the random number generator.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias DR\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed value for the random number generator.\n     * @returns {DR}\n     */\n    constructor(X, default_parameters, parameters) {\n        this._parameters = Object.assign(Object.seal(default_parameters), parameters);\n        if (Array.isArray(X)) {\n            this._type = \"array\";\n            this.X = Matrix.from(X);\n        } else if (X instanceof Matrix) {\n            this._type = \"matrix\";\n            this.X = X;\n        } else {\n            throw new Error(\"No valid type for X!\");\n        }\n        [this._N, this._D] = this.X.shape;\n        this._randomizer = new Randomizer(this._parameters.seed);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * Set and get parameters\n     * @param {String} name - name of the parameter.\n     * @param {any} [value = null] - value of the parameter to set.\n     * @returns {DR|any} - On setting a parameter, this function returns the DR object. If <code>value == null</code> then return actual parameter value.\n     * @example\n     * const DR = new druid.TSNE(X, {d: 3}); // creates a new DR object, with parameter for <code>d</code> = 3.\n     * DR.parameter(\"d\"); // returns 3,\n     * DR.parameter(\"d\", 2); // sets parameter <code>d</code> to 2 and returns <code>DR</code>.\n     */\n    parameter(name, value = null) {\n        if (!this._parameters.hasOwnProperty(name)) {\n            throw new Error(`${name} is not a valid parameter!`);\n        }\n        if (value !== null) {\n            this._parameters[name] = value;\n            this._is_initialized = false;\n            return this;\n        } else {\n            return this._parameters[name];\n        }\n    }\n\n    para(name, value = null) {\n        return this.parameter(name, value);\n    }\n\n    p(name, value = null) {\n        return this.parameter(name, value);\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} - Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Generator} - A generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    *generator() {\n        return this.transform();\n    }\n\n    /**\n     * If the respective DR method has an <code>init</code> function, call it before <code>transform</code>.\n     * @returns {DR}\n     */\n    check_init() {\n        if (!this._is_initialized && typeof this.init === \"function\") {\n            this.init();\n            this._is_initialized = true;\n        }\n        return this;\n    }\n\n    /**\n     * @returns {Matrix|Array} Returns the projection.\n     */\n    get projection() {\n        if (this.hasOwnProperty(\"Y\")) {\n            this.check_init();\n            return this._type === \"matrix\" ? this.Y : this.Y.to2dArray;\n        } else {\n            throw new Error(\"The dataset is not transformed yet!\");\n        }\n    }\n\n    /**\n     *\n     * @param  {...any} args - Arguments the transform method of the respective DR method takes.\n     * @returns {Promise} - A promise yielding the dimensionality reduced dataset.\n     */\n    async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * @static\n     * @param  {...any} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Matrix|Array} - The dimensionality reduced dataset.\n     */\n    static transform(...args) {\n        let dr = new this(...args);\n        return dr.transform();\n    }\n\n    /**\n     * @static\n     * @param  {...any} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Promise} - A promise yielding the dimensionality reduced dataset.\n     */\n    static async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * @static\n     * @param  {...any} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Generator} - A generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    static *generator(...args) {\n        const dr = new this(...args);\n        const generator = dr.generator();\n        for (const result of generator) {\n            yield result;\n        }\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias PCA\n * @augments DR\n */\nexport class PCA extends DR {\n    /**\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias PCA\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @returns {PCA}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}. If parameter {@link A} is given, then project {@link A} with the principal components of {@link X}.\n     * @param {null|Matrix|Array} [A = null] - If given, the data to project.\n     * @returns {Matrix|Array} - The projected data.\n     */\n    transform(A = null) {\n        const V = this.principal_components();\n        if (A == null) {\n            const X = this.X;\n            this.Y = X.dot(V);\n            return this.projection;\n        } else if (Array.isArray(A)) {\n            return Matrix.from(A).dot(V).asArray;\n        } else if (A instanceof Matrix) {\n            return A.dot(V);\n        } else {\n            throw new Error(\"No valid type for A!\");\n        }\n    }\n\n    /**\n     * Computes the {@link d} principal components of Matrix {@link X}.\n     * @returns {Matrix}\n     */\n    principal_components() {\n        if (this.V) {\n            return this.V;\n        }\n        const { d, eig_args } = this._parameters;\n        const X = this.X;\n        const means = Matrix.from(X.meanCols);\n        const X_cent = X.sub(means);\n        const C = X_cent.transpose().dot(X_cent);\n        const { eigenvectors: V } = simultaneous_poweriteration(C, d, eig_args);\n        this.V = Matrix.from(V).transpose();\n        return this.V;\n    }\n\n    static principal_components(X, parameters) {\n        const dr = new this(X, parameters);\n        return dr.principal_components();\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias MDS\n * @extends DR\n */\nexport class MDS extends DR {\n    /**\n     * Classical MDS.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias MDS\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}.\n     * @returns {Matrix|Array}\n     */\n    transform() {\n        const X = this.X;\n        const rows = X.shape[0];\n        const { d, metric, eig_args } = this._parameters;\n        const A = metric === \"precomputed\" ? X : distance_matrix(X, metric);\n        const ai_ = A.meanCols;\n        const a_j = A.meanRows;\n        const a__ = A.mean;\n\n        this._d_X = A;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n\n        return this.projection;\n    }\n\n    /**\n     * @returns {Number} - the stress of the projection.\n     */\n    stress() {\n        const N = this.X.shape[0];\n        const Y = this.Y;\n        const d_X = this._d_X;\n        const d_Y = new Matrix();\n        d_Y.shape = [\n            N,\n            N,\n            (i, j) => {\n                return i < j ? euclidean(Y.row(i), Y.row(j)) : d_Y.entry(j, i);\n            },\n        ];\n        let top_sum = 0;\n        let bottom_sum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                top_sum += Math.pow(d_X.entry(i, j) - d_Y.entry(i, j), 2);\n                bottom_sum += Math.pow(d_X.entry(i, j), 2);\n            }\n        }\n        return Math.sqrt(top_sum / bottom_sum);\n    }\n}\n","/**\n *\n * @memberof module:optimization\n * @alias powell\n * @param {Function} f\n * @param {Array} x0\n * @param {Number} [max_iter = 300]\n * @returns {Array}\n * @see http://optimization-js.github.io/optimization-js/optimization.js.html#line438\n */\nexport default function (f, x0, max_iter = 300) {\n    const epsilon = 1e-2;\n    const n = x0.length;\n    let alpha = 1e-3;\n    let pfx = 10000;\n    let x = x0.slice();\n    let fx = f(x);\n    let convergence = false;\n\n    while (max_iter-- >= 0 && !convergence) {\n        convergence = true;\n        for (let i = 0; i < n; ++i) {\n            x[i] += 1e-6;\n            let fxi = f(x);\n            x[i] -= 1e-6;\n            let dx = (fxi - fx) / 1e-6;\n            if (Math.abs(dx) > epsilon) {\n                convergence = false;\n            }\n            x[i] -= alpha * dx;\n            fx = f(x);\n        }\n        alpha *= pfx >= fx ? 1.05 : 0.4;\n        pfx = fx;\n    }\n    return x;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n/**\n * @class\n * @alias Hierarchical_Clustering\n */\nexport class Hierarchical_Clustering {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias Hierarchical_Clustering\n     * @todo needs restructuring.\n     * @param {Matrix} - Data or distance matrix if metric is 'precomputed'\n     * @param {(\"single\"|\"complete\"|\"average\")} [linkage = \"complete\"]\n     * @param {Function|\"precomputed\"} [metric = euclidean]\n     * @returns {Hierarchical_Clustering}\n     */\n    constructor(matrix, linkage = \"complete\", metric = euclidean) {\n        this._id = 0;\n        this._matrix = matrix instanceof Matrix ? matrix : Matrix.from(matrix);\n        this._metric = metric;\n        this._linkage = linkage;\n        if (metric === \"precomputed\" && this._matrix.shape[0] !== this._matrix.shape[1]) {\n            throw new Error(\"If metric is 'precomputed', then matrix has to be square!\");\n        }\n        this.init();\n        this.root = this.do();\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} value - value where to cut the tree.\n     * @param {(\"distance\"|\"depth\")} [type = \"distance\"] - type of value.\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters(value, type = \"distance\") {\n        let clusters = [];\n        let accessor;\n        switch (type) {\n            case \"distance\":\n                accessor = (d) => d.dist;\n                break;\n            case \"depth\":\n                accessor = (d) => d.depth;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        this._traverse(this.root, accessor, value, clusters);\n        return clusters;\n    }\n\n    /**\n     * @private\n     * @param {} node\n     * @param {*} f\n     * @param {*} value\n     * @param {*} result\n     */\n    _traverse(node, f, value, result) {\n        if (f(node) <= value) {\n            result.push(node.leaves());\n        } else {\n            this._traverse(node.left, f, value, result);\n            this._traverse(node.right, f, value, result);\n        }\n    }\n\n    /**\n     * computes the tree.\n     */\n    init() {\n        const metric = this._metric;\n        const A = this._matrix;\n        const n = (this._n = A.shape[0]);\n        const d_min = (this._d_min = new Float64Array(n));\n        let distance_matrix;\n        if (metric !== \"precomputed\") {\n            distance_matrix = new Matrix(n, n, 0); //new Array(n);\n            for (let i = 0; i < n; ++i) {\n                d_min[i] = 0;\n                //distance_matrix[i] = new Float64Array(n);\n                for (let j = 0; j < n; ++j) {\n                    distance_matrix.set_entry(i, j, i === j ? Infinity : metric(A.row(i), A.row(j)));\n                    if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        } else {\n            distance_matrix = this._matrix.clone();\n            for (let i = 0; i < n; ++i) {\n                for (let j = 0; j < n; ++j) {\n                    if (i === j) {\n                        distance_matrix.set_entry(i, j, Infinity);\n                    } else if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        }\n        this._distance_matrix = distance_matrix;\n        const clusters = (this._clusters = new Array(n));\n        const c_size = (this._c_size = new Uint16Array(n));\n        for (let i = 0; i < n; ++i) {\n            clusters[i] = [];\n            clusters[i][0] = new Cluster(this._id++, null, null, 0, A.row(i), i, 1, 0);\n            c_size[i] = 1;\n        }\n        return this;\n    }\n\n    /**\n     * computes the tree.\n     */\n    do() {\n        const n = this._n;\n        const d_min = this._d_min;\n        const D = this._distance_matrix;\n        const clusters = this._clusters;\n        const c_size = this._c_size;\n        const linkage = this._linkage;\n        let root = null;\n        for (let p = 0, p_max = n - 1; p < p_max; ++p) {\n            let c1 = 0;\n            for (let i = 0; i < n; ++i) {\n                let D_i_min = D.entry(i, d_min[i]);\n                for (let j = i + 1; j < n; ++j) {\n                    if (D_i_min > D.entry(i, j)) {\n                        d_min[i] = j;\n                        D_i_min = D.entry(i, d_min[i]);\n                    }\n                }\n            }\n            for (let i = 0; i < n; ++i) {\n                if (D.entry(i, d_min[i]) < D.entry(c1, d_min[c1])) {\n                    c1 = i;\n                }\n            }\n            let c2 = d_min[c1];\n            let c1_cluster = clusters[c1][0];\n            let c2_cluster = clusters[c2][0];\n            let c1_cluster_indices = c1_cluster.isLeaf ? [c1_cluster.index] : c1_cluster.index;\n            let c2_cluster_indices = c2_cluster.isLeaf ? [c2_cluster.index] : c2_cluster.index;\n            let indices = c1_cluster_indices.concat(c2_cluster_indices);\n            let new_cluster = new Cluster(this._id++, c1_cluster, c2_cluster, D.entry(c1, c2), null, indices);\n            c1_cluster.parent = new_cluster;\n            c2_cluster.parent = new_cluster;\n            clusters[c1].unshift(new_cluster);\n            c_size[c1] += c_size[c2];\n            for (let j = 0; j < n; ++j) {\n                const D_c1_j = D.entry(c1, j);\n                const D_c2_j = D.entry(c2, j);\n                let value;\n                switch (linkage) {\n                    case \"single\":\n                        value = Math.min(D_c1_j, D_c2_j);\n                        break;\n                    case \"complete\":\n                        value = Math.max(D_c1_j, D_c2_j);\n                        break;\n                    case \"average\":\n                        value = (c_size[c1] * D_c1_j + c_size[c2] * D_c2_j) / (c_size[c1] + c_size[j]);\n                        break;\n                }\n                D.set_entry(j, c1, value);\n                D.set_entry(c1, j, value);\n            }\n\n            D.set_entry(c1, c1, Infinity);\n            for (let i = 0; i < n; ++i) {\n                D.set_entry(i, c2, Infinity);\n                D.set_entry(c2, i, Infinity);\n            }\n\n            /* for (let j = 0; j < n; ++j) {\n                if (d_min[j] === c2) {\n                    d_min[j] = c1;\n                }\n                if (D.entry(c1, j) < D.entry(c1, d_min[c1])) {\n                    d_min[c1] = j;\n                }\n            } */\n            root = new_cluster;\n        }\n        return root;\n    }\n}\n\nclass Cluster {\n    constructor(id, left, right, dist, centroid, index, size, depth) {\n        this.id = id;\n        this.left = left;\n        this.right = right;\n        this.dist = dist;\n        this.index = index;\n        this.size = size ?? left.size + right.size;\n        this.depth = depth ?? 1 + Math.max(left.depth, right.depth);\n        this.centroid = centroid ?? this._calculate_centroid(left, right);\n        this.parent = null;\n        return this;\n    }\n\n    _calculate_centroid(left, right) {\n        const l_size = left.size;\n        const r_size = right.size;\n        const l_centroid = left.centroid;\n        const r_centroid = right.centroid;\n        const size = this.size;\n        const n = left.centroid.length;\n        const new_centroid = new Float64Array(n);\n        for (let i = 0; i < n; ++i) {\n            new_centroid[i] = (l_size * l_centroid[i] + r_size * r_centroid[i]) / size;\n        }\n        return new_centroid;\n    }\n\n    get isLeaf() {\n        return this.depth === 0;\n    }\n\n    leaves() {\n        if (this.isLeaf) return [this];\n        const left = this.left;\n        const right = this.right;\n        return (left.isLeaf ? [left] : left.leaves()).concat(right.isLeaf ? [right] : right.leaves());\n    }\n\n    descendants() {\n        if (this.isLeaf) return [this];\n        const left_descendants = this.left.descendants();\n        const right_descendants = this.right.descendants();\n        return left_descendants.concat(right_descendants).concat([this]);\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { linspace, Matrix } from \"../matrix/index.js\";\nimport { min } from \"../util/index.js\";\n/**\n * @class\n * @alias KMedoids\n */\nexport class KMedoids {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMedoids\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - data matrix\n     * @param {Numbers} K - number of clusters\n     * @param {number} [max_iter=null] - maximum number of iterations. Default is 10 * Math.log10(N)\n     * @param {Function} [metric = euclidean] - metric defining the dissimilarity \n     * @param {Number} [seed = 1212] - seed value for random number generator\n     * @returns {KMedoids}\n     * @see {@link https://link.springer.com/chapter/10.1007/978-3-030-32047-8_16} Faster k-Medoids Clustering: Improving the PAM, CLARA, and CLARANS Algorithms\n     */\n    constructor(matrix, K, max_iter=null, metric = euclidean, seed=1212) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._A = this._matrix.to2dArray;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        this._max_iter = max_iter || 10 * Math.log10(N) \n        this._distance_matrix = new Matrix(N, N, \"zeros\");\n        /* for (let i = 1; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dist = metric(this._A[i], this._A[j]);\n                this._distance_matrix.set_entry(i, j, dist);\n                this._distance_matrix.set_entry(j, i, dist)\n            }\n        } */\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_medoids = this._get_random_medoids(K);\n        //if (init) this.init(K, this._cluster_medoids);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const A = this._A;\n        if (!this._is_initialized) {\n            this.init(K, this._cluster_medoids);\n        }\n        const result = new Array(K).fill().map(() => new Array());\n        A.forEach((x_j, j) => {\n            result[this._nearest_medoid(x_j, j).index_nearest].push(j);\n        })\n        result.medoids = this._cluster_medoids;\n        return result;\n    }\n\n    async* generator() {\n        const max_iter = this._max_iter;\n        yield this.get_clusters()\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n            yield this.get_clusters();\n        } while (!finish && ++i < max_iter)\n    }\n\n    /**\n     * Algorithm 1. FastPAM1: Improved SWAP algorithm\n     */\n    /* _iteration_1() {\n        const A = this._A;\n        const N = this._N;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        let DeltaTD = 0;\n        let m0 = null;\n        let x0 = null;\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const nearest_medoid = this._nearest_medoid(x_j, j);\n                const d_j = nearest_medoid.distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    // disance to new medoid\n                    const d_oj = this._get_distance(o, j, x_o, x_j);\n                    const {\n                        \"index_nearest\": n,\n                        \"distance_nearest\": d_n,\n                        \"distance_second\": d_s,\n                    } = this._nearest_medoid(x_o, o); \n                    this._clusters[o] = n; // cached values\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change\n                    if (d_oj < d_n) { // reassignment check\n                        deltaTD.forEach((d_i, i) => {\n                            if (n !== i) {\n                                deltaTD[i] = d_i + d_oj - d_n; // update loss change\n                            }\n                        });\n                    }\n                });\n                // choose best medoid i;\n                const i = deltaTD\n                    .map((d, i) => [d, i])\n                    .sort((d1, d2) => d1[0] - d2[0])[0][1];\n                const deltaTD_i = deltaTD[i];\n                // store\n                if (deltaTD_i < DeltaTD) {\n                    DeltaTD = deltaTD_i;\n                    m0 = i;\n                    x0 = j;\n                }\n            }\n        });\n\n        if (DeltaTD >= 0) {\n            return true // break loop if DeltaTD >= 0\n        }\n        // swap roles of medoid m and non-medoid x;\n        medoids[m0] = x0;\n        this._cluster_medoids = medoids;\n        return false\n    } */\n\n    /** Algorithm 2. FastPAM2: SWAP with multiple candidates\n     * \n     */\n    _iteration() {\n        const A = this._A;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        const cache = A.map((x_o, o) => this._nearest_medoid(x_o, o));\n        // empty best candidates array\n        const DeltaTD = new Array(K).fill(0);\n        const xs = new Array(K).fill(null);\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const d_j = cache[j].distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    if (j === o) return;\n                    const d_oj = this._get_distance(o, j, x_o, x_j); // distance to new medoid\n                    const {\"index_nearest\": n, \"distance_nearest\": d_n, \"distance_second\": d_s} = cache[o]; // cached\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change for x_o\n                    // Reassignment check\n                    if (d_oj < d_n) { \n                        // update loss change\n                        for (let i = 0; i < K; ++i) {\n                            if (i !== n) deltaTD[i] += d_oj - d_n;\n                        }\n                    }\n                });\n                // remember best swap for i;\n                deltaTD\n                    .map((d, i) => [d, i])\n                    .filter(([d, i]) => d < DeltaTD[i])\n                    .forEach(([d, i]) => {\n                        if (d < DeltaTD[i]) {\n                            DeltaTD[i] = d;\n                            xs[i] = j;\n                        }\n                    })\n            }\n        })\n        // stop if no improvements were found\n        if (min(DeltaTD) >= 0) return true; \n\n        // execute all improvements\n        while (min(DeltaTD) < 0) {\n            // swap roles of medoid m_i and non_medoid xs_i\n            const i = DeltaTD\n                .map((d, i) => [d, i])\n                .sort(([a], [b]) => a - b)[0][1];\n            if (medoids.filter(m => m == xs[i]).length == 0) {\n                medoids[i] = xs[i];\n            }\n            // disable the swap just performed\n            DeltaTD[i] = 0; \n            // recompute TD for remaining swap candidates\n            DeltaTD\n                .map((d_j, j) => [d_j, j])\n                .filter(([d_j]) => d_j < 0)\n                .forEach(([_, j]) => {\n                    const x_j = A[j];\n                    let sum = 0;\n                    A.forEach((x_o, o) => {\n                        if (medoids.findIndex(m => m != j && m == o) >= 0) return;\n                        if (i == j) return;\n                        if (cache[o].index_nearest === medoids[j])\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j), cache[o].distance_second) - cache[o].distance_nearest); \n                        else {\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j) - cache[o].distance_nearest, 0));\n                        }\n                    });\n                    DeltaTD[j] = sum;\n                })\n        }\n        this._cluster_medoids = medoids;\n        return false;\n    }\n\n    _get_distance(i, j, x_i=null, x_j=null) {\n        if (i === j) return 0;\n        const D = this._distance_matrix;\n        const A = this._A;\n        const metric = this._metric;\n        let d_ij = D.entry(i, j);\n        if (d_ij === 0) {\n            d_ij = metric(x_i || A[i], x_j || A[j]);\n            D.set_entry(i, j, d_ij);\n            D.set_entry(j, i, d_ij);\n        }\n        return d_ij;\n    }\n\n    _nearest_medoid(x_j, j) {\n        const medoids = this._cluster_medoids;\n        const A = this._A;\n        const [nearest, second] = medoids\n            .map((m, i) => {\n                const x_m = A[m]; \n                return [this._get_distance(j, m, x_j, x_m), i];\n            })\n            .sort((m1, m2) => m1[0] - m2[0]);\n        \n        return { \n            \"distance_nearest\": nearest[0], \n            \"index_nearest\": nearest[1],\n            \"distance_second\": second[0],\n            \"index_second\": second[1],\n        };\n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_medoids) {\n        if (!K) K = this._K;\n        if (!cluster_medoids) cluster_medoids = this._get_random_medoids(K);\n        const max_iter = this._max_iter;\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n        } while (!finish && ++i < max_iter)\n        return this;\n    }\n\n    /**\n     * Algorithm 3. FastPAM LAB: Linear Approximate BUILD initialization.\n     * @param {number} K - number of clusters\n     * \n     */\n    _get_random_medoids(K) {\n        const N = this._N;\n        const A = this._A;\n        const indices = linspace(0, N - 1);\n        const randomizer = this._randomizer;\n        const n = Math.min(N, 10 + Math.ceil(Math.sqrt(N)));\n        const TD = new Array(n).fill(Infinity);\n        const medoids = [];\n        // first medoid\n        let TD0 = Infinity;\n        let S = randomizer.choice(indices, n);\n        for (let j = 0; j < n; ++j) {\n            const S_j = S[j];\n            const x_j = A[S_j];\n            for (let o = 0; o < n; ++o) {\n                if (o === j) continue;\n                const x_o = A[S[o]];\n                TD[j] += this._get_distance(j, o, x_j, x_o);\n            }\n            if (TD[j] < TD0) {\n                TD0 = TD[j]; // smallest distance sum\n                medoids.push(S_j);\n            }\n        }\n        // other medoids\n        for (let i = 1; i < K; ++i) {\n            let DeltaTD = Infinity;\n            S = randomizer.choice(indices.filter(index => medoids.findIndex(d => d === index) < 0), n);\n            for (let j = 0; j < n; ++j) {\n                let deltaTD = 0;\n                const S_j = S[j];\n                const x_j = A[S_j];\n                for (let o = 0; o < n; ++o) {\n                    if (o === j) continue;\n                    const S_o = S[o];\n                    const x_o = A[S_o];\n                    let delta = this._get_distance(S_j, S_o, x_j, x_o) - min(medoids.map(m => this._get_distance(S_o, m, x_o)));\n                    if (delta < 0) {\n                        deltaTD = deltaTD + delta;\n                    }\n                }\n                // best reduction\n                if (deltaTD < DeltaTD) {\n                    DeltaTD = deltaTD;\n                    medoids.push(S_j);\n                }\n            }\n            TD0 += DeltaTD;\n        }\n        return medoids.slice(0, K);\n    }\n    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n/**\n * @class\n * @alias FASTMAP\n * @extends DR\n */\nexport class FASTMAP extends DR {\n    /**\n     * FastMap: a fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias FASTMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the dimensionality of the projection.\n     * @returns {FASTMAP}\n     * @see {@link https://doi.org/10.1145/223784.223812}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     * Chooses two points which are the most distant in the actual projection.\n     * @private\n     * @param {Function} dist\n     * @returns {Array} An array consisting of first index, second index, and distance between the two points.\n     */\n    _choose_distant_objects(dist) {\n        const X = this.X;\n        const N = X.shape[0];\n        let a_index = (this._randomizer.random_int % N) - 1;\n        let b_index = null;\n        let max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_ai = dist(a_index, i);\n            if (d_ai > max_dist) {\n                max_dist = d_ai;\n                b_index = i;\n            }\n        }\n        max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_bi = dist(b_index, i);\n            if (d_bi > max_dist) {\n                max_dist = d_bi;\n                a_index = i;\n            }\n        }\n        return [a_index, b_index, max_dist];\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} The {@link d}-dimensional projection of the data matrix {@link X}.\n     */\n    transform() {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric } = this._parameters;\n        const Y = new Matrix(N, d, 0);\n        let dist = (a, b) => metric(X.row(a), X.row(b));\n\n        for (let _col = 0; _col < d; ++_col) {\n            let old_dist = dist;\n            // choose pivot objects\n            const [a_index, b_index, d_ab] = this._choose_distant_objects(dist);\n            if (d_ab !== 0) {\n                // project the objects on the line (O_a, O_b)\n                for (let i = 0; i < N; ++i) {\n                    const d_ai = dist(a_index, i);\n                    const d_bi = dist(b_index, i);\n                    const y_i = (d_ai ** 2 + d_ab ** 2 - d_bi ** 2) / (2 * d_ab);\n                    Y.set_entry(i, _col, y_i);\n                }\n                // consider the projections of the objects on a\n                // hyperplane perpendicluar to the line (a, b);\n                // the distance function D'() between two\n                // projections is given by Eq.4\n                dist = (a, b) => Math.sqrt(old_dist(a, b) ** 2 - (Y.entry(a, _col) - Y.entry(b, _col)) ** 2);\n            }\n        }\n        // return embedding.\n        this.Y = Y;\n        return this.projection;\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { DR } from \"./DR.js\";\nimport euclidean from \"../metrics/euclidean.js\";\n\n/**\n * @class\n * @alias ISOMAP\n * @extends DR\n */\nexport class ISOMAP extends DR {\n    /**\n     * Isometric feature mapping (ISOMAP).\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias ISOMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link ISOMAP} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2319}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this.X.shape[0] / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const X = this.X;\n        const rows = this._N;\n        const { d, metric, eig_args, neighbors } = this._parameters;\n        // TODO: make knn extern and parameter for constructor or transform?\n        const D = new Matrix();\n        D.shape = [rows, rows, (i, j) => (i <= j ? metric(X.row(i), X.row(j)) : D.entry(j, i))];\n        const kNearestNeighbors = [];\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < rows; ++j) {\n                row.push({\n                    index: j,\n                    distance: D.entry(i, j),\n                });\n            }\n            const H = new Heap(row, (d) => d.distance, \"min\");\n            kNearestNeighbors.push(H.toArray().slice(1, neighbors + 1));\n        }\n\n        /*D = dijkstra(kNearestNeighbors);*/\n        // compute shortest paths\n        // TODO: make extern\n        /** @see {@link https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm} */\n        const G = new Matrix(rows, rows, (i, j) => {\n            const other = kNearestNeighbors[i].find((n) => n.index === j);\n            return other ? other.distance : Infinity;\n        });\n\n        for (let i = 0; i < rows; ++i) {\n            for (let j = 0; j < rows; ++j) {\n                for (let k = 0; k < rows; ++k) {\n                    G.set_entry(i, j, Math.min(G.entry(i, j), G.entry(i, k) + G.entry(k, j)));\n                }\n            }\n        }\n\n        let ai_ = new Float64Array(rows);\n        let a_j = new Float64Array(rows);\n        let a__ = 0;\n        const A = new Matrix(rows, rows, (i, j) => {\n            let val = G.entry(i, j);\n            val = val === Infinity ? 0 : val;\n            ai_[i] += val;\n            a_j[j] += val;\n            a__ += val;\n            return val;\n        });\n\n        ai_ = ai_.map((v) => v / rows);\n        a_j = a_j.map((v) => v / rows);\n        a__ /= rows ** 2;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        // compute d eigenvectors\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n        // return embedding\n        return this.projection;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { linspace } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KMeans\n */\nexport class KMeans {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMeans\n     * @todo needs restructuring. \n     * @param {Matrix} matrix \n     * @param {Numbers} K \n     * @param {Function} [metric = euclidean] \n     * @param {Number} [seed = 1987]\n     * @param {Boolean} [init = true]\n     * @returns {KMeans}\n     */\n    constructor(matrix, K, metric = euclidean, seed=1987, init = true) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_centroids = this._get_random_centroids(K);\n        if (init) this.init(K, this._cluster_centroids);\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const clusters = this._clusters;\n        const result = new Array(K).fill().map(() => new Array());\n        clusters.forEach((c, i) => result[c].push(i));\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Array} points \n     * @param {Array} candidates \n     */\n    _furthest_point(points, candidates) {\n        const A = this._matrix;\n        const metric = this._metric;\n        let i = points.length;\n        let H = Heap.heapify(\n            candidates, \n            (d) => {\n                const Ad = A.row(d)\n                let sum = 0;\n                for (let j = 0; j < i; ++j) {\n                    sum += metric(Ad, points[j])\n                }\n                return sum;\n            }, \n            \"max\"\n        )\n        return H.pop().element;\n    }\n\n    _get_random_centroids(K) {\n        const N = this._N;\n        const randomizer = this._randomizer;\n        const A = this._matrix;\n        const cluster_centroids = new Array(K).fill()\n        const indices = linspace(0, N - 1);\n        const random_point = randomizer.random_int % (N - 1);\n        cluster_centroids[0] = A.row(random_point);\n        const init_points = [random_point];\n        const sample_size = Math.floor((N - K) / K);// / K\n        for (let i = 1; i < K; ++i) {\n            // sampling + kmeans++ improvement?\n            const sample = randomizer.choice(indices.filter(d => init_points.indexOf(d) == -1), sample_size);\n            const furthest_point = this._furthest_point(cluster_centroids.slice(0, i), sample);\n            init_points.push(furthest_point);\n            cluster_centroids[i] = A.row(furthest_point);\n        }\n        return cluster_centroids;\n    }\n\n    _iteration(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const metric = this._metric;\n        const clusters = this._clusters;\n        let clusters_changed = false;\n        // find nearest cluster centroid.\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i)\n            let min_dist = Infinity;\n            let min_cluster = null;\n            for (let j = 0; j < K; ++j) {\n                let d = metric(cluster_centroids[j], Ai);\n                if (d < min_dist) {\n                    min_dist = d;\n                    min_cluster = j; \n                }\n            }\n            if (clusters[i] !== min_cluster) {\n                clusters_changed = true;\n            }\n            clusters[i] = min_cluster;\n        }\n        // update cluster centroid\n        // reset cluster centroids to 0\n        for (let i = 0; i < K; ++i) {\n            const centroid = cluster_centroids[i];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] = 0;\n            }\n        }\n        // compute centroid\n        this._compute_centroid(cluster_centroids);\n\n        return {   \n            \"clusters_changed\": clusters_changed,\n            \"cluster_centroids\": cluster_centroids\n        };\n    }\n\n    _compute_centroid(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const clusters = this._clusters;\n        const cluster_counter = new Array(K).fill(0);\n\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i);\n            const ci = clusters[i];\n            cluster_counter[ci]++;\n            const centroid = cluster_centroids[ci];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] += Ai[j];\n            }\n        }\n        for (let i = 0; i < K; ++i) {\n            const n = cluster_counter[i];\n            cluster_centroids[i] = cluster_centroids[i].map(c => c / n);\n        }\n        \n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_centroids) {\n        if (!K) K = this._K;\n        if (!cluster_centroids) cluster_centroids = this._get_random_centroids(K);\n        let clusters_changed = false;\n        do {\n            const iteration_result = this._iteration(cluster_centroids)\n            cluster_centroids = iteration_result.cluster_centroids;\n            clusters_changed = iteration_result.clusters_changed;\n        } while (clusters_changed)\n    }\n    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LDA\n * @extends DR\n */\nexport class LDA extends DR {\n    /**\n     * Linear Discriminant Analysis.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LDA\n     * @param {Matrix} X - The high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Array} parameters.labels - The labels / classes for each data point.\n     * @param {number} [parameters.d = 2] - The dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://onlinelibrary.wiley.com/doi/10.1111/j.1469-1809.1936.tb02137.x}\n     */\n    constructor(X, parameters) {\n        super(X, { labels: null, d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, cols] = X.shape;\n        const { d, labels, eig_args } = this._parameters;\n        if (labels === null || labels.length != rows) {\n            throw new Error(\"LDA needs parameter label to every datapoint to work!\");\n        }\n        const unique_labels = {};\n        let label_id = 0;\n        labels.forEach((l, i) => {\n            if (l in unique_labels) {\n                unique_labels[l].count++;\n                unique_labels[l].rows.push(X.row(i));\n            } else {\n                unique_labels[l] = {\n                    id: label_id++,\n                    count: 1,\n                    rows: [X.row(i)],\n                };\n            }\n        });\n\n        // create X_mean and vector means;\n        const X_mean = X.mean;\n        const V_mean = new Matrix(label_id, cols);\n        for (const label in unique_labels) {\n            const V = Matrix.from(unique_labels[label].rows);\n            const v_mean = V.meanCols;\n            for (let j = 0; j < cols; ++j) {\n                V_mean.set_entry(unique_labels[label].id, j, v_mean[j]);\n            }\n        }\n        // scatter_between\n        let S_b = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j] - X_mean);\n            const N = unique_labels[label].count;\n            S_b = S_b.add(m.dot(m.transpose()).mult(N));\n        }\n\n        // scatter_within\n        let S_w = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j]);\n            const R = unique_labels[label].rows;\n            for (let i = 0, n = unique_labels[label].count; i < n; ++i) {\n                const row_v = new Matrix(cols, 1, (j, _) => R[i][j] - m.entry(j, 0));\n                S_w = S_w.add(row_v.dot(row_v.transpose()));\n            }\n        }\n\n        let { eigenvectors: V } = simultaneous_poweriteration(S_w.inverse().dot(S_b), d, eig_args);\n        V = Matrix.from(V).transpose();\n        this.Y = X.dot(V);\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { k_nearest_neighbors } from \"../matrix/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LLE\n * @extends DR\n */\nexport class LLE extends DR {\n    /**\n     * Locally Linear Embedding.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LLE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} neighbors - the label / class of each data point.\n     * @param {Number} [d = 2] - the dimensionality of the projection.\n     * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [seed = 1212] - the dimensionality of the projection.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2323}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const rows = this._N;\n        const cols = this._D;\n        const { neighbors, d, eig_args, metric } = this._parameters;\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        const O = new Matrix(neighbors, 1, 1);\n        const W = new Matrix(rows, rows);\n\n        for (let row = 0; row < rows; ++row) {\n            const nN_row = nN[row];\n            const Z = new Matrix(neighbors, cols, (i, j) => X.entry(nN_row[i].j, j) - X.entry(row, j));\n            const C = Z.dot(Z.T);\n            if (neighbors > cols) {\n                const C_trace = neumair_sum(C.diag) / 1000;\n                for (let j = 0; j < neighbors; ++j) {\n                    C.set_entry(j, j, C.entry(j, j) + C_trace);\n                }\n            }\n            // reconstruct;\n            let w = Matrix.solve_CG(C, O, this._randomizer);\n            w = w.divide(w.sum);\n            for (let j = 0; j < neighbors; ++j) {\n                W.set_entry(row, nN_row[j].j, w.entry(j, 0));\n            }\n        }\n        // comp embedding\n        const I = new Matrix(rows, rows, \"identity\");\n        const IW = I.sub(W);\n        const M = IW.T.dot(IW);\n        const { eigenvectors: V } = simultaneous_poweriteration(M.T.inverse(), d + 1, eig_args);\n        this.Y = Matrix.from(V.slice(1, 1 + d)).T;\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\nimport { MDS } from \"./MDS.js\";\nimport { KMedoids } from \"../clustering/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\n/**\n * @class\n * @alias LSP\n * @extends DR\n */\nexport class LSP extends DR {\n    /**\n     * Least Squares Projection.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LSP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.neighbors = Math.max(Math.floor(N / 10), 2)] - number of neighbors to consider.\n     * @param {Number} [parameters.control_points = Math.ceil(Math.sqrt(N))] - number of controlpoints\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {LSP}\n     * @see {@link https://ieeexplore.ieee.org/document/4378370}\n     * @todo accept precomputed distance matrix.\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, control_points: undefined, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        this.parameter(\"control_points\", Math.min(parameters.control_points ?? Math.ceil(Math.sqrt(this._N)), this._N - 1));\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     *\n     * @param {DR} DR - method used for position control points.\n     * @param {Object} DR_parameters - Object containing parameters for the DR method which projects the control points\n     * @returns {LSP}\n     */\n    init(DR = MDS, DR_parameters = {}, KNN = BallTree) {\n        if (this._is_initialized) return this;\n        const X = this.X;\n        const N = this._N;\n        const K = this.parameter(\"neighbors\");\n        const d = this.parameter(\"d\");\n        const seed = this.parameter(\"seed\");\n        const metric = this.parameter(\"metric\");\n        DR_parameters = Object.assign({d, metric, seed }, DR_parameters);\n        const nc = this.parameter(\"control_points\");\n        const control_points = new KMedoids(X, nc, null, metric).get_clusters().medoids;\n        const C = new Matrix(nc, N, \"zeros\");\n        control_points.forEach((c_i, i) => {\n            C.set_entry(i, c_i, 1);\n        });\n        const Y_C = new DR(Matrix.from(control_points.map((c_i) => X.row(c_i))), DR_parameters).transform();\n\n        const XA = X.to2dArray;\n        const knn = new KNN(XA, metric);\n        const L = new Matrix(N, N, \"I\");\n        const alpha = -1 / K;\n        XA.forEach((x_i, i) => {\n            for (const { index: j } of knn.search(x_i, K).iterate()) {\n                if (i === j) continue;\n                L.set_entry(i, j, alpha);\n            }\n        });\n        const A = L.concat(C, \"vertical\");\n\n        const z = new Matrix(N, d, \"zeros\");\n        const b = z.concat(Y_C, \"vertical\");\n\n        this._A = A;\n        this._b = b;\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const A = this._A;\n        const AT = A.T;\n        const b = this._b;\n        const ATA = AT.dot(A);\n        const ATb = AT.dot(b);\n        this.Y = Matrix.solve_CG(ATA, ATb, this._randomizer);\n        return this.projection;\n    }\n}\n","import { Matrix, k_nearest_neighbors } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LTSA\n * @extends DR\n */\nexport class LTSA extends DR {\n    /**\n     * Local Tangent Space Alignment\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LTSA\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link LTSA} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://epubs.siam.org/doi/abs/10.1137/S1064827502419154}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        if (this._D <= this.parameter(\"d\")) {\n            throw new Error(`Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${this.parameter(\"d\")})!`);\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, D] = X.shape;\n        const { d, neighbors, metric, eig_args } = this._parameters;\n        // 1.1 determine k nearest neighbors\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        // center matrix\n        const O = new Matrix(D, D, \"center\");\n        const B = new Matrix(rows, rows, 0);\n\n        for (let row = 0; row < rows; ++row) {\n            // 1.2 compute the d largest eigenvectors of the correlation matrix\n            const I_i = [row, ...nN[row].map((n) => n.j)];\n            let X_i = Matrix.from(I_i.map((n) => X.row(n)));\n            // center X_i\n            X_i = X_i.dot(O);\n            // correlation matrix\n            const C = X_i.dot(X_i.transpose());\n            const { eigenvectors: g } = simultaneous_poweriteration(C, d, eig_args);\n            //g.push(linspace(0, k).map(_ => 1 / Math.sqrt(k + 1)));\n            const G_i_t = Matrix.from(g);\n            // 2. Constructing alignment matrix\n            const W_i = G_i_t.transpose()\n                .dot(G_i_t)\n                .add(1 / Math.sqrt(neighbors + 1));\n            for (let i = 0; i < neighbors + 1; ++i) {\n                for (let j = 0; j < neighbors + 1; ++j) {\n                    B.set_entry(I_i[i], I_i[j], B.entry(I_i[i], I_i[j]) - (i === j ? 1 : 0) + W_i.entry(i, j));\n                }\n            }\n        }\n\n        // 3. Aligning global coordinates\n        const { eigenvectors: Y } = simultaneous_poweriteration(B, d + 1, eig_args);\n        this.Y = Matrix.from(Y.slice(1)).transpose();\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias OPTICS\n */\nexport class OPTICS {\n    /**\n     * **O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure.\n     * @constructor\n     * @memberof module:clustering\n     * @alias OPTICS\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - the data.\n     * @param {Number} epsilon - the minimum distance which defines whether a point is a neighbor or not.\n     * @param {Number} min_points - the minimum number of points which a point needs to create a cluster. (Should be higher than 1, else each point creates a cluster.)\n     * @param {Function} [metric = euclidean] - the distance metric which defines the distance between two points of the {@link matrix}.\n     * @returns {OPTICS}\n     * @see {@link https://www.dbs.ifi.lmu.de/Publikationen/Papers/OPTICS.pdf}\n     * @see {@link https://en.wikipedia.org/wiki/OPTICS_algorithm}\n     */\n    constructor(matrix, epsilon, min_points, metric = euclidean) {\n        this._matrix = matrix;\n        this._epsilon = epsilon;\n        this._min_points = min_points;\n        this._metric = metric;\n\n        this._ordered_list = [];\n        this._clusters = [];\n        this._DB = new Array(matrix.shape[0]).fill();\n        this.init();\n        return this;\n    }\n\n    /**\n     * Computes the clustering.\n     */\n    init() {\n        const ordered_list = this._ordered_list;\n        const matrix = this._matrix;\n        const N = matrix.shape[0];\n        const DB = this._DB;\n        const clusters = this._clusters;\n        let cluster_index = this._cluster_index = 0;\n\n        for (let i = 0; i < N; ++i) {\n            DB[i] = {\n                \"element\": matrix.row(i),\n                \"index\": i,\n                \"reachability_distance\": undefined,\n                \"processed\": false,\n            }\n        }\n        for (const p of DB) {\n            if (p.processed) continue;\n            p.neighbors = this._get_neighbors(p);\n            p.processed = true;\n            clusters.push([p.index])\n            cluster_index = clusters.length - 1;\n            ordered_list.push(p);\n            if (this._core_distance(p) != undefined) {\n                const seeds = new Heap(null, d => d.reachability_distance, \"min\")\n                this._update(p, seeds);\n                this._expand_cluster(seeds, clusters[cluster_index]);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Array} An array consisting of the {@link epsilon}-neighborhood of {@link p}.\n     */\n    _get_neighbors(p) {\n        if (\"neighbors\" in p) return p.neighbors;\n        const DB = this._DB;\n        const metric = this._metric;\n        const epsilon = this._epsilon;\n        const neighbors = [];\n        for (const q of DB) {\n            if (q.index == p.index) continue;\n            if (metric(p.element, q.element) < epsilon) {\n                neighbors.push(q);\n            }\n        }\n        return neighbors;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Number} The distance to the {@link min_points}-th nearest point of {@link p}, or undefined if the {@link epsilon}-neighborhood has fewer elements than {@link min_points}.\n     */\n    _core_distance(p) {\n        const min_points = this._min_points;\n        const metric = this._metric;\n        if (p.neighbors && p.neighbors.length <= min_points) {\n            return undefined;\n        }\n        return metric(p.element, p.neighbors[min_points].element);\n    }\n\n    /**\n     * Updates the reachability distance of the points.\n     * @private\n     * @param {Object} p \n     * @param {Heap} seeds \n     */\n    _update(p, seeds) {\n        const metric = this._metric;\n        const core_distance = this._core_distance(p);\n        const neighbors = this._get_neighbors(p);//p.neighbors;\n        for (const q of neighbors) {\n            if (q.processed) continue;\n            const new_reachability_distance = Math.max(core_distance, metric(p.element, q.element));\n            //if (q.reachability_distance == undefined) { // q is not in seeds\n            if (seeds.raw_data().findIndex(d => d.element == q) < 0) {\n                q.reachability_distance = new_reachability_distance;\n                seeds.push(q);\n            } else { // q is in seeds\n                if (new_reachability_distance < q.reachability_distance) {\n                    q.reachability_distance = new_reachability_distance;\n                    seeds = Heap.heapify(seeds.data(), d => d.reachability_distance, \"min\"); // seeds change key =/\n                }\n            }\n        }\n    }\n\n    /**\n     * Expands the {@link cluster} with points in {@link seeds}.\n     * @private\n     * @param {Heap} seeds \n     * @param {Array} cluster \n     */\n    _expand_cluster(seeds, cluster) {\n        const ordered_list = this._ordered_list;\n        while (!seeds.empty) {\n            const q = seeds.pop().element;\n            q.neighbors = this._get_neighbors(q);\n            q.processed = true;\n            cluster.push(q.index);\n            ordered_list.push(q);\n            if (this._core_distance(q) != undefined) {\n                this._update(q, seeds);\n                this._expand_cluster(seeds, cluster);\n            }\n        }\n    }\n\n    /**\n     * Returns an array of clusters.\n     * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters() {\n        const clusters = [];\n        const outliers = [];\n        const min_points = this._min_points;\n        for (const cluster of this._clusters) {\n            if (cluster.length < min_points) {\n                outliers.push(...cluster);\n            } else {\n                clusters.push(cluster);\n            }\n        }\n        clusters.push(outliers);\n        return clusters;\n    }\n\n    /**\n     * @returns {Array} Returns an array, where the ith entry defines the cluster affirmation of the ith point of {@link matrix}. (-1 stands for outlier)\n     */\n    get_cluster_affirmation() {\n        const N = this._matrix.shape[0];\n        const result = new Array(N).fill();\n        const clusters = this.get_clusters();\n        for (let i = 0, n = clusters.length; i < n; ++i) {\n            const cluster = clusters[i]\n            for (const index of cluster) {\n                result[index] = (i < n - 1) ? i : -1;\n            }\n        }\n        return result;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA, MDS } from \"./index.js\";\nimport { distance_matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias SAMMON\n * @extends DR\n */\nexport class SAMMON extends DR {\n    /**\n     * SAMMON's Mapping\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias SAMMON\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {\"PCA\"|\"MDS\"|\"random\"} [parameters.init = \"random\"] - Either \"PCA\" or \"MDS\", with which SAMMON initialiates the projection. With \"random\" a random matrix gets used as starting point.\n     * @param {Object} [parameters.init_parameters] - Parameters for the {@link init}-DR method.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {SAMMON}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { magic: 0.1, d: 2, metric: euclidean, seed: 1212, init_DR: \"random\", init_parameters: {} }, parameters);\n        return this;\n    }\n\n    /**\n     * initializes the projection.\n     * @private\n     */\n    init() {\n        const N = this.X.shape[0];\n        const { d, metric, init_DR: init_DR, init_parameters: DR_parameters } = this._parameters;\n        if (init_DR === \"random\") {\n            const randomizer = this._randomizer;\n            this.Y = new Matrix(N, d, () => randomizer.random);\n        } else if ([\"PCA\", \"MDS\"].includes(init_DR)) {\n            this.Y = Matrix.from(init_DR == \"PCA\" ? PCA.transform(this.X, DR_parameters) : MDS.transform(this.X, DR_parameters));\n        } else {\n            throw new Error('init_DR needs to be either \"random\" or a DR method!')\n        }\n        this.distance_matrix = metric == \"precomputed\" ? Matrix.from(this.X) : distance_matrix(this.X, metric);\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Matrix|Array} - The projection of {@link X}.\n     */\n    transform(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n        }\n        return this.projection;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Generator} - A generator yielding the intermediate steps of the projection of {@link X}.\n     */\n    *generator(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n            yield this.projection;\n        }\n\n        return this.projection;\n    }\n\n    _step() {\n        const MAGIC = this.parameter(\"magic\");\n        const D = this.distance_matrix;\n        const N = this.X.shape[0];\n        const { d, metric } = this._parameters;\n        let Y = this.Y;\n\n        let G = new Matrix(N, d, 0);\n\n        let sum = new Float64Array(d);\n        for (let i = 0; i < N; ++i) {\n            let e1 = new Float64Array(d);\n            let e2 = new Float64Array(d);\n            const Yi = Y.row(i);\n            for (let j = 0; j < N; ++j) {\n                if (i === j) continue;\n                const Yj = Y.row(j);\n                const delta = new Float64Array(d);\n                for (let k = 0; k < d; ++k) {\n                    delta[k] = Yi[k] - Yj[k];\n                }\n                const dY = metric(Yi, Yj);\n                const dX = D.entry(i, j);\n                const dq = dX - dY;\n                const dr = Math.max(dX * dY, 1e-2);\n                for (let k = 0; k < d; ++k) {\n                    e1[k] += (delta[k] * dq) / dr;\n                    e2[k] += (dq - (Math.pow(delta[k], 2) * (1 + dq / dY)) / dY) / dr;\n                }\n            }\n            for (let k = 0; k < d; ++k) {\n                const val = Y.entry(i, k) + ((MAGIC * e1[k]) / Math.abs(e2[k]) || 0);\n                G.set_entry(i, k, val);\n                sum[k] += val;\n            }\n        }\n        for (let k = 0; k < d; ++k) {\n            sum[k] /= N;\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let k = 0; k < d; ++k) {\n                Y.set_entry(i, k, G.entry(i, k) - sum[k]);\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TSNE\n * @extends DR\n */\nexport class TSNE extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TSNE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.perplexity = 50] - perplexity.\n     * @param {Number} [parameters.epsilon = 10] - learning parameter.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TSNE}\n     */\n    constructor(X, parameters) {\n        super(X, { perplexity: 50, epsilon: 10, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._iter = 0;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => this._randomizer.random);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} distance_matrix - accepts a precomputed distance matrix\n     * @returns {TSNE}\n     */\n    init() {\n        // init\n        const Htarget = Math.log(this.parameter(\"perplexity\"));\n        const N = this._N;\n        const D = this._D;\n        const {metric} = this._parameters;\n        const X = this.X;\n        let Delta;\n        if (metric ==\"precomputed\") {\n            Delta = druid.Matrix.from(X);\n        } else {\n            Delta = new Matrix(N, N);\n            for (let i = 0; i < N; ++i) {\n                const X_i = X.row(i);\n                for (let j = i + 1; j < N; ++j) {\n                    const distance = metric(X_i, X.row(j));\n                    Delta.set_entry(i, j, distance);\n                    Delta.set_entry(j, i, distance);\n                }\n            }\n        }\n\n        const P = new Matrix(N, N, \"zeros\");\n\n        this._ystep = new Matrix(N, D, \"zeros\");\n        this._gains = new Matrix(N, D, 1);\n\n        // search for fitting sigma\n        let prow = new Float64Array(N)\n        const tol = 1e-4;\n        const maxtries = 50;\n        for (let i = 0; i < N; ++i) {\n            let betamin = -Infinity;\n            let betamax = Infinity;\n            let beta = 1;\n            let done = false;\n\n            let num = 0;\n            while (!done) {\n                let psum = 0;\n                for (let j = 0; j < N; ++j) {\n                    let pj = Math.exp(-Delta.entry(i, j) * beta);\n                    if (i === j) pj = 0;\n                    prow[j] = pj;\n                    psum += pj;\n                }\n                let Hhere = 0;\n                for (let j = 0; j < N; ++j) {\n                    let pj = psum === 0 ? 0 : prow[j] / psum;\n                    prow[j] = pj;\n                    if (pj > 1e-7) {\n                        Hhere -= pj * Math.log(pj);\n                    }\n                }\n                if (Hhere > Htarget) {\n                    betamin = beta;\n                    beta = betamax === Infinity ? beta * 2 : (beta + betamax) / 2;\n                } else {\n                    betamax = beta;\n                    beta = betamin === -Infinity ? beta / 2 : (beta + betamin) / 2;\n                }\n                ++num;\n                if (Math.abs(Hhere - Htarget) < tol) done = true;\n                if (num >= maxtries) done = true;\n            }\n\n            for (let j = 0; j < N; ++j) {\n                P.set_entry(i, j, prow[j]);\n            }\n        }\n\n        //compute probabilities\n        const Pout = new Matrix(N, N, \"zeros\");\n        const N2 = N * 2;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i; j < N; ++j) {\n                const p = Math.max((P.entry(i, j) + P.entry(j, i)) / N2, 1e-100);\n                Pout.set_entry(i, j, p);\n                Pout.set_entry(j, i, p);\n            }\n        }\n        this._P = Pout;\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Array<Array>} - the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Array<Array>} - the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * performs a optimization step\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const P = this._P;\n        const ystep = this._ystep;\n        const gains = this._gains;\n        const N = this._N;\n        const { d: dim, epsilon} = this._parameters;\n        let Y = this.Y;\n\n        //calc cost gradient;\n        const pmul = iter < 100 ? 4 : 1;\n\n        // compute Q dist (unnormalized)\n        const Qu = new Matrix(N, N, \"zeros\");\n        let qsum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dsum = 0;\n                for (let d = 0; d < dim; ++d) {\n                    const dhere = Y.entry(i, d) - Y.entry(j, d);\n                    dsum += dhere * dhere;\n                }\n                const qu = 1 / (1 + dsum);\n                Qu.set_entry(i, j, qu);\n                Qu.set_entry(j, i, qu);\n                qsum += 2 * qu;\n            }\n        }\n\n        // normalize Q dist\n        const Q = new Matrix(N, N, 0);\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                const val = Math.max(Qu.entry(i, j) / qsum, 1e-100);\n                Q.set_entry(i, j, val);\n                Q.set_entry(j, i, val);\n            }\n        }\n\n        const grad = new Matrix(N, dim, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            for (let j = 0; j < N; ++j) {\n                const premult = 4 * (pmul * P.entry(i, j) - Q.entry(i, j)) * Qu.entry(i, j);\n                for (let d = 0; d < dim; ++d) {\n                    grad.set_entry(i, d, grad.entry(i, d) + premult * (Y.entry(i, d) - Y.entry(j, d)));\n                }\n            }\n        }\n\n        // perform gradient step\n        let ymean = new Float64Array(dim);\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const gid = grad.entry(i, d);\n                const sid = ystep.entry(i, d);\n                const gainid = gains.entry(i, d);\n\n                let newgain = Math.sign(gid) === Math.sign(sid) ? gainid * 0.8 : gainid + 0.2;\n                if (newgain < 0.01) newgain = 0.01;\n                gains.set_entry(i, d, newgain);\n\n                const momval = iter < 250 ? 0.5 : 0.8;\n                const newsid = momval * sid - epsilon * newgain * gid;\n                ystep.set_entry(i, d, newsid);\n\n                Y.set_entry(i, d, Y.entry(i, d) + newsid);\n                ymean[d] += Y.entry(i, d);\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < 2; ++d) {\n                Y.set_entry(i, d, Y.entry(i, d) - ymean[d] / N);\n            }\n        }\n\n        return this.Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { DisjointSet } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias TopoMap\n * @memberof module:dimensionality_reduction\n * @extends DR\n */\nexport class TopoMap extends DR {\n    /**\n     * TopoMap: A 0-dimensional Homology Preserving Projection of High-Dimensional Data.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TopoMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TopoMap}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._distance_matrix = new Matrix(this._N, this._N, 0);\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    __lazy_distance_matrix(i, j, metric) {\n        const D = this._distance_matrix;\n        const X = this.X;\n        const D_ij = D.entry(i, j);\n        if (D_ij === 0) {\n            let dist = metric(X.row(i), X.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n            return dist;\n        }\n        return D_ij;\n    }\n\n    /**\n     * Computes the minimum spanning tree, using a given metric\n     * @private\n     * @param {Function} metric\n     * @see {@link https://en.wikipedia.org/wiki/Kruskal%27s_algorithm}\n     */\n    _make_minimum_spanning_tree(metric = euclidean) {\n        const N = this._N;\n        const X = [...this.X];\n\n        let disjoint_set = new DisjointSet(X);\n        const F = [];\n        let E = [];\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                E.push([i, j, this.__lazy_distance_matrix(i, j, metric)]);\n            }\n        }\n        E = E.sort((a, b) => a[2] - b[2]);\n\n        for (const [u, v, w] of E) {\n            const set_u = disjoint_set.find(X[u]);\n            const set_v = disjoint_set.find(X[v]);\n            if (set_u !== set_v) {\n                F.push([u, v, w]);\n                disjoint_set.union(set_u, set_v);\n            }\n        }\n\n        return F.sort((a, b) => a[2] - b[2]);\n    }\n\n    /**\n     * initializes TopoMap. Sets all projcted points to zero, and computes a minimum spanning tree.\n     */\n    init() {\n        const { metric} = this._parameters\n        this.Y = new Matrix(this._N, 2, 0);\n        this._Emst = this._make_minimum_spanning_tree(metric);\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Returns true if Point C is left of line AB.\n     * @private\n     * @param {Array} PointA - Point A of line AB\n     * @param {Array} PointB - Point B of line AB\n     * @param {Array} PointC - Point C\n     * @returns {Boolean}\n     */\n    __hull_cross([ax, ay], [bx, by], [sx, sy]) {\n        return (bx - ax) * (sy - ay) - (by - ay) * (sx - ax) <= 0;\n    }\n\n    /**\n     * Computes the convex hull of the set of Points S\n     * @private\n     * @param {Array} S - Set of Points.\n     * @see {@link https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript}\n     * @returns {Array} convex hull of S. Starts at the bottom-most point and continues counter-clockwise.\n     */\n    __hull(S) {\n        const points = S.sort(([x1, y1], [x2, y2]) => y1 - y2 || x1 - x2);\n        const N = points.length;\n        if (N <= 2) return points;\n\n        const lower = [];\n        for (let i = 0; i < N; ++i) {\n            while (lower.length >= 2 && this.__hull_cross(lower[lower.length - 2], lower[lower.length - 1], points[i])) {\n                lower.pop();\n            }\n            lower.push(points[i]);\n        }\n        const upper = [];\n        for (let i = N - 1; i >= 0; --i) {\n            while (upper.length >= 2 && this.__hull_cross(upper[upper.length - 2], upper[upper.length - 1], points[i])) {\n                upper.pop();\n            }\n            upper.push(points[i]);\n        }\n        upper.pop();\n        lower.pop();\n        return lower.concat(upper);\n    }\n\n    /**\n     * Finds the angle to rotate Point A and B to lie on a line parallel to the x-axis.\n     * @private\n     * @param {Array} PointA\n     * @param {Array} PointB\n     * @return {Object} Object containing the sinus- and cosinus-values for a rotation.\n     */\n    __findAngle([p1x, p1y], [p2x, p2y]) {\n        const n = euclidean([p1x, p1y], [p2x, p2y]);\n        if (n === 0)\n            return {\n                sin: 0,\n                cos: 1,\n            };\n        const vec = [(p2x - p1x) / n, (p2y - p1y) / n];\n        const cos = vec[0];\n        let sin = Math.sqrt(1 - cos * cos);\n        sin = vec[1] >= 0 ? -sin : sin;\n        return {\n            sin: sin,\n            cos: cos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Array} hull\n     * @param {Array} p\n     * @param {Bool} topEdge\n     */\n    __align_hull(hull, p, topEdge) {\n        let v = -1;\n        let d2;\n        for (let i = 0; i < hull.length; ++i) {\n            const d = euclidean(hull[i], p);\n            if (v === -1) {\n                d2 = d;\n                v = i;\n            } else {\n                if (d2 > d) {\n                    d2 = d;\n                    v = i;\n                }\n            }\n        }\n\n        let v1;\n        let v2;\n        if (topEdge) {\n            v1 = hull[v];\n            v2 = hull[(v + 1) % hull.length];\n        } else {\n            if (v == 0) v = hull.length - 1;\n            v1 = hull[v];\n            v2 = hull[(v - 1) % hull.length];\n        }\n\n        const transformation = {\n            tx: -hull[v][0],\n            ty: -hull[v][1],\n        };\n\n        if (hull.length >= 2) {\n            const { sin, cos } = this.__findAngle(v1, v2);\n            transformation.sin = sin;\n            transformation.cos = cos;\n        } else {\n            transformation.sin = 0;\n            transformation.cos = 1;\n        }\n\n        return transformation;\n    }\n\n    /**\n     * @private\n     * @param {Array} Point - The point which should get transformed.\n     * @param {Object} Transformation - contains the values for translation and rotation.\n     */\n    __transform([px, py], { tx, ty, sin, cos }) {\n        let x = px + tx;\n        let y = py + ty;\n        let xx = x * cos - y * sin;\n        let yy = x * sin + y * cos;\n        return [xx, yy];\n    }\n\n    /**\n     * Calls {@link __transform} for each point in Set C\n     * @private\n     * @param {Array} C - Set of points.\n     * @param {Object} t - Transform object.\n     * @param {Number} yOffset - value to offset set C.\n     */\n    __transform_component(C, t, yOffset) {\n        const N = C.length;\n        for (let i = 0; i < N; ++i) {\n            const c = C[i];\n            const [cx, cy] = this.__transform(c, t);\n            c[0] = cx;\n            c[1] = cy + yOffset;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Array} u - point u\n     * @param {Array} v - point v\n     * @param {Number} w - edge weight w\n     */\n    __align_components(u, v, w) {\n        const points_u = [...u.__disjoint_set.children];\n        const points_v = [...v.__disjoint_set.children];\n\n        const hull_u = this.__hull(points_u);\n        const hull_v = this.__hull(points_v);\n\n        const t_u = this.__align_hull(hull_u, u, false);\n        const t_v = this.__align_hull(hull_v, v, true);\n\n        this.__transform_component(points_u, t_u, 0);\n        this.__transform_component(points_v, t_v, w);\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality 2.\n     */\n    transform() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n        }\n        return this.projection;\n    }\n\n    *generator() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n}\n","import { Matrix, linspace } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { PCA } from \"./PCA.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TriMap\n * @extends DR\n */\nexport class TriMap extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TriMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.weight_adj = 500] - scaling factor.\n     * @param {Number} [parameters.c = 5] - number of triplets multiplier.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.tol = 1e-8] -\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TriMap}\n     * @see {@link https://arxiv.org/pdf/1910.00204v1.pdf}\n     * @see {@link https://github.com/eamid/trimap}\n     */\n    constructor(X, parameters) {\n        super(X, { weight_adj: 500, c: 5, d: 2, metric: euclidean, tol: 1e-8, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} [pca = null] - Initial Embedding (if null then PCA gets used).\n     * @param {KNN} [knn = null] - KNN Object (if null then BallTree gets used).\n     */\n    init(pca = null, knn = null) {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric, c } = this._parameters;\n        this.n_inliers = 2 * c;\n        this.n_outliers = 1 * c;\n        this.n_random = 1 * c;\n        this.Y = pca || new PCA(X, d).transform();\n        this.knn = knn || new BallTree(X.to2dArray, metric);\n        const { triplets, weights } = this._generate_triplets(this.n_inliers, this.n_outliers, this.n_random);\n        this.triplets = triplets;\n        this.weights = weights;\n        this.lr = (1000 * N) / triplets.shape[0];\n        this.C = Infinity;\n        this.vel = new Matrix(N, d, 0);\n        this.gain = new Matrix(N, d, 1);\n        return this;\n    }\n\n    /**\n     * Generates {@link n_inliers} x {@link n_outliers} x {@link n_random} triplets.\n     * @param {Number} n_inliers\n     * @param {Number} n_outliers\n     * @param {Number} n_random\n     */\n    _generate_triplets(n_inliers, n_outliers, n_random) {\n        const { metric, weight_adj } = this._parameters;\n        const X = this.X;\n        const N = X.shape[0];\n        const knn = this.knn;\n        const n_extra = Math.min(n_inliers + 20, N);\n        const nbrs = new Matrix(N, n_extra);\n        const knn_distances = new Matrix(N, n_extra);\n        for (let i = 0; i < N; ++i) {\n            knn.search(X.row(i), n_extra + 1)\n                .raw_data()\n                .filter((d) => d.value != 0)\n                .sort((a, b) => a.value - b.value)\n                .forEach((d, j) => {\n                    nbrs.set_entry(i, j, d.element.index);\n                    knn_distances.set_entry(i, j, d.value);\n                });\n        }\n        // scale parameter\n        const sig = new Float64Array(N);\n        for (let i = 0; i < N; ++i) {\n            sig[i] = Math.max((knn_distances.entry(i, 3) + knn_distances.entry(i, 4) + knn_distances.entry(i, 5) + knn_distances.entry(i, 6)) / 4, 1e-10);\n        }\n\n        const P = this._find_p(knn_distances, sig, nbrs);\n\n        let triplets = this._sample_knn_triplets(P, nbrs, n_inliers, n_outliers);\n        let n_triplets = triplets.shape[0];\n        const outlier_distances = new Float64Array(n_triplets);\n        for (let i = 0; i < n_triplets; ++i) {\n            const j = triplets.entry(i, 0);\n            const k = triplets.entry(i, 2);\n            outlier_distances[i] = metric(X.row(j), X.row(k));\n        }\n        let weights = this._find_weights(triplets, P, nbrs, outlier_distances, sig);\n\n        if (n_random > 0) {\n            const { random_triplets, random_weights } = this._sample_random_triplets(X, n_random, sig);\n            triplets = triplets.concat(random_triplets, \"vertical\");\n            weights = Float64Array.from([...weights, ...random_weights]);\n        }\n        n_triplets = triplets.shape[0];\n        let max_weight = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            if (isNaN(weights[i])) {\n                weights[i] = 0;\n            }\n            if (max_weight < weights[i]) max_weight = weights[i];\n        }\n        let max_weight_2 = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight;\n            weights[i] += 0.0001;\n            weights[i] = Math.log(1 + weight_adj * weights[i]);\n            if (max_weight_2 < weights[i]) max_weight_2 = weights[i];\n        }\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight_2;\n        }\n        return {\n            triplets: triplets,\n            weights: weights,\n        };\n    }\n\n    /**\n     * Calculates the similarity matrix P\n     * @private\n     * @param {Matrix} knn_distances - matrix of pairwise knn distances\n     * @param {Float64Array} sig - scaling factor for the distances\n     * @param {Matrix} nbrs - nearest neighbors\n     * @returns {Matrix} pairwise similarity matrix\n     */\n    _find_p(knn_distances, sig, nbrs) {\n        const [N, n_neighbors] = knn_distances.shape;\n        return new Matrix(N, n_neighbors, (i, j) => {\n            return Math.exp(-(knn_distances.entry(i, j) ** 2 / sig[i] / sig[nbrs.entry(i, j)]));\n        });\n    }\n\n    /**\n     * Sample nearest neighbors triplets based on the similarity values given in P.\n     * @private\n     * @param {Matrix} P - Matrix of pairwise similarities between each point and its neighbors given in matrix nbrs.\n     * @param {Matrix} nbrs - Nearest neighbors indices for each point. The similarity values are given in matrix {@link P}. Row i corresponds to the i-th point.\n     * @param {Number} n_inliers - Number of inlier points.\n     * @param {Number} n_outliers - Number of outlier points.\n     *\n     */\n    _sample_knn_triplets(P, nbrs, n_inliers, n_outliers) {\n        const N = nbrs.shape[0];\n        const triplets = new Matrix(N * n_inliers * n_outliers, 3);\n        for (let i = 0; i < N; ++i) {\n            let n_i = i * n_inliers * n_outliers;\n            const sort_indices = this.__argsort(P.row(i).map((d) => -d));\n            for (let j = 0; j < n_inliers; ++j) {\n                let n_j = j * n_outliers;\n                const sim = nbrs.entry(i, sort_indices[j]);\n                const samples = this._rejection_sample(n_outliers, N, sort_indices.slice(0, j + 1));\n                for (let k = 0; k < n_outliers; ++k) {\n                    const index = n_i + n_j + k;\n                    const out = samples[k];\n                    triplets.set_entry(index, 0, i);\n                    triplets.set_entry(index, 1, sim);\n                    triplets.set_entry(index, 2, out);\n                }\n            }\n        }\n        return triplets;\n    }\n\n    /**\n     * Should do the same as np.argsort()\n     * @private\n     * @param {Array} A\n     */\n    __argsort(A) {\n        return A.map((d, i) => {\n            return { d: d, i: i };\n        })\n            .sort((a, b) => a.d - b.d)\n            .map((d) => d.i);\n    }\n\n    /**\n     * Samples {@link n_samples} integers from a given interval [0, {@link max_int}] while rejection the values that are in the {@link rejects}.\n     * @private\n     * @param {*} n_samples\n     * @param {*} max_int\n     * @param {*} rejects\n     */\n    _rejection_sample(n_samples, max_int, rejects) {\n        const randomizer = this._randomizer;\n        const interval = linspace(0, max_int - 1).filter((d) => rejects.indexOf(d) < 0);\n        return randomizer.choice(interval, Math.min(n_samples, interval.length - 2));\n    }\n\n    /**\n     * Calculates the weights for the sampled nearest neighbors triplets\n     * @private\n     * @param {Matrix} triplets - Sampled Triplets.\n     * @param {Matrix} P - Pairwise similarity matrix.\n     * @param {Matrix} nbrs - nearest Neighbors\n     * @param {Float64Array} outlier_distances - Matrix of pairwise outlier distances\n     * @param {Float64Array} sig - scaling factor for the distances.\n     */\n    _find_weights(triplets, P, nbrs, outlier_distances, sig) {\n        const n_triplets = triplets.shape[0];\n        const weights = new Float64Array(n_triplets);\n        for (let t = 0; t < n_triplets; ++t) {\n            const i = triplets.entry(t, 0);\n            const sim = nbrs.row(i).indexOf(triplets.entry(t, 1));\n            const p_sim = P.entry(i, sim);\n            let p_out = Math.exp(-(outlier_distances[t] ** 2 / (sig[i] * sig[triplets.entry(t, 2)])));\n            if (p_out < 1e-20) p_out = 1e-20;\n            weights[t] = p_sim / p_out;\n        }\n        return weights;\n    }\n\n    /**\n     * Sample uniformly ranom triplets\n     * @private\n     * @param {Matrix} X - Data matrix.\n     * @param {Number} n_random - Number of random triplets per point\n     * @param {Float64Array} sig - Scaling factor for the distances\n     */\n    _sample_random_triplets(X, n_random, sig) {\n        const metric = this.parameter(\"metric\");\n        const randomizer = this._randomizer;\n        const N = X.shape[0];\n        const random_triplets = new Matrix(N * n_random, 3);\n        const random_weights = new Float64Array(N * n_random);\n        for (let i = 0; i < N; ++i) {\n            const n_i = i * n_random;\n            const indices = [...linspace(0, i - 1), ...linspace(i + 1, N - 1)];\n            for (let j = 0; j < n_random; ++j) {\n                let [sim, out] = randomizer.choice(indices, 2);\n                let p_sim = Math.exp(-(metric(X.row(i), X.row(sim)) ** 2 / (sig[i] * sig[sim])));\n                if (p_sim < 1e-20) p_sim = 1e-20;\n                let p_out = Math.exp(-(metric(X.row(i), X.row(out)) ** 2 / (sig[i] * sig[out])));\n                if (p_out < 1e-20) p_out = 1e-20;\n\n                if (p_sim < p_out) {\n                    [sim, out] = [out, sim];\n                    [p_sim, p_out] = [p_out, p_sim];\n                }\n                const index = n_i + j;\n                random_triplets.set_entry(index, 0, i);\n                random_triplets.set_entry(index, 1, sim);\n                random_triplets.set_entry(index, 2, out);\n                random_weights[index] = p_sim / p_out;\n            }\n        }\n        return {\n            random_triplets: random_triplets,\n            random_weights: random_weights,\n        };\n    }\n\n    /**\n     * Computes the gradient for updating the embedding.\n     * @param {Matrix} Y - The embedding\n     */\n    _grad(Y) {\n        const n_inliers = this.n_inliers;\n        const n_outliers = this.n_outliers;\n        const triplets = this.triplets;\n        const weights = this.weights;\n        const [N, dim] = Y.shape;\n        const n_triplets = triplets.shape[0];\n        const grad = new Matrix(N, dim, 0);\n        let y_ij = new Float64Array(dim);\n        let y_ik = new Float64Array(dim);\n        let d_ij = 1;\n        let d_ik = 1;\n        let n_viol = 0;\n        let loss = 0;\n        const n_knn_triplets = N * n_inliers * n_outliers;\n\n        for (let t = 0; t < n_triplets; ++t) {\n            const [i, j, k] = triplets.row(t);\n            // update y_ij, y_ik, d_ij, d_ik\n            if (t % n_outliers == 0 || t >= n_knn_triplets) {\n                d_ij = 1;\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_jd = Y.entry(j, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ij[d] = Y_id - Y_jd;\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ij += y_ij[d] ** 2;\n                    d_ik += y_ik[d] ** 2;\n                }\n                // update y_ik and d_ik only\n            } else {\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ik += y_ik[d] ** 2;\n                }\n            }\n\n            if (d_ij > d_ik) ++n_viol;\n            loss += weights[t] / (1 + d_ik / d_ij);\n            const w = (weights[t] / (d_ij + d_ik)) ** 2;\n            for (let d = 0; d < dim; ++d) {\n                const gs = y_ij[d] * d_ik * w;\n                const go = y_ik[d] * d_ij * w;\n                grad.set_entry(i, d, grad.entry(i, d) + gs - go);\n                grad.set_entry(j, d, grad.entry(j, d) - gs);\n                grad.set_entry(k, d, grad.entry(k, d) + go);\n            }\n        }\n        return { grad, loss, n_viol };\n    }\n\n    /**\n     *\n     * @param {Number} max_iteration\n     */\n    transform(max_iteration = 400) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n        }\n        return this.projection;\n    }\n\n    /**\n     * @param {Number} max_iteration\n     * @yields {Matrix}\n     * @returns {Matrix}\n     */\n    *generator(max_iteration = 800) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Does the iteration step.\n     * @private\n     * @param {Number} iter\n     */\n    _next(iter) {\n        const gamma = iter > 150 ? 0.5 : 0.3;\n        const old_C = this.C;\n        const vel = this.vel;\n        const Y = this.Y.add(vel.mult(gamma));\n        const { grad, loss, n_viol } = this._grad(Y);\n        this.C = loss;\n        this.Y = this._update_embedding(Y, iter, grad);\n        this.lr *= old_C > loss + this._parameters.tol ? 1.01 : 0.9;\n        return this.Y;\n    }\n\n    /**\n     * Updates the embedding.\n     * @private\n     * @param {Matrix} Y\n     * @param {Number} iter\n     * @param {Matrix} grad\n     */\n    _update_embedding(Y, iter, grad) {\n        const [N, dim] = Y.shape;\n        const gamma = iter > 150 ? 0.9 : 0.5; // moment parameter\n        const min_gain = 0.01;\n        const gain = this.gain;\n        const vel = this.vel;\n        const lr = this.lr;\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const new_gain = Math.sign(vel.entry(i, d)) != Math.sign(grad.entry(i, d)) ? gain.entry(i, d) + 0.2 : Math.max(gain.entry(i, d) * 0.8, min_gain);\n                gain.set_entry(i, d, new_gain);\n                vel.set_entry(i, d, gamma * vel.entry(i, d) - lr * gain.entry(i, d) * grad.entry(i, d));\n                Y.set_entry(i, d, Y.entry(i, d) + vel.entry(i, d));\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { linspace } from \"../matrix/index.js\";\nimport { powell } from \"../optimization/index.js\";\nimport { DR } from \"./DR.js\";\nimport { max } from \"../util/index.js\";\nimport { KNN } from \"../knn/index.js\";\n\n/**\n * @class\n * @alias UMAP\n * @extends DR\n */\nexport class UMAP extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias UMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.n_neighbors = 15] - size of the local neighborhood.\n     * @param {Number} [parameters.local_connectivity = 1] - number of nearest neighbors connected in the local neighborhood.\n     * @param {Number} [parameters.min_dist = 1] - controls how tightly points get packed together.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points in the high-dimensional space.\n     * @param {Number} [parameters._spread = 1] - The effective scale of embedded points. (In combination with {@link parameters.min_dist})\n     * @param {Number} [parameters._set_op_mix_ratio = 1] - Interpolate between union and intersection.\n     * @param {Number} [parameters._repulsion_strength = 1]  - Weighting applied to negative samples.\n     * @param {Number} [parameters._negative_sample_rate = 5] - The number of negative samples per positive sample.\n     * @param {Number} [parameters._n_epochs = 350] - The number of training epochs.\n     * @param {Number} [parameter._initial_alpha = 1] - The initial learning rate for the optimization.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {UMAP}\n     */\n    constructor(X, parameters) {\n        super(X, { n_neighbors: 15, local_connectivity: 1, min_dist: 1, d: 2, metric: euclidean, seed: 1212, _spread: 1, _set_op_mix_ratio: 1, _repulsion_strength: 1, _negative_sample_rate: 5, _n_epochs: 350, _initial_alpha: 1 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        /* let n_neighbors = Math.min(this._N - 1, parameters.n_neighbors);\n        this.parameter(\"n_neighbors\", n_neighbors);\n        this.parameter(\"local_connectivity\", Math.min(this.parameter(\"local_connectivity\"), n_neighbors - 1)); */\n        if (this.parameter(\"n_neighbors\") > this._N) {\n            throw new Error(`Parameter n_neighbors (=${this.parameter(\"n_neighbors\")}) needs to be smaller than dataset size (N=${this._N})!`);\n        }\n        if (this.parameter(\"local_connectivity\") > this.parameter(\"n_neighbors\")) {\n            throw new Error(`Parameter local_connectivity (=${this.parameter(\"local_connectivity\")}) needs to be smaller than parameter n_neighbors (=${this.parameter(\"n_neighbors\")})`);\n        }\n        this._iter = 0;\n        const randomizer = this._randomizer;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => randomizer.random);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} spread\n     * @param {Number} min_dist\n     * @returns {Array}\n     */\n    _find_ab_params(spread, min_dist) {\n        const curve = (x, a, b) => 1 / (1 + a * Math.pow(x, 2 * b));\n        const xv = linspace(0, spread * 3, 300);\n        const yv = linspace(0, spread * 3, 300);\n\n        for (let i = 0, n = xv.length; i < n; ++i) {\n            const xv_i = xv[i];\n            yv[i] = xv_i < min_dist ? 1 : Math.exp(-(xv_i - min_dist) / spread);\n        }\n\n        const err = (p) => {\n            const error = linspace(1, 300).map((_, i) => yv[i] - curve(xv[i], p[0], p[1]));\n            return Math.sqrt(neumair_sum(error.map((e) => e * e)));\n        };\n\n        return powell(err, [1, 1]);\n    }\n\n    /**\n     * @private\n     * @param {Array<Array>} distances\n     * @param {Array<Number>} sigmas\n     * @param {Array<Number>} rhos\n     * @returns {Array}\n     */\n    _compute_membership_strengths(distances, sigmas, rhos) {\n        for (let i = 0, n = distances.length; i < n; ++i) {\n            for (let j = 0, m = distances[i].length; j < m; ++j) {\n                const v = distances[i][j].value - rhos[i];\n                distances[i][j].value = v > 0 ? Math.exp(-v / sigmas[i]) : 1;\n            }\n        }\n        return distances;\n    }\n\n    /**\n     * @private\n     * @param {KNN|BallTree} knn\n     * @param {Number} k\n     * @returns {Object}\n     */\n    _smooth_knn_dist(knn, k) {\n        const SMOOTH_K_TOLERANCE = 1e-5;\n        const MIN_K_DIST_SCALE = 1e-3;\n        const n_iter = 64;\n        const { local_connectivity, metric } = this._parameters;\n        const target = Math.log2(k);\n        const rhos = [];\n        const sigmas = [];\n        const X = this.X;\n        const N = X.shape[0];\n        //const distances = [...X].map(x_i => knn.search(x_i, k).raw_data().reverse());\n\n        const distances = [];\n        if (metric === \"precomputed\") {\n            for (let i = 0; i < N; ++i) {\n                distances.push(knn.search(i, k).reverse());\n            }\n        } else {\n            for (const x_i of X) {\n                distances.push(knn.search(x_i, k).raw_data().reverse());\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            let lo = 0;\n            let hi = Infinity;\n            let mid = 1;\n\n            const search_result = distances[i];\n            const non_zero_dist = search_result.filter((d) => d.value > 0);\n            const non_zero_dist_length = non_zero_dist.length;\n            if (non_zero_dist_length >= local_connectivity) {\n                const index = Math.floor(local_connectivity);\n                const interpolation = local_connectivity - index;\n                if (index > 0) {\n                    rhos.push(non_zero_dist[index - 1]);\n                    if (interpolation > SMOOTH_K_TOLERANCE) {\n                        rhos[i].value += interpolation * (non_zero_dist[index].value - non_zero_dist[index - 1]);\n                    }\n                } else {\n                    rhos[i].value = interpolation * non_zero_dist[0].value;\n                }\n            } else if (non_zero_dist_length > 0) {\n                rhos[i] = non_zero_dist[non_zero_dist_length - 1].value;\n            }\n            for (let x = 0; x < n_iter; ++x) {\n                let psum = 0;\n                for (let j = 0; j < k; ++j) {\n                    const d = search_result[j].value - rhos[i];\n                    psum += d > 0 ? Math.exp(-(d / mid)) : 1;\n                }\n                if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n                    break;\n                }\n                if (psum > target) {\n                    [hi, mid] = [mid, (lo + hi) / 2];\n                } else {\n                    if (hi === Infinity) {\n                        [lo, mid] = [mid, mid * 2];\n                    } else {\n                        [lo, mid] = [mid, (lo + hi) / 2];\n                    }\n                }\n            }\n            sigmas[i] = mid;\n\n            const mean_ithd = search_result.reduce((a, b) => a + b.value, 0) / search_result.length;\n            //let mean_d = null;\n            if (rhos[i] > 0) {\n                if (sigmas[i] < MIN_K_DIST_SCALE * mean_ithd) {\n                    sigmas[i] = MIN_K_DIST_SCALE * mean_ithd;\n                }\n            } else {\n                const mean_d = distances.reduce((acc, res) => acc + res.reduce((a, b) => a + b.value, 0) / res.length);\n                if (sigmas[i] > MIN_K_DIST_SCALE * mean_d) {\n                    sigmas[i] = MIN_K_DIST_SCALE * mean_d;\n                }\n            }\n        }\n        return {\n            distances: distances,\n            sigmas: sigmas,\n            rhos: rhos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Matrix} X\n     * @param {Number} n_neighbors\n     * @returns {Matrix}\n     */\n    _fuzzy_simplicial_set(X, n_neighbors) {\n        const N = X.shape[0];\n        const { metric, _set_op_mix_ratio } = this._parameters;\n        const knn = metric === \"precomputed\" ? new KNN(X, \"precomputed\") : new BallTree(X.to2dArray, metric);\n        let { distances, sigmas, rhos } = this._smooth_knn_dist(knn, n_neighbors);\n        distances = this._compute_membership_strengths(distances, sigmas, rhos);\n        const result = new Matrix(N, N, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            const distances_i = distances[i];\n            for (let j = 0; j < distances_i.length; ++j) {\n                result.set_entry(i, distances_i[j].element.index, distances_i[j].value);\n            }\n        }\n\n        const transposed_result = result.T;\n        const prod_matrix = result.mult(transposed_result);\n        return result\n            .add(transposed_result)\n            .sub(prod_matrix)\n            .mult(_set_op_mix_ratio)\n            .add(prod_matrix.mult(1 - _set_op_mix_ratio));\n    }\n\n    /**\n     * @private\n     * @param {Number} n_epochs\n     * @returns {Array}\n     */\n    _make_epochs_per_sample(n_epochs) {\n        const weights = this._weights;\n        const result = new Float32Array(weights.length).fill(-1);\n        const weights_max = max(weights);\n        const n_samples = weights.map((w) => n_epochs * (w / weights_max));\n        for (let i = 0; i < result.length; ++i) if (n_samples[i] > 0) result[i] = Math.round(n_epochs / n_samples[i]);\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Matrix} graph\n     * @returns {Object}\n     */\n    _tocoo(graph) {\n        const rows = [];\n        const cols = [];\n        const data = [];\n        const [rows_n, cols_n] = graph.shape;\n        for (let row = 0; row < rows_n; ++row) {\n            for (let col = 0; col < cols_n; ++col) {\n                const entry = graph.entry(row, col);\n                if (entry !== 0) {\n                    rows.push(row);\n                    cols.push(col);\n                    data.push(entry);\n                }\n            }\n        }\n        return {\n            rows: rows,\n            cols: cols,\n            data: data,\n        };\n    }\n\n    /**\n     * Computes all necessary\n     * @returns {UMAP}\n     */\n    init() {\n        const { _spread, min_dist, n_neighbors, _n_epochs, _negative_sample_rate } = this._parameters;\n        const [a, b] = this._find_ab_params(_spread, min_dist);\n        this._a = a;\n        this._b = b;\n        this._graph = this._fuzzy_simplicial_set(this.X, n_neighbors);\n        const { rows, cols, data: weights } = this._tocoo(this._graph);\n        this._head = rows;\n        this._tail = cols;\n        this._weights = weights;\n        this._epochs_per_sample = this._make_epochs_per_sample(_n_epochs);\n        this._epochs_per_negative_sample = this._epochs_per_sample.map((d) => d * _negative_sample_rate);\n        this._epoch_of_next_sample = this._epochs_per_sample.slice();\n        this._epoch_of_next_negative_sample = this._epochs_per_negative_sample.slice();\n        return this;\n    }\n\n    graph() {\n        this.check_init();\n        return { cols: this._head, rows: this._tail, weights: this._weights };\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    transform(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    *generator(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * @private\n     * @param {Number} x\n     * @returns {Number}\n     */\n    _clip(x) {\n        if (x > 4) return 4;\n        if (x < -4) return -4;\n        return x;\n    }\n\n    /**\n     * performs the optimization step.\n     * @private\n     * @param {Matrix} head_embedding\n     * @param {Matrix} tail_embedding\n     * @param {Matrix} head\n     * @param {Matrix} tail\n     * @returns {Matrix}\n     */\n    _optimize_layout(head_embedding, tail_embedding, head, tail) {\n        const randomizer = this._randomizer;\n        const { _repulsion_strength, d: dim } = this._parameters;\n        const { _alpha: alpha, _a: a, _b: b, _epochs_per_sample: epochs_per_sample, _epochs_per_negative_sample: epochs_per_negative_sample, _epoch_of_next_negative_sample: epoch_of_next_negative_sample, _epoch_of_next_sample: epoch_of_next_sample, _clip: clip } = this;\n        const tail_length = tail.length;\n\n        for (let i = 0, n = epochs_per_sample.length; i < n; ++i) {\n            if (epoch_of_next_sample[i] <= this._iter) {\n                const j = head[i];\n                const k = tail[i];\n                const current = head_embedding.row(j);\n                const other = tail_embedding.row(k);\n                const dist = euclidean_squared(current, other);\n                let grad_coeff = 0;\n                if (dist > 0) {\n                    grad_coeff = (-2 * a * b * Math.pow(dist, b - 1)) / (a * Math.pow(dist, b) + 1);\n                }\n                for (let d = 0; d < dim; ++d) {\n                    const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                    const c = current[d] + grad_d;\n                    const o = other[d] - grad_d;\n                    current[d] = c;\n                    other[d] = o;\n                    head_embedding.set_entry(j, d, c);\n                    tail_embedding.set_entry(k, d, o);\n                }\n                epoch_of_next_sample[i] += epochs_per_sample[i];\n                const n_neg_samples = (this._iter - epoch_of_next_negative_sample[i]) / epochs_per_negative_sample[i];\n                for (let p = 0; p < n_neg_samples; ++p) {\n                    const k = randomizer.random_int % tail_length;\n                    const other = tail_embedding.row(tail[k]);\n                    const dist = euclidean_squared(current, other);\n                    let grad_coeff = 0;\n                    if (dist > 0) {\n                        grad_coeff = (2 * _repulsion_strength * b) / ((0.01 + dist) * (a * Math.pow(dist, b) + 1));\n                    } else if (j === k) {\n                        continue;\n                    }\n                    for (let d = 0; d < dim; ++d) {\n                        const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                        const c = current[d] + grad_d;\n                        const o = other[d] - grad_d;\n                        current[d] = c;\n                        other[d] = o;\n                        head_embedding.set_entry(j, d, c);\n                        tail_embedding.set_entry(tail[k], d, o);\n                    }\n                }\n                epoch_of_next_negative_sample[i] += n_neg_samples * epochs_per_negative_sample[i];\n            }\n        }\n        return head_embedding;\n    }\n\n    /**\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const Y = this.Y;\n        const { _initial_alpha, _n_epochs } = this._parameters;\n        this._alpha = _initial_alpha * (1 - iter / _n_epochs);\n        this.Y = this._optimize_layout(Y, Y, this._head, this._tail);\n\n        return this.Y;\n    }\n}\n","/**\n * Computes the canberra distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias canberra\n * @param {Array<Number>} a \n * @param {Array<Number>} b \n * @returns {Number} The canberra distance between {@link a} and {@link b}.\n * @see {@link https://en.wikipedia.org/wiki/Canberra_distance}\n */\nexport default function(a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += (Math.abs(a[i] - b[i]) / (Math.abs(a[i]) + Math.abs(b[i])))\n    }\n    return sum;\n}","/**\n * Computes the chebyshev distance (L<sub>∞</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias chebyshev\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the chebyshev distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    let n = a.length;\n    let res = [];\n    for (let i = 0; i < n; ++i) {\n        res.push(Math.abs(a[i] - b[i]));\n    }\n    return Math.max(...res);\n}\n","/**\n * Computes the cosine distance (not similarity) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias cosine\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @example\n * druid.cosine([1,0],[1,1]) == 0.7853981633974484 == π/4\n * @returns {Number} The cosine distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    let sum_a = 0;\n    let sum_b = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += a[i] * b[i];\n        sum_a += a[i] * a[i];\n        sum_b += b[i] * b[i];\n    }\n    return Math.acos(sum / (Math.sqrt(sum_a) * Math.sqrt(sum_b)));\n}\n","/**\n * Computes the hamming distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias hamming\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the hamming distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let disagree = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        disagree += x != y;\n    }\n    return disagree / n;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the inner product between two arrays of the same length.\n * @memberof module:linear_algebra\n * @alias inner_product\n * @param {Array|Float64Array} a - Array a\n * @param {Array|Float64Array} b - Array b\n * @returns The inner product between {@link a} and {@link b}\n */\nexport default function (a, b) {\n    const N = a.length;\n    if (N != b.length) {\n        throw new Error(\"Array a and b must have the same length!\")\n    }\n    let sum = 0;\n    for (let i = 0; i < N; ++i) {\n        sum += a * b;\n    }\n    return sum;\n}\n","/**\n * Computes the jaccard distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias jaccard\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the jaccard distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_non_zero = 0;\n    let num_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_non_zero += x || y;\n        num_equal += x && y;\n    }\n    return (num_non_zero - num_equal) / num_non_zero;\n}\n","/**\n * Numerical stable summation with the Kahan summation algorithm.\n * @memberof module:numerical\n * @alias kahan_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n    let y, t;\n\n    for (let i = 0; i < n; ++i) {\n        y = summands[i] - compensation;\n        t = sum + y;\n        compensation = t - sum - y;\n        sum = t;\n    }\n    return sum;\n}\n","/**\n * Computes the manhattan distance (l<sub>1</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias manhattan\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the manhattan distance between {@link a} and {@link b}.\n */ \nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += Math.abs(a[i] - b[i]);\n    }\n    return sum;\n}\n","import { norm } from \"./index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Normalizes Vector {@link v}.\n * @memberof module:matrix\n * @alias normalize\n * @param {Array<Number>|Float64Array} v - Vector\n * @param {Function} metric \n * @returns {Array<Number>|Float64Array} - The normalized vector with length 1.\n */\nexport default function(v, metric = euclidean)  {\n    const v_norm = norm(v, metric);\n    return v.map(value => value / v_norm);\n}","import { Matrix, norm } from \"../matrix/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} with householder transformations.\n * @memberof module:linear_algebra\n * @alias qr_householder\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_Householder_reflections}\n * @see {@link http://mlwiki.org/index.php/Householder_Transformation}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, rows, \"I\");\n    const R = A.clone();\n\n    for (let j = 0; j < cols; ++j) {\n        const x = Matrix.from(R.col(j).slice(j));\n        const x_norm = norm(x);\n        const x0 = x.entry(0, 0);\n        const rho = -Math.sign(x0);\n        const u1 = x0 - rho * x_norm;\n        const u = x.divide(u1).set_entry(0, 0, 1);\n        const beta = (-rho * u1) / x_norm;\n\n        const u_outer_u = u.outer(u);\n        const R_block = R.get_block(j, 0);\n        const new_R = R_block.sub(u_outer_u.dot(R_block).mult(beta));\n        const Q_block = Q.get_block(0, j);\n        const new_Q = Q_block.sub(Q_block.dot(u_outer_u).mult(beta));\n        R.set_block(j, 0, new_R);\n        Q.set_block(0, j, new_Q);\n    }\n    return { R, Q };\n}\n","/**\n * Computes the Sokal-Michener distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias sokal_michener\n * @param {Array<Number>} a \n * @param {Array<Number>} b \n * @returns {Number} the Sokal-Michener distance between {@link a} and {@link b}.  \n */\nexport default function(a, b) {\n    if (a.length != b.length) return undefined\n    const n = a.length;\n    let num_not_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_not_equal += x != y;\n    }\n    return (2 * num_not_equal) / (n + num_not_equal);\n}","/**\n * Computes the yule distance between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias yule\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the yule distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_true_true = 0;\n    let num_true_false = 0;\n    let num_false_true = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_true_true += x && y;\n        num_true_false += x && !y;\n        num_false_true += !x && x;\n    }\n    const num_false_false = n - num_true_true - num_true_false - num_false_true;\n    return num_true_false == 0 || num_false_true == 0 ? 0 : (2 * num_true_false * num_false_true) / (num_true_true * num_false_false + num_true_false * num_false_true);\n}\n"],"names":["a","b","Math","sqrt","euclidean_squared","summands","n","length","sum","compensation","i","summand","t","abs","s","Array","x","y","neumair_sum","A","k","metric","euclidean","rows","shape","D","distance_matrix","nN","row","from","map","distance","col","j","sort","slice","Matrix","A_i","dist","set_entry","start","end","number","max","round","result","v","vector","cols","Error","Float64Array","Q","R","q","q_dot_v","q_","v_","v_norm","norm","seed","max_iterations","qr","qr_gramschmidt","tol","randomizer","Randomizer","random","oldQ","clone","QR","dot","values","eigenvalues","diag","eigenvectors","transpose","to2dArray","constructor","value","this","_rows","_cols","_data","static","type","isArray","m","_","data","subarray","iterate_rows","Symbol","iterator","set_row","offset","result_col","entry","T","inverse","B","h","i_max","max_val","Infinity","val","h_val","i_val","f","B_row_row","B_i_j","join","I","B_i","C","e","outer","l","concat","rows_A","cols_A","rows_B","cols_B","X","set_block","offset_row","offset_col","get_block","start_row","start_col","end_row","end_col","new_row","new_col","gather","row_indices","col_indices","N","row_index","col_index","_apply_array","_apply_rowwise_array","_apply_colwise_array","_apply","value_rows","value_cols","mult","divide","add","sub","push","asArray","min_row_col","min","mean","meanRows","meanCols","b_i","r","d","z","alpha","r_next","beta","L","U","LU","L_diag","U_diag","det","M","MT","MtM","MMt","V","Sigma","simultaneous_poweriteration","sigma","_seed","_N","_M","_MATRIX_A","_UPPER_MASK","_LOWER_MASK","_mt","_mti","Date","getTime","mt","mti","random_int","mag01","kk","N_M","M_N","choice","sample","index_list","linspace","random_index","splice","undefined","Heap","elements","accessor","comparator","heapify","_accessor","_container","_comparator","heap","container","element","floor","_heapify_down","_swap","index_a","index_b","_heapify_up","index","parentIndex","node","start_index","left","right","pop","item","first","iterate","toArray","raw_data","empty","DisjointSet","_list","Set","make_set","list","has","__disjoint_set","parent","children","size","find","union","node_x","node_y","forEach","BallTree","_Node","pivot","child1","child2","radius","_Leaf","points","_metric","_root","_construct","c","_greatest_spread","sorted_elements","p_index","p","spread","reduce","acc","current","search","_search","KNN","_elements","_D","distances","H","nearest_element_index","nearest_dist","Number","isInteger","res","DR","default_parameters","parameters","_parameters","Object","assign","seal","_type","_randomizer","_is_initialized","parameter","name","hasOwnProperty","para","transform","check_init","projection","generator","init","Y","async","args","PCA","super","eig_args","principal_components","means","X_cent","MDS","ai_","a_j","a__","_d_X","stress","d_X","d_Y","top_sum","bottom_sum","pow","x0","max_iter","pfx","fx","convergence","fxi","dx","Cluster","id","centroid","depth","_calculate_centroid","l_size","r_size","l_centroid","r_centroid","new_centroid","isLeaf","leaves","descendants","left_descendants","right_descendants","KMedoids","matrix","K","_matrix","_A","_K","_max_iter","log10","_distance_matrix","_clusters","fill","_cluster_medoids","_get_random_medoids","get_clusters","x_j","_nearest_medoid","index_nearest","medoids","finish","_iteration","cache","x_o","o","DeltaTD","xs","findIndex","d_j","distance_nearest","deltaTD","d_oj","_get_distance","d_n","distance_second","d_s","filter","x_i","d_ij","nearest","second","x_m","m1","m2","index_second","cluster_medoids","indices","ceil","TD","TD0","S","S_j","S_o","delta","_choose_distant_objects","a_index","b_index","max_dist","d_ai","d_bi","_col","old_dist","d_ab","y_i","linkage","_id","_linkage","root","do","clusters","_traverse","_n","d_min","_d_min","c_size","_c_size","Uint16Array","p_max","c1","D_i_min","c2","c1_cluster","c2_cluster","c1_cluster_indices","c2_cluster_indices","new_cluster","unshift","D_c1_j","D_c2_j","neighbors","kNearestNeighbors","G","other","_cluster_centroids","_get_random_centroids","_furthest_point","candidates","Ad","cluster_centroids","random_point","init_points","sample_size","indexOf","furthest_point","clusters_changed","Ai","min_dist","min_cluster","_compute_centroid","cluster_counter","ci","iteration_result","labels","unique_labels","label_id","count","X_mean","V_mean","label","v_mean","S_b","S_w","row_v","k_nearest_neighbors","O","W","nN_row","Z","C_trace","w","solve_CG","IW","control_points","DR_parameters","nc","c_i","Y_C","XA","knn","_b","AT","ATA","ATb","I_i","X_i","g","G_i_t","W_i","epsilon","min_points","_epsilon","_min_points","_ordered_list","_DB","ordered_list","DB","cluster_index","_cluster_index","reachability_distance","processed","_get_neighbors","_core_distance","seeds","_update","_expand_cluster","core_distance","new_reachability_distance","cluster","outliers","get_cluster_affirmation","magic","init_DR","init_parameters","includes","_step","MAGIC","e1","e2","Yi","Yj","dY","dX","dq","dr","perplexity","_iter","Htarget","log","Delta","druid","P","_ystep","_gains","prow","betamin","betamax","done","num","psum","pj","exp","Hhere","Pout","N2","_P","iterations","next","iter","ystep","gains","dim","pmul","Qu","qsum","dsum","dhere","qu","grad","premult","ymean","gid","sid","gainid","newgain","sign","newsid","__lazy_distance_matrix","D_ij","_make_minimum_spanning_tree","disjoint_set","F","E","u","set_u","set_v","_Emst","__hull_cross","ax","ay","bx","by","sx","sy","__hull","x1","y1","x2","y2","lower","upper","__findAngle","p1x","p1y","p2x","p2y","sin","cos","vec","__align_hull","hull","topEdge","d2","v1","v2","transformation","tx","ty","__transform","px","py","__transform_component","yOffset","cx","cy","__align_components","points_u","points_v","hull_u","hull_v","t_u","t_v","Emst","components","component_u","component_v","weight_adj","pca","n_inliers","n_outliers","n_random","triplets","weights","_generate_triplets","lr","vel","gain","n_extra","nbrs","knn_distances","sig","_find_p","_sample_knn_triplets","n_triplets","outlier_distances","_find_weights","random_triplets","random_weights","_sample_random_triplets","max_weight","isNaN","max_weight_2","n_neighbors","n_i","sort_indices","__argsort","n_j","sim","samples","_rejection_sample","out","n_samples","max_int","rejects","interval","p_sim","p_out","_grad","y_ij","y_ik","d_ik","n_viol","loss","n_knn_triplets","Y_id","Y_jd","Y_kd","gs","go","max_iteration","_next","gamma","old_C","_update_embedding","new_gain","local_connectivity","_spread","_set_op_mix_ratio","_repulsion_strength","_negative_sample_rate","_n_epochs","_initial_alpha","_find_ab_params","xv","yv","xv_i","powell","error","_compute_membership_strengths","sigmas","rhos","_smooth_knn_dist","SMOOTH_K_TOLERANCE","MIN_K_DIST_SCALE","target","log2","reverse","lo","hi","mid","search_result","non_zero_dist","non_zero_dist_length","interpolation","mean_ithd","mean_d","_fuzzy_simplicial_set","distances_i","transposed_result","prod_matrix","_make_epochs_per_sample","n_epochs","_weights","Float32Array","weights_max","_tocoo","graph","rows_n","cols_n","_a","_graph","_head","_tail","_epochs_per_sample","_epochs_per_negative_sample","_epoch_of_next_sample","_epoch_of_next_negative_sample","_clip","_optimize_layout","head_embedding","tail_embedding","head","tail","_alpha","epochs_per_sample","epochs_per_negative_sample","epoch_of_next_negative_sample","epoch_of_next_sample","clip","tail_length","grad_coeff","grad_d","n_neg_samples","sum_a","sum_b","acos","disagree","num_non_zero","num_equal","x_norm","rho","u1","u_outer_u","R_block","new_R","Q_block","new_Q","num_not_equal","num_true_true","num_true_false","num_false_true"],"mappings":"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"}