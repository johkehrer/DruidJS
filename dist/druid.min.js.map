{"version":3,"file":"druid.min.js","sources":["../metrics/euclidean.js","../metrics/euclidean_squared.js","../matrix/k_nearest_neighbors.js","../matrix/distance_matrix.js","../matrix/linspace.js","../matrix/norm.js","../numerical/neumair_sum.js","../linear_algebra/qr.js","../linear_algebra/simultaneous_poweriteration.js","../matrix/Matrix.js","../util/randomizer.js","../util/max.js","../util/min.js","../datastructure/Heap.js","../datastructure/DisjointSet.js","../knn/BallTree.js","../knn/KNN.js","../dimred/DR.js","../dimred/PCA.js","../dimred/MDS.js","../optimization/powell.js","../clustering/Hierarchical_Clustering.js","../clustering/KMedoids.js","../dimred/FASTMAP.js","../dimred/ISOMAP.js","../clustering/KMeans.js","../dimred/LDA.js","../dimred/LLE.js","../dimred/LSP.js","../dimred/LTSA.js","../clustering/OPTICS.js","../dimred/SAMMON.js","../dimred/SQDMDS.js","../dimred/TSNE.js","../dimred/TopoMap.js","../dimred/TriMap.js","../dimred/UMAP.js","../metrics/canberra.js","../metrics/chebyshev.js","../metrics/cosine.js","../metrics/hamming.js","../linear_algebra/inner_product.js","../metrics/jaccard.js","../numerical/kahan_sum.js","../metrics/manhattan.js","../matrix/normalize.js","../linear_algebra/qr_householder.js","../metrics/sokal_michener.js","../metrics/yule.js"],"sourcesContent":["import { euclidean_squared } from \"../metrics/index.js\";\n/**\n * Computes the euclidean distance (<code>l<sub>2</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    return Math.sqrt(euclidean_squared(a, b));\n}\n","/**\n * Computes the squared euclidean distance (l<sub>2</sub><sup>2</sup>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean_squared\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the squared euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        const a_b = a[i] - b[i];\n        sum += a_b * a_b;\n    }\n    return sum;\n}\n","import { distance_matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Computes the k-nearest neighbors of each row of {@link A}.\n * @memberof module:matrix\n * @alias k_nearest_neigbhors\n * @param {Matrix} A - Either the data matrix, or a distance matrix.\n * @param {Number} k - The number of neighbors to compute.\n * @param {Function|\"precomputed\"} [metric=euclidean]\n * @returns {Array<Object>} -\n */\nexport default function (A, k, metric = euclidean) {\n    const rows = A.shape[0];\n    let D = metric == \"precomputed\" ? A : distance_matrix(A, metric);\n    let nN = new Array(rows);\n    for (let row = 0; row < rows; ++row) {\n        nN[row] = Array.from(D.row(row))\n            .map((distance, col) => {\n                return {\n                    i: row,\n                    j: col,\n                    distance: distance,\n                };\n            })\n            .sort((a, b) => a.distance - b.distance)\n            .slice(1, k + 1);\n    }\n    return nN;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"./index.js\";\n\n/**\n * Computes the distance matrix of datamatrix {@link A}.\n * @memberof module:matrix\n * @alias distance_matrix\n * @param {Matrix} A - Matrix.\n * @param {Function} [metric=euclidean] - The diistance metric.\n * @returns {Matrix} D - The distance matrix of {@link A}.\n */\nexport default function (A, metric = euclidean) {\n    let n = A.shape[0];\n    const D = new Matrix(n, n);\n    for (let i = 0; i < n; ++i) {\n        const A_i = A.row(i);\n        for (let j = i + 1; j < n; ++j) {\n            const dist = metric(A_i, A.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n        }\n    }\n    return D;\n}\n","/**\n * Creates an Array containing {@link number} numbers from {@link start} to {@link end}.\n * If <code>{@link number} = null</null>.\n * @memberof module:matrix\n * @alias linspace\n * @param {Number} start - Start value.\n * @param {Number} end - End value.\n * @param {Number} [number = null] - Number of number between {@link start} and {@link end}.\n * @returns {Array} - An array with {@link number} entries, beginning at {@link start} ending at {@link end}.\n */\nexport default function (start, end, number = null) {\n    if (!number) {\n        number = Math.max(Math.round(end - start) + 1, 1);\n    }\n    if (number < 2) {\n        return number === 1 ? [start] : [];\n    }\n    let result = new Array(number);\n    number -= 1;\n    for (let i = number; i >= 0; --i) {\n        result[i] = (i * end + (number - i) * start) / number;\n    }\n    return result;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n//import { neumair_sum } from \"../numerical/index\";\n\n/**\n * Computes the norm of a vector, by computing its distance to **0**.\n * @memberof module:matrix\n * @alias norm\n * @param {Matrix|Array<Number>|Float64Array} v - Vector.\n * @param {Function} [metric = euclidean] - Which metric should be used to compute the norm.\n * @returns {Number} - The norm of {@link v}.\n */\nexport default function (v, metric = euclidean) {\n    let vector = null;\n    if (v instanceof Matrix) {\n        let [rows, cols] = v.shape;\n        if (rows === 1) vector = v.row(0);\n        else if (cols === 1) vector = v.col(0);\n        else throw new Error(\"Matrix must be 1d!\");\n    } else {\n        vector = v;\n    }\n    const n = vector.length;\n    const zeros = new Float64Array(n);\n    return metric(vector, zeros);\n}\n","/**\n * Numerical stable summation with the Neumair summation algorithm.\n * @memberof module:numerical\n * @alias neumair_sum\n * @param {Number[]} summands - Array of values to sum up.\n * @returns {Number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements}\n */\nexport default function (summands) {\n    const n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n\n    for (let i = 0; i < n; ++i) {\n        const summand = summands[i];\n        const t = sum + summand;\n        if (Math.abs(sum) >= Math.abs(summand)) {\n            compensation += sum - t + summand;\n        } else {\n            compensation += summand - t + sum;\n        }\n        sum = t;\n    }\n    return sum + compensation;\n}\n","import { Matrix, norm } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix `A` using Gram-Schmidt process.\n * @memberof module:linear_algebra\n * @alias qr\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_the_Gram%E2%80%93Schmidt_process}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, cols, \"identity\");\n    const R = new Matrix(cols, cols, 0);\n\n    for (let j = 0; j < cols; ++j) {\n        let v = A.col(j);\n        for (let i = 0; i < j; ++i) {\n            const q = Q.col(i);\n            const q_dot_v = neumair_sum(q.map((q_, k) => q_ * v[k]));\n            for (let k = 0; k < rows; ++k) {\n                v[k] -= q_dot_v * q[k];\n            }\n            R.set_entry(i, j, q_dot_v);\n        }\n        const v_norm = norm(v, euclidean);\n        for (let k = 0; k < rows; ++k) {\n            Q.set_entry(k, j, v[k] / v_norm);\n        }\n        R.set_entry(j, j, v_norm);\n    }\n    return { R, Q };\n}\n","import { qr as qr_gramschmidt } from \"./index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\n\n/**\n * Computes the `k` biggest Eigenvectors and Eigenvalues from Matrix `A` with the QR-Algorithm.\n * @memberof module:linear_algebra\n * @alias simultaneous_poweriteration\n * @param {Matrix} A - The Matrix\n * @param {Number} k - The number of eigenvectors and eigenvalues to compute.\n * @param {Object} parameters - Object containing parameterization of the simultanious poweriteration method.\n * @param {Number} [parameters.max_iterations=100] - The number of maxiumum iterations the algorithm should run.\n * @param {Number|Randomizer} [parameters.seed=1212] - The seed value or a randomizer used in the algorithm.\n * @param {Function} [parameters.qr=qr_gramschmidt] - The QR technique to use.\n * @param {Number} [parameters.tol=1e-8] - Tolerated error for stopping criteria.\n * @returns {{eigenvalues: Number[], eigenvectors: Number[][]}} the `k` biggest eigenvectors and eigenvalues of Matrix `A`.\n */\nexport default function (A, k = 2, {seed = 1212, max_iterations = 100, qr = qr_gramschmidt, tol = 1e-8} = {}) {\n    const randomizer = seed instanceof Randomizer ? seed : new Randomizer(seed);\n    if (!(A instanceof Matrix)) A = Matrix.from(A);\n    const n = A.shape[0];\n    let { Q, R } = qr(new Matrix(n, k, () => (randomizer.random - .5) * 2));\n    while (max_iterations--) {\n        const oldQ = Q;\n        const Z = A.dot(Q);\n        const QR = qr(Z);\n        Q = QR.Q;\n        R = QR.R;\n        const error = euclidean_squared(Q.values, oldQ.values);\n        if (error < tol) {\n            break;\n        }\n    }\n\n    const eigenvalues = R.diag;\n    const eigenvectors = Q.transpose().to2dArray;\n    return { eigenvalues, eigenvectors };\n}\n","import { neumair_sum } from \"../numerical/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n/**\n * @class\n * @alias Matrix\n * @requires module:numerical/neumair_sum\n */\nexport class Matrix {\n    /**\n     * creates a new Matrix. Entries are stored in a Float64Array.\n     * @memberof module:matrix\n     * @param {number} rows - The amount of rows of the matrix.\n     * @param {number} cols - The amount of columns of the matrix.\n     * @param {(function|string|number)} value=0 - Can be a function with row and col as parameters, a number, or \"zeros\", \"identity\" or \"I\", or \"center\".\n     *  - **function**: for each entry the function gets called with the parameters for the actual row and column.\n     *  - **string**: allowed are\n     *      - \"zero\", creates a zero matrix.\n     *      - \"identity\" or \"I\", creates an identity matrix.\n     *      - \"center\", creates an center matrix.\n     *  - **number**: create a matrix filled with the given value.\n     * @example\n     *\n     * let A = new Matrix(10, 10, () => Math.random()); //creates a 10 times 10 random matrix.\n     * let B = new Matrix(3, 3, \"I\"); // creates a 3 times 3 identity matrix.\n     * @returns {Matrix} returns a {@link rows} times {@link cols} Matrix filled with {@link value}.\n     */\n    constructor(rows = null, cols = null, value = null) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = null;\n        if (rows && cols) {\n            if (!value) {\n                this._data = new Float64Array(rows * cols);\n                return this;\n            }\n            if (typeof value === \"function\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value(row, col);\n                    }\n                }\n                return this;\n            }\n            if (typeof value === \"string\") {\n                if (value === \"zeros\") {\n                    return new Matrix(rows, cols, 0);\n                }\n                if (value === \"identity\" || value === \"I\") {\n                    this._data = new Float64Array(rows * cols);\n                    for (let row = 0; row < rows; ++row) {\n                        this._data[row * cols + row] = 1;\n                    }\n                    return this;\n                }\n                if (value === \"center\" && rows == cols) {\n                    this._data = new Float64Array(rows * cols);\n                    value = (i, j) => (i === j ? 1 : 0) - 1 / rows;\n                    for (let row = 0; row < rows; ++row) {\n                        for (let col = 0; col < cols; ++col) {\n                            this._data[row * cols + col] = value(row, col);\n                        }\n                    }\n                    return this;\n                }\n            }\n            if (typeof value === \"number\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value;\n                    }\n                }\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Creates a Matrix out of {@link A}.\n     * @param {(Matrix|Array|Float64Array|number)} A - The matrix, array, or number, which should converted to a Matrix.\n     * @param {\"row\"|\"col\"|\"diag\"} [type = \"row\"] - If {@link A} is a Array or Float64Array, then type defines if it is a row- or a column vector.\n     * @returns {Matrix}\n     *\n     * @example\n     * let A = Matrix.from([[1, 0], [0, 1]]); //creates a two by two identity matrix.\n     * let S = Matrix.from([1, 2, 3], \"diag\"); // creates a 3 by 3 matrix with 1, 2, 3 on its diagonal. [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n     */\n    static from(A, type = \"row\") {\n        if (A instanceof Matrix) {\n            return A.clone();\n        } else if (Matrix.isArray(A)) {\n            let m = A.length;\n            if (m === 0) throw new Error(\"Array is empty\");\n            // 1d\n            if (!Matrix.isArray(A[0])) {\n                if (type === \"row\") {\n                    return new Matrix(1, m, (_, j) => A[j]);\n                } else if (type === \"col\") {\n                    return new Matrix(m, 1, (i) => A[i]);\n                } else if (type === \"diag\") {\n                    return new Matrix(m, m, (i, j) => (i == j ? A[i] : 0));\n                } else {\n                    throw new Error(\"1d array has NaN entries\");\n                }\n                // 2d\n            } else {\n                let n = A[0].length;\n                for (let row = 0; row < m; ++row) {\n                    if (A[row].length !== n) {\n                        throw new Error(\"various array lengths\");\n                    }\n                }\n                return new Matrix(m, n, (i, j) => A[i][j]);\n            }\n        } else if (typeof A === \"number\") {\n            return new Matrix(1, 1, A);\n        } else {\n            throw new Error(\"error\");\n        }\n    }\n\n    /**\n     * Returns the {@link row}<sup>th</sup> row from the Matrix.\n     * @param {Number} row\n     * @returns {Float64Array}\n     */\n    row(row) {\n        const data = this.values;\n        const cols = this._cols;\n        return data.subarray(row * cols, (row + 1) * cols);\n    }\n\n    /**\n     * Returns an generator yielding each row of the Matrix.\n     * @yields {Float64Array}\n     */\n    *iterate_rows() {\n        const cols = this._cols;\n        const rows = this._rows;\n        const data = this.values;\n        for (let row = 0; row < rows; ++row) {\n            yield data.subarray(row * cols, (row + 1) * cols);\n        }\n    }\n\n    /**\n     * Makes a {@link Matrix} object an iterable object.\n     * @yields {Float64Array}\n     */\n    *[Symbol.iterator]() {\n        for (const row of this.iterate_rows()) {\n            yield row;\n        }\n    }\n\n    /**\n     * Sets the entries of {@link row}<sup>th</sup> row from the Matrix to the entries from {@link values}.\n     * @param {Number} row\n     * @param {Array} values\n     * @returns {Matrix}\n     */\n    set_row(row, values) {\n        const cols = this._cols;\n        if (Matrix.isArray(values) && values.length === cols) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values[col];\n            }\n        } else if (values instanceof Matrix && values.shape[1] === cols && values.shape[0] === 1) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values._data[col];\n            }\n        } else {\n            throw new Error(\"Values not valid! Needs to be either an Array, a Float64Array, or a fitting Matrix!\")\n        }\n        return this;\n    }\n\n    /**\n     * Swaps the rows {@link row1} and {@link row2} of the Matrix.\n     * @param {Number} row1\n     * @param {Number} row2\n     * @returns {Matrix}\n     */\n    swap_rows(row1, row2) {\n        const cols = this._cols;\n        const data = this.values;\n        for (let i = row1 * cols, j = row2 * cols, col = 0; col < cols; ++col, ++i, ++j) {\n            const t = data[i];\n            data[i] = data[j];\n            data[j] = t;\n        }\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> column from the Matrix.\n     * @param {Number} col\n     * @returns {Array}\n     */\n    col(col) {\n        const result_col = new Float64Array(this._rows);\n        for (let row = 0; row < this._rows; ++row) {\n            result_col[row] = this.values[row * this._cols + col];\n        }\n        return result_col;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @returns {float64}\n     */\n    entry(row, col) {\n        return this.values[row * this._cols + col];\n    }\n\n    /**\n     * Sets the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix to the given {@link value}.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    set_entry(row, col, value) {\n        this.values[row * this._cols + col] = value;\n        return this;\n    }\n\n    /**\n     * Adds a given {@link value} to the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    add_entry(row, col, value) {\n      this.values[row * this._cols + col] += value;\n      return this;\n    }\n\n    /**\n     * Subtracts a given {@link value} from the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    sub_entry(row, col, value) {\n      this.values[row * this._cols + col] -= value;\n      return this;\n    }\n\n    /**\n     * Returns a new transposed Matrix.\n     * @returns {Matrix}\n     */\n    transpose() {\n        let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n        return B;\n    }\n\n    /**\n     * Returns a new transposed Matrix. Short-form of {@function transpose}.\n     * @returns {Matrix}\n     */\n    get T() {\n        return this.transpose();\n    }\n\n    /**\n     * Returns the inverse of the Matrix.\n     * @returns {Matrix}\n     */\n    inverse() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const A = this.clone();\n        const B = new Matrix(rows, cols, 'I');\n\n        // foreach column\n        for (let col = 0; col < cols; ++col) {\n            // Search for maximum in this column (pivot)\n            let max_idx = col;\n            let max_val = Math.abs(A.entry(col, col));\n            for (let row = col + 1; row < rows; ++row) {\n                const val = Math.abs(A.entry(row, col));\n                if (max_val < val) {\n                    max_idx = row;\n                    max_val = val;\n                }\n            }\n            if (max_val === 0) {\n                throw new Error('Cannot compute inverse of Matrix, determinant is zero');\n            }\n            // Swap maximum row with current row\n            if (max_idx !== col) {\n                A.swap_rows(col, max_idx);\n                B.swap_rows(col, max_idx);\n            }\n\n            // eliminate non-zero values on the other rows at column c\n            const A_col = A.row(col);\n            const B_col = B.row(col);\n            for (let row = 0; row < rows; ++row) {\n                if (row !== col) {\n                    // eliminate value at column c and row r\n                    const A_row = A.row(row);\n                    const B_row = B.row(row);\n                    if (A_row[col] !== 0) {\n                        const f = A_row[col] / A_col[col];\n                        // sub (f * row c) from row r to eliminate the value at column c\n                        for (let s = col; s < cols; ++s) {\n                            A_row[s] -= (f * A_col[s]);\n                        }\n                        for (let s = 0; s < cols; ++s) {\n                            B_row[s] -= (f * B_col[s]);\n                        }\n                    }\n                } else {\n                    // normalize value at Acc to 1 (diagonal):\n                    // divide each value of row r=c by the value at Acc\n                    const f = A_col[col];\n                    for (let s = col; s < cols; ++s) {\n                        A_col[s] /= f;\n                    }\n                    for (let s = 0; s < cols; ++s) {\n                        B_col[s] /= f;\n                    }\n                }\n            }\n        }\n        return B;\n    }\n\n    /**\n     * Returns the dot product. If {@link B} is an Array or Float64Array then an Array gets returned. If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [rows_A, cols_A] = A.shape;\n            const [rows_B, cols_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows.\n                Must be equal!`);\n            }\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_i = A.row(row);\n                const B_val = B.values;\n                let sum = 0;\n                for (let i = 0, j = col; i < cols_A; ++i, j += cols_B) {\n                    sum += A_i[i] * B_val[j];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Transposes the current matrix and returns the dot product with {@link B}.\n     * If {@link B} is an Array or Float64Array then an Array gets returned.\n     * If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    transDot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [cols_A, rows_A] = A.shape; // transpose matrix\n            const [rows_B, cols_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${[rows_A, cols_A].join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows, which must be equal!`);\n            }\n            // let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n            // this.values[row * this._cols + col];\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_val = A.values;\n                const B_val = B.values;\n                let sum = 0;\n                for (let i = 0, j = row, k = col; i < cols_A; ++i, j += rows_A, k += cols_B) {\n                    sum += A_val[j] * B_val[k];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._cols;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.col(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Returns the dot product with the transposed version of {@link B}.\n     * If {@link B} is an Array or Float64Array then an Array gets returned.\n     * If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dotTrans(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [rows_A, cols_A] = A.shape;\n            const [cols_B, rows_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${[rows_B, cols_B].join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows, which must be equal!`);\n            }\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_i = A.row(row);\n                const B_i = B.row(col);\n                let sum = 0;\n                for (let i = 0; i < cols_A; ++i) {\n                    sum += A_i[i] * B_i[i];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Computes the outer product from {@link this} and {@link B}.\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    outer(B) {\n        let A = this;\n        let l = A._data.length;\n        let r = B._data.length;\n        if (l != r) return undefined;\n        let C = new Matrix();\n        C.shape = [\n            l,\n            l,\n            (i, j) => {\n                if (i <= j) {\n                    return A._data[i] * B._data[j];\n                } else {\n                    return C.entry(j, i);\n                }\n            },\n        ];\n        return C;\n    }\n\n    /**\n     * Appends matrix {@link B} to the matrix.\n     * @param {Matrix} B - matrix to append.\n     * @param {\"horizontal\"|\"vertical\"|\"diag\"} [type = \"horizontal\"] - type of concatenation.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 1], [1, 1]]); // 2 by 2 matrix filled with ones.\n     * let B = Matrix.from([[2, 2], [2, 2]]); // 2 by 2 matrix filled with twos.\n     *\n     * A.concat(B, \"horizontal\"); // 2 by 4 matrix. [[1, 1, 2, 2], [1, 1, 2, 2]]\n     * A.concat(B, \"vertical\"); // 4 by 2 matrix. [[1, 1], [1, 1], [2, 2], [2, 2]]\n     * A.concat(B, \"diag\"); // 4 by 4 matrix. [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 2, 2], [0, 0, 2, 2]]\n     */\n    concat(B, type = \"horizontal\") {\n        const A = this;\n        const [rows_A, cols_A] = A.shape;\n        const [rows_B, cols_B] = B.shape;\n        if (type == \"horizontal\") {\n            if (rows_A != rows_B) {\n                throw new Error(`A.concat(B, \"horizontal\"): A and B need same number of rows, A has ${rows_A} rows, B has ${rows_B} rows.`);\n            }\n            const X = new Matrix(rows_A, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(0, cols_A, B);\n            return X;\n        } else if (type == \"vertical\") {\n            if (cols_A != cols_B) {\n                throw new Error(`A.concat(B, \"vertical\"): A and B need same number of columns, A has ${cols_A} columns, B has ${cols_B} columns.`);\n            }\n            const X = new Matrix(rows_A + rows_B, cols_A, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, 0, B);\n            return X;\n        } else if (type == \"diag\") {\n            const X = new Matrix(rows_A + rows_B, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, cols_A, B);\n            return X;\n        } else {\n            throw new Error(`type must be \"horizontal\" or \"vertical\", but type is ${type}!`);\n        }\n    }\n\n    /**\n     * Writes the entries of B in A at an offset position given by {@link offset_row} and {@link offset_col}.\n     * @param {int} offset_row\n     * @param {int} offset_col\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    set_block(offset_row, offset_col, B) {\n        const rows = Math.min(this._rows - offset_row, B.shape[0]);\n        const cols = Math.min(this._cols - offset_col, B.shape[1]);\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n                this.set_entry(row + offset_row, col + offset_col, B.entry(row, col));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Extracts the entries from the {@link start_row}<sup>th</sup> row to the {@link end_row}<sup>th</sup> row, the {@link start_col}<sup>th</sup> column to the {@link end_col}<sup>th</sup> column of the matrix.\n     * If {@link end_row} or {@link end_col} is empty, the respective value is set to {@link this.rows} or {@link this.cols}.\n     * @param {Number} start_row\n     * @param {Number} start_col\n     * @param {Number} [end_row = null]\n     * @param {Number} [end_col = null]\n     * @returns {Matrix} Returns a end_row - start_row times end_col - start_col matrix, with respective entries from the matrix.\n     * @example\n     *\n     * let A = Matrix.from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // a 3 by 3 matrix.\n     *\n     * A.get_block(1, 1); // [[5, 6], [8, 9]]\n     * A.get_block(0, 0, 1, 1); // [[1]]\n     * A.get_block(1, 1, 2, 2); // [[5]]\n     * A.get_block(0, 0, 2, 2); // [[1, 2], [4, 5]]\n     */\n    get_block(start_row, start_col, end_row = null, end_col = null) {\n        const [rows, cols] = this.shape;\n        end_row = end_row ?? rows;\n        end_col = end_col ?? cols;\n        if (end_row <= start_row || end_col <= start_col) {\n            throw new Error(`\n                end_row must be greater than start_row, and\n                end_col must be greater than start_col, but\n                end_row = ${end_row}, start_row = ${start_row}, end_col = ${end_col}, and start_col = ${start_col}!`);\n        }\n        const X = new Matrix(end_row - start_row, end_col - start_col, \"zeros\");\n        for (let row = start_row, new_row = 0; row < end_row; ++row, ++new_row) {\n            for (let col = start_col, new_col = 0; col < end_col; ++col, ++new_col) {\n                X.set_entry(new_row, new_col, this.entry(row, col));\n            }\n        }\n        return X;\n        //return new Matrix(end_row - start_row, end_col - start_col, (i, j) => this.entry(i + start_row, j + start_col));\n    }\n\n    /**\n     * Returns a new array gathering entries defined by the indices given by argument.\n     * @param {Array<Number>} row_indices - Array consists of indices of rows for gathering entries of this matrix\n     * @param {Array<Number>} col_indices  - Array consists of indices of cols for gathering entries of this matrix\n     * @returns {Matrix}\n     */\n    gather(row_indices, col_indices) {\n        const N = row_indices.length;\n        const D = col_indices.length;\n\n        const R = new Matrix(N, D);\n        for (let i = 0; i < N; ++i) {\n            const row_index = row_indices[i];\n            for (let j = 0; j < N; ++j) {\n                const col_index = col_indices[j];\n                R.set_entry(i, j, this.entry(row_index, col_index));\n            }\n        }\n\n        return R;\n    }\n\n    /**\n     * Applies a function to each entry of the matrix.\n     * @private\n     * @param {Function} f function takes 2 parameters, the value of the actual entry and a value given by the function {@link v}. The result of {@link f} gets writen to the Matrix.\n     * @param {Function} v function takes 2 parameters for row and col, and returns a value witch should be applied to the colth entry of the rowth row of the matrix.\n     */\n    _apply_array(f, v) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let i = 0, row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col, ++i) {\n                data[i] = f(data[i], v(row, col));\n            }\n        }\n        return this;\n    }\n\n    _apply_rowwise_array(values, f) {\n        return this._apply_array(f, (_, j) => values[j]);\n    }\n\n    _apply_colwise_array(values, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let i = 0, row = 0; row < rows; ++row) {\n            const val = values[row];\n            for (let col = 0; col < cols; ++col, ++i) {\n                data[i] = f(data[i], val);\n            }\n        }\n        return this;\n    }\n\n    _apply(value, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        if (value instanceof Matrix) {\n            const values = value.values;\n            const [value_rows, value_cols] = value.shape;\n            if (value_rows === 1) {\n                if (cols !== value_cols) {\n                    throw new Error(`cols !== value_cols`);\n                }\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], values[col]);\n                    }\n                }\n            } else if (value_cols === 1) {\n                if (rows !== value_rows) {\n                    throw new Error(`rows !== value_rows`);\n                }\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    const v =  values[row];\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], v);\n                    }\n                }\n            } else if (rows == value_rows && cols == value_cols) {\n                for (let i = 0, n = rows * cols; i < n; ++i) {\n                    data[i] = f(data[i], values[i]);\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else if (Matrix.isArray(value)) {\n            if (value.length === rows) {\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    const v = value[row];\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], v);\n                    }\n                }\n            } else if (value.length === cols) {\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], value[col]);\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else { // scalar value\n            for (let i = 0, n = rows * cols; i < n; ++i) {\n                data[i] = f(data[i], value);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Clones the Matrix.\n     * @returns {Matrix}\n     */\n    clone() {\n        let B = new Matrix();\n        B._rows = this._rows;\n        B._cols = this._cols;\n        B._data = this.values.slice(0);\n        return B;\n    }\n\n    /**\n     * Entrywise multiplication with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies multiplication to the element, otherwise it creates first a copy and applies the multiplication on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.mult(2); // [[2, 4], [6, 8]];\n     * A.mult(B); // [[1, 4], [9, 16]];\n     */\n    mult(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a * b);\n    }\n\n    /**\n     * Entrywise division with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies division to the element, otherwise it creates first a copy and applies the division on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.divide(2); // [[0.5, 1], [1.5, 2]];\n     * A.divide(B); // [[1, 1], [1, 1]];\n     */\n    divide(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a / b);\n    }\n\n    /**\n     * Entrywise addition with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies addition to the element, otherwise it creates first a copy and applies the addition on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.add(2); // [[3, 4], [5, 6]];\n     * A.add(B); // [[2, 4], [6, 8]];\n     */\n    add(value, {inline = false} = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a + b);\n    }\n\n    /**\n     * Entrywise subtraction with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies subtraction to the element, otherwise it creates first a copy and applies the subtraction on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.sub(2); // [[-1, 0], [1, 2]];\n     * A.sub(B); // [[0, 0], [0, 0]];\n     */\n    sub(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a - b);\n    }\n\n    /**\n     * Returns the number of rows and columns of the Matrix.\n     * @returns {Array} An Array in the form [rows, columns].\n     */\n    get shape() {\n        return [this._rows, this._cols];\n    }\n\n    /**\n     * Returns the matrix in the given shape with the given function which returns values for the entries of the matrix.\n     * @param {Array} parameter - takes an Array in the form [rows, cols, value], where rows and cols are the number of rows and columns of the matrix, and value is a function which takes two parameters (row and col) which has to return a value for the colth entry of the rowth row.\n     * @returns {Matrix}\n     */\n    set shape([rows, cols, value = () => 0]) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = new Float64Array(rows * cols);\n        for (let i = 0, row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col, ++i) {\n                this._data[i] = value(row, col);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Float64Arrays.\n     * @returns {Array<Float64Array>}\n     */\n    get to2dArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(row);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Arrays.\n     * @returns {Array<Array>}\n     */\n    get asArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(Array.from(row));\n        }\n        return result;\n    }\n\n    /**\n     * Returns the diagonal of the Matrix.\n     * @returns {Float64Array}\n     */\n    get diag() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const min_row_col = Math.min(rows, cols);\n        let result = new Float64Array(min_row_col);\n        for (let i = 0; i < min_row_col; ++i) {\n            result[i] = this.entry(i, i);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the mean of all entries of the Matrix.\n     * @returns {Number}\n     */\n    get mean() {\n        const sum = this.sum;\n        const n = this._rows * this._cols;\n        return sum / n;\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Number}\n     */\n    get sum() {\n        const data = this.values;\n        return neumair_sum(data);\n    }\n\n    /**\n     * Returns the entries of the Matrix.\n     * @returns {Float64Array}\n     */\n    get values() {\n        const data = this._data;\n        return data;\n    }\n\n    /**\n     * Returns the mean of each row of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanRows() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: rows });\n        for (let i = 0, row = 0; row < rows; ++row) {\n            let sum = 0;\n            for (let col = 0; col < cols; ++col, ++i) {\n                sum += data[i];\n            }\n            result[row] = sum / cols;\n        }\n        return result;\n    }\n\n    /** Returns the mean of each column of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanCols() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: cols });\n        for (let col = 0; col < cols; ++col) {\n            let sum = 0;\n            for (let i = col, row = 0; row < rows; ++row, i += cols) {\n                sum += data[i];\n            }\n            result[col] = sum / rows;\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b} using the conjugate gradient method. Returns the result x.\n     * @param {Matrix} A - Matrix\n     * @param {Matrix} b - Matrix\n     * @param {Randomizer} [randomizer=null]\n     * @param {Number} [tol=1e-3]\n     * @returns {Matrix}\n     */\n    static solve_CG(A, b, randomizer, tol = 1e-3) {\n        if (randomizer === null) {\n            randomizer = new Randomizer();\n        }\n        const rows = A.shape[0];\n        const cols = b.shape[1];\n        let result = new Matrix(rows, 0);\n        for (let i = 0; i < cols; ++i) {\n            const b_i = Matrix.from(b.col(i)).T;\n            let x = new Matrix(rows, 1, () => randomizer.random);\n            let r = b_i.sub(A.dot(x));\n            let d = r.clone();\n            do {\n                const z = A.dot(d);\n                const alpha = r.transDot(r).entry(0, 0) / d.transDot(z).entry(0, 0);\n                x = x.add(d.mult(alpha));\n                const r_next = r.sub(z.mult(alpha));\n                const beta = r_next.transDot(r_next).entry(0, 0) / r.transDot(r).entry(0, 0);\n                d = r_next.add(d.mult(beta));\n                r = r_next;\n            } while (Math.abs(r.mean) > tol);\n            result = result.concat(x, \"horizontal\");\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b}. Returns the result x.\n     * @param {Matrix} A - Matrix or LU Decomposition\n     * @param {Matrix} b - Matrix\n     * @returns {Matrix}\n     */\n    static solve(A, b) {\n        let { L: L, U: U } = \"L\" in A && \"U\" in A ? A : Matrix.LU(A);\n        let rows = L.shape[0];\n        let x = b.clone();\n\n        // forward\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < row - 1; ++col) {\n                x.sub_entry(0, row, L.entry(row, col) * x.entry(1, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / L.entry(row, row));\n        }\n\n        // backward\n        for (let row = rows - 1; row >= 0; --row) {\n            for (let col = rows - 1; col > row; --col) {\n                x.sub_entry(0, row, U.entry(row, col) * x.entry(0, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / U.entry(row, row));\n        }\n\n        return x;\n    }\n\n    /**\n     * {@link L}{@link U} decomposition of the Matrix {@link A}. Creates two matrices, so that the dot product LU equals A.\n     * @param {Matrix} A\n     * @returns {{L: Matrix, U: Matrix}} result - Returns the left triangle matrix {@link L} and the upper triangle matrix {@link U}.\n     */\n    static LU(A) {\n        const rows = A.shape[0];\n        const L = new Matrix(rows, rows, \"zeros\");\n        const U = new Matrix(rows, rows, \"identity\");\n\n        for (let j = 0; j < rows; ++j) {\n            for (let i = j; i < rows; ++i) {\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(i, k) * U.entry(k, j);\n                }\n                L.set_entry(i, j, A.entry(i, j) - sum);\n            }\n            for (let i = j; i < rows; ++i) {\n                if (L.entry(j, j) === 0) {\n                    return undefined;\n                }\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(j, k) * U.entry(k, i);\n                }\n                U.set_entry(j, i, (A.entry(j, i) - sum) / L.entry(j, j));\n            }\n        }\n\n        return { L: L, U: U };\n    }\n\n    /**\n     * Computes the determinante of {@link A}, by using the LU decomposition of {@link A}.\n     * @param {Matrix} A\n     * @returns {Number} det - Returns the determinate of the Matrix {@link A}.\n     */\n    static det(A) {\n        const rows = A.shape[0];\n        const { L, U } = Matrix.LU(A);\n        const L_diag = L.diag;\n        const U_diag = U.diag;\n        let det = L_diag[0] * U_diag[0];\n        for (let row = 1; row < rows; ++row) {\n            det *= L_diag[row] * U_diag[row];\n        }\n        return det;\n    }\n\n    /**\n     * Computes the {@link k} components of the SVD decomposition of the matrix {@link M}\n     * @param {Matrix} M\n     * @param {int} [k=2]\n     * @returns {{U: Matrix, Sigma: Matrix, V: Matrix}}\n     */\n    static SVD(M, k = 2) {\n        let MtM = M.transDot(M);\n        let MMt = M.dotTrans(M);\n        let { eigenvectors: V, eigenvalues: Sigma } = simultaneous_poweriteration(MtM, k);\n        let { eigenvectors: U } = simultaneous_poweriteration(MMt, k);\n        return { U: U, Sigma: Sigma.map((sigma) => Math.sqrt(sigma)), V: V };\n\n        //Algorithm 1a: Householder reduction to bidiagonal form:\n        /* const [m, n] = A.shape;\n        let U = new Matrix(m, n, (i, j) => i == j ? 1 : 0);\n        console.log(U.to2dArray)\n        let V = new Matrix(n, m, (i, j) => i == j ? 1 : 0);\n        console.log(V.to2dArray)\n        let B = Matrix.bidiagonal(A.clone(), U, V);\n        console.log(U,V,B)\n        return { U: U, \"Sigma\": B, V: V }; */\n    }\n\n    static isArray(A) {\n      return Array.isArray(A) || A instanceof Float64Array || A instanceof Float32Array;\n    }\n}\n","import { linspace, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @memberof module:utils\n * @alias Randomizer\n */\nexport class Randomizer {\n    /**\n     * Mersenne Twister random number generator.\n     * @constructor\n     * @param {Number} [_seed=new Date().getTime()] - The seed for the random number generator. If <code>_seed == null</code> then the actual time gets used as seed.\n     * @see https://github.com/bmurray7/mersenne-twister-examples/blob/master/javascript-mersenne-twister.js\n     */\n    constructor(_seed) {\n        this._N = 624;\n        this._M = 397;\n        this._MATRIX_A = 0x9908b0df;\n        this._UPPER_MASK = 0x80000000;\n        this._LOWER_MASK = 0x7fffffff;\n        this._mt = new Array(this._N);\n        this._mti = this.N + 1;\n\n        this.seed = _seed || new Date().getTime();\n        return this;\n    }\n\n    set seed(_seed) {\n        this._seed = _seed;\n        let mt = this._mt;\n\n        mt[0] = _seed >>> 0;\n        for (this._mti = 1; this._mti < this._N; this._mti += 1) {\n            let mti = this._mti;\n            let s = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n            mt[mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + mti;\n            mt[mti] >>>= 0;\n        }\n    }\n\n    /**\n     * Returns the seed of the random number generator.\n     * @returns {Number} - The seed.\n     */\n    get seed() {\n        return this._seed;\n    }\n\n    /**\n     * Returns a float between 0 and 1.\n     * @returns {Number} - A random number between [0, 1]\n     */\n    get random() {\n        return this.random_int * (1.0 / 4294967296.0);\n    }\n\n    /**\n     * Returns an integer between 0 and MAX_INTEGER.\n     * @returns {Integer} - A random integer.\n     */\n    get random_int() {\n        let y,\n            mag01 = new Array(0x0, this._MATRIX_A);\n        if (this._mti >= this._N) {\n            let kk;\n\n            /* if (this._mti == this._N + 1) {\n                this.seed = 5489;\n            } */\n\n            let N_M = this._N - this._M;\n            let M_N = this._M - this._N;\n\n            for (kk = 0; kk < N_M; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + this._M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (; kk < this._N - 1; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + M_N] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            y = (this._mt[this._N - 1] & this._UPPER_MASK) | (this._mt[0] & this._LOWER_MASK);\n            this._mt[this._N - 1] = this._mt[this._M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this._mti = 0;\n        }\n\n        y = this._mt[(this._mti += 1)];\n        y ^= y >>> 11;\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= y >>> 18;\n\n        return y >>> 0;\n    }\n\n    gauss_random() {\n        let x, y, r;\n        if (this._val != null) {\n            x = this._val, this._val = null;\n            return x;\n        } else do {\n            x = 2 * this.random - 1;\n            y = 2 * this.random - 1;\n            r = x * x + y * y;\n        } while (!r || r > 1);\n        const c = Math.sqrt(-2 * Math.log(r) / r);\n        this._val = y * c; // cache this for next function call for efficiency\n        return x * c;\n    }\n\n    /**\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    choice(A, n) {\n        if (A instanceof Matrix) {\n            let rows = A.shape[0];\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A.row(d));\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let rows = A.length;\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A[d]);\n        }\n    }\n\n    /**\n     * @static\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @param {Number} seed - The seed for the random number generator.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    static choice(A, n, seed = 1212) {\n        const R = new Randomizer(seed);\n        return R.choice(A, n);\n        /* let rows = A.shape[0];\n        if (n > rows) {\n            throw new Error(\"n bigger than A!\");\n        }\n        let rand = new Randomizer(seed);\n        let sample = new Array(n);\n        let index_list = linspace(0, rows - 1);\n        for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n            let random_index = rand.random_int % l;\n            sample[i] = index_list.splice(random_index, 1)[0];\n        }\n        //return result;\n        //return new Matrix(n, cols, (row, col) => A.entry(sample[row], col))\n        return sample.map((d) => A.row(d)); */\n    }\n}\n","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias max\n * @param {Array} values \n * @returns {Number}\n */\nexport default function (values) {\n    let max;\n    for (const value of values) {\n        if (value != null && (max < value || (max === undefined && value >= value))) {\n            max = value;\n        }\n    }\n    return max;\n}","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias min\n * @param {Array} values\n * @returns {Number}\n */\nexport default function (values) {\n    let min;\n    for (const value of values) {\n        if (value != null && (min > value || (min === undefined && value <= value))) {\n            min = value;\n        }\n    }\n    return min;\n}","/**\n * @class\n * @alias Heap\n */\nexport class Heap {\n    /**\n     * A heap is a datastructure holding its elements in a specific way, so that the top element would be the first entry of an ordered list.\n     * @constructor\n     * @memberof module:datastructure\n     * @alias Heap\n     * @param {Array=} elements - Contains the elements for the Heap. {@link elements} can be null.\n     * @param {Function} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(\"min\"|\"max\"|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     * @see {@link https://en.wikipedia.org/wiki/Binary_heap}\n     */\n    constructor(elements = null, accessor = d => d, comparator = \"min\") {\n        if (elements) {\n            return Heap.heapify(elements, accessor, comparator);\n        } else {\n            this._accessor = accessor;\n            this._container = [];\n            if (comparator == \"min\") {\n                this._comparator = (a, b) => a < b;\n            } else if (comparator == \"max\") {\n                this._comparator = (a, b) => a > b;\n            } else {\n                this._comparator = comparator;\n            }\n            return this\n        }\n    }\n\n    /**\n     * Creates a Heap from an Array\n     * @param {Array|Set} elements - Contains the elements for the Heap.\n     * @param {Function=} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(String=|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     */\n    static heapify(elements, accessor = d => d, comparator = \"min\") {\n        const heap = new Heap(null, accessor, comparator);\n        const container = heap._container;\n        for (const e of elements) {\n            container.push({\n                \"element\": e,\n                \"value\": accessor(e),\n            });\n        }\n        for (let i = Math.floor((elements.length / 2) - 1); i >= 0; --i) {\n            heap._heapify_down(i);\n        }\n        return heap;\n    }\n\n    /**\n     * Swaps elements of container array.\n     * @private\n     * @param {Number} index_a \n     * @param {Number} index_b \n     */\n    _swap(index_a, index_b) {\n        const container = this._container;\n        [container[index_b], container[index_a]] = [container[index_a], container[index_b]];\n        return;\n    }\n\n    /**\n     * @private\n     */\n    _heapify_up() {\n        const container = this._container;\n        let index = container.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (!this._comparator(container[index].value, container[parentIndex].value)) {\n                break;\n            } else {\n            this._swap(parentIndex, index)\n            index = parentIndex;\n            }\n        }\n    }\n\n    /**\n     * Pushes the element to the heap.\n     * @param {} element\n     * @returns {Heap}\n     */\n    push(element) {\n        const value = this._accessor(element);\n        //const node = new Node(element, value);\n        const node = {\"element\": element, \"value\": value};\n        this._container.push(node);\n        this._heapify_up();\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} [start_index = 0] \n     */\n    _heapify_down(start_index=0) {\n        const container = this._container;\n        const comparator = this._comparator;\n        const length = container.length;\n        let left = 2 * start_index + 1;\n        let right = 2 * start_index + 2;\n        let index = start_index;\n        if (index > length) throw \"index higher than length\"\n        if (left < length && comparator(container[left].value, container[index].value)) {\n            index = left;\n        }\n        if (right < length && comparator(container[right].value, container[index].value)) {\n            index = right;\n        }\n        if (index !== start_index) {\n            this._swap(start_index, index);\n            this._heapify_down(index);\n        }\n    }\n\n    /**\n     * Removes and returns the top entry of the heap.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    pop() {\n        const container = this._container;\n        if (container.length === 0) {\n            return null;\n        } else if (container.length === 1) {\n            return container.pop();\n        }\n        this._swap(0, container.length - 1);\n        const item = container.pop();\n        this._heapify_down();\n        return item;\n    }\n\n    /**\n     * Returns the top entry of the heap without removing it.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    get first() {\n        return this._container.length > 0 ? this._container[0] : null;\n    }\n\n\n    /**\n     * Yields the raw data\n     * @yields {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    * iterate() {\n        for (let i = 0, n = this._container.length; i < n; ++i) {\n            yield this._container[i].element;\n        }\n    }\n\n    /**\n     * Returns the heap as ordered array.\n     * @returns {Array} Array consisting the elements ordered by {@link comparator}.\n     */\n    toArray() {\n        return this.data()\n            .sort((a,b) => this._comparator(a, b) ? -1 : 0)\n    }\n\n    /**\n     * Returns elements of container array.\n     * @returns {Array} Array consisting the elements.\n     */\n    data() {\n        return this._container\n            .map(d => d.element)\n    }\n\n    /**\n     * Returns the container array.\n     * @returns {Array} The container array.\n     */\n    raw_data() {\n        return this._container;\n    }\n\n    /**\n     * The size of the heap.\n     * @returns {Number}\n     */\n    get length() {\n        return this._container.length;\n    }\n\n    /**\n     * Returns false if the the heap has entries, true if the heap has no entries.\n     * @returns {Boolean}\n     */\n    get empty() {\n        return this.length === 0;\n    }\n}","/**\n * @class\n * @alias DisjointSet\n * @see {@link https://en.wikipedia.org/wiki/Disjoint-set_data_structure}\n */\nexport class DisjointSet {\n    /**\n     * @constructor\n     * @alias DisjointSet\n     * @memberof module:datastructure\n     * @param {Array=} elements \n     * @returns {DisjointSet}\n     */\n    constructor(elements = null) {\n        this._list = new Set();\n        if (elements) {\n            for (const e of elements) {\n                this.make_set(e);\n            }\n        }\n        return this;\n    }\n\n    make_set(x) {\n        const list = this._list;\n        if (!list.has(x)) {\n            list.add(x);\n            x.__disjoint_set = {};\n            x.__disjoint_set.parent = x;\n            x.__disjoint_set.children = new Set([x]);\n            x.__disjoint_set.size = 1;\n        }\n        return this;\n    }\n\n    find(x) {\n        const list = this._list;\n        if (list.has(x)) {\n            if (x.__disjoint_set.parent !== x) {\n                x.__disjoint_set.children.add(...x);\n                x.__disjoint_set.parent = this.find(x.__disjoint_set.parent);\n                return x.__disjoint_set.parent;\n            } else {\n                return x;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    union(x, y) {\n        let node_x = this.find(x);\n        let node_y = this.find(y);\n\n        if (node_x === node_y) return this;\n        if (node_x.__disjoint_set.size < node_y.__disjoint_set.size) [node_x, node_y] = [node_y, node_x];\n\n        node_y.__disjoint_set.parent = node_x;\n        // keep track of children?\n        node_y.__disjoint_set.children.forEach(node_x.__disjoint_set.children.add, node_x.__disjoint_set.children);\n        node_x.__disjoint_set.size += node_y.__disjoint_set.size;\n\n        return this;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n/**\n * @class\n * @alias BallTree\n */\nexport class BallTree {\n    /**\n     * Generates a BallTree with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias BallTree\n     * @param {Array=} elements - Elements which should be added to the BallTree\n     * @param {Function} [metric = euclidean] metric to use: (a, b) => distance\n     * @see {@link https://en.wikipedia.org/wiki/Ball_tree}\n     * @see {@link https://github.com/invisal/noobjs/blob/master/src/tree/BallTree.js}\n     * @returns {BallTree}\n     */\n    constructor(elements = null, metric = euclidean) {\n        this._Node = class {\n            constructor(pivot, child1=null, child2=null, radius=null) {\n                this.pivot = pivot;\n                this.child1 = child1;\n                this.child2 = child2;\n                this.radius = radius;\n            }\n        }\n        this._Leaf = class {\n            constructor(points) {\n                this.points = points;\n            }\n        }\n        this._metric = metric;\n        if (elements) {\n            this.add(elements);\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @param {Array<*>} elements - new elements.\n     * @returns {BallTree}\n     */\n    add(elements) {\n        elements = elements.map((element, index) => {\n            return {index: index, element: element}\n        })\n        this._root = this._construct(elements);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Array<*>} elements \n     * @returns {Node} root of balltree.\n     */\n    _construct(elements) {\n        if (elements.length === 1) {\n            return new this._Leaf(elements);\n        } else {\n            let c = this._greatest_spread(elements);\n            let sorted_elements = elements.sort((a, b) => a.element[c] - b.element[c]);\n            let n = sorted_elements.length;\n            let p_index = Math.floor(n / 2);\n            let p = elements[p_index];\n            let L = sorted_elements.slice(0, p_index);\n            let R = sorted_elements.slice(p_index, n);\n            let radius = Math.max(...elements.map(d => this._metric(p.element, d.element)));\n            let B\n            if (L.length > 0 && R.length > 0) {         \n                B = new this._Node(p, this._construct(L), this._construct(R), radius);\n            } else {\n                B = new this._Leaf(elements);\n            }\n            return B;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Node} B \n     * @returns {Number}\n     */\n    _greatest_spread(B) {\n        let d = B[0].element.length;\n        let start = new Array(d);\n\n        for (let i = 0; i < d; ++i) {\n            start[i] = [Infinity, -Infinity];\n        }\n\n        let spread = B.reduce((acc, current) => {\n            for (let i = 0; i < d; ++i) {\n                acc[i][0] = Math.min(acc[i][0], current.element[i]);\n                acc[i][1] = Math.max(acc[i][1], current.element[i]);\n            }\n            return acc;\n        }, start);\n        spread = spread.map(d => d[1] - d[0]);\n        \n        let c = 0;\n        for (let i = 0; i < d; ++i) {\n            c = spread[i] > spread[c] ? i : c;\n        }\n        return c;\n    }\n\n    /**\n     * \n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        return this._search(t, k, new Heap(null, d => this._metric(d.element, t), \"max\"), this._root);\n    }\n\n    /**\n     * @private\n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @param {Heap} Q - Heap consists of the currently found {@link k} nearest neighbors.\n     * @param {Node|Leaf} B \n     */\n    _search(t, k, Q, B) {\n        // B is Node\n        if (Q.length >= k && B.pivot && B.radius && this._metric(t, B.pivot.element) - B.radius >= Q.first.value) {\n            return Q;\n        } \n        if (B.child1) this._search(t, k, Q, B.child1);\n        if (B.child2) this._search(t, k, Q, B.child2);\n        \n        // B is leaf\n        if (B.points) {\n            for (let i = 0, n = B.points.length; i < n; ++i) {\n                let p = B.points[i];\n                if (k > Q.length) {\n                    Q.push(p);\n                } else {\n                    Q.push(p);\n                    Q.pop();\n                }\n            }\n        }\n        return Q;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KNN\n */\nexport class KNN {\n    /**\n     * Generates a KNN list with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias KNN\n     * @param {Array=} elements - Elements which should be added to the KNN list\n     * @param {Function|\"precomputed\"} [metric = euclidean] metric is either precomputed or a function to use: (a, b) => distance\n     * @returns {KNN}\n     */\n    constructor(elements=null, metric=euclidean) {\n        this._metric = metric;\n        this._elements = elements instanceof Matrix ? elements : Matrix.from(elements);\n        const N = this._elements.shape[0];\n        if (metric === \"precomputed\") {\n            this._D = this._elements.clone();\n        } else {\n            this._D = distance_matrix(this._elements, metric);\n        }\n        this.KNN = [];\n        for (let row = 0; row < N; ++row) {\n            const distances = this._D.row(row);\n            const H = new Heap(null, d => d.value, \"min\");\n            for (let j = 0; j < N; ++j) {\n                H.push({\n                    value: distances[j],\n                    index: j,\n                });\n            }\n            this.KNN.push(H);\n        }\n    }\n\n    /**\n     * \n     * @param {Array|Number} t - query element or index.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        const metric = this._metric;\n        const KNN = this.KNN;\n        let H;\n        if (Array.isArray(t)) {\n            if (this._metric == \"precomputed\") {\n                throw \"Search by query element is only possible when not using a precomputed distance matrix!\"\n            } \n            const elements = this._elements;\n            const N = KNN.length;\n            let nearest_element_index = null;\n            let nearest_dist = Infinity;\n            for (let i = 0; i < N; ++i) {\n                const element = elements.row(i);\n                const dist = metric(t, element);\n                if (dist < nearest_dist) {\n                    nearest_element_index = i;\n                    nearest_dist = dist;\n                }\n            }\n            H = KNN[nearest_element_index];\n        } else if (Number.isInteger(t)) {\n            H = KNN[t]\n        }\n\n        let result = []\n        for (let i = 0; i < k; ++i) {\n            result.push(H.pop())\n        }\n        result.forEach(res => H.push(res.element))\n        return result\n    }    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n\n/**\n * @class\n * @alias DR\n * @borrows DR#parameter as DR#para\n * @borrows DR#parameter as DR#p\n */\nexport class DR {\n    /**\n     * Takes the default parameters and seals them, remembers the type of input {@link X}, and initializes the random number generator.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias DR\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed value for the random number generator.\n     * @returns {DR}\n     */\n    constructor(X, default_parameters, parameters) {\n        this._parameters = Object.assign(Object.seal(default_parameters), parameters);\n        if (Array.isArray(X)) {\n            this._type = \"array\";\n            this.X = Matrix.from(X);\n        } else if (X instanceof Matrix) {\n            this._type = \"matrix\";\n            this.X = X;\n        } else {\n            throw new Error(\"No valid type for X!\");\n        }\n        [this._N, this._D] = this.X.shape;\n        this._randomizer = new Randomizer(this._parameters.seed);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * Set and get parameters\n     * @param {String} [name = null] - Name of the parameter. If not given then returns all parameters as an Object.\n     * @param {any} [value = null] - Value of the parameter to set. If <code>name</code> is set and <code>value</code> is not given, returns the value of the respective parameter.\n     * @returns {DR|any|Object} \n     * On setting a parameter, this function returns the DR object. \n     * If <code>name</code> is set and <code>value == null</code> then return actual parameter value.\n     * If <code>name</code> is not given, then returns all parameters as an Object.\n     * \n     * @example\n     * '''\n     * const DR = new druid.TSNE(X, {d: 3}); // creates a new DR object, with parameter for <code>d</code> = 3.\n     * DR.parameter(\"d\"); // returns 3,\n     * DR.parameter(\"d\", 2); // sets parameter <code>d</code> to 2 and returns <code>DR</code>.\n     * '''\n     */\n    parameter(name = null, value = null) {\n        if (name === null) {\n            return Object.assign({}, this._parameters);\n        }\n        if (!this._parameters.hasOwnProperty(name)) {\n            throw new Error(`${name} is not a valid parameter!`);\n        }\n        if (value !== null) {\n            this._parameters[name] = value;\n            this._is_initialized = false;\n            return this;\n        } else {\n            return this._parameters[name];\n        }\n    }\n\n    para(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    p(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} the projection.\n     */\n    transform() {\n        this.check_init();\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @yields {Matrix|Number[][]} the intermediate steps of the projection.\n     */\n    *generator() {\n        return this.transform();\n    }\n\n    /**\n     * If the respective DR method has an <code>init</code> function, call it before <code>transform</code>.\n     * @returns {DR}\n     */\n    check_init() {\n        if (!this._is_initialized && typeof this.init === \"function\") {\n            this.init();\n            this._is_initialized = true;\n        }\n        return this;\n    }\n\n    /**\n     * @returns {Matrix|Number[][]} the projection in the type of input <code>X</code>.\n     */\n    get projection() {\n        if (this.hasOwnProperty(\"Y\")) {\n            this.check_init();\n            return this._type === \"matrix\" ? this.Y : this.Y.to2dArray;\n        } else {\n            throw new Error(\"The dataset is not transformed yet!\");\n        }\n    }\n\n    /**\n     * Computes the projection.\n     * @param  {...unknown} args - Arguments the transform method of the respective DR method takes.\n     * @returns {Promise<Matrix|Number[][]>} the dimensionality reduced dataset.\n     */\n    async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Matrix|Array} the dimensionality reduced dataset.\n     */\n    static transform(...args) {\n        let dr = new this(...args);\n        return dr.transform();\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Promise} a promise yielding the dimensionality reduced dataset.\n     */\n    static async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Generator} a generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    static *generator(...args) {\n        const dr = new this(...args);\n        const generator = dr.generator();\n        for (const result of generator) {\n            yield result;\n        }\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias PCA\n * @augments DR\n */\nexport class PCA extends DR {\n    /**\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias PCA\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @returns {PCA}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}. If parameter {@link A} is given, then project {@link A} with the principal components of {@link X}.\n     * @param {null|Matrix|Array} [A = null] - If given, the data to project.\n     * @returns {Matrix|Array} - The projected data.\n     */\n    transform(A = null) {\n        const V = this.principal_components();\n        if (A == null) {\n            const X = this.X;\n            this.Y = X.dot(V);\n            return this.projection;\n        } else if (Array.isArray(A)) {\n            return Matrix.from(A).dot(V).asArray;\n        } else if (A instanceof Matrix) {\n            return A.dot(V);\n        } else {\n            throw new Error(\"No valid type for A!\");\n        }\n    }\n\n    /**\n     * Computes the {@link d} principal components of Matrix {@link X}.\n     * @returns {Matrix}\n     */\n    principal_components() {\n        if (this.V) {\n            return this.V;\n        }\n        const { d, eig_args } = this._parameters;\n        const X = this.X;\n        const X_cent = X.sub(X.meanCols);\n        const C = X_cent.transDot(X_cent);\n        const { eigenvectors: V } = simultaneous_poweriteration(C, d, eig_args);\n        this.V = Matrix.from(V).transpose();\n        return this.V;\n    }\n\n    static principal_components(X, parameters) {\n        const dr = new this(X, parameters);\n        return dr.principal_components();\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias MDS\n * @extends DR\n */\nexport class MDS extends DR {\n    /**\n     * Classical MDS.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias MDS\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}.\n     * @returns {Matrix|Array}\n     */\n    transform() {\n        const X = this.X;\n        const rows = X.shape[0];\n        const { d, metric, eig_args } = this._parameters;\n        const A = metric === \"precomputed\" ? X : distance_matrix(X, metric);\n        const ai_ = A.meanCols;\n        const a_j = A.meanRows;\n        const a__ = A.mean;\n\n        this._d_X = A;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n\n        return this.projection;\n    }\n\n    /**\n     * @returns {Number} - the stress of the projection.\n     */\n    stress() {\n        const N = this.X.shape[0];\n        const Y = this.Y;\n        const d_X = this._d_X;\n        const d_Y = new Matrix();\n        d_Y.shape = [\n            N,\n            N,\n            (i, j) => {\n                return i < j ? euclidean(Y.row(i), Y.row(j)) : d_Y.entry(j, i);\n            },\n        ];\n        let top_sum = 0;\n        let bottom_sum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                top_sum += Math.pow(d_X.entry(i, j) - d_Y.entry(i, j), 2);\n                bottom_sum += Math.pow(d_X.entry(i, j), 2);\n            }\n        }\n        return Math.sqrt(top_sum / bottom_sum);\n    }\n}\n","/**\n *\n * @memberof module:optimization\n * @alias powell\n * @param {Function} f\n * @param {Array} x0\n * @param {Number} [max_iter = 300]\n * @returns {Array}\n * @see http://optimization-js.github.io/optimization-js/optimization.js.html#line438\n */\nexport default function (f, x0, max_iter = 300) {\n    const epsilon = 1e-2;\n    const n = x0.length;\n    let alpha = 1e-3;\n    let pfx = 10000;\n    let x = x0.slice();\n    let fx = f(x);\n    let convergence = false;\n\n    while (max_iter-- >= 0 && !convergence) {\n        convergence = true;\n        for (let i = 0; i < n; ++i) {\n            x[i] += 1e-6;\n            let fxi = f(x);\n            x[i] -= 1e-6;\n            let dx = (fxi - fx) / 1e-6;\n            if (Math.abs(dx) > epsilon) {\n                convergence = false;\n            }\n            x[i] -= alpha * dx;\n            fx = f(x);\n        }\n        alpha *= pfx >= fx ? 1.05 : 0.4;\n        pfx = fx;\n    }\n    return x;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n/**\n * @class\n * @alias Hierarchical_Clustering\n */\nexport class Hierarchical_Clustering {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias Hierarchical_Clustering\n     * @todo needs restructuring.\n     * @param {Matrix} - Data or distance matrix if metric is 'precomputed'\n     * @param {(\"single\"|\"complete\"|\"average\")} [linkage = \"complete\"]\n     * @param {Function|\"precomputed\"} [metric = euclidean]\n     * @returns {Hierarchical_Clustering}\n     */\n    constructor(matrix, linkage = \"complete\", metric = euclidean) {\n        this._id = 0;\n        this._matrix = matrix instanceof Matrix ? matrix : Matrix.from(matrix);\n        this._metric = metric;\n        this._linkage = linkage;\n        if (metric === \"precomputed\" && this._matrix.shape[0] !== this._matrix.shape[1]) {\n            throw new Error(\"If metric is 'precomputed', then matrix has to be square!\");\n        }\n        this.init();\n        this.root = this.do();\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} value - value where to cut the tree.\n     * @param {(\"distance\"|\"depth\")} [type = \"distance\"] - type of value.\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters(value, type = \"distance\") {\n        let clusters = [];\n        let accessor;\n        switch (type) {\n            case \"distance\":\n                accessor = (d) => d.dist;\n                break;\n            case \"depth\":\n                accessor = (d) => d.depth;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        this._traverse(this.root, accessor, value, clusters);\n        return clusters;\n    }\n\n    /**\n     * @private\n     * @param {} node\n     * @param {*} f\n     * @param {*} value\n     * @param {*} result\n     */\n    _traverse(node, f, value, result) {\n        if (f(node) <= value) {\n            result.push(node.leaves());\n        } else {\n            this._traverse(node.left, f, value, result);\n            this._traverse(node.right, f, value, result);\n        }\n    }\n\n    /**\n     * computes the tree.\n     */\n    init() {\n        const metric = this._metric;\n        const A = this._matrix;\n        const n = (this._n = A.shape[0]);\n        const d_min = (this._d_min = new Float64Array(n));\n        let distance_matrix;\n        if (metric !== \"precomputed\") {\n            distance_matrix = new Matrix(n, n, 0); //new Array(n);\n            for (let i = 0; i < n; ++i) {\n                d_min[i] = 0;\n                //distance_matrix[i] = new Float64Array(n);\n                for (let j = 0; j < n; ++j) {\n                    distance_matrix.set_entry(i, j, i === j ? Infinity : metric(A.row(i), A.row(j)));\n                    if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        } else {\n            distance_matrix = this._matrix.clone();\n            for (let i = 0; i < n; ++i) {\n                for (let j = 0; j < n; ++j) {\n                    if (i === j) {\n                        distance_matrix.set_entry(i, j, Infinity);\n                    } else if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        }\n        this._distance_matrix = distance_matrix;\n        const clusters = (this._clusters = new Array(n));\n        const c_size = (this._c_size = new Uint16Array(n));\n        for (let i = 0; i < n; ++i) {\n            clusters[i] = [];\n            clusters[i][0] = new Cluster(this._id++, null, null, 0, A.row(i), i, 1, 0);\n            c_size[i] = 1;\n        }\n        return this;\n    }\n\n    /**\n     * computes the tree.\n     */\n    do() {\n        const n = this._n;\n        const d_min = this._d_min;\n        const D = this._distance_matrix;\n        const clusters = this._clusters;\n        const c_size = this._c_size;\n        const linkage = this._linkage;\n        let root = null;\n        for (let p = 0, p_max = n - 1; p < p_max; ++p) {\n            let c1 = 0;\n            for (let i = 0; i < n; ++i) {\n                let D_i_min = D.entry(i, d_min[i]);\n                for (let j = i + 1; j < n; ++j) {\n                    if (D_i_min > D.entry(i, j)) {\n                        d_min[i] = j;\n                        D_i_min = D.entry(i, d_min[i]);\n                    }\n                }\n            }\n            for (let i = 0; i < n; ++i) {\n                if (D.entry(i, d_min[i]) < D.entry(c1, d_min[c1])) {\n                    c1 = i;\n                }\n            }\n            let c2 = d_min[c1];\n            let c1_cluster = clusters[c1][0];\n            let c2_cluster = clusters[c2][0];\n            let c1_cluster_indices = c1_cluster.isLeaf ? [c1_cluster.index] : c1_cluster.index;\n            let c2_cluster_indices = c2_cluster.isLeaf ? [c2_cluster.index] : c2_cluster.index;\n            let indices = c1_cluster_indices.concat(c2_cluster_indices);\n            let new_cluster = new Cluster(this._id++, c1_cluster, c2_cluster, D.entry(c1, c2), null, indices);\n            c1_cluster.parent = new_cluster;\n            c2_cluster.parent = new_cluster;\n            clusters[c1].unshift(new_cluster);\n            c_size[c1] += c_size[c2];\n            for (let j = 0; j < n; ++j) {\n                const D_c1_j = D.entry(c1, j);\n                const D_c2_j = D.entry(c2, j);\n                let value;\n                switch (linkage) {\n                    case \"single\":\n                        value = Math.min(D_c1_j, D_c2_j);\n                        break;\n                    case \"complete\":\n                        value = Math.max(D_c1_j, D_c2_j);\n                        break;\n                    case \"average\":\n                        value = (c_size[c1] * D_c1_j + c_size[c2] * D_c2_j) / (c_size[c1] + c_size[j]);\n                        break;\n                }\n                D.set_entry(j, c1, value);\n                D.set_entry(c1, j, value);\n            }\n\n            D.set_entry(c1, c1, Infinity);\n            for (let i = 0; i < n; ++i) {\n                D.set_entry(i, c2, Infinity);\n                D.set_entry(c2, i, Infinity);\n            }\n\n            /* for (let j = 0; j < n; ++j) {\n                if (d_min[j] === c2) {\n                    d_min[j] = c1;\n                }\n                if (D.entry(c1, j) < D.entry(c1, d_min[c1])) {\n                    d_min[c1] = j;\n                }\n            } */\n            root = new_cluster;\n        }\n        return root;\n    }\n}\n\nclass Cluster {\n    constructor(id, left, right, dist, centroid, index, size, depth) {\n        this.id = id;\n        this.left = left;\n        this.right = right;\n        this.dist = dist;\n        this.index = index;\n        this.size = size ?? left.size + right.size;\n        this.depth = depth ?? 1 + Math.max(left.depth, right.depth);\n        this.centroid = centroid ?? this._calculate_centroid(left, right);\n        this.parent = null;\n        return this;\n    }\n\n    _calculate_centroid(left, right) {\n        const l_size = left.size;\n        const r_size = right.size;\n        const l_centroid = left.centroid;\n        const r_centroid = right.centroid;\n        const size = this.size;\n        const n = left.centroid.length;\n        const new_centroid = new Float64Array(n);\n        for (let i = 0; i < n; ++i) {\n            new_centroid[i] = (l_size * l_centroid[i] + r_size * r_centroid[i]) / size;\n        }\n        return new_centroid;\n    }\n\n    get isLeaf() {\n        return this.depth === 0;\n    }\n\n    leaves() {\n        if (this.isLeaf) return [this];\n        const left = this.left;\n        const right = this.right;\n        return (left.isLeaf ? [left] : left.leaves()).concat(right.isLeaf ? [right] : right.leaves());\n    }\n\n    descendants() {\n        if (this.isLeaf) return [this];\n        const left_descendants = this.left.descendants();\n        const right_descendants = this.right.descendants();\n        return left_descendants.concat(right_descendants).concat([this]);\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { linspace, Matrix } from \"../matrix/index.js\";\nimport { min } from \"../util/index.js\";\n/**\n * @class\n * @alias KMedoids\n */\nexport class KMedoids {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMedoids\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - data matrix\n     * @param {Numbers} K - number of clusters\n     * @param {number} [max_iter=null] - maximum number of iterations. Default is 10 * Math.log10(N)\n     * @param {Function} [metric = euclidean] - metric defining the dissimilarity \n     * @param {Number} [seed = 1212] - seed value for random number generator\n     * @returns {KMedoids}\n     * @see {@link https://link.springer.com/chapter/10.1007/978-3-030-32047-8_16} Faster k-Medoids Clustering: Improving the PAM, CLARA, and CLARANS Algorithms\n     */\n    constructor(matrix, K, max_iter=null, metric = euclidean, seed=1212) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._A = this._matrix.to2dArray;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        this._max_iter = max_iter || 10 * Math.log10(N) \n        this._distance_matrix = new Matrix(N, N, \"zeros\");\n        /* for (let i = 1; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dist = metric(this._A[i], this._A[j]);\n                this._distance_matrix.set_entry(i, j, dist);\n                this._distance_matrix.set_entry(j, i, dist)\n            }\n        } */\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_medoids = this._get_random_medoids(K);\n        //if (init) this.init(K, this._cluster_medoids);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const A = this._A;\n        if (!this._is_initialized) {\n            this.init(K, this._cluster_medoids);\n        }\n        const result = new Array(K).fill().map(() => new Array());\n        A.forEach((x_j, j) => {\n            result[this._nearest_medoid(x_j, j).index_nearest].push(j);\n        })\n        result.medoids = this._cluster_medoids;\n        return result;\n    }\n\n    async* generator() {\n        const max_iter = this._max_iter;\n        yield this.get_clusters()\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n            yield this.get_clusters();\n        } while (!finish && ++i < max_iter)\n    }\n\n    /**\n     * Algorithm 1. FastPAM1: Improved SWAP algorithm\n     */\n    /* _iteration_1() {\n        const A = this._A;\n        const N = this._N;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        let DeltaTD = 0;\n        let m0 = null;\n        let x0 = null;\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const nearest_medoid = this._nearest_medoid(x_j, j);\n                const d_j = nearest_medoid.distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    // disance to new medoid\n                    const d_oj = this._get_distance(o, j, x_o, x_j);\n                    const {\n                        \"index_nearest\": n,\n                        \"distance_nearest\": d_n,\n                        \"distance_second\": d_s,\n                    } = this._nearest_medoid(x_o, o); \n                    this._clusters[o] = n; // cached values\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change\n                    if (d_oj < d_n) { // reassignment check\n                        deltaTD.forEach((d_i, i) => {\n                            if (n !== i) {\n                                deltaTD[i] = d_i + d_oj - d_n; // update loss change\n                            }\n                        });\n                    }\n                });\n                // choose best medoid i;\n                const i = deltaTD\n                    .map((d, i) => [d, i])\n                    .sort((d1, d2) => d1[0] - d2[0])[0][1];\n                const deltaTD_i = deltaTD[i];\n                // store\n                if (deltaTD_i < DeltaTD) {\n                    DeltaTD = deltaTD_i;\n                    m0 = i;\n                    x0 = j;\n                }\n            }\n        });\n\n        if (DeltaTD >= 0) {\n            return true // break loop if DeltaTD >= 0\n        }\n        // swap roles of medoid m and non-medoid x;\n        medoids[m0] = x0;\n        this._cluster_medoids = medoids;\n        return false\n    } */\n\n    /** Algorithm 2. FastPAM2: SWAP with multiple candidates\n     * \n     */\n    _iteration() {\n        const A = this._A;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        const cache = A.map((x_o, o) => this._nearest_medoid(x_o, o));\n        // empty best candidates array\n        const DeltaTD = new Array(K).fill(0);\n        const xs = new Array(K).fill(null);\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const d_j = cache[j].distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    if (j === o) return;\n                    const d_oj = this._get_distance(o, j, x_o, x_j); // distance to new medoid\n                    const {\"index_nearest\": n, \"distance_nearest\": d_n, \"distance_second\": d_s} = cache[o]; // cached\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change for x_o\n                    // Reassignment check\n                    if (d_oj < d_n) { \n                        // update loss change\n                        for (let i = 0; i < K; ++i) {\n                            if (i !== n) deltaTD[i] += d_oj - d_n;\n                        }\n                    }\n                });\n                // remember best swap for i;\n                deltaTD\n                    .map((d, i) => [d, i])\n                    .filter(([d, i]) => d < DeltaTD[i])\n                    .forEach(([d, i]) => {\n                        if (d < DeltaTD[i]) {\n                            DeltaTD[i] = d;\n                            xs[i] = j;\n                        }\n                    })\n            }\n        })\n        // stop if no improvements were found\n        if (min(DeltaTD) >= 0) return true; \n\n        // execute all improvements\n        while (min(DeltaTD) < 0) {\n            // swap roles of medoid m_i and non_medoid xs_i\n            const i = DeltaTD\n                .map((d, i) => [d, i])\n                .sort(([a], [b]) => a - b)[0][1];\n            if (medoids.filter(m => m == xs[i]).length == 0) {\n                medoids[i] = xs[i];\n            }\n            // disable the swap just performed\n            DeltaTD[i] = 0; \n            // recompute TD for remaining swap candidates\n            DeltaTD\n                .map((d_j, j) => [d_j, j])\n                .filter(([d_j]) => d_j < 0)\n                .forEach(([_, j]) => {\n                    const x_j = A[j];\n                    let sum = 0;\n                    A.forEach((x_o, o) => {\n                        if (medoids.findIndex(m => m != j && m == o) >= 0) return;\n                        if (i == j) return;\n                        if (cache[o].index_nearest === medoids[j])\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j), cache[o].distance_second) - cache[o].distance_nearest); \n                        else {\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j) - cache[o].distance_nearest, 0));\n                        }\n                    });\n                    DeltaTD[j] = sum;\n                })\n        }\n        this._cluster_medoids = medoids;\n        return false;\n    }\n\n    _get_distance(i, j, x_i=null, x_j=null) {\n        if (i === j) return 0;\n        const D = this._distance_matrix;\n        const A = this._A;\n        const metric = this._metric;\n        let d_ij = D.entry(i, j);\n        if (d_ij === 0) {\n            d_ij = metric(x_i || A[i], x_j || A[j]);\n            D.set_entry(i, j, d_ij);\n            D.set_entry(j, i, d_ij);\n        }\n        return d_ij;\n    }\n\n    _nearest_medoid(x_j, j) {\n        const medoids = this._cluster_medoids;\n        const A = this._A;\n        const [nearest, second] = medoids\n            .map((m, i) => {\n                const x_m = A[m]; \n                return [this._get_distance(j, m, x_j, x_m), i];\n            })\n            .sort((m1, m2) => m1[0] - m2[0]);\n        \n        return { \n            \"distance_nearest\": nearest[0], \n            \"index_nearest\": nearest[1],\n            \"distance_second\": second[0],\n            \"index_second\": second[1],\n        };\n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_medoids) {\n        if (!K) K = this._K;\n        if (!cluster_medoids) cluster_medoids = this._get_random_medoids(K);\n        const max_iter = this._max_iter;\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n        } while (!finish && ++i < max_iter)\n        return this;\n    }\n\n    /**\n     * Algorithm 3. FastPAM LAB: Linear Approximate BUILD initialization.\n     * @param {number} K - number of clusters\n     * \n     */\n    _get_random_medoids(K) {\n        const N = this._N;\n        const A = this._A;\n        const indices = linspace(0, N - 1);\n        const randomizer = this._randomizer;\n        const n = Math.min(N, 10 + Math.ceil(Math.sqrt(N)));\n        const TD = new Array(n).fill(Infinity);\n        const medoids = [];\n        // first medoid\n        let TD0 = Infinity;\n        let S = randomizer.choice(indices, n);\n        for (let j = 0; j < n; ++j) {\n            const S_j = S[j];\n            const x_j = A[S_j];\n            for (let o = 0; o < n; ++o) {\n                if (o === j) continue;\n                const x_o = A[S[o]];\n                TD[j] += this._get_distance(j, o, x_j, x_o);\n            }\n            if (TD[j] < TD0) {\n                TD0 = TD[j]; // smallest distance sum\n                medoids.push(S_j);\n            }\n        }\n        // other medoids\n        for (let i = 1; i < K; ++i) {\n            let DeltaTD = Infinity;\n            S = randomizer.choice(indices.filter(index => medoids.findIndex(d => d === index) < 0), n);\n            for (let j = 0; j < n; ++j) {\n                let deltaTD = 0;\n                const S_j = S[j];\n                const x_j = A[S_j];\n                for (let o = 0; o < n; ++o) {\n                    if (o === j) continue;\n                    const S_o = S[o];\n                    const x_o = A[S_o];\n                    let delta = this._get_distance(S_j, S_o, x_j, x_o) - min(medoids.map(m => this._get_distance(S_o, m, x_o)));\n                    if (delta < 0) {\n                        deltaTD = deltaTD + delta;\n                    }\n                }\n                // best reduction\n                if (deltaTD < DeltaTD) {\n                    DeltaTD = deltaTD;\n                    medoids.push(S_j);\n                }\n            }\n            TD0 += DeltaTD;\n        }\n        return medoids.slice(0, K);\n    }\n    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n/**\n * @class\n * @alias FASTMAP\n * @extends DR\n */\nexport class FASTMAP extends DR {\n    /**\n     * FastMap: a fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias FASTMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the dimensionality of the projection.\n     * @returns {FASTMAP}\n     * @see {@link https://doi.org/10.1145/223784.223812}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     * Chooses two points which are the most distant in the actual projection.\n     * @private\n     * @param {Function} dist\n     * @returns {Array} An array consisting of first index, second index, and distance between the two points.\n     */\n    _choose_distant_objects(dist) {\n        const X = this.X;\n        const N = X.shape[0];\n        let a_index = (this._randomizer.random_int % N) - 1;\n        let b_index = null;\n        let max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_ai = dist(a_index, i);\n            if (d_ai > max_dist) {\n                max_dist = d_ai;\n                b_index = i;\n            }\n        }\n        max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_bi = dist(b_index, i);\n            if (d_bi > max_dist) {\n                max_dist = d_bi;\n                a_index = i;\n            }\n        }\n        return [a_index, b_index, max_dist];\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} The {@link d}-dimensional projection of the data matrix {@link X}.\n     */\n    transform() {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric } = this._parameters;\n        const Y = new Matrix(N, d, 0);\n        let dist = (a, b) => metric(X.row(a), X.row(b));\n\n        for (let _col = 0; _col < d; ++_col) {\n            let old_dist = dist;\n            // choose pivot objects\n            const [a_index, b_index, d_ab] = this._choose_distant_objects(dist);\n            if (d_ab !== 0) {\n                // project the objects on the line (O_a, O_b)\n                for (let i = 0; i < N; ++i) {\n                    const d_ai = dist(a_index, i);\n                    const d_bi = dist(b_index, i);\n                    const y_i = (d_ai ** 2 + d_ab ** 2 - d_bi ** 2) / (2 * d_ab);\n                    Y.set_entry(i, _col, y_i);\n                }\n                // consider the projections of the objects on a\n                // hyperplane perpendicluar to the line (a, b);\n                // the distance function D'() between two\n                // projections is given by Eq.4\n                dist = (a, b) => Math.sqrt(old_dist(a, b) ** 2 - (Y.entry(a, _col) - Y.entry(b, _col)) ** 2);\n            }\n        }\n        // return embedding.\n        this.Y = Y;\n        return this.projection;\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { DR } from \"./DR.js\";\nimport euclidean from \"../metrics/euclidean.js\";\n\n/**\n * @class\n * @alias ISOMAP\n * @extends DR\n */\nexport class ISOMAP extends DR {\n    /**\n     * Isometric feature mapping (ISOMAP).\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias ISOMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link ISOMAP} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2319}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this.X.shape[0] / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const X = this.X;\n        const rows = this._N;\n        const { d, metric, eig_args, neighbors } = this._parameters;\n        // TODO: make knn extern and parameter for constructor or transform?\n        const D = new Matrix();\n        D.shape = [rows, rows, (i, j) => (i <= j ? metric(X.row(i), X.row(j)) : D.entry(j, i))];\n        const kNearestNeighbors = [];\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < rows; ++j) {\n                row.push({\n                    index: j,\n                    distance: D.entry(i, j),\n                });\n            }\n            const H = new Heap(row, (d) => d.distance, \"min\");\n            kNearestNeighbors.push(H.toArray().slice(1, neighbors + 1));\n        }\n\n        /*D = dijkstra(kNearestNeighbors);*/\n        // compute shortest paths\n        // TODO: make extern\n        /** @see {@link https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm} */\n        const G = new Matrix(rows, rows, (i, j) => {\n            const other = kNearestNeighbors[i].find((n) => n.index === j);\n            return other ? other.distance : Infinity;\n        });\n\n        for (let i = 0; i < rows; ++i) {\n            for (let j = 0; j < rows; ++j) {\n                let min_val = G.entry(i, j);\n                for (let k = 0; k < rows; ++k) {\n                    min_val = Math.min(min_val, G.entry(i, k) + G.entry(k, j));\n                }\n                G.set_entry(i, j, min_val);\n            }\n        }\n\n        let ai_ = new Float64Array(rows);\n        let a_j = new Float64Array(rows);\n        let a__ = 0;\n        const A = new Matrix(rows, rows, (i, j) => {\n            let val = G.entry(i, j);\n            val = val === Infinity ? 0 : val;\n            ai_[i] += val;\n            a_j[j] += val;\n            a__ += val;\n            return val;\n        });\n\n        ai_ = ai_.map((v) => v / rows);\n        a_j = a_j.map((v) => v / rows);\n        a__ /= rows ** 2;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        // compute d eigenvectors\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n        // return embedding\n        return this.projection;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { linspace } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KMeans\n */\nexport class KMeans {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMeans\n     * @todo needs restructuring. \n     * @param {Matrix} matrix \n     * @param {Numbers} K \n     * @param {Function} [metric = euclidean] \n     * @param {Number} [seed = 1987]\n     * @param {Boolean} [init = true]\n     * @returns {KMeans}\n     */\n    constructor(matrix, K, metric = euclidean, seed=1987, init = true) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_centroids = this._get_random_centroids(K);\n        if (init) this.init(K, this._cluster_centroids);\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const clusters = this._clusters;\n        const result = new Array(K).fill().map(() => new Array());\n        clusters.forEach((c, i) => result[c].push(i));\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Array} points \n     * @param {Array} candidates \n     */\n    _furthest_point(points, candidates) {\n        const A = this._matrix;\n        const metric = this._metric;\n        let i = points.length;\n        let H = Heap.heapify(\n            candidates, \n            (d) => {\n                const Ad = A.row(d)\n                let sum = 0;\n                for (let j = 0; j < i; ++j) {\n                    sum += metric(Ad, points[j])\n                }\n                return sum;\n            }, \n            \"max\"\n        )\n        return H.pop().element;\n    }\n\n    _get_random_centroids(K) {\n        const N = this._N;\n        const randomizer = this._randomizer;\n        const A = this._matrix;\n        const cluster_centroids = new Array(K).fill()\n        const indices = linspace(0, N - 1);\n        const random_point = randomizer.random_int % (N - 1);\n        cluster_centroids[0] = A.row(random_point);\n        const init_points = [random_point];\n        const sample_size = Math.floor((N - K) / K);// / K\n        for (let i = 1; i < K; ++i) {\n            // sampling + kmeans++ improvement?\n            const sample = randomizer.choice(indices.filter(d => init_points.indexOf(d) == -1), sample_size);\n            const furthest_point = this._furthest_point(cluster_centroids.slice(0, i), sample);\n            init_points.push(furthest_point);\n            cluster_centroids[i] = A.row(furthest_point);\n        }\n        return cluster_centroids;\n    }\n\n    _iteration(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const metric = this._metric;\n        const clusters = this._clusters;\n        let clusters_changed = false;\n        // find nearest cluster centroid.\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i)\n            let min_dist = Infinity;\n            let min_cluster = null;\n            for (let j = 0; j < K; ++j) {\n                let d = metric(cluster_centroids[j], Ai);\n                if (d < min_dist) {\n                    min_dist = d;\n                    min_cluster = j; \n                }\n            }\n            if (clusters[i] !== min_cluster) {\n                clusters_changed = true;\n            }\n            clusters[i] = min_cluster;\n        }\n        // update cluster centroid\n        // reset cluster centroids to 0\n        for (let i = 0; i < K; ++i) {\n            const centroid = cluster_centroids[i];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] = 0;\n            }\n        }\n        // compute centroid\n        this._compute_centroid(cluster_centroids);\n\n        return {   \n            \"clusters_changed\": clusters_changed,\n            \"cluster_centroids\": cluster_centroids\n        };\n    }\n\n    _compute_centroid(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const clusters = this._clusters;\n        const cluster_counter = new Array(K).fill(0);\n\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i);\n            const ci = clusters[i];\n            cluster_counter[ci]++;\n            const centroid = cluster_centroids[ci];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] += Ai[j];\n            }\n        }\n        for (let i = 0; i < K; ++i) {\n            const n = cluster_counter[i];\n            cluster_centroids[i] = cluster_centroids[i].map(c => c / n);\n        }\n        \n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_centroids) {\n        if (!K) K = this._K;\n        if (!cluster_centroids) cluster_centroids = this._get_random_centroids(K);\n        let clusters_changed = false;\n        do {\n            const iteration_result = this._iteration(cluster_centroids)\n            cluster_centroids = iteration_result.cluster_centroids;\n            clusters_changed = iteration_result.clusters_changed;\n        } while (clusters_changed)\n    }\n    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LDA\n * @extends DR\n */\nexport class LDA extends DR {\n    /**\n     * Linear Discriminant Analysis.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LDA\n     * @param {Matrix} X - The high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Array} parameters.labels - The labels / classes for each data point.\n     * @param {number} [parameters.d = 2] - The dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://onlinelibrary.wiley.com/doi/10.1111/j.1469-1809.1936.tb02137.x}\n     */\n    constructor(X, parameters) {\n        super(X, { labels: null, d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, cols] = X.shape;\n        const { d, labels, eig_args } = this._parameters;\n        if (labels === null || labels.length != rows) {\n            throw new Error(\"LDA needs parameter label to every datapoint to work!\");\n        }\n        const unique_labels = {};\n        let label_id = 0;\n        labels.forEach((l, i) => {\n            if (l in unique_labels) {\n                unique_labels[l].count++;\n                unique_labels[l].rows.push(X.row(i));\n            } else {\n                unique_labels[l] = {\n                    id: label_id++,\n                    count: 1,\n                    rows: [X.row(i)],\n                };\n            }\n        });\n\n        // create X_mean and vector means;\n        const X_mean = X.mean;\n        const V_mean = new Matrix(label_id, cols);\n        for (const label in unique_labels) {\n            const V = Matrix.from(unique_labels[label].rows);\n            const v_mean = V.meanCols;\n            for (let j = 0; j < cols; ++j) {\n                V_mean.set_entry(unique_labels[label].id, j, v_mean[j]);\n            }\n        }\n        // scatter_between\n        let S_b = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j] - X_mean);\n            const N = unique_labels[label].count;\n            S_b = S_b.add(m.dotTrans(m).mult(N));\n        }\n\n        // scatter_within\n        let S_w = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j]);\n            const R = unique_labels[label].rows;\n            for (let i = 0, n = unique_labels[label].count; i < n; ++i) {\n                const row_v = new Matrix(cols, 1, (j, _) => R[i][j] - m.entry(j, 0));\n                S_w = S_w.add(row_v.dotTrans(row_v));\n            }\n        }\n\n        let { eigenvectors: V } = simultaneous_poweriteration(S_w.inverse().dot(S_b), d, eig_args);\n        V = Matrix.from(V).transpose();\n        this.Y = X.dot(V);\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { k_nearest_neighbors } from \"../matrix/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LLE\n * @extends DR\n */\nexport class LLE extends DR {\n    /**\n     * Locally Linear Embedding.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LLE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} neighbors - the label / class of each data point.\n     * @param {Number} [d = 2] - the dimensionality of the projection.\n     * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [seed = 1212] - the dimensionality of the projection.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2323}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const rows = this._N;\n        const cols = this._D;\n        const { neighbors, d, eig_args, metric } = this._parameters;\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        const O = new Matrix(neighbors, 1, 1);\n        const W = new Matrix(rows, rows);\n\n        for (let row = 0; row < rows; ++row) {\n            const nN_row = nN[row];\n            const Z = new Matrix(neighbors, cols, (i, j) => X.entry(nN_row[i].j, j) - X.entry(row, j));\n            const C = Z.dotTrans(Z);\n            if (neighbors > cols) {\n                const C_trace = neumair_sum(C.diag) / 1000;\n                for (let j = 0; j < neighbors; ++j) {\n                    C.add_entry(j, j, C_trace);\n                }\n            }\n            // reconstruct;\n            let w = Matrix.solve_CG(C, O, this._randomizer);\n            w = w.divide(w.sum);\n            for (let j = 0; j < neighbors; ++j) {\n                W.set_entry(row, nN_row[j].j, w.entry(j, 0));\n            }\n        }\n        // comp embedding\n        const I = new Matrix(rows, rows, \"identity\");\n        const IW = I.sub(W);\n        const M = IW.transDot(IW);\n        const { eigenvectors: V } = simultaneous_poweriteration(M.T.inverse(), d + 1, eig_args);\n        this.Y = Matrix.from(V.slice(1, 1 + d)).T;\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\nimport { MDS } from \"./MDS.js\";\nimport { KMedoids } from \"../clustering/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\n/**\n * @class\n * @alias LSP\n * @extends DR\n */\nexport class LSP extends DR {\n    /**\n     * Least Squares Projection.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LSP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.neighbors = Math.max(Math.floor(N / 10), 2)] - number of neighbors to consider.\n     * @param {Number} [parameters.control_points = Math.ceil(Math.sqrt(N))] - number of controlpoints\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {LSP}\n     * @see {@link https://ieeexplore.ieee.org/document/4378370}\n     * @todo accept precomputed distance matrix.\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, control_points: undefined, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        this.parameter(\"control_points\", Math.min(parameters.control_points ?? Math.ceil(Math.sqrt(this._N)), this._N - 1));\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     *\n     * @param {DR} DR - method used for position control points.\n     * @param {Object} DR_parameters - Object containing parameters for the DR method which projects the control points\n     * @returns {LSP}\n     */\n    init(DR = MDS, DR_parameters = {}, KNN = BallTree) {\n        if (this._is_initialized) return this;\n        const X = this.X;\n        const N = this._N;\n        const K = this.parameter(\"neighbors\");\n        const d = this.parameter(\"d\");\n        const seed = this.parameter(\"seed\");\n        const metric = this.parameter(\"metric\");\n        DR_parameters = Object.assign({d, metric, seed }, DR_parameters);\n        const nc = this.parameter(\"control_points\");\n        const control_points = new KMedoids(X, nc, null, metric).get_clusters().medoids;\n        const C = new Matrix(nc, N, \"zeros\");\n        control_points.forEach((c_i, i) => {\n            C.set_entry(i, c_i, 1);\n        });\n        const Y_C = new DR(Matrix.from(control_points.map((c_i) => X.row(c_i))), DR_parameters).transform();\n\n        const XA = X.to2dArray;\n        const knn = new KNN(XA, metric);\n        const L = new Matrix(N, N, \"I\");\n        const alpha = -1 / K;\n        XA.forEach((x_i, i) => {\n            for (const { index: j } of knn.search(x_i, K).iterate()) {\n                if (i === j) continue;\n                L.set_entry(i, j, alpha);\n            }\n        });\n        const A = L.concat(C, \"vertical\");\n\n        const z = new Matrix(N, d, \"zeros\");\n        const b = z.concat(Y_C, \"vertical\");\n\n        this._A = A;\n        this._b = b;\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const A = this._A;\n        const b = this._b;\n        const ATA = A.transDot(A);\n        const ATb = A.transDot(b);\n        this.Y = Matrix.solve_CG(ATA, ATb, this._randomizer);\n        return this.projection;\n    }\n}\n","import { Matrix, k_nearest_neighbors } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LTSA\n * @extends DR\n */\nexport class LTSA extends DR {\n    /**\n     * Local Tangent Space Alignment\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LTSA\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link LTSA} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://epubs.siam.org/doi/abs/10.1137/S1064827502419154}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        if (this._D <= this.parameter(\"d\")) {\n            throw new Error(`Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${this.parameter(\"d\")})!`);\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, D] = X.shape;\n        const { d, neighbors, metric, eig_args } = this._parameters;\n        // 1.1 determine k nearest neighbors\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        // center matrix\n        const O = new Matrix(D, D, \"center\");\n        const B = new Matrix(rows, rows, 0);\n\n        for (let row = 0; row < rows; ++row) {\n            // 1.2 compute the d largest eigenvectors of the correlation matrix\n            const I_i = [row, ...nN[row].map((n) => n.j)];\n            let X_i = Matrix.from(I_i.map((n) => X.row(n)));\n            // center X_i\n            X_i = X_i.dot(O);\n            // correlation matrix\n            const C = X_i.dotTrans(X_i);\n            const { eigenvectors: g } = simultaneous_poweriteration(C, d, eig_args);\n            //g.push(linspace(0, k).map(_ => 1 / Math.sqrt(k + 1)));\n            const G_i_t = Matrix.from(g);\n            // 2. Constructing alignment matrix\n            const W_i = G_i_t.transDot(G_i_t)\n                .add(1 / Math.sqrt(neighbors + 1));\n            for (let i = 0; i < neighbors + 1; ++i) {\n                for (let j = 0; j < neighbors + 1; ++j) {\n                    B.add_entry(I_i[i], I_i[j], W_i.entry(i, j) - (i === j ? 1 : 0));\n                }\n            }\n        }\n\n        // 3. Aligning global coordinates\n        const { eigenvectors: Y } = simultaneous_poweriteration(B, d + 1, eig_args);\n        this.Y = Matrix.from(Y.slice(1)).transpose();\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias OPTICS\n */\nexport class OPTICS {\n    /**\n     * **O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure.\n     * @constructor\n     * @memberof module:clustering\n     * @alias OPTICS\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - the data.\n     * @param {Number} epsilon - the minimum distance which defines whether a point is a neighbor or not.\n     * @param {Number} min_points - the minimum number of points which a point needs to create a cluster. (Should be higher than 1, else each point creates a cluster.)\n     * @param {Function} [metric = euclidean] - the distance metric which defines the distance between two points of the {@link matrix}.\n     * @returns {OPTICS}\n     * @see {@link https://www.dbs.ifi.lmu.de/Publikationen/Papers/OPTICS.pdf}\n     * @see {@link https://en.wikipedia.org/wiki/OPTICS_algorithm}\n     */\n    constructor(matrix, epsilon, min_points, metric = euclidean) {\n        this._matrix = matrix;\n        this._epsilon = epsilon;\n        this._min_points = min_points;\n        this._metric = metric;\n\n        this._ordered_list = [];\n        this._clusters = [];\n        this._DB = new Array(matrix.shape[0]).fill();\n        this.init();\n        return this;\n    }\n\n    /**\n     * Computes the clustering.\n     */\n    init() {\n        const ordered_list = this._ordered_list;\n        const matrix = this._matrix;\n        const N = matrix.shape[0];\n        const DB = this._DB;\n        const clusters = this._clusters;\n        let cluster_index = this._cluster_index = 0;\n\n        for (let i = 0; i < N; ++i) {\n            DB[i] = {\n                \"element\": matrix.row(i),\n                \"index\": i,\n                \"reachability_distance\": undefined,\n                \"processed\": false,\n            }\n        }\n        for (const p of DB) {\n            if (p.processed) continue;\n            p.neighbors = this._get_neighbors(p);\n            p.processed = true;\n            clusters.push([p.index])\n            cluster_index = clusters.length - 1;\n            ordered_list.push(p);\n            if (this._core_distance(p) != undefined) {\n                const seeds = new Heap(null, d => d.reachability_distance, \"min\")\n                this._update(p, seeds);\n                this._expand_cluster(seeds, clusters[cluster_index]);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Array} An array consisting of the {@link epsilon}-neighborhood of {@link p}.\n     */\n    _get_neighbors(p) {\n        if (\"neighbors\" in p) return p.neighbors;\n        const DB = this._DB;\n        const metric = this._metric;\n        const epsilon = this._epsilon;\n        const neighbors = [];\n        for (const q of DB) {\n            if (q.index == p.index) continue;\n            if (metric(p.element, q.element) < epsilon) {\n                neighbors.push(q);\n            }\n        }\n        return neighbors;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Number} The distance to the {@link min_points}-th nearest point of {@link p}, or undefined if the {@link epsilon}-neighborhood has fewer elements than {@link min_points}.\n     */\n    _core_distance(p) {\n        const min_points = this._min_points;\n        const metric = this._metric;\n        if (p.neighbors && p.neighbors.length <= min_points) {\n            return undefined;\n        }\n        return metric(p.element, p.neighbors[min_points].element);\n    }\n\n    /**\n     * Updates the reachability distance of the points.\n     * @private\n     * @param {Object} p \n     * @param {Heap} seeds \n     */\n    _update(p, seeds) {\n        const metric = this._metric;\n        const core_distance = this._core_distance(p);\n        const neighbors = this._get_neighbors(p);//p.neighbors;\n        for (const q of neighbors) {\n            if (q.processed) continue;\n            const new_reachability_distance = Math.max(core_distance, metric(p.element, q.element));\n            //if (q.reachability_distance == undefined) { // q is not in seeds\n            if (seeds.raw_data().findIndex(d => d.element == q) < 0) {\n                q.reachability_distance = new_reachability_distance;\n                seeds.push(q);\n            } else { // q is in seeds\n                if (new_reachability_distance < q.reachability_distance) {\n                    q.reachability_distance = new_reachability_distance;\n                    seeds = Heap.heapify(seeds.data(), d => d.reachability_distance, \"min\"); // seeds change key =/\n                }\n            }\n        }\n    }\n\n    /**\n     * Expands the {@link cluster} with points in {@link seeds}.\n     * @private\n     * @param {Heap} seeds \n     * @param {Array} cluster \n     */\n    _expand_cluster(seeds, cluster) {\n        const ordered_list = this._ordered_list;\n        while (!seeds.empty) {\n            const q = seeds.pop().element;\n            q.neighbors = this._get_neighbors(q);\n            q.processed = true;\n            cluster.push(q.index);\n            ordered_list.push(q);\n            if (this._core_distance(q) != undefined) {\n                this._update(q, seeds);\n                this._expand_cluster(seeds, cluster);\n            }\n        }\n    }\n\n    /**\n     * Returns an array of clusters.\n     * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters() {\n        const clusters = [];\n        const outliers = [];\n        const min_points = this._min_points;\n        for (const cluster of this._clusters) {\n            if (cluster.length < min_points) {\n                outliers.push(...cluster);\n            } else {\n                clusters.push(cluster);\n            }\n        }\n        clusters.push(outliers);\n        return clusters;\n    }\n\n    /**\n     * @returns {Array} Returns an array, where the ith entry defines the cluster affirmation of the ith point of {@link matrix}. (-1 stands for outlier)\n     */\n    get_cluster_affirmation() {\n        const N = this._matrix.shape[0];\n        const result = new Array(N).fill();\n        const clusters = this.get_clusters();\n        for (let i = 0, n = clusters.length; i < n; ++i) {\n            const cluster = clusters[i]\n            for (const index of cluster) {\n                result[index] = (i < n - 1) ? i : -1;\n            }\n        }\n        return result;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA, MDS } from \"./index.js\";\nimport { distance_matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias SAMMON\n * @extends DR\n */\nexport class SAMMON extends DR {\n    /**\n     * SAMMON's Mapping\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias SAMMON\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {\"PCA\"|\"MDS\"|\"random\"} [parameters.init = \"random\"] - Either \"PCA\" or \"MDS\", with which SAMMON initialiates the projection. With \"random\" a random matrix gets used as starting point.\n     * @param {Object} [parameters.init_parameters] - Parameters for the {@link init}-DR method.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {SAMMON}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { magic: 0.1, d: 2, metric: euclidean, seed: 1212, init_DR: \"random\", init_parameters: {} }, parameters);\n        return this;\n    }\n\n    /**\n     * initializes the projection.\n     * @private\n     */\n    init() {\n        const N = this.X.shape[0];\n        const { d, metric, init_DR: init_DR, init_parameters: DR_parameters } = this._parameters;\n        if (init_DR === \"random\") {\n            const randomizer = this._randomizer;\n            this.Y = new Matrix(N, d, () => randomizer.random);\n        } else if ([\"PCA\", \"MDS\"].includes(init_DR)) {\n            this.Y = Matrix.from(init_DR == \"PCA\" ? PCA.transform(this.X, DR_parameters) : MDS.transform(this.X, DR_parameters));\n        } else {\n            throw new Error('init_DR needs to be either \"random\" or a DR method!')\n        }\n        this.distance_matrix = metric == \"precomputed\" ? Matrix.from(this.X) : distance_matrix(this.X, metric);\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Matrix|Array} - The projection of {@link X}.\n     */\n    transform(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n        }\n        return this.projection;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Generator} - A generator yielding the intermediate steps of the projection of {@link X}.\n     */\n    *generator(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n            yield this.projection;\n        }\n\n        return this.projection;\n    }\n\n    _step() {\n        const MAGIC = this.parameter(\"magic\");\n        const D = this.distance_matrix;\n        const N = this.X.shape[0];\n        const { d, metric } = this._parameters;\n        let Y = this.Y;\n\n        let G = new Matrix(N, d, 0);\n\n        let sum = new Float64Array(d);\n        for (let i = 0; i < N; ++i) {\n            let e1 = new Float64Array(d);\n            let e2 = new Float64Array(d);\n            const Yi = Y.row(i);\n            for (let j = 0; j < N; ++j) {\n                if (i === j) continue;\n                const Yj = Y.row(j);\n                const delta = new Float64Array(d);\n                for (let k = 0; k < d; ++k) {\n                    delta[k] = Yi[k] - Yj[k];\n                }\n                const dY = metric(Yi, Yj);\n                const dX = D.entry(i, j);\n                const dq = dX - dY;\n                const dr = Math.max(dX * dY, 1e-2);\n                for (let k = 0; k < d; ++k) {\n                    e1[k] += (delta[k] * dq) / dr;\n                    e2[k] += (dq - (Math.pow(delta[k], 2) * (1 + dq / dY)) / dY) / dr;\n                }\n            }\n            for (let k = 0; k < d; ++k) {\n                const val = Y.entry(i, k) + ((MAGIC * e1[k]) / Math.abs(e2[k]) || 0);\n                G.set_entry(i, k, val);\n                sum[k] += val;\n            }\n        }\n        for (let k = 0; k < d; ++k) {\n            sum[k] /= N;\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let k = 0; k < d; ++k) {\n                Y.set_entry(i, k, G.entry(i, k) - sum[k]);\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix, linspace, norm } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA } from \"./index.js\";\n\nexport class SQDMDS extends DR {\n    /**\n     * SQuadMDS: a lean Stochastic Quartet MDS improving global structure preservation in neighbor embedding like t-SNE and UMAP.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @param {Matrix|Number[][]} X\n     * @param {Object} [parameters]\n     * @param {Number} [parameters.d=2]\n     * @param {Function} [parameters.metric = euclidean]\n     * @param {Number} [parameters.decay_start = 0.1] - Percentage of iterations using exaggeration phase. If random init: it is recommended to start the decay later to give the time for the global config to adjust with big steps.\n     * @param {Number} [parameters.decay_cte = 0.34] - Controls the decay of the learning parameter.\n     * @param {Object} [parameters.init_DR]\n     * @returns {SQDMDS}\n     * @see {@link https://arxiv.org/pdf/2202.12087.pdf}\n     */\n    constructor(X, parameters) {\n        super(\n            X,\n            {\n                d: 2,\n                metric: euclidean,\n                seed: 1212,\n                decay_start: 0.1,\n                decay_cte: 0.34, // 0.34\n                init_DR: {type: \"random\"}\n            },\n            parameters\n        );\n\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    init() {\n        const N = this._N;\n        const d = this.parameter(\"d\");\n\n        // initialize helpers.\n        this._add = this.__add(d);\n        this._sub_div = this.__sub_div(d);\n        this._minus = this.__minus(d);\n        this._mult = this.__mult(d);\n        this._LR_init = Math.max(2, 0.005 * N);\n        this._LR = this._LR_init;\n        this._offset = -Math.exp(-1 / this.parameter(\"decay_cte\"));\n        this._momentums = new Matrix(N, d, 0);\n        this._grads = new Matrix(N, d, 0);\n        this._indices = linspace(0, N - 1);\n        // initialize projection.\n        const R = this._randomizer;\n        this.Y = new Matrix(N, d, () => R.random - 0.5);\n\n        // preparing metric for optimization.\n        const this_metric = this.parameter(\"metric\");\n        if (this_metric === \"precomputed\") {\n            this._HD_metric = function (i, j, X) {\n                return X.entry(i, j);\n            };\n            this._HD_metric_exaggeration = function (i, j, X) {\n                return Math.pow(X.entry(i, j), 2);\n            };\n        } else {\n            this._HD_metric = function (i, j, X) {\n                return this_metric(X.row(i), X.row(j));\n            };\n            if (this_metric == euclidean) {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return euclidean_squared(X.row(i), X.row(j));\n                };\n            } else {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return Math.pow(this_metric(X.row(i), X.row(j)), 2);\n                };\n            }\n        }\n        return;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {Number} [iterations=500] - Number of iterations.\n     * @returns {Matrix|Number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n        }\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Number[][]} the intermediate steps of the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Performs an optimization step.\n     * @private\n     * @param {Number} i - Acutal iteration.\n     * @param {Number} iterations - Number of iterations.\n     */\n    _step(i, iterations) {\n        const decay_start = this._decay_start;\n        if (i > decay_start) {\n            const decay_cte = this.parameter(\"decay_cte\");\n            const offset = this._offset;\n            const ratio = (i - decay_start) / (iterations - decay_start);\n            this._LR = this._LR_init * (Math.exp(-(ratio * ratio) / decay_cte) + offset);\n            this._distance_exaggeration = false;\n        } else {\n            this._distance_exaggeration = true;\n        }\n        this._nestrov_iteration(this._distance_exaggeration);\n    }\n\n    /**\n     * Creates quartets of non overlapping indices.\n     * @private\n     * @returns {Number[][]}\n     */\n    __quartets() {\n        const N = this._N;\n        const max_N = N - (N % 4);\n        const R = this._randomizer;\n        const shuffled_indices = R.choice(this._indices, max_N);\n        const result = [];\n        for (let i = 0; i < max_N; i += 4) {\n            result.push(Uint32Array.of(shuffled_indices[i], shuffled_indices[i + 1], shuffled_indices[i + 2], shuffled_indices[i + 3]));\n        }\n        return result;\n    }\n\n    /**\n     * Computes and applies gradients, and updates momentum.\n     * @private\n     * @param {Boolean} distance_exaggeration\n     */\n    _nestrov_iteration(distance_exaggeration) {\n        const momentums = this._momentums.mult(0.99, { inline: true });\n        const LR = this._LR;\n        const grads = this._fill_MDS_grads(this.Y.add(momentums), this._grads, distance_exaggeration);\n        const [n, d] = momentums.shape;\n        for (let i = 0; i < n; ++i) {\n            const g_i = grads.row(i);\n            const g_i_norm = norm(g_i);\n            if (g_i_norm == 0) continue;\n            const mul = LR / g_i_norm;\n            const m_i = momentums.row(i);\n            for (let j = 0; j < d; ++j) {\n                m_i[j] -= mul * g_i[j];\n            }\n        } // momentums -= (LR / norm) * grads\n        this.Y.add(momentums, { inline: true });\n    }\n\n    /**\n     * Computes the gradients.\n     * @param {Matrix} Y - The Projection.\n     * @param {Matrix} grads - The gradients.\n     * @param {Boolean} [exaggeration = false] - Whether or not to use early exaggeration.\n     * @param {Boolean} [zero_grad = true] - Whether or not to reset the gradient in the beginning.\n     * @returns {Matrix} the gradients.\n     */\n    _fill_MDS_grads(Y, grads, exaggeration = false, zero_grad = true) {\n        if (zero_grad) {\n            // compute new gradients\n            grads.values.fill(0);\n        }\n        const add = this._add;\n        const X = this.X;\n        let HD_metric;\n        if (exaggeration == true) {\n            HD_metric = this._HD_metric_exaggeration;\n        } else {\n            HD_metric = this._HD_metric;\n        }\n\n        const D_quartet = new Float64Array(6);\n        const quartets = this.__quartets();\n        for (const [i, j, k, l] of quartets) {\n            // compute quartet's HD distances.\n            D_quartet[0] = HD_metric(i, j, X);\n            D_quartet[1] = HD_metric(i, k, X);\n            D_quartet[2] = HD_metric(i, l, X);\n            D_quartet[3] = HD_metric(j, k, X);\n            D_quartet[4] = HD_metric(j, l, X);\n            D_quartet[5] = HD_metric(k, l, X);\n\n            const D_quartet_sum = neumair_sum(D_quartet);\n\n            if (D_quartet_sum > 0) {\n                for (let i = 0; i < 6; ++i) {\n                    D_quartet[i] /= D_quartet_sum;\n                    D_quartet[i] += 1e-11;\n                }\n            }\n            const [gi, gj, gk, gl] = this._compute_quartet_grads(Y, [i, j, k, l], D_quartet);\n\n            // add is inline, row acces the matrix\n            add(grads.row(i), gi);\n            add(grads.row(j), gj);\n            add(grads.row(k), gk);\n            add(grads.row(l), gl);\n        }\n        return grads;\n    }\n\n    /**\n     * Quartet gradients for a projection.\n     * @private\n     * @param {Matrix} Y - The acutal projection.\n     * @param {Number[]} quartet - The indices of the quartet.\n     * @param {Number[]} D_hd - The high-dimensional distances of the quartet.\n     * @returns {Number[][]} the gradients for the quartet.\n     */\n    _compute_quartet_grads(Y, quartet, [p_ab, p_ac, p_ad, p_bc, p_bd, p_cd]) {\n        const [a, b, c, d] = quartet.map((index) => Y.row(index));\n        // LD distances, add a small number just in case\n        const d_ab = euclidean(a, b) + 1e-12;\n        const d_ac = euclidean(a, c) + 1e-12;\n        const d_ad = euclidean(a, d) + 1e-12;\n        const d_bc = euclidean(b, c) + 1e-12;\n        const d_bd = euclidean(b, d) + 1e-12;\n        const d_cd = euclidean(c, d) + 1e-12;\n        const sum_LD_dist = neumair_sum([d_ab, d_ac, d_ad, d_bc, d_bd, d_cd]);\n\n        // for each element of the sum: use the same gradient function and just permute the points given in input.\n        const [gA1, gB1, gC1, gD1] = this._ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist);\n        const [gA2, gC2, gB2, gD2] = this._ABCD_grads(a, c, b, d, d_ac, d_ab, d_ad, d_bc, d_cd, d_bd, p_ac, sum_LD_dist);\n        const [gA3, gD3, gC3, gB3] = this._ABCD_grads(a, d, c, b, d_ad, d_ac, d_ab, d_cd, d_bd, d_bc, p_ad, sum_LD_dist);\n        const [gB4, gC4, gA4, gD4] = this._ABCD_grads(b, c, a, d, d_bc, d_ab, d_bd, d_ac, d_cd, d_ad, p_bc, sum_LD_dist);\n        const [gB5, gD5, gA5, gC5] = this._ABCD_grads(b, d, a, c, d_bd, d_ab, d_bc, d_ad, d_cd, d_ac, p_bd, sum_LD_dist);\n        const [gC6, gD6, gA6, gB6] = this._ABCD_grads(c, d, a, b, d_cd, d_ac, d_bc, d_ad, d_bd, d_ab, p_cd, sum_LD_dist);\n\n        const add = this._add;\n        const gA = add(gA1, gA2, gA3, gA4, gA5, gA6);\n        const gB = add(gB1, gB2, gB3, gB4, gB5, gB6);\n        const gC = add(gC1, gC2, gC3, gC4, gC5, gC6);\n        const gD = add(gD1, gD2, gD3, gD4, gD5, gD6);\n\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Gradients for one element of the loss function's sum.\n     * @private\n     */\n    _ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist) {\n        const ratio = d_ab / sum_LD_dist;\n        const twice_ratio = 2 * ((p_ab - ratio) / sum_LD_dist);\n        const minus = this._minus;\n        const add = this._add;\n        const mult = this._mult;\n        const sub_div = this._sub_div;\n        // no side effects because sub_div creates new arrays, and the inline functions work on this new created arrays.\n        const gA = mult(minus(mult(add(sub_div(a, b, d_ab), sub_div(a, c, d_ac), sub_div(a, d, d_ad)), ratio), sub_div(a, b, d_ab)), twice_ratio);\n        const gB = mult(minus(mult(add(sub_div(b, a, d_ab), sub_div(b, c, d_bc), sub_div(b, d, d_bd)), ratio), sub_div(b, a, d_ab)), twice_ratio);\n        const gC = mult(add(sub_div(c, a, d_ac), sub_div(c, b, d_bc), sub_div(c, d, d_cd)), ratio * twice_ratio);\n        const gD = mult(add(sub_div(d, a, d_ad), sub_div(d, b, d_bd), sub_div(d, c, d_cd)), ratio * twice_ratio);\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Inline!\n     */\n    __minus(d) {\n        return (a, b) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] -= b[i];\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __add(d) {\n        return (...summands) => {\n            const n = summands.length;\n            const s1 = summands[0];\n            for (let j = 1; j < n; ++j) {\n                const summand = summands[j];\n                for (let i = 0; i < d; ++i) {\n                    s1[i] += summand[i];\n                }\n            }\n            return s1;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __mult(d) {\n        return (a, v) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] *= v;\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Creates a new array <code>(x - y) / div</code>\n     */\n    __sub_div(d) {\n        return (x, y, div) => {\n            return Float64Array.from({ length: d }, (_, i) => (x[i] - y[i]) / div);\n        };\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TSNE\n * @extends DR\n */\nexport class TSNE extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TSNE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.perplexity = 50] - perplexity.\n     * @param {Number} [parameters.epsilon = 10] - learning parameter.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean_squared] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TSNE}\n     */\n    constructor(X, parameters) {\n        super(X, { perplexity: 50, epsilon: 10, d: 2, metric: euclidean_squared, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._iter = 0;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => this._randomizer.gauss_random() * 1e-4);\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TSNE}\n     */\n    init() {\n        // init\n        const Htarget = Math.log(this.parameter(\"perplexity\"));\n        const N = this._N;\n        const D = this._D;\n        const {metric} = this._parameters;\n        const X = this.X;\n        let Delta;\n        if (metric ==\"precomputed\") {\n            Delta = druid.Matrix.from(X);\n        } else {\n            Delta = new Matrix(N, N);\n            for (let i = 0; i < N; ++i) {\n                const X_i = X.row(i);\n                for (let j = i + 1; j < N; ++j) {\n                    const distance = metric(X_i, X.row(j));\n                    Delta.set_entry(i, j, distance);\n                    Delta.set_entry(j, i, distance);\n                }\n            }\n        }\n\n        const P = new Matrix(N, N, 0);\n\n        this._ystep = new Matrix(N, D, 0);\n        this._gains = new Matrix(N, D, 1);\n\n        // search for fitting sigma\n        const tol = 1e-4;\n        const maxtries = 50;\n        for (let i = 0; i < N; ++i) {\n            const dist_i = Delta.row(i);\n            const prow = P.row(i);\n            let betamin = -Infinity;\n            let betamax = Infinity;\n            let beta = 1;\n            let cnt = maxtries;\n            let done = false;\n            let psum;\n\n            while (!done && cnt--) {\n                // compute entropy and kernel row with beta precision\n                psum = 0;\n                let dp_sum = 0;\n                for (let j = 0; j < N; ++j) {\n                    const dist = dist_i[j];\n                    const pj = (i !== j) ? Math.exp(-dist * beta) : 0;\n                    dp_sum += dist * pj;\n                    prow[j] = pj;\n                    psum += pj;\n                }\n                // compute entropy\n                const H = psum > 0 ? Math.log(psum) + beta * dp_sum / psum : 0;\n                if (H > Htarget) {\n                    betamin = beta;\n                    beta = betamax === Infinity ? beta * 2 : (beta + betamax) / 2;\n                } else {\n                    betamax = beta;\n                    beta = betamin === -Infinity ? beta / 2 : (beta + betamin) / 2;\n                }\n                done = Math.abs(H - Htarget) < tol;\n            }\n            // normalize p\n            for (let j = 0; j < N; ++j) {\n                prow[j] /= psum;\n            }\n        }\n\n        // compute probabilities\n        const N2 = N * 2;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i; j < N; ++j) {\n                const p = Math.max((P.entry(i, j) + P.entry(j, i)) / N2, 1e-100);\n                P.set_entry(i, j, p);\n                P.set_entry(j, i, p);\n            }\n        }\n        this._P = P;\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - Number of iterations.\n     * @returns {Matrix|Number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Number[][]} - the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * performs a optimization step\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const P = this._P;\n        const ystep = this._ystep;\n        const gains = this._gains;\n        const N = this._N;\n        const { d: dim, epsilon} = this._parameters;\n        let Y = this.Y;\n\n        //calc cost gradient;\n        const pmul = iter < 100 ? 4 : 1;\n\n        // compute Q dist (unnormalized)\n        const Qu = new Matrix(N, N, \"zeros\");\n        let qsum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dsum = 0;\n                for (let d = 0; d < dim; ++d) {\n                    const dhere = Y.entry(i, d) - Y.entry(j, d);\n                    dsum += dhere * dhere;\n                }\n                const qu = 1 / (1 + dsum);\n                Qu.set_entry(i, j, qu);\n                Qu.set_entry(j, i, qu);\n                qsum += 2 * qu;\n            }\n        }\n\n        // normalize Q dist\n        const Q = new Matrix(N, N, 0);\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                const val = Math.max(Qu.entry(i, j) / qsum, 1e-100);\n                Q.set_entry(i, j, val);\n                Q.set_entry(j, i, val);\n            }\n        }\n\n        const grad = new Matrix(N, dim, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            for (let j = 0; j < N; ++j) {\n                const premult = 4 * (pmul * P.entry(i, j) - Q.entry(i, j)) * Qu.entry(i, j);\n                for (let d = 0; d < dim; ++d) {\n                    grad.add_entry(i, d, premult * (Y.entry(i, d) - Y.entry(j, d)));\n                }\n            }\n        }\n\n        // perform gradient step\n        let ymean = new Float64Array(dim);\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const gid = grad.entry(i, d);\n                const sid = ystep.entry(i, d);\n                const gainid = gains.entry(i, d);\n\n                let newgain = Math.sign(gid) === Math.sign(sid) ? gainid * 0.8 : gainid + 0.2;\n                if (newgain < 0.01) newgain = 0.01;\n                gains.set_entry(i, d, newgain);\n\n                const momval = iter < 250 ? 0.5 : 0.8;\n                const newsid = momval * sid - epsilon * newgain * gid;\n                ystep.set_entry(i, d, newsid);\n\n                Y.add_entry(i, d, newsid);\n                ymean[d] += Y.entry(i, d);\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                Y.sub_entry(i, d, ymean[d] / N);\n            }\n        }\n\n        return this.Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { DisjointSet } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias TopoMap\n * @memberof module:dimensionality_reduction\n * @extends DR\n */\nexport class TopoMap extends DR {\n    /**\n     * TopoMap: A 0-dimensional Homology Preserving Projection of High-Dimensional Data.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TopoMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TopoMap}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._distance_matrix = new Matrix(this._N, this._N, 0);\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    __lazy_distance_matrix(i, j, metric) {\n        const D = this._distance_matrix;\n        const X = this.X;\n        const D_ij = D.entry(i, j);\n        if (D_ij === 0) {\n            let dist = metric(X.row(i), X.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n            return dist;\n        }\n        return D_ij;\n    }\n\n    /**\n     * Computes the minimum spanning tree, using a given metric\n     * @private\n     * @param {Function} metric\n     * @see {@link https://en.wikipedia.org/wiki/Kruskal%27s_algorithm}\n     */\n    _make_minimum_spanning_tree(metric = euclidean) {\n        const N = this._N;\n        const X = [...this.X];\n\n        let disjoint_set = new DisjointSet(X);\n        const F = [];\n        let E = [];\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                E.push([i, j, this.__lazy_distance_matrix(i, j, metric)]);\n            }\n        }\n        E = E.sort((a, b) => a[2] - b[2]);\n\n        for (const [u, v, w] of E) {\n            const set_u = disjoint_set.find(X[u]);\n            const set_v = disjoint_set.find(X[v]);\n            if (set_u !== set_v) {\n                F.push([u, v, w]);\n                disjoint_set.union(set_u, set_v);\n            }\n        }\n\n        return F.sort((a, b) => a[2] - b[2]);\n    }\n\n    /**\n     * initializes TopoMap. Sets all projcted points to zero, and computes a minimum spanning tree.\n     */\n    init() {\n        const { metric} = this._parameters\n        this.Y = new Matrix(this._N, 2, 0);\n        this._Emst = this._make_minimum_spanning_tree(metric);\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Returns true if Point C is left of line AB.\n     * @private\n     * @param {Array} PointA - Point A of line AB\n     * @param {Array} PointB - Point B of line AB\n     * @param {Array} PointC - Point C\n     * @returns {Boolean}\n     */\n    __hull_cross([ax, ay], [bx, by], [sx, sy]) {\n        return (bx - ax) * (sy - ay) - (by - ay) * (sx - ax) <= 0;\n    }\n\n    /**\n     * Computes the convex hull of the set of Points S\n     * @private\n     * @param {Array} S - Set of Points.\n     * @see {@link https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript}\n     * @returns {Array} convex hull of S. Starts at the bottom-most point and continues counter-clockwise.\n     */\n    __hull(S) {\n        const points = S.sort(([x1, y1], [x2, y2]) => y1 - y2 || x1 - x2);\n        const N = points.length;\n        if (N <= 2) return points;\n\n        const lower = [];\n        for (let i = 0; i < N; ++i) {\n            while (lower.length >= 2 && this.__hull_cross(lower[lower.length - 2], lower[lower.length - 1], points[i])) {\n                lower.pop();\n            }\n            lower.push(points[i]);\n        }\n        const upper = [];\n        for (let i = N - 1; i >= 0; --i) {\n            while (upper.length >= 2 && this.__hull_cross(upper[upper.length - 2], upper[upper.length - 1], points[i])) {\n                upper.pop();\n            }\n            upper.push(points[i]);\n        }\n        upper.pop();\n        lower.pop();\n        return lower.concat(upper);\n    }\n\n    /**\n     * Finds the angle to rotate Point A and B to lie on a line parallel to the x-axis.\n     * @private\n     * @param {Array} PointA\n     * @param {Array} PointB\n     * @return {Object} Object containing the sinus- and cosinus-values for a rotation.\n     */\n    __findAngle([p1x, p1y], [p2x, p2y]) {\n        const n = euclidean([p1x, p1y], [p2x, p2y]);\n        if (n === 0)\n            return {\n                sin: 0,\n                cos: 1,\n            };\n        const vec = [(p2x - p1x) / n, (p2y - p1y) / n];\n        const cos = vec[0];\n        let sin = Math.sqrt(1 - cos * cos);\n        sin = vec[1] >= 0 ? -sin : sin;\n        return {\n            sin: sin,\n            cos: cos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Array} hull\n     * @param {Array} p\n     * @param {Bool} topEdge\n     */\n    __align_hull(hull, p, topEdge) {\n        let v = -1;\n        let d2;\n        for (let i = 0; i < hull.length; ++i) {\n            const d = euclidean(hull[i], p);\n            if (v === -1) {\n                d2 = d;\n                v = i;\n            } else {\n                if (d2 > d) {\n                    d2 = d;\n                    v = i;\n                }\n            }\n        }\n\n        let v1;\n        let v2;\n        if (topEdge) {\n            v1 = hull[v];\n            v2 = hull[(v + 1) % hull.length];\n        } else {\n            if (v == 0) v = hull.length - 1;\n            v1 = hull[v];\n            v2 = hull[(v - 1) % hull.length];\n        }\n\n        const transformation = {\n            tx: -hull[v][0],\n            ty: -hull[v][1],\n        };\n\n        if (hull.length >= 2) {\n            const { sin, cos } = this.__findAngle(v1, v2);\n            transformation.sin = sin;\n            transformation.cos = cos;\n        } else {\n            transformation.sin = 0;\n            transformation.cos = 1;\n        }\n\n        return transformation;\n    }\n\n    /**\n     * @private\n     * @param {Array} Point - The point which should get transformed.\n     * @param {Object} Transformation - contains the values for translation and rotation.\n     */\n    __transform([px, py], { tx, ty, sin, cos }) {\n        let x = px + tx;\n        let y = py + ty;\n        let xx = x * cos - y * sin;\n        let yy = x * sin + y * cos;\n        return [xx, yy];\n    }\n\n    /**\n     * Calls {@link __transform} for each point in Set C\n     * @private\n     * @param {Array} C - Set of points.\n     * @param {Object} t - Transform object.\n     * @param {Number} yOffset - value to offset set C.\n     */\n    __transform_component(C, t, yOffset) {\n        const N = C.length;\n        for (let i = 0; i < N; ++i) {\n            const c = C[i];\n            const [cx, cy] = this.__transform(c, t);\n            c[0] = cx;\n            c[1] = cy + yOffset;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Array} u - point u\n     * @param {Array} v - point v\n     * @param {Number} w - edge weight w\n     */\n    __align_components(u, v, w) {\n        const points_u = [...u.__disjoint_set.children];\n        const points_v = [...v.__disjoint_set.children];\n\n        const hull_u = this.__hull(points_u);\n        const hull_v = this.__hull(points_v);\n\n        const t_u = this.__align_hull(hull_u, u, false);\n        const t_v = this.__align_hull(hull_v, v, true);\n\n        this.__transform_component(points_u, t_u, 0);\n        this.__transform_component(points_v, t_v, w);\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality 2.\n     */\n    transform() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n        }\n        return this.projection;\n    }\n\n    *generator() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n}\n","import { Matrix, linspace } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { PCA } from \"./PCA.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TriMap\n * @extends DR\n */\nexport class TriMap extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TriMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.weight_adj = 500] - scaling factor.\n     * @param {Number} [parameters.c = 5] - number of triplets multiplier.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.tol = 1e-8] -\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TriMap}\n     * @see {@link https://arxiv.org/pdf/1910.00204v1.pdf}\n     * @see {@link https://github.com/eamid/trimap}\n     */\n    constructor(X, parameters) {\n        super(X, { weight_adj: 500, c: 5, d: 2, metric: euclidean, tol: 1e-8, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} [pca = null] - Initial Embedding (if null then PCA gets used).\n     * @param {KNN} [knn = null] - KNN Object (if null then BallTree gets used).\n     */\n    init(pca = null, knn = null) {\n        const X = this.X;\n        const N = X.shape[0];\n        const { c, d, metric, seed } = this._parameters;\n        this.n_inliers = 2 * c;\n        this.n_outliers = 1 * c;\n        this.n_random = 1 * c;\n        this.Y = pca || new PCA(X, { d, seed }).transform();\n        this.knn = knn || new BallTree(X.to2dArray, metric);\n        const { triplets, weights } = this._generate_triplets(this.n_inliers, this.n_outliers, this.n_random);\n        this.triplets = triplets;\n        this.weights = weights;\n        this.lr = (1000 * N) / triplets.shape[0];\n        this.C = Infinity;\n        this.vel = new Matrix(N, d, 0);\n        this.gain = new Matrix(N, d, 1);\n        return this;\n    }\n\n    /**\n     * Generates {@link n_inliers} x {@link n_outliers} x {@link n_random} triplets.\n     * @param {Number} n_inliers\n     * @param {Number} n_outliers\n     * @param {Number} n_random\n     */\n    _generate_triplets(n_inliers, n_outliers, n_random) {\n        const { metric, weight_adj } = this._parameters;\n        const X = this.X;\n        const N = X.shape[0];\n        const knn = this.knn;\n        const n_extra = Math.min(n_inliers + 20, N);\n        const nbrs = new Matrix(N, n_extra);\n        const knn_distances = new Matrix(N, n_extra);\n        for (let i = 0; i < N; ++i) {\n            knn.search(X.row(i), n_extra + 1)\n                .raw_data()\n                .filter((d) => d.value != 0)\n                .sort((a, b) => a.value - b.value)\n                .forEach((d, j) => {\n                    nbrs.set_entry(i, j, d.element.index);\n                    knn_distances.set_entry(i, j, d.value);\n                });\n        }\n        // scale parameter\n        const sig = new Float64Array(N);\n        for (let i = 0; i < N; ++i) {\n            sig[i] = Math.max((knn_distances.entry(i, 3) + knn_distances.entry(i, 4) + knn_distances.entry(i, 5) + knn_distances.entry(i, 6)) / 4, 1e-10);\n        }\n\n        const P = this._find_p(knn_distances, sig, nbrs);\n\n        let triplets = this._sample_knn_triplets(P, nbrs, n_inliers, n_outliers);\n        let n_triplets = triplets.shape[0];\n        const outlier_distances = new Float64Array(n_triplets);\n        for (let i = 0; i < n_triplets; ++i) {\n            const j = triplets.entry(i, 0);\n            const k = triplets.entry(i, 2);\n            outlier_distances[i] = metric(X.row(j), X.row(k));\n        }\n        let weights = this._find_weights(triplets, P, nbrs, outlier_distances, sig);\n\n        if (n_random > 0) {\n            const { random_triplets, random_weights } = this._sample_random_triplets(X, n_random, sig);\n            triplets = triplets.concat(random_triplets, \"vertical\");\n            weights = Float64Array.from([...weights, ...random_weights]);\n        }\n        n_triplets = triplets.shape[0];\n        let max_weight = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            if (isNaN(weights[i])) {\n                weights[i] = 0;\n            }\n            if (max_weight < weights[i]) max_weight = weights[i];\n        }\n        let max_weight_2 = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight;\n            weights[i] += 0.0001;\n            weights[i] = Math.log(1 + weight_adj * weights[i]);\n            if (max_weight_2 < weights[i]) max_weight_2 = weights[i];\n        }\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight_2;\n        }\n        return {\n            triplets: triplets,\n            weights: weights,\n        };\n    }\n\n    /**\n     * Calculates the similarity matrix P\n     * @private\n     * @param {Matrix} knn_distances - matrix of pairwise knn distances\n     * @param {Float64Array} sig - scaling factor for the distances\n     * @param {Matrix} nbrs - nearest neighbors\n     * @returns {Matrix} pairwise similarity matrix\n     */\n    _find_p(knn_distances, sig, nbrs) {\n        const [N, n_neighbors] = knn_distances.shape;\n        return new Matrix(N, n_neighbors, (i, j) => {\n            return Math.exp(-(knn_distances.entry(i, j) ** 2 / sig[i] / sig[nbrs.entry(i, j)]));\n        });\n    }\n\n    /**\n     * Sample nearest neighbors triplets based on the similarity values given in P.\n     * @private\n     * @param {Matrix} P - Matrix of pairwise similarities between each point and its neighbors given in matrix nbrs.\n     * @param {Matrix} nbrs - Nearest neighbors indices for each point. The similarity values are given in matrix {@link P}. Row i corresponds to the i-th point.\n     * @param {Number} n_inliers - Number of inlier points.\n     * @param {Number} n_outliers - Number of outlier points.\n     *\n     */\n    _sample_knn_triplets(P, nbrs, n_inliers, n_outliers) {\n        const N = nbrs.shape[0];\n        const triplets = new Matrix(N * n_inliers * n_outliers, 3);\n        for (let i = 0; i < N; ++i) {\n            let n_i = i * n_inliers * n_outliers;\n            const sort_indices = this.__argsort(P.row(i));\n            for (let j = 0; j < n_inliers; ++j) {\n                let n_j = j * n_outliers;\n                const sim = nbrs.entry(i, sort_indices[j]);\n                const samples = this._rejection_sample(n_outliers, N, sort_indices.slice(0, j + 1));\n                for (let k = 0; k < n_outliers; ++k) {\n                    const index = n_i + n_j + k;\n                    const out = samples[k];\n                    triplets.set_entry(index, 0, i);\n                    triplets.set_entry(index, 1, sim);\n                    triplets.set_entry(index, 2, out);\n                }\n            }\n        }\n        return triplets;\n    }\n\n    /**\n     * Should do the same as np.argsort()\n     * @private\n     * @param {Array} A\n     */\n    __argsort(A) {\n        return linspace(0, A.length - 1).sort((i, j) => A[j] - A[i]);\n    }\n\n    /**\n     * Samples {@link n_samples} integers from a given interval [0, {@link max_int}] while rejection the values that are in the {@link rejects}.\n     * @private\n     * @param {*} n_samples\n     * @param {*} max_int\n     * @param {*} rejects\n     */\n    _rejection_sample(n_samples, max_int, rejects) {\n        const randomizer = this._randomizer;\n        const interval = linspace(0, max_int - 1).filter((d) => rejects.indexOf(d) < 0);\n        return randomizer.choice(interval, Math.min(n_samples, interval.length - 2));\n    }\n\n    /**\n     * Calculates the weights for the sampled nearest neighbors triplets\n     * @private\n     * @param {Matrix} triplets - Sampled Triplets.\n     * @param {Matrix} P - Pairwise similarity matrix.\n     * @param {Matrix} nbrs - nearest Neighbors\n     * @param {Float64Array} outlier_distances - Matrix of pairwise outlier distances\n     * @param {Float64Array} sig - scaling factor for the distances.\n     */\n    _find_weights(triplets, P, nbrs, outlier_distances, sig) {\n        const n_triplets = triplets.shape[0];\n        const weights = new Float64Array(n_triplets);\n        for (let t = 0; t < n_triplets; ++t) {\n            const i = triplets.entry(t, 0);\n            const sim = nbrs.row(i).indexOf(triplets.entry(t, 1));\n            const p_sim = P.entry(i, sim);\n            let p_out = Math.exp(-(outlier_distances[t] ** 2 / (sig[i] * sig[triplets.entry(t, 2)])));\n            if (p_out < 1e-20) p_out = 1e-20;\n            weights[t] = p_sim / p_out;\n        }\n        return weights;\n    }\n\n    /**\n     * Sample uniformly ranom triplets\n     * @private\n     * @param {Matrix} X - Data matrix.\n     * @param {Number} n_random - Number of random triplets per point\n     * @param {Float64Array} sig - Scaling factor for the distances\n     */\n    _sample_random_triplets(X, n_random, sig) {\n        const metric = this.parameter(\"metric\");\n        const randomizer = this._randomizer;\n        const N = X.shape[0];\n        const random_triplets = new Matrix(N * n_random, 3);\n        const random_weights = new Float64Array(N * n_random);\n        for (let i = 0; i < N; ++i) {\n            const n_i = i * n_random;\n            const indices = [...linspace(0, i - 1), ...linspace(i + 1, N - 1)];\n            for (let j = 0; j < n_random; ++j) {\n                let [sim, out] = randomizer.choice(indices, 2);\n                let p_sim = Math.exp(-(metric(X.row(i), X.row(sim)) ** 2 / (sig[i] * sig[sim])));\n                if (p_sim < 1e-20) p_sim = 1e-20;\n                let p_out = Math.exp(-(metric(X.row(i), X.row(out)) ** 2 / (sig[i] * sig[out])));\n                if (p_out < 1e-20) p_out = 1e-20;\n\n                if (p_sim < p_out) {\n                    [sim, out] = [out, sim];\n                    [p_sim, p_out] = [p_out, p_sim];\n                }\n                const index = n_i + j;\n                random_triplets.set_entry(index, 0, i);\n                random_triplets.set_entry(index, 1, sim);\n                random_triplets.set_entry(index, 2, out);\n                random_weights[index] = p_sim / p_out;\n            }\n        }\n        return {\n            random_triplets: random_triplets,\n            random_weights: random_weights,\n        };\n    }\n\n    /**\n     * Computes the gradient for updating the embedding.\n     * @param {Matrix} Y - The embedding\n     */\n    _grad(Y) {\n        const n_inliers = this.n_inliers;\n        const n_outliers = this.n_outliers;\n        const triplets = this.triplets;\n        const weights = this.weights;\n        const [N, dim] = Y.shape;\n        const n_triplets = triplets.shape[0];\n        const grad = new Matrix(N, dim, 0);\n        let y_ij = new Float64Array(dim);\n        let y_ik = new Float64Array(dim);\n        let d_ij = 1;\n        let d_ik = 1;\n        let n_viol = 0;\n        let loss = 0;\n        const n_knn_triplets = N * n_inliers * n_outliers;\n\n        for (let t = 0; t < n_triplets; ++t) {\n            const [i, j, k] = triplets.row(t);\n            // update y_ij, y_ik, d_ij, d_ik\n            if (t % n_outliers == 0 || t >= n_knn_triplets) {\n                d_ij = 1;\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_jd = Y.entry(j, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ij[d] = Y_id - Y_jd;\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ij += y_ij[d] ** 2;\n                    d_ik += y_ik[d] ** 2;\n                }\n                // update y_ik and d_ik only\n            } else {\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ik += y_ik[d] ** 2;\n                }\n            }\n\n            if (d_ij > d_ik) ++n_viol;\n            loss += weights[t] / (1 + d_ik / d_ij);\n            const w = (weights[t] / (d_ij + d_ik)) ** 2;\n            for (let d = 0; d < dim; ++d) {\n                const gs = y_ij[d] * d_ik * w;\n                const go = y_ik[d] * d_ij * w;\n                grad.add_entry(i, d, gs - go);\n                grad.sub_entry(j, d, gs);\n                grad.add_entry(k, d, go);\n            }\n        }\n        return { grad, loss, n_viol };\n    }\n\n    /**\n     *\n     * @param {Number} max_iteration\n     */\n    transform(max_iteration = 400) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n        }\n        return this.projection;\n    }\n\n    /**\n     * @param {Number} max_iteration\n     * @yields {Matrix}\n     * @returns {Matrix}\n     */\n    *generator(max_iteration = 800) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Does the iteration step.\n     * @private\n     * @param {Number} iter\n     */\n    _next(iter) {\n        const gamma = iter > 150 ? 0.5 : 0.3;\n        const old_C = this.C;\n        const vel = this.vel;\n        const Y = this.Y.add(vel.mult(gamma));\n        const { grad, loss, n_viol } = this._grad(Y);\n        this.C = loss;\n        this.Y = this._update_embedding(Y, iter, grad);\n        this.lr *= old_C > loss + this._parameters.tol ? 1.01 : 0.9;\n        return this.Y;\n    }\n\n    /**\n     * Updates the embedding.\n     * @private\n     * @param {Matrix} Y\n     * @param {Number} iter\n     * @param {Matrix} grad\n     */\n    _update_embedding(Y, iter, grad) {\n        const [N, dim] = Y.shape;\n        const gamma = iter > 150 ? 0.9 : 0.5; // moment parameter\n        const min_gain = 0.01;\n        const gain = this.gain;\n        const vel = this.vel;\n        const lr = this.lr;\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const new_gain = Math.sign(vel.entry(i, d)) != Math.sign(grad.entry(i, d)) ? gain.entry(i, d) + 0.2 : Math.max(gain.entry(i, d) * 0.8, min_gain);\n                gain.set_entry(i, d, new_gain);\n                vel.set_entry(i, d, gamma * vel.entry(i, d) - lr * gain.entry(i, d) * grad.entry(i, d));\n                Y.set_entry(i, d, Y.entry(i, d) + vel.entry(i, d));\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { linspace } from \"../matrix/index.js\";\nimport { powell } from \"../optimization/index.js\";\nimport { DR } from \"./DR.js\";\nimport { max } from \"../util/index.js\";\nimport { KNN } from \"../knn/index.js\";\n\n/**\n * @class\n * @alias UMAP\n * @extends DR\n */\nexport class UMAP extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias UMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.n_neighbors = 15] - size of the local neighborhood.\n     * @param {Number} [parameters.local_connectivity = 1] - number of nearest neighbors connected in the local neighborhood.\n     * @param {Number} [parameters.min_dist = 1] - controls how tightly points get packed together.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points in the high-dimensional space.\n     * @param {Number} [parameters._spread = 1] - The effective scale of embedded points. (In combination with {@link parameters.min_dist})\n     * @param {Number} [parameters._set_op_mix_ratio = 1] - Interpolate between union and intersection.\n     * @param {Number} [parameters._repulsion_strength = 1]  - Weighting applied to negative samples.\n     * @param {Number} [parameters._negative_sample_rate = 5] - The number of negative samples per positive sample.\n     * @param {Number} [parameters._n_epochs = 350] - The number of training epochs.\n     * @param {Number} [parameter._initial_alpha = 1] - The initial learning rate for the optimization.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {UMAP}\n     */\n    constructor(X, parameters) {\n        super(X, { n_neighbors: 15, local_connectivity: 1, min_dist: 1, d: 2, metric: euclidean, seed: 1212, _spread: 1, _set_op_mix_ratio: 1, _repulsion_strength: 1, _negative_sample_rate: 5, _n_epochs: 350, _initial_alpha: 1 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        /* let n_neighbors = Math.min(this._N - 1, parameters.n_neighbors);\n        this.parameter(\"n_neighbors\", n_neighbors);\n        this.parameter(\"local_connectivity\", Math.min(this.parameter(\"local_connectivity\"), n_neighbors - 1)); */\n        if (this.parameter(\"n_neighbors\") > this._N) {\n            throw new Error(`Parameter n_neighbors (=${this.parameter(\"n_neighbors\")}) needs to be smaller than dataset size (N=${this._N})!`);\n        }\n        if (this.parameter(\"local_connectivity\") > this.parameter(\"n_neighbors\")) {\n            throw new Error(`Parameter local_connectivity (=${this.parameter(\"local_connectivity\")}) needs to be smaller than parameter n_neighbors (=${this.parameter(\"n_neighbors\")})`);\n        }\n        this._iter = 0;\n        const randomizer = this._randomizer;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => randomizer.random);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} spread\n     * @param {Number} min_dist\n     * @returns {Array}\n     */\n    _find_ab_params(spread, min_dist) {\n        const curve = (x, a, b) => 1 / (1 + a * Math.pow(x, 2 * b));\n        const xv = linspace(0, spread * 3, 300);\n        const yv = linspace(0, spread * 3, 300);\n\n        for (let i = 0, n = xv.length; i < n; ++i) {\n            const xv_i = xv[i];\n            yv[i] = xv_i < min_dist ? 1 : Math.exp(-(xv_i - min_dist) / spread);\n        }\n\n        const err = (p) => {\n            const error = linspace(1, 300).map((_, i) => yv[i] - curve(xv[i], p[0], p[1]));\n            return Math.sqrt(neumair_sum(error.map((e) => e * e)));\n        };\n\n        return powell(err, [1, 1]);\n    }\n\n    /**\n     * @private\n     * @param {Array<Array>} distances\n     * @param {Array<Number>} sigmas\n     * @param {Array<Number>} rhos\n     * @returns {Array}\n     */\n    _compute_membership_strengths(distances, sigmas, rhos) {\n        for (let i = 0, n = distances.length; i < n; ++i) {\n            const rho = rhos[i];\n            const curr_dist = distances[i];\n            for (let j = 0, m = curr_dist.length; j < m; ++j) {\n                const v = curr_dist[j].value - rho;\n                curr_dist[j].value = v > 0 ? Math.exp(-v / sigmas[i]) : 1.0;\n            }\n        }\n        return distances;\n    }\n\n    /**\n     * @private\n     * @param {KNN|BallTree} knn\n     * @param {Number} k\n     * @returns {Object}\n     */\n    _smooth_knn_dist(knn, k) {\n        const SMOOTH_K_TOLERANCE = 1e-5;\n        const MIN_K_DIST_SCALE = 1e-3;\n        const n_iter = 64;\n        const { local_connectivity, metric } = this._parameters;\n        const target = Math.log2(k);\n        const rhos = [];\n        const sigmas = [];\n        const X = this.X;\n        const N = X.shape[0];\n        //const distances = [...X].map(x_i => knn.search(x_i, k).raw_data().reverse());\n\n        const distances = [];\n        if (metric === \"precomputed\") {\n            for (let i = 0; i < N; ++i) {\n                distances.push(knn.search(i, k).reverse());\n            }\n        } else {\n            for (const x_i of X) {\n                distances.push(knn.search(x_i, k).raw_data().reverse());\n            }\n        }\n\n        const index = Math.floor(local_connectivity);\n        const interpolation = local_connectivity - index;\n        for (let i = 0; i < N; ++i) {\n            let lo = 0;\n            let hi = Infinity;\n            let mid = 1;\n            let rho = 0;\n\n            const search_result = distances[i];\n            const non_zero_dist = search_result.filter((d) => d.value > 0);\n            const non_zero_dist_length = non_zero_dist.length;\n            if (non_zero_dist_length >= local_connectivity) {\n                if (index > 0) {\n                    rho = non_zero_dist[index - 1].value;\n                    if (interpolation > SMOOTH_K_TOLERANCE) {\n                        rho += interpolation * (non_zero_dist[index].value - non_zero_dist[index - 1].value);\n                    }\n                } else {\n                    rho = interpolation * non_zero_dist[0].value;\n                }\n            } else if (non_zero_dist_length > 0) {\n                rho = non_zero_dist[non_zero_dist_length - 1].value;\n            }\n            for (let x = 0; x < n_iter; ++x) {\n                let psum = 0;\n                for (let j = 0; j < k; ++j) {\n                    const d = search_result[j].value - rho;\n                    psum += d > 0 ? Math.exp(-(d / mid)) : 1;\n                }\n                if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n                    break;\n                }\n                if (psum > target) {\n                    [hi, mid] = [mid, (lo + hi) / 2];\n                } else {\n                    if (hi === Infinity) {\n                        [lo, mid] = [mid, mid * 2];\n                    } else {\n                        [lo, mid] = [mid, (lo + hi) / 2];\n                    }\n                }\n            }\n\n            //let mean_d = null;\n            if (rho > 0) {\n                const mean_ithd = search_result.reduce((a, b) => a + b.value, 0) / search_result.length;\n                if (mid < MIN_K_DIST_SCALE * mean_ithd) {\n                    mid = MIN_K_DIST_SCALE * mean_ithd;\n                }\n            } else {\n                const mean_d = distances.reduce((acc, res) => acc + res.reduce((a, b) => a + b.value, 0) / res.length);\n                if (mid < MIN_K_DIST_SCALE * mean_d) {\n                    mid = MIN_K_DIST_SCALE * mean_d;\n                }\n            }\n            rhos[i] = rho;\n            sigmas[i] = mid;\n        }\n        return {\n            distances: distances,\n            sigmas: sigmas,\n            rhos: rhos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Matrix} X\n     * @param {Number} n_neighbors\n     * @returns {Matrix}\n     */\n    _fuzzy_simplicial_set(X, n_neighbors) {\n        const N = X.shape[0];\n        const { metric, _set_op_mix_ratio } = this._parameters;\n        const knn = metric === \"precomputed\" ? new KNN(X, \"precomputed\") : new BallTree(X.to2dArray, metric);\n        let { distances, sigmas, rhos } = this._smooth_knn_dist(knn, n_neighbors);\n        distances = this._compute_membership_strengths(distances, sigmas, rhos);\n        const result = new Matrix(N, N, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            const distances_i = distances[i];\n            for (let j = 0; j < distances_i.length; ++j) {\n                result.set_entry(i, distances_i[j].element.index, distances_i[j].value);\n            }\n        }\n\n        const transposed_result = result.T;\n        const prod_matrix = result.mult(transposed_result);\n        return result\n            .add(transposed_result)\n            .sub(prod_matrix)\n            .mult(_set_op_mix_ratio)\n            .add(prod_matrix.mult(1 - _set_op_mix_ratio));\n    }\n\n    /**\n     * @private\n     * @param {Number} n_epochs\n     * @returns {Array}\n     */\n    _make_epochs_per_sample(n_epochs) {\n        const weights = this._weights;\n        const result = new Float32Array(weights.length).fill(-1);\n        const weight_scl = n_epochs / max(weights);\n        weights.forEach((w, i) => {\n          const sample = w * weight_scl;\n          if (sample > 0) result[i] = Math.round(n_epochs / sample);\n        })\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Matrix} graph\n     * @returns {Object}\n     */\n    _tocoo(graph) {\n        const rows = [];\n        const cols = [];\n        const data = [];\n        const [rows_n, cols_n] = graph.shape;\n        for (let row = 0; row < rows_n; ++row) {\n            for (let col = 0; col < cols_n; ++col) {\n                const entry = graph.entry(row, col);\n                if (entry !== 0) {\n                    rows.push(row);\n                    cols.push(col);\n                    data.push(entry);\n                }\n            }\n        }\n        return {\n            rows: rows,\n            cols: cols,\n            data: data,\n        };\n    }\n\n    /**\n     * Computes all necessary\n     * @returns {UMAP}\n     */\n    init() {\n        const { _spread, min_dist, n_neighbors, _n_epochs, _negative_sample_rate } = this._parameters;\n        const [a, b] = this._find_ab_params(_spread, min_dist);\n        this._a = a;\n        this._b = b;\n        this._graph = this._fuzzy_simplicial_set(this.X, n_neighbors);\n        const { rows, cols, data: weights } = this._tocoo(this._graph);\n        this._head = rows;\n        this._tail = cols;\n        this._weights = weights;\n        this._epochs_per_sample = this._make_epochs_per_sample(_n_epochs);\n        this._epochs_per_negative_sample = this._epochs_per_sample.map((d) => d * _negative_sample_rate);\n        this._epoch_of_next_sample = this._epochs_per_sample.slice();\n        this._epoch_of_next_negative_sample = this._epochs_per_negative_sample.slice();\n        return this;\n    }\n\n    graph() {\n        this.check_init();\n        return { cols: this._head, rows: this._tail, weights: this._weights };\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    transform(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    *generator(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * @private\n     * @param {Number} x\n     * @returns {Number}\n     */\n    _clip(x) {\n        if (x > 4) return 4;\n        if (x < -4) return -4;\n        return x;\n    }\n\n    /**\n     * performs the optimization step.\n     * @private\n     * @param {Matrix} head_embedding\n     * @param {Matrix} tail_embedding\n     * @param {Matrix} head\n     * @param {Matrix} tail\n     * @returns {Matrix}\n     */\n    _optimize_layout(head_embedding, tail_embedding, head, tail) {\n        const randomizer = this._randomizer;\n        const { _repulsion_strength, d: dim } = this._parameters;\n        const { _alpha: alpha, _a: a, _b: b, _epochs_per_sample: epochs_per_sample, _epochs_per_negative_sample: epochs_per_negative_sample, _epoch_of_next_negative_sample: epoch_of_next_negative_sample, _epoch_of_next_sample: epoch_of_next_sample, _clip: clip } = this;\n        const tail_length = tail.length;\n\n        for (let i = 0, n = epochs_per_sample.length; i < n; ++i) {\n            if (epoch_of_next_sample[i] <= this._iter) {\n                const j = head[i];\n                const k = tail[i];\n                const current = head_embedding.row(j);\n                const other = tail_embedding.row(k);\n                const dist = euclidean_squared(current, other);\n                if (dist > 0) {\n                    const grad_coeff = (-2 * a * b * Math.pow(dist, b - 1)) / (a * Math.pow(dist, b) + 1);\n                    for (let d = 0; d < dim; ++d) {\n                        const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                        current[d] += grad_d;\n                        other[d] -= grad_d;\n                    }\n                }\n                epoch_of_next_sample[i] += epochs_per_sample[i];\n                const n_neg_samples = (this._iter - epoch_of_next_negative_sample[i]) / epochs_per_negative_sample[i];\n                for (let p = 0; p < n_neg_samples; ++p) {\n                    const k = randomizer.random_int % tail_length;\n                    const other = tail_embedding.row(tail[k]);\n                    const dist = euclidean_squared(current, other);\n                    if (dist > 0) {\n                        const grad_coeff = (2 * _repulsion_strength * b) / ((0.01 + dist) * (a * Math.pow(dist, b) + 1));\n                        for (let d = 0; d < dim; ++d) {\n                            const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                            current[d] += grad_d;\n                            other[d] -= grad_d;\n                        }\n                    } else if (j === k) {\n                        continue;\n                    }\n                }\n                epoch_of_next_negative_sample[i] += n_neg_samples * epochs_per_negative_sample[i];\n            }\n        }\n        return head_embedding;\n    }\n\n    /**\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const Y = this.Y;\n        const { _initial_alpha, _n_epochs } = this._parameters;\n        this._alpha = _initial_alpha * (1 - iter / _n_epochs);\n        this.Y = this._optimize_layout(Y, Y, this._head, this._tail);\n\n        return this.Y;\n    }\n}\n","/**\n * Computes the canberra distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias canberra\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the canberra distance between <code>a</code> and <code>b</code>.\n * @see {@link https://en.wikipedia.org/wiki/Canberra_distance}\n */\nexport default function(a, b) {\n    if (a.length !== b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += (Math.abs(a[i] - b[i]) / (Math.abs(a[i]) + Math.abs(b[i])))\n    }\n    return sum;\n}","/**\n * Computes the chebyshev distance (L<sub>∞</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias chebyshev\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the chebyshev distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let res = [];\n    for (let i = 0; i < n; ++i) {\n        res.push(Math.abs(a[i] - b[i]));\n    }\n    return Math.max(...res);\n}\n","/**\n * Computes the cosine distance (not similarity) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias cosine\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} The cosine distance between {@link a} and {@link b}.\n * \n * @example\n * import * as druid from \"@saehrimnir/druidjs\";\n * \n * druid.cosine([1,0],[1,1]) == 0.7853981633974484 == π/4;\n * \n */\nexport default function (a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    let sum_a = 0;\n    let sum_b = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += a[i] * b[i];\n        sum_a += a[i] * a[i];\n        sum_b += b[i] * b[i];\n    }\n    return Math.acos(sum / (Math.sqrt(sum_a) * Math.sqrt(sum_b)));\n}\n","/**\n * Computes the hamming distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias hamming\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the hamming distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let disagree = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        disagree += x != y;\n    }\n    return disagree / n;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the inner product between two arrays of the same length.\n * @memberof module:linear_algebra\n * @alias inner_product\n * @param {Array|Float64Array} a - Array a\n * @param {Array|Float64Array} b - Array b\n * @returns The inner product between {@link a} and {@link b}\n */\nexport default function (a, b) {\n    const N = a.length;\n    if (N != b.length) {\n        throw new Error(\"Array a and b must have the same length!\")\n    }\n    let sum = 0;\n    for (let i = 0; i < N; ++i) {\n        sum += a * b;\n    }\n    return sum;\n}\n","/**\n * Computes the jaccard distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias jaccard\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the jaccard distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_non_zero = 0;\n    let num_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_non_zero += x || y;\n        num_equal += x && y;\n    }\n    return (num_non_zero - num_equal) / num_non_zero;\n}\n","/**\n * Numerical stable summation with the Kahan summation algorithm.\n * @memberof module:numerical\n * @alias kahan_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n    let y, t;\n\n    for (let i = 0; i < n; ++i) {\n        y = summands[i] - compensation;\n        t = sum + y;\n        compensation = t - sum - y;\n        sum = t;\n    }\n    return sum;\n}\n","/**\n * Computes the manhattan distance (<code>l<sub>1</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias manhattan\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the manhattan distance between <code>a</code> and <code>b</code>.\n */ \nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += Math.abs(a[i] - b[i]);\n    }\n    return sum;\n}\n","import { norm } from \"./index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Normalizes Vector {@link v}.\n * @memberof module:matrix\n * @alias normalize\n * @param {Array<Number>|Float64Array} v - Vector\n * @param {Function} metric \n * @returns {Array<Number>|Float64Array} - The normalized vector with length 1.\n */\nexport default function(v, metric = euclidean)  {\n    const v_norm = norm(v, metric);\n    return v.map(value => value / v_norm);\n}","import { Matrix, norm } from \"../matrix/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} with householder transformations.\n * @memberof module:linear_algebra\n * @alias qr_householder\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_Householder_reflections}\n * @see {@link http://mlwiki.org/index.php/Householder_Transformation}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, rows, \"I\");\n    const R = A.clone();\n\n    for (let j = 0; j < cols; ++j) {\n        const x = Matrix.from(R.col(j).slice(j));\n        const x_norm = norm(x);\n        const x0 = x.entry(0, 0);\n        const rho = -Math.sign(x0);\n        const u1 = x0 - rho * x_norm;\n        const u = x.divide(u1).set_entry(0, 0, 1);\n        const beta = (-rho * u1) / x_norm;\n\n        const u_outer_u = u.outer(u);\n        const R_block = R.get_block(j, 0);\n        const new_R = R_block.sub(u_outer_u.dot(R_block).mult(beta));\n        const Q_block = Q.get_block(0, j);\n        const new_Q = Q_block.sub(Q_block.dot(u_outer_u).mult(beta));\n        R.set_block(j, 0, new_R);\n        Q.set_block(0, j, new_Q);\n    }\n    return { R, Q };\n}\n","/**\n * Computes the Sokal-Michener distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias sokal_michener\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the Sokal-Michener distance between <code>a</code> and <code>b</code>.  \n */\nexport default function(a, b) {\n    if (a.length != b.length) return undefined\n    const n = a.length;\n    let num_not_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_not_equal += x != y;\n    }\n    return (2 * num_not_equal) / (n + num_not_equal);\n}","/**\n * Computes the yule distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias yule\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the yule distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_true_true = 0;\n    let num_true_false = 0;\n    let num_false_true = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_true_true += x && y;\n        num_true_false += x && !y;\n        num_false_true += !x && x;\n    }\n    const num_false_false = n - num_true_true - num_true_false - num_false_true;\n    return num_true_false == 0 || num_false_true == 0 ? 0 : (2 * num_true_false * num_false_true) / (num_true_true * num_false_false + num_true_false * num_false_true);\n}\n"],"names":["euclidean","a","b","Math","sqrt","euclidean_squared","length","n","sum","i","a_b","k_nearest_neighbors","A","k","metric","rows","shape","D","distance_matrix","nN","Array","row","from","map","distance","col","j","sort","slice","Matrix","A_i","dist","set_entry","linspace","start","end","number","max","round","result","norm","v","vector","cols","Error","Float64Array","neumair_sum","summands","compensation","summand","t","abs","qr_gramschmidt","Q","R","q","q_dot_v","q_","v_norm","simultaneous_poweriteration","seed","max_iterations","qr","tol","randomizer","Randomizer","random","oldQ","QR","dot","values","eigenvalues","diag","eigenvectors","transpose","to2dArray","constructor","value","this","_rows","_cols","_data","static","type","clone","isArray","m","_","data","subarray","iterate_rows","Symbol","iterator","set_row","offset","swap_rows","row1","row2","result_col","entry","add_entry","sub_entry","T","inverse","B","max_idx","max_val","val","A_col","B_col","A_row","B_row","f","s","rows_A","cols_A","rows_B","cols_B","join","B_val","C","e","transDot","A_val","dotTrans","B_i","outer","l","concat","X","set_block","offset_row","offset_col","min","get_block","start_row","start_col","end_row","end_col","new_row","new_col","gather","row_indices","col_indices","N","row_index","col_index","_apply_array","_apply_rowwise_array","_apply_colwise_array","_apply","value_rows","value_cols","mult","inline","divide","add","sub","push","asArray","min_row_col","mean","meanRows","meanCols","b_i","x","r","d","z","alpha","r_next","beta","L","U","LU","L_diag","U_diag","det","M","MtM","MMt","V","Sigma","sigma","Float32Array","_seed","_N","_M","_MATRIX_A","_UPPER_MASK","_LOWER_MASK","_mt","_mti","Date","getTime","mt","mti","random_int","y","mag01","kk","N_M","M_N","gauss_random","_val","c","log","choice","sample","index_list","random_index","splice","undefined","Heap","elements","accessor","comparator","heapify","_accessor","_container","_comparator","heap","container","element","floor","_heapify_down","_swap","index_a","index_b","_heapify_up","index","parentIndex","node","start_index","left","right","pop","item","first","iterate","toArray","raw_data","empty","DisjointSet","_list","Set","make_set","list","has","__disjoint_set","parent","children","size","find","union","node_x","node_y","forEach","BallTree","_Node","pivot","child1","child2","radius","_Leaf","points","_metric","_root","_construct","_greatest_spread","sorted_elements","p_index","p","Infinity","spread","reduce","acc","current","search","_search","KNN","_elements","_D","distances","H","nearest_element_index","nearest_dist","Number","isInteger","res","DR","default_parameters","parameters","_parameters","Object","assign","seal","_type","_randomizer","_is_initialized","parameter","name","hasOwnProperty","para","transform","check_init","projection","generator","init","Y","async","args","PCA","super","eig_args","principal_components","X_cent","MDS","ai_","a_j","a__","_d_X","stress","d_X","d_Y","top_sum","bottom_sum","pow","powell","x0","max_iter","pfx","fx","convergence","fxi","dx","Cluster","id","centroid","depth","_calculate_centroid","l_size","r_size","l_centroid","r_centroid","new_centroid","isLeaf","leaves","descendants","left_descendants","right_descendants","KMedoids","matrix","K","_matrix","_A","_K","_max_iter","log10","_distance_matrix","_clusters","fill","_cluster_medoids","_get_random_medoids","get_clusters","x_j","_nearest_medoid","index_nearest","medoids","finish","_iteration","cache","x_o","o","DeltaTD","xs","findIndex","d_j","distance_nearest","deltaTD","d_oj","_get_distance","d_n","distance_second","d_s","filter","x_i","d_ij","nearest","second","x_m","m1","m2","index_second","cluster_medoids","indices","ceil","TD","TD0","S","S_j","S_o","delta","_choose_distant_objects","a_index","b_index","max_dist","d_ai","d_bi","_col","old_dist","d_ab","y_i","linkage","_id","_linkage","root","do","clusters","_traverse","_n","d_min","_d_min","c_size","_c_size","Uint16Array","p_max","c1","D_i_min","c2","c1_cluster","c2_cluster","c1_cluster_indices","c2_cluster_indices","new_cluster","unshift","D_c1_j","D_c2_j","neighbors","kNearestNeighbors","G","other","min_val","_cluster_centroids","_get_random_centroids","_furthest_point","candidates","Ad","cluster_centroids","random_point","init_points","sample_size","indexOf","furthest_point","clusters_changed","Ai","min_dist","min_cluster","_compute_centroid","cluster_counter","ci","iteration_result","labels","unique_labels","label_id","count","X_mean","V_mean","label","v_mean","S_b","S_w","row_v","O","W","nN_row","Z","C_trace","w","solve_CG","IW","control_points","DR_parameters","nc","c_i","Y_C","XA","knn","_b","ATA","ATb","I_i","X_i","g","G_i_t","W_i","epsilon","min_points","_epsilon","_min_points","_ordered_list","_DB","ordered_list","DB","cluster_index","_cluster_index","reachability_distance","processed","_get_neighbors","_core_distance","seeds","_update","_expand_cluster","core_distance","new_reachability_distance","cluster","outliers","get_cluster_affirmation","magic","init_DR","init_parameters","includes","_step","MAGIC","e1","e2","Yi","Yj","dY","dX","dq","dr","decay_start","decay_cte","_add","__add","_sub_div","__sub_div","_minus","__minus","_mult","__mult","_LR_init","_LR","_offset","exp","_momentums","_grads","_indices","this_metric","_HD_metric","_HD_metric_exaggeration","iterations","_decay_start","ratio","_distance_exaggeration","_nestrov_iteration","__quartets","max_N","shuffled_indices","Uint32Array","of","distance_exaggeration","momentums","LR","grads","_fill_MDS_grads","g_i","g_i_norm","mul","m_i","exaggeration","zero_grad","HD_metric","D_quartet","quartets","D_quartet_sum","gi","gj","gk","gl","_compute_quartet_grads","quartet","p_ab","p_ac","p_ad","p_bc","p_bd","p_cd","d_ac","d_ad","d_bc","d_bd","d_cd","sum_LD_dist","gA1","gB1","gC1","gD1","_ABCD_grads","gA2","gC2","gB2","gD2","gA3","gD3","gC3","gB3","gB4","gC4","gA4","gD4","gB5","gD5","gA5","gC5","gC6","gD6","gA6","gB6","twice_ratio","minus","sub_div","s1","div","perplexity","_iter","Htarget","Delta","druid","P","_ystep","_gains","dist_i","prow","psum","betamin","betamax","cnt","done","dp_sum","pj","N2","_P","next","iter","ystep","gains","dim","pmul","Qu","qsum","dsum","dhere","qu","grad","premult","ymean","gid","sid","gainid","newgain","sign","newsid","__lazy_distance_matrix","D_ij","_make_minimum_spanning_tree","disjoint_set","F","E","u","set_u","set_v","_Emst","__hull_cross","ax","ay","bx","by","sx","sy","__hull","x1","y1","x2","y2","lower","upper","__findAngle","p1x","p1y","p2x","p2y","sin","cos","vec","__align_hull","hull","topEdge","d2","v1","v2","transformation","tx","ty","__transform","px","py","__transform_component","yOffset","cx","cy","__align_components","points_u","points_v","hull_u","hull_v","t_u","t_v","Emst","components","component_u","component_v","weight_adj","pca","n_inliers","n_outliers","n_random","triplets","weights","_generate_triplets","lr","vel","gain","n_extra","nbrs","knn_distances","sig","_find_p","_sample_knn_triplets","n_triplets","outlier_distances","_find_weights","random_triplets","random_weights","_sample_random_triplets","max_weight","isNaN","max_weight_2","n_neighbors","n_i","sort_indices","__argsort","n_j","sim","samples","_rejection_sample","out","n_samples","max_int","rejects","interval","p_sim","p_out","_grad","y_ij","y_ik","d_ik","n_viol","loss","n_knn_triplets","Y_id","Y_jd","Y_kd","gs","go","max_iteration","_next","gamma","old_C","_update_embedding","new_gain","local_connectivity","_spread","_set_op_mix_ratio","_repulsion_strength","_negative_sample_rate","_n_epochs","_initial_alpha","_find_ab_params","xv","yv","xv_i","error","_compute_membership_strengths","sigmas","rhos","rho","curr_dist","_smooth_knn_dist","SMOOTH_K_TOLERANCE","MIN_K_DIST_SCALE","target","log2","reverse","interpolation","lo","hi","mid","search_result","non_zero_dist","non_zero_dist_length","mean_ithd","mean_d","_fuzzy_simplicial_set","distances_i","transposed_result","prod_matrix","_make_epochs_per_sample","n_epochs","_weights","weight_scl","_tocoo","graph","rows_n","cols_n","_a","_graph","_head","_tail","_epochs_per_sample","_epochs_per_negative_sample","_epoch_of_next_sample","_epoch_of_next_negative_sample","_clip","_optimize_layout","head_embedding","tail_embedding","head","tail","_alpha","epochs_per_sample","epochs_per_negative_sample","epoch_of_next_negative_sample","epoch_of_next_sample","clip","tail_length","grad_coeff","grad_d","n_neg_samples","sum_a","sum_b","acos","disagree","num_non_zero","num_equal","x_norm","u1","u_outer_u","R_block","new_R","Q_block","new_Q","num_not_equal","num_true_true","num_true_false","num_false_true"],"mappings":"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"}