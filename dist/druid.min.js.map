{"version":3,"file":"druid.min.js","sources":["../metrics/euclidean.js","../numerical/neumair_sum.js","../metrics/euclidean_squared.js","../matrix/k_nearest_neighbors.js","../matrix/distance_matrix.js","../matrix/linspace.js","../matrix/norm.js","../linear_algebra/qr.js","../linear_algebra/simultaneous_poweriteration.js","../matrix/Matrix.js","../util/randomizer.js","../util/max.js","../util/min.js","../datastructure/Heap.js","../datastructure/DisjointSet.js","../knn/BallTree.js","../knn/KNN.js","../dimred/DR.js","../dimred/PCA.js","../dimred/MDS.js","../optimization/powell.js","../clustering/Hierarchical_Clustering.js","../clustering/KMedoids.js","../dimred/FASTMAP.js","../dimred/ISOMAP.js","../clustering/KMeans.js","../dimred/LDA.js","../dimred/LLE.js","../dimred/LSP.js","../dimred/LTSA.js","../clustering/OPTICS.js","../dimred/SAMMON.js","../dimred/SQDMDS.js","../dimred/TSNE.js","../dimred/TopoMap.js","../dimred/TriMap.js","../dimred/UMAP.js","../metrics/canberra.js","../metrics/chebyshev.js","../metrics/cosine.js","../metrics/hamming.js","../linear_algebra/inner_product.js","../metrics/jaccard.js","../numerical/kahan_sum.js","../metrics/manhattan.js","../matrix/normalize.js","../linear_algebra/qr_householder.js","../metrics/sokal_michener.js","../metrics/yule.js"],"sourcesContent":["import { euclidean_squared } from \"../metrics/index.js\";\n/**\n * Computes the euclidean distance (<code>l<sub>2</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    return Math.sqrt(euclidean_squared(a, b));\n}\n","/**\n * Numerical stable summation with the Neumair summation algorithm.\n * @memberof module:numerical\n * @alias neumair_sum\n * @param {Number[]} summands - Array of values to sum up.\n * @returns {Number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements}\n */\nexport default function (summands) {\n    const n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n\n    for (let i = 0; i < n; ++i) {\n        const summand = summands[i];\n        const t = sum + summand;\n        if (Math.abs(sum) >= Math.abs(summand)) {\n            compensation += sum - t + summand;\n        } else {\n            compensation += summand - t + sum;\n        }\n        sum = t;\n    }\n    return sum + compensation;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n/**\n * Computes the squared euclidean distance (l<sub>2</sub><sup>2</sup>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean_squared\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the squared euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    const s = new Float64Array(n);\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        const x_y = x - y;\n        s[i] = x_y * x_y;\n    }\n    return neumair_sum(s);\n}\n","import { distance_matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Computes the k-nearest neighbors of each row of {@link A}.\n * @memberof module:matrix\n * @alias k_nearest_neigbhors\n * @param {Matrix} A - Either the data matrix, or a distance matrix.\n * @param {Number} k - The number of neighbors to compute.\n * @param {Function|\"precomputed\"} [metric=euclidean]\n * @returns {Array<Object>} -\n */\nexport default function (A, k, metric = euclidean) {\n    const rows = A.shape[0];\n    let D = metric == \"precomputed\" ? A : distance_matrix(A, metric);\n    let nN = new Array(rows);\n    for (let row = 0; row < rows; ++row) {\n        nN[row] = Array.from(D.row(row))\n            .map((distance, col) => {\n                return {\n                    i: row,\n                    j: col,\n                    distance: distance,\n                };\n            })\n            .sort((a, b) => a.distance - b.distance)\n            .slice(1, k + 1);\n    }\n    return nN;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"./index.js\";\n\n/**\n * Computes the distance matrix of datamatrix {@link A}.\n * @memberof module:matrix\n * @alias distance_matrix\n * @param {Matrix} A - Matrix.\n * @param {Function} [metric=euclidean] - The diistance metric.\n * @returns {Matrix} D - The distance matrix of {@link A}.\n */\nexport default function (A, metric = euclidean) {\n    let n = A.shape[0];\n    const D = new Matrix(n, n);\n    for (let i = 0; i < n; ++i) {\n        const A_i = A.row(i);\n        for (let j = i + 1; j < n; ++j) {\n            const dist = metric(A_i, A.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n        }\n    }\n    return D;\n}\n","/**\n * Creates an Array containing {@link number} numbers from {@link start} to {@link end}.\n * If <code>{@link number} = null</null>.\n * @memberof module:matrix\n * @alias linspace\n * @param {Number} start - Start value.\n * @param {Number} end - End value.\n * @param {Number} [number = null] - Number of number between {@link start} and {@link end}.\n * @returns {Array} - An array with {@link number} entries, beginning at {@link start} ending at {@link end}.\n */\nexport default function (start, end, number = null) {\n    if (!number) {\n        number = Math.max(Math.round(end - start) + 1, 1);\n    }\n    if (number < 2) {\n        return number === 1 ? [start] : [];\n    }\n    let result = new Array(number);\n    number -= 1;\n    for (let i = number; i >= 0; --i) {\n        result[i] = (i * end + (number - i) * start) / number;\n    }\n    return result;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n//import { neumair_sum } from \"../numerical/index\";\n\n/**\n * Computes the norm of a vector, by computing its distance to **0**.\n * @memberof module:matrix\n * @alias norm\n * @param {Matrix|Array<Number>|Float64Array} v - Vector.\n * @param {Function} [metric = euclidean] - Which metric should be used to compute the norm.\n * @returns {Number} - The norm of {@link v}.\n */\nexport default function (v, metric = euclidean) {\n    let vector = null;\n    if (v instanceof Matrix) {\n        let [rows, cols] = v.shape;\n        if (rows === 1) vector = v.row(0);\n        else if (cols === 1) vector = v.col(0);\n        else throw new Error(\"Matrix must be 1d!\");\n    } else {\n        vector = v;\n    }\n    const n = vector.length;\n    const zeros = new Float64Array(n);\n    return metric(vector, zeros);\n}\n","import { Matrix, norm } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} using Gram-Schmidt process.\n * @memberof module:linear_algebra\n * @alias qr\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_the_Gram%E2%80%93Schmidt_process}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, cols, \"identity\");\n    const R = new Matrix(cols, cols, 0);\n\n    for (let j = 0; j < cols; ++j) {\n        let v = A.col(j);\n        for (let i = 0; i < j; ++i) {\n            const q = Q.col(i);\n            const q_dot_v = neumair_sum(q.map((q_, k) => q_ * v[k]));\n            R.set_entry(i, j, q_dot_v);\n            v = v.map((v_, k) => v_ - q_dot_v * q[k]);\n        }\n        const v_norm = norm(v, euclidean);\n        for (let k = 0; k < rows; ++k) {\n            Q.set_entry(k, j, v[k] / v_norm);\n        }\n        R.set_entry(j, j, v_norm);\n    }\n    return { R, Q };\n}\n","import { qr as qr_gramschmidt } from \"./index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\n\n/**\n * Computes the {@link k} biggest Eigenvectors and Eigenvalues from Matrix {@link A} with the QR-Algorithm.\n * @memberof module:linear_algebra\n * @alias simultaneous_poweriteration\n * @param {Matrix} A - The Matrix\n * @param {Number} k - The number of eigenvectors and eigenvalues to compute.\n * @param {Object} parameters - Object containing parameterization of the simultanious poweriteration method.\n * @param {Number} [parameters.max_iterations=100] - The number of maxiumum iterations the algorithm should run.\n * @param {Number|Randomizer} [parameters.seed=1212] - The seed value or a randomizer used in the algorithm.\n * @param {Function} [parameters.qr=qr_gramschmidt] - The QR technique to use.\n * @param {Number} [parameters.tol=1e-8] - Allowed error for stopping criteria\n * @returns {{eigenvalues: Array, eigenvectors: Array}} - The {@link k} biggest eigenvectors and eigenvalues of Matrix {@link A}.\n */\nexport default function (A, k = 2, {seed = 1212, max_iterations = 100, qr = qr_gramschmidt, tol = 1e-8} = {}) {\n    const randomizer = seed instanceof Randomizer ? seed : new Randomizer(seed);\n    if (!(A instanceof Matrix)) A = Matrix.from(A);\n    const n = A.shape[0];\n    let { Q, R } = qr(new Matrix(n, k, () => (randomizer.random - .5) * 2));\n    while (max_iterations--) {\n        const oldQ = Q.clone();\n        const Z = A.dot(Q);\n        const QR = qr(Z);\n        Q = QR.Q;\n        R = QR.R;\n        const error = euclidean_squared(Q.values, oldQ.values);\n        if (error < tol) {\n            break;\n        }\n    }\n\n    const eigenvalues = R.diag;\n    const eigenvectors = Q.transpose().to2dArray;\n    return { eigenvalues, eigenvectors };\n}\n","import { neumair_sum } from \"../numerical/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n/**\n * @class\n * @alias Matrix\n * @requires module:numerical/neumair_sum\n */\nexport class Matrix {\n    /**\n     * creates a new Matrix. Entries are stored in a Float64Array.\n     * @memberof module:matrix\n     * @param {number} rows - The amount of rows of the matrix.\n     * @param {number} cols - The amount of columns of the matrix.\n     * @param {(function|string|number)} value=0 - Can be a function with row and col as parameters, a number, or \"zeros\", \"identity\" or \"I\", or \"center\".\n     *  - **function**: for each entry the function gets called with the parameters for the actual row and column.\n     *  - **string**: allowed are\n     *      - \"zero\", creates a zero matrix.\n     *      - \"identity\" or \"I\", creates an identity matrix.\n     *      - \"center\", creates an center matrix.\n     *  - **number**: create a matrix filled with the given value.\n     * @example\n     *\n     * let A = new Matrix(10, 10, () => Math.random()); //creates a 10 times 10 random matrix.\n     * let B = new Matrix(3, 3, \"I\"); // creates a 3 times 3 identity matrix.\n     * @returns {Matrix} returns a {@link rows} times {@link cols} Matrix filled with {@link value}.\n     */\n    constructor(rows = null, cols = null, value = null) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = null;\n        if (rows && cols) {\n            if (!value) {\n                this._data = new Float64Array(rows * cols);\n                return this;\n            }\n            if (typeof value === \"function\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value(row, col);\n                    }\n                }\n                return this;\n            }\n            if (typeof value === \"string\") {\n                if (value === \"zeros\") {\n                    return new Matrix(rows, cols, 0);\n                }\n                if (value === \"identity\" || value === \"I\") {\n                    this._data = new Float64Array(rows * cols);\n                    for (let row = 0; row < rows; ++row) {\n                        this._data[row * cols + row] = 1;\n                    }\n                    return this;\n                }\n                if (value === \"center\" && rows == cols) {\n                    this._data = new Float64Array(rows * cols);\n                    value = (i, j) => (i === j ? 1 : 0) - 1 / rows;\n                    for (let row = 0; row < rows; ++row) {\n                        for (let col = 0; col < cols; ++col) {\n                            this._data[row * cols + col] = value(row, col);\n                        }\n                    }\n                    return this;\n                }\n            }\n            if (typeof value === \"number\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value;\n                    }\n                }\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Creates a Matrix out of {@link A}.\n     * @param {(Matrix|Array|Float64Array|number)} A - The matrix, array, or number, which should converted to a Matrix.\n     * @param {\"row\"|\"col\"|\"diag\"} [type = \"row\"] - If {@link A} is a Array or Float64Array, then type defines if it is a row- or a column vector.\n     * @returns {Matrix}\n     *\n     * @example\n     * let A = Matrix.from([[1, 0], [0, 1]]); //creates a two by two identity matrix.\n     * let S = Matrix.from([1, 2, 3], \"diag\"); // creates a 3 by 3 matrix with 1, 2, 3 on its diagonal. [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n     */\n    static from(A, type = \"row\") {\n        if (A instanceof Matrix) {\n            return A.clone();\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let m = A.length;\n            if (m === 0) throw new Error(\"Array is empty\");\n            // 1d\n            if (!Array.isArray(A[0]) && !(A[0] instanceof Float64Array)) {\n                if (type === \"row\") {\n                    return new Matrix(1, m, (_, j) => A[j]);\n                } else if (type === \"col\") {\n                    return new Matrix(m, 1, (i) => A[i]);\n                } else if (type === \"diag\") {\n                    return new Matrix(m, m, (i, j) => (i == j ? A[i] : 0));\n                } else {\n                    throw new Error(\"1d array has NaN entries\");\n                }\n                // 2d\n            } else if (Array.isArray(A[0]) || A[0] instanceof Float64Array) {\n                let n = A[0].length;\n                for (let row = 0; row < m; ++row) {\n                    if (A[row].length !== n) {\n                        throw new Error(\"various array lengths\");\n                    }\n                }\n                return new Matrix(m, n, (i, j) => A[i][j]);\n            }\n        } else if (typeof A === \"number\") {\n            return new Matrix(1, 1, A);\n        } else {\n            throw new Error(\"error\");\n        }\n    }\n\n    /**\n     * Returns the {@link row}<sup>th</sup> row from the Matrix.\n     * @param {Number} row\n     * @returns {Float64Array}\n     */\n    row(row) {\n        const data = this.values;\n        const cols = this._cols;\n        return data.subarray(row * cols, (row + 1) * cols);\n    }\n\n    /**\n     * Returns an generator yielding each row of the Matrix.\n     * @yields {Float64Array}\n     */\n    *iterate_rows() {\n        const cols = this._cols;\n        const rows = this._rows;\n        const data = this.values;\n        for (let row = 0; row < rows; ++row) {\n            yield data.subarray(row * cols, (row + 1) * cols);\n        }\n    }\n\n    /**\n     * Makes a {@link Matrix} object an iterable object.\n     * @yields {Float64Array}\n     */\n    *[Symbol.iterator]() {\n        for (const row of this.iterate_rows()) {\n            yield row;\n        }\n    }\n\n    /**\n     * Sets the entries of {@link row}<sup>th</sup> row from the Matrix to the entries from {@link values}.\n     * @param {Number} row\n     * @param {Array} values\n     * @returns {Matrix}\n     */\n    set_row(row, values) {\n        const cols = this._cols;\n        if ((Array.isArray(values) || values instanceof Float64Array) && values.length === cols) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values[col];\n            }\n        } else if (values instanceof Matrix && values.shape[1] === cols && values.shape[0] === 1) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values._data[col];\n            }\n        } else {\n            throw new Error(\"Values not valid! Needs to be either an Array, a Float64Array, or a fitting Matrix!\")\n        }\n        return this;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> column from the Matrix.\n     * @param {Number} col\n     * @returns {Array}\n     */\n    col(col) {\n        const result_col = new Float64Array(this._rows);\n        for (let row = 0; row < this._rows; ++row) {\n            result_col[row] = this.values[row * this._cols + col];\n        }\n        return result_col;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @returns {float64}\n     */\n    entry(row, col) {\n        return this.values[row * this._cols + col];\n    }\n\n    /**\n     * Sets the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix to the given {@link value}.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    set_entry(row, col, value) {\n        this.values[row * this._cols + col] = value;\n        return this;\n    }\n\n    /**\n     * Returns a new transposed Matrix.\n     * @returns {Matrix}\n     */\n    transpose() {\n        let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n        return B;\n    }\n\n    /**\n     * Returns a new transposed Matrix. Short-form of {@function transpose}.\n     * @returns {Matrix}\n     */\n    get T() {\n        return this.transpose();\n    }\n\n    /**\n     * Returns the inverse of the Matrix.\n     * @returns {Matrix}\n     */\n    inverse() {\n        const rows = this._rows;\n        const cols = this._cols;\n        let B = new Matrix(rows, 2 * cols, (i, j) => {\n            if (j >= cols) {\n                return i === j - cols ? 1 : 0;\n            } else {\n                return this.entry(i, j);\n            }\n        });\n        let h = 0;\n        let k = 0;\n        while (h < rows && k < cols) {\n            var i_max = 0;\n            let max_val = -Infinity;\n            for (let i = h; i < rows; ++i) {\n                let val = Math.abs(B.entry(i, k));\n                if (max_val < val) {\n                    i_max = i;\n                    max_val = val;\n                }\n            }\n            if (B.entry(i_max, k) == 0) {\n                k++;\n            } else {\n                // swap rows\n                for (let j = 0; j < 2 * cols; ++j) {\n                    let h_val = B.entry(h, j);\n                    let i_val = B.entry(i_max, j);\n                    B.set_entry(h, j, h_val);\n                    B.set_entry(i_max, j, i_val);\n                }\n                for (let i = h + 1; i < rows; ++i) {\n                    let f = B.entry(i, k) / B.entry(h, k);\n                    B.set_entry(i, k, 0);\n                    for (let j = k + 1; j < 2 * cols; ++j) {\n                        B.set_entry(i, j, B.entry(i, j) - B.entry(h, j) * f);\n                    }\n                }\n                h++;\n                k++;\n            }\n        }\n\n        for (let row = 0; row < rows; ++row) {\n            let f = B.entry(row, row);\n            for (let col = row; col < 2 * cols; ++col) {\n                B.set_entry(row, col, B.entry(row, col) / f);\n            }\n        }\n\n        for (let row = rows - 1; row >= 0; --row) {\n            let B_row_row = B.entry(row, row);\n            for (let i = 0; i < row; i++) {\n                let B_i_row = B.entry(i, row);\n                let f = B_i_row / B_row_row;\n                for (let j = i; j < 2 * cols; ++j) {\n                    let B_i_j = B.entry(i, j);\n                    let B_row_j = B.entry(row, j);\n                    B_i_j = B_i_j - B_row_j * f;\n                    B.set_entry(i, j, B_i_j);\n                }\n            }\n        }\n\n        return new Matrix(rows, cols, (i, j) => B.entry(i, j + cols));\n    }\n\n    /**\n     * Returns the dot product. If {@link B} is an Array or Float64Array then an Array gets returned. If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            if (A.shape[1] !== B.shape[0]) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix: \n                A has ${A.shape[1]} cols and B ${B.shape[0]} rows. \n                Must be equal!`);\n            }\n            let I = A.shape[1];\n            let C = new Matrix(A.shape[0], B.shape[1], (row, col) => {\n                const A_i = A.row(row);\n                const B_i = B.col(col);\n                let sum = 0;\n                for (let i = 0; i < I; ++i) {\n                    sum += A_i[i] * B_i[i];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Array.isArray(B) || B instanceof Float64Array) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Computes the outer product from {@link this} and {@link B}.\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    outer(B) {\n        let A = this;\n        let l = A._data.length;\n        let r = B._data.length;\n        if (l != r) return undefined;\n        let C = new Matrix();\n        C.shape = [\n            l,\n            l,\n            (i, j) => {\n                if (i <= j) {\n                    return A._data[i] * B._data[j];\n                } else {\n                    return C.entry(j, i);\n                }\n            },\n        ];\n        return C;\n    }\n\n    /**\n     * Appends matrix {@link B} to the matrix.\n     * @param {Matrix} B - matrix to append.\n     * @param {\"horizontal\"|\"vertical\"|\"diag\"} [type = \"horizontal\"] - type of concatenation.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 1], [1, 1]]); // 2 by 2 matrix filled with ones.\n     * let B = Matrix.from([[2, 2], [2, 2]]); // 2 by 2 matrix filled with twos.\n     *\n     * A.concat(B, \"horizontal\"); // 2 by 4 matrix. [[1, 1, 2, 2], [1, 1, 2, 2]]\n     * A.concat(B, \"vertical\"); // 4 by 2 matrix. [[1, 1], [1, 1], [2, 2], [2, 2]]\n     * A.concat(B, \"diag\"); // 4 by 4 matrix. [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 2, 2], [0, 0, 2, 2]]\n     */\n    concat(B, type = \"horizontal\") {\n        const A = this;\n        const [rows_A, cols_A] = A.shape;\n        const [rows_B, cols_B] = B.shape;\n        if (type == \"horizontal\") {\n            if (rows_A != rows_B) {\n                throw new Error(`A.concat(B, \"horizontal\"): A and B need same number of rows, A has ${rows_A} rows, B has ${rows_B} rows.`);\n            }\n            const X = new Matrix(rows_A, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(0, cols_A, B);\n            return X;\n        } else if (type == \"vertical\") {\n            if (cols_A != cols_B) {\n                throw new Error(`A.concat(B, \"vertical\"): A and B need same number of columns, A has ${cols_A} columns, B has ${cols_B} columns.`);\n            }\n            const X = new Matrix(rows_A + rows_B, cols_A, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, 0, B);\n            return X;\n        } else if (type == \"diag\") {\n            const X = new Matrix(rows_A + rows_B, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, cols_A, B);\n            return X;\n        } else {\n            throw new Error(`type must be \"horizontal\" or \"vertical\", but type is ${type}!`);\n        }\n    }\n\n    /**\n     * Writes the entries of B in A at an offset position given by {@link offset_row} and {@link offset_col}.\n     * @param {int} offset_row\n     * @param {int} offset_col\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    set_block(offset_row, offset_col, B) {\n        let [rows, cols] = B.shape;\n        for (let row = 0; row < rows; ++row) {\n            if (row > this._rows) {\n                continue;\n            }\n            for (let col = 0; col < cols; ++col) {\n                if (col > this._cols) {\n                    continue;\n                }\n                this.set_entry(row + offset_row, col + offset_col, B.entry(row, col));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Extracts the entries from the {@link start_row}<sup>th</sup> row to the {@link end_row}<sup>th</sup> row, the {@link start_col}<sup>th</sup> column to the {@link end_col}<sup>th</sup> column of the matrix.\n     * If {@link end_row} or {@link end_col} is empty, the respective value is set to {@link this.rows} or {@link this.cols}.\n     * @param {Number} start_row\n     * @param {Number} start_col\n     * @param {Number} [end_row = null]\n     * @param {Number} [end_col = null]\n     * @returns {Matrix} Returns a end_row - start_row times end_col - start_col matrix, with respective entries from the matrix.\n     * @example\n     *\n     * let A = Matrix.from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // a 3 by 3 matrix.\n     *\n     * A.get_block(1, 1); // [[5, 6], [8, 9]]\n     * A.get_block(0, 0, 1, 1); // [[1]]\n     * A.get_block(1, 1, 2, 2); // [[5]]\n     * A.get_block(0, 0, 2, 2); // [[1, 2], [4, 5]]\n     */\n    get_block(start_row, start_col, end_row = null, end_col = null) {\n        const [rows, cols] = this.shape;\n        end_row = end_row ?? rows;\n        end_col = end_col ?? cols;\n        if (end_row <= start_row || end_col <= start_col) {\n            throw new Error(`\n                end_row must be greater than start_row, and \n                end_col must be greater than start_col, but\n                end_row = ${end_row}, start_row = ${start_row}, end_col = ${end_col}, and start_col = ${start_col}!`);\n        }\n        const X = new Matrix(end_row - start_row, end_col - start_col, \"zeros\");\n        for (let row = start_row, new_row = 0; row < end_row; ++row, ++new_row) {\n            for (let col = start_col, new_col = 0; col < end_col; ++col, ++new_col) {\n                X.set_entry(new_row, new_col, this.entry(row, col));\n            }\n        }\n        return X;\n        //return new Matrix(end_row - start_row, end_col - start_col, (i, j) => this.entry(i + start_row, j + start_col));\n    }\n\n    /**\n     * Returns a new array gathering entries defined by the indices given by argument.\n     * @param {Array<Number>} row_indices - Array consists of indices of rows for gathering entries of this matrix\n     * @param {Array<Number>} col_indices  - Array consists of indices of cols for gathering entries of this matrix\n     * @returns {Matrix}\n     */\n    gather(row_indices, col_indices) {\n        const N = row_indices.length;\n        const D = col_indices.length;\n\n        const R = new Matrix(N, D);\n        for (let i = 0; i < N; ++i) {\n            const row_index = row_indices[i];\n            for (let j = 0; j < N; ++j) {\n                const col_index = col_indices[j];\n                R.set_entry(i, j, this.entry(row_index, col_index));\n            }\n        }\n\n        return R;\n    }\n\n    /**\n     * Applies a function to each entry of the matrix.\n     * @private\n     * @param {Function} f function takes 2 parameters, the value of the actual entry and a value given by the function {@link v}. The result of {@link f} gets writen to the Matrix.\n     * @param {Function} v function takes 2 parameters for row and col, and returns a value witch should be applied to the colth entry of the rowth row of the matrix.\n     */\n    _apply_array(f, v) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let row = 0; row < rows; ++row) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                const i = offset + col;\n                data[i] = f(data[i], v(row, col));\n            }\n        }\n        return this;\n    }\n\n    _apply_rowwise_array(values, f) {\n        return this._apply_array(f, (_, j) => values[j]);\n    }\n\n    _apply_colwise_array(values, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let row = 0; row < rows; ++row) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                const i = offset + col;\n                data[i] = f(data[i], values[row]);\n            }\n        }\n        return this;\n    }\n\n    _apply(value, f) {\n        let data = this.values;\n        if (value instanceof Matrix) {\n            let [value_rows, value_cols] = value.shape;\n            let [rows, cols] = this.shape;\n            if (value_rows === 1) {\n                if (cols !== value_cols) {\n                    throw new Error(`cols !== value_cols`);\n                }\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(0, col));\n                    }\n                }\n            } else if (value_cols === 1) {\n                if (rows !== value_rows) {\n                    throw new Error(`rows !== value_rows`);\n                }\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(row, 0));\n                    }\n                }\n            } else if (rows == value_rows && cols == value_cols) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value.entry(row, col));\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else if (Array.isArray(value)) {\n            let rows = this._rows;\n            let cols = this._cols;\n            if (value.length === rows) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value[row]);\n                    }\n                }\n            } else if (value.length === cols) {\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        data[row * cols + col] = f(data[row * cols + col], value[col]);\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else {\n            for (let i = 0, n = this._rows * this._cols; i < n; ++i) {\n                data[i] = f(data[i], value);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Clones the Matrix.\n     * @returns {Matrix}\n     */\n    clone() {\n        let B = new Matrix();\n        B._rows = this._rows;\n        B._cols = this._cols;\n        B._data = this.values.slice(0);\n        return B;\n    }\n\n    /**\n     * Entrywise multiplication with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies multiplication to the element, otherwise it creates first a copy and applies the multiplication on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.mult(2); // [[2, 4], [6, 8]];\n     * A.mult(B); // [[1, 4], [9, 16]];\n     */\n    mult(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a * b);\n    }\n\n    /**\n     * Entrywise division with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies division to the element, otherwise it creates first a copy and applies the division on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.divide(2); // [[0.5, 1], [1.5, 2]];\n     * A.divide(B); // [[1, 1], [1, 1]];\n     */\n    divide(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a / b);\n    }\n\n    /**\n     * Entrywise addition with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies addition to the element, otherwise it creates first a copy and applies the addition on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.add(2); // [[3, 4], [5, 6]];\n     * A.add(B); // [[2, 4], [6, 8]];\n     */\n    add(value, {inline = false} = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a + b);\n    }\n\n    /**\n     * Entrywise subtraction with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies subtraction to the element, otherwise it creates first a copy and applies the subtraction on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.sub(2); // [[-1, 0], [1, 2]];\n     * A.sub(B); // [[0, 0], [0, 0]];\n     */\n    sub(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a - b);\n    }\n\n    /**\n     * Returns the number of rows and columns of the Matrix.\n     * @returns {Array} An Array in the form [rows, columns].\n     */\n    get shape() {\n        return [this._rows, this._cols];\n    }\n\n    /**\n     * Returns the matrix in the given shape with the given function which returns values for the entries of the matrix.\n     * @param {Array} parameter - takes an Array in the form [rows, cols, value], where rows and cols are the number of rows and columns of the matrix, and value is a function which takes two parameters (row and col) which has to return a value for the colth entry of the rowth row.\n     * @returns {Matrix}\n     */\n    set shape([rows, cols, value = () => 0]) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = new Float64Array(rows * cols);\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n                this._data[row * cols + col] = value(row, col);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Float64Arrays.\n     * @returns {Array<Float64Array>}\n     */\n    get to2dArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(row);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Arrays.\n     * @returns {Array<Array>}\n     */\n    get asArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(Array.from(row));\n        }\n        return result;\n    }\n\n    /**\n     * Returns the diagonal of the Matrix.\n     * @returns {Float64Array}\n     */\n    get diag() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const min_row_col = Math.min(rows, cols);\n        let result = new Float64Array(min_row_col);\n        for (let i = 0; i < min_row_col; ++i) {\n            result[i] = this.entry(i, i);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the mean of all entries of the Matrix.\n     * @returns {Number}\n     */\n    get mean() {\n        const sum = this.sum;\n        const n = this._rows * this._cols;\n        return sum / n;\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Number}\n     */\n    get sum() {\n        const data = this.values;\n        return neumair_sum(data);\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Float64Array}\n     */\n    get values() {\n        const data = this._data;\n        return data;\n    }\n\n    /**\n     * Returns the mean of each row of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanRows() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: rows });\n        for (let row = 0; row < rows; ++row) {\n            result[row] = 0;\n            for (let col = 0; col < cols; ++col) {\n                result[row] += data[row * cols + col];\n            }\n            result[row] /= cols;\n        }\n        return result;\n    }\n\n    /** Returns the mean of each column of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanCols() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: cols });\n        for (let col = 0; col < cols; ++col) {\n            result[col] = 0;\n            for (let row = 0; row < rows; ++row) {\n                result[col] += data[row * cols + col];\n            }\n            result[col] /= rows;\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b} using the conjugate gradient method. Returns the result x.\n     * @param {Matrix} A - Matrix\n     * @param {Matrix} b - Matrix\n     * @param {Randomizer} [randomizer=null]\n     * @param {Number} [tol=1e-3]\n     * @returns {Matrix}\n     */\n    static solve_CG(A, b, randomizer, tol = 1e-3) {\n        if (randomizer === null) {\n            randomizer = new Randomizer();\n        }\n        const rows = A.shape[0];\n        const cols = b.shape[1];\n        let result = new Matrix(rows, 0);\n        for (let i = 0; i < cols; ++i) {\n            const b_i = Matrix.from(b.col(i)).T;\n            let x = new Matrix(rows, 1, () => randomizer.random);\n            let r = b_i.sub(A.dot(x));\n            let d = r.clone();\n            do {\n                const z = A.dot(d);\n                const alpha = r.T.dot(r).entry(0, 0) / d.T.dot(z).entry(0, 0);\n                x = x.add(d.mult(alpha));\n                const r_next = r.sub(z.mult(alpha));\n                const beta = r_next.T.dot(r_next).entry(0, 0) / r.T.dot(r).entry(0, 0);\n                d = r_next.add(d.mult(beta));\n                r = r_next;\n            } while (Math.abs(r.mean) > tol);\n            result = result.concat(x, \"horizontal\");\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b}. Returns the result x.\n     * @param {Matrix} A - Matrix or LU Decomposition\n     * @param {Matrix} b - Matrix\n     * @returns {Matrix}\n     */\n    static solve(A, b) {\n        let { L: L, U: U } = \"L\" in A && \"U\" in A ? A : Matrix.LU(A);\n        let rows = L.shape[0];\n        let x = b.clone();\n\n        // forward\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < row - 1; ++col) {\n                x.set_entry(0, row, x.entry(0, row) - L.entry(row, col) * x.entry(1, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / L.entry(row, row));\n        }\n\n        // backward\n        for (let row = rows - 1; row >= 0; --row) {\n            for (let col = rows - 1; col > row; --col) {\n                x.set_entry(0, row, x.entry(0, row) - U.entry(row, col) * x.entry(0, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / U.entry(row, row));\n        }\n\n        return x;\n    }\n\n    /**\n     * {@link L}{@link U} decomposition of the Matrix {@link A}. Creates two matrices, so that the dot product LU equals A.\n     * @param {Matrix} A\n     * @returns {{L: Matrix, U: Matrix}} result - Returns the left triangle matrix {@link L} and the upper triangle matrix {@link U}.\n     */\n    static LU(A) {\n        const rows = A.shape[0];\n        const L = new Matrix(rows, rows, \"zeros\");\n        const U = new Matrix(rows, rows, \"identity\");\n\n        for (let j = 0; j < rows; ++j) {\n            for (let i = j; i < rows; ++i) {\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(i, k) * U.entry(k, j);\n                }\n                L.set_entry(i, j, A.entry(i, j) - sum);\n            }\n            for (let i = j; i < rows; ++i) {\n                if (L.entry(j, j) === 0) {\n                    return undefined;\n                }\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(j, k) * U.entry(k, i);\n                }\n                U.set_entry(j, i, (A.entry(j, i) - sum) / L.entry(j, j));\n            }\n        }\n\n        return { L: L, U: U };\n    }\n\n    /**\n     * Computes the determinante of {@link A}, by using the LU decomposition of {@link A}.\n     * @param {Matrix} A\n     * @returns {Number} det - Returns the determinate of the Matrix {@link A}.\n     */\n    static det(A) {\n        const rows = A.shape[0];\n        const { L, U } = Matrix.LU(A);\n        const L_diag = L.diag;\n        const U_diag = U.diag;\n        let det = L_diag[0] * U_diag[0];\n        for (let row = 1; row < rows; ++row) {\n            det *= L_diag[row] * U_diag[row];\n        }\n        return det;\n    }\n\n    /**\n     * Computes the {@link k} components of the SVD decomposition of the matrix {@link M}\n     * @param {Matrix} M\n     * @param {int} [k=2]\n     * @returns {{U: Matrix, Sigma: Matrix, V: Matrix}}\n     */\n    static SVD(M, k = 2) {\n        const MT = M.T;\n        let MtM = MT.dot(M);\n        let MMt = M.dot(MT);\n        let { eigenvectors: V, eigenvalues: Sigma } = simultaneous_poweriteration(MtM, k);\n        let { eigenvectors: U } = simultaneous_poweriteration(MMt, k);\n        return { U: U, Sigma: Sigma.map((sigma) => Math.sqrt(sigma)), V: V };\n\n        //Algorithm 1a: Householder reduction to bidiagonal form:\n        /* const [m, n] = A.shape;\n        let U = new Matrix(m, n, (i, j) => i == j ? 1 : 0);\n        console.log(U.to2dArray)\n        let V = new Matrix(n, m, (i, j) => i == j ? 1 : 0);\n        console.log(V.to2dArray)\n        let B = Matrix.bidiagonal(A.clone(), U, V);\n        console.log(U,V,B)\n        return { U: U, \"Sigma\": B, V: V }; */\n    }\n}\n","import { linspace, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @memberof module:utils\n * @alias Randomizer\n */\nexport class Randomizer {\n    /**\n     * Mersenne Twister random number generator.\n     * @constructor\n     * @param {Number} [_seed=new Date().getTime()] - The seed for the random number generator. If <code>_seed == null</code> then the actual time gets used as seed.\n     * @see https://github.com/bmurray7/mersenne-twister-examples/blob/master/javascript-mersenne-twister.js\n     */\n    constructor(_seed) {\n        this._N = 624;\n        this._M = 397;\n        this._MATRIX_A = 0x9908b0df;\n        this._UPPER_MASK = 0x80000000;\n        this._LOWER_MASK = 0x7fffffff;\n        this._mt = new Array(this._N);\n        this._mti = this.N + 1;\n\n        this.seed = _seed || new Date().getTime();\n        return this;\n    }\n\n    set seed(_seed) {\n        this._seed = _seed;\n        let mt = this._mt;\n\n        mt[0] = _seed >>> 0;\n        for (this._mti = 1; this._mti < this._N; this._mti += 1) {\n            let mti = this._mti;\n            let s = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n            mt[mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + mti;\n            mt[mti] >>>= 0;\n        }\n    }\n\n    /**\n     * Returns the seed of the random number generator.\n     * @returns {Number} - The seed.\n     */\n    get seed() {\n        return this._seed;\n    }\n\n    /**\n     * Returns a float between 0 and 1.\n     * @returns {Number} - A random number between [0, 1]\n     */\n    get random() {\n        return this.random_int * (1.0 / 4294967296.0);\n    }\n\n    /**\n     * Returns an integer between 0 and MAX_INTEGER.\n     * @returns {Integer} - A random integer.\n     */\n    get random_int() {\n        let y,\n            mag01 = new Array(0x0, this._MATRIX_A);\n        if (this._mti >= this._N) {\n            let kk;\n\n            /* if (this._mti == this._N + 1) {\n                this.seed = 5489;\n            } */\n\n            let N_M = this._N - this._M;\n            let M_N = this._M - this._N;\n\n            for (kk = 0; kk < N_M; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + this._M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (; kk < this._N - 1; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + M_N] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            y = (this._mt[this._N - 1] & this._UPPER_MASK) | (this._mt[0] & this._LOWER_MASK);\n            this._mt[this._N - 1] = this._mt[this._M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this._mti = 0;\n        }\n\n        y = this._mt[(this._mti += 1)];\n        y ^= y >>> 11;\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= y >>> 18;\n\n        return y >>> 0;\n    }\n\n    /**\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    choice(A, n) {\n        if (A instanceof Matrix) {\n            let rows = A.shape[0];\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A.row(d));\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let rows = A.length;\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A[d]);\n        }\n    }\n\n    /**\n     * @static\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @param {Number} seed - The seed for the random number generator.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    static choice(A, n, seed = 1212) {\n        const R = new Randomizer(seed);\n        return R.choice(A, n);\n        /* let rows = A.shape[0];\n        if (n > rows) {\n            throw new Error(\"n bigger than A!\");\n        }\n        let rand = new Randomizer(seed);\n        let sample = new Array(n);\n        let index_list = linspace(0, rows - 1);\n        for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n            let random_index = rand.random_int % l;\n            sample[i] = index_list.splice(random_index, 1)[0];\n        }\n        //return result;\n        //return new Matrix(n, cols, (row, col) => A.entry(sample[row], col))\n        return sample.map((d) => A.row(d)); */\n    }\n}\n","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias max\n * @param {Array} values \n * @returns {Number}\n */\nexport default function (values) {\n    let max;\n    for (const value of values) {\n        if (value != null && (max < value || (max === undefined && value >= value))) {\n            max = value;\n        }\n    }\n    return max;\n}","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias min\n * @param {Array} values\n * @returns {Number}\n */\nexport default function (values) {\n    let min;\n    for (const value of values) {\n        if (value != null && (min > value || (min === undefined && value <= value))) {\n            min = value;\n        }\n    }\n    return min;\n}","/**\n * @class\n * @alias Heap\n */\nexport class Heap {\n    /**\n     * A heap is a datastructure holding its elements in a specific way, so that the top element would be the first entry of an ordered list.\n     * @constructor\n     * @memberof module:datastructure\n     * @alias Heap\n     * @param {Array=} elements - Contains the elements for the Heap. {@link elements} can be null.\n     * @param {Function} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(\"min\"|\"max\"|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     * @see {@link https://en.wikipedia.org/wiki/Binary_heap}\n     */\n    constructor(elements = null, accessor = d => d, comparator = \"min\") {\n        if (elements) {\n            return Heap.heapify(elements, accessor, comparator);\n        } else {\n            this._accessor = accessor;\n            this._container = [];\n            if (comparator == \"min\") {\n                this._comparator = (a, b) => a < b;\n            } else if (comparator == \"max\") {\n                this._comparator = (a, b) => a > b;\n            } else {\n                this._comparator = comparator;\n            }\n            return this\n        }\n    }\n\n    /**\n     * Creates a Heap from an Array\n     * @param {Array|Set} elements - Contains the elements for the Heap.\n     * @param {Function=} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(String=|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     */\n    static heapify(elements, accessor = d => d, comparator = \"min\") {\n        const heap = new Heap(null, accessor, comparator);\n        const container = heap._container;\n        for (const e of elements) {\n            container.push({\n                \"element\": e,\n                \"value\": accessor(e),\n            });\n        }\n        for (let i = Math.floor((elements.length / 2) - 1); i >= 0; --i) {\n            heap._heapify_down(i);\n        }\n        return heap;\n    }\n\n    /**\n     * Swaps elements of container array.\n     * @private\n     * @param {Number} index_a \n     * @param {Number} index_b \n     */\n    _swap(index_a, index_b) {\n        const container = this._container;\n        [container[index_b], container[index_a]] = [container[index_a], container[index_b]];\n        return;\n    }\n\n    /**\n     * @private\n     */\n    _heapify_up() {\n        const container = this._container;\n        let index = container.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (!this._comparator(container[index].value, container[parentIndex].value)) {\n                break;\n            } else {\n            this._swap(parentIndex, index)\n            index = parentIndex;\n            }\n        }\n    }\n\n    /**\n     * Pushes the element to the heap.\n     * @param {} element\n     * @returns {Heap}\n     */\n    push(element) {\n        const value = this._accessor(element);\n        //const node = new Node(element, value);\n        const node = {\"element\": element, \"value\": value};\n        this._container.push(node);\n        this._heapify_up();\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} [start_index = 0] \n     */\n    _heapify_down(start_index=0) {\n        const container = this._container;\n        const comparator = this._comparator;\n        const length = container.length;\n        let left = 2 * start_index + 1;\n        let right = 2 * start_index + 2;\n        let index = start_index;\n        if (index > length) throw \"index higher than length\"\n        if (left < length && comparator(container[left].value, container[index].value)) {\n            index = left;\n        }\n        if (right < length && comparator(container[right].value, container[index].value)) {\n            index = right;\n        }\n        if (index !== start_index) {\n            this._swap(start_index, index);\n            this._heapify_down(index);\n        }\n    }\n\n    /**\n     * Removes and returns the top entry of the heap.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    pop() {\n        const container = this._container;\n        if (container.length === 0) {\n            return null;\n        } else if (container.length === 1) {\n            return container.pop();\n        }\n        this._swap(0, container.length - 1);\n        const item = container.pop();\n        this._heapify_down();\n        return item;\n    }\n\n    /**\n     * Returns the top entry of the heap without removing it.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    get first() {\n        return this._container.length > 0 ? this._container[0] : null;\n    }\n\n\n    /**\n     * Yields the raw data\n     * @yields {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    * iterate() {\n        for (let i = 0, n = this._container.length; i < n; ++i) {\n            yield this._container[i].element;\n        }\n    }\n\n    /**\n     * Returns the heap as ordered array.\n     * @returns {Array} Array consisting the elements ordered by {@link comparator}.\n     */\n    toArray() {\n        return this.data()\n            .sort((a,b) => this._comparator(a, b) ? -1 : 0)\n    }\n\n    /**\n     * Returns elements of container array.\n     * @returns {Array} Array consisting the elements.\n     */\n    data() {\n        return this._container\n            .map(d => d.element)\n    }\n\n    /**\n     * Returns the container array.\n     * @returns {Array} The container array.\n     */\n    raw_data() {\n        return this._container;\n    }\n\n    /**\n     * The size of the heap.\n     * @returns {Number}\n     */\n    get length() {\n        return this._container.length;\n    }\n\n    /**\n     * Returns false if the the heap has entries, true if the heap has no entries.\n     * @returns {Boolean}\n     */\n    get empty() {\n        return this.length === 0;\n    }\n}","/**\n * @class\n * @alias DisjointSet\n * @see {@link https://en.wikipedia.org/wiki/Disjoint-set_data_structure}\n */\nexport class DisjointSet {\n    /**\n     * @constructor\n     * @alias DisjointSet\n     * @memberof module:datastructure\n     * @param {Array=} elements \n     * @returns {DisjointSet}\n     */\n    constructor(elements = null) {\n        this._list = new Set();\n        if (elements) {\n            for (const e of elements) {\n                this.make_set(e);\n            }\n        }\n        return this;\n    }\n\n    make_set(x) {\n        const list = this._list;\n        if (!list.has(x)) {\n            list.add(x);\n            x.__disjoint_set = {};\n            x.__disjoint_set.parent = x;\n            x.__disjoint_set.children = new Set([x]);\n            x.__disjoint_set.size = 1;\n        }\n        return this;\n    }\n\n    find(x) {\n        const list = this._list;\n        if (list.has(x)) {\n            if (x.__disjoint_set.parent !== x) {\n                x.__disjoint_set.children.add(...x);\n                x.__disjoint_set.parent = this.find(x.__disjoint_set.parent);\n                return x.__disjoint_set.parent;\n            } else {\n                return x;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    union(x, y) {\n        let node_x = this.find(x);\n        let node_y = this.find(y);\n\n        if (node_x === node_y) return this;\n        if (node_x.__disjoint_set.size < node_y.__disjoint_set.size) [node_x, node_y] = [node_y, node_x];\n\n        node_y.__disjoint_set.parent = node_x;\n        // keep track of children?\n        node_y.__disjoint_set.children.forEach(node_x.__disjoint_set.children.add, node_x.__disjoint_set.children);\n        node_x.__disjoint_set.size += node_y.__disjoint_set.size;\n\n        return this;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n/**\n * @class\n * @alias BallTree\n */\nexport class BallTree {\n    /**\n     * Generates a BallTree with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias BallTree\n     * @param {Array=} elements - Elements which should be added to the BallTree\n     * @param {Function} [metric = euclidean] metric to use: (a, b) => distance\n     * @see {@link https://en.wikipedia.org/wiki/Ball_tree}\n     * @see {@link https://github.com/invisal/noobjs/blob/master/src/tree/BallTree.js}\n     * @returns {BallTree}\n     */\n    constructor(elements = null, metric = euclidean) {\n        this._Node = class {\n            constructor(pivot, child1=null, child2=null, radius=null) {\n                this.pivot = pivot;\n                this.child1 = child1;\n                this.child2 = child2;\n                this.radius = radius;\n            }\n        }\n        this._Leaf = class {\n            constructor(points) {\n                this.points = points;\n            }\n        }\n        this._metric = metric;\n        if (elements) {\n            this.add(elements);\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @param {Array<*>} elements - new elements.\n     * @returns {BallTree}\n     */\n    add(elements) {\n        elements = elements.map((element, index) => {\n            return {index: index, element: element}\n        })\n        this._root = this._construct(elements);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Array<*>} elements \n     * @returns {Node} root of balltree.\n     */\n    _construct(elements) {\n        if (elements.length === 1) {\n            return new this._Leaf(elements);\n        } else {\n            let c = this._greatest_spread(elements);\n            let sorted_elements = elements.sort((a, b) => a.element[c] - b.element[c]);\n            let n = sorted_elements.length;\n            let p_index = Math.floor(n / 2);\n            let p = elements[p_index];\n            let L = sorted_elements.slice(0, p_index);\n            let R = sorted_elements.slice(p_index, n);\n            let radius = Math.max(...elements.map(d => this._metric(p.element, d.element)));\n            let B\n            if (L.length > 0 && R.length > 0) {         \n                B = new this._Node(p, this._construct(L), this._construct(R), radius);\n            } else {\n                B = new this._Leaf(elements);\n            }\n            return B;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Node} B \n     * @returns {Number}\n     */\n    _greatest_spread(B) {\n        let d = B[0].element.length;\n        let start = new Array(d);\n\n        for (let i = 0; i < d; ++i) {\n            start[i] = [Infinity, -Infinity];\n        }\n\n        let spread = B.reduce((acc, current) => {\n            for (let i = 0; i < d; ++i) {\n                acc[i][0] = Math.min(acc[i][0], current.element[i]);\n                acc[i][1] = Math.max(acc[i][1], current.element[i]);\n            }\n            return acc;\n        }, start);\n        spread = spread.map(d => d[1] - d[0]);\n        \n        let c = 0;\n        for (let i = 0; i < d; ++i) {\n            c = spread[i] > spread[c] ? i : c;\n        }\n        return c;\n    }\n\n    /**\n     * \n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        return this._search(t, k, new Heap(null, d => this._metric(d.element, t), \"max\"), this._root);\n    }\n\n    /**\n     * @private\n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @param {Heap} Q - Heap consists of the currently found {@link k} nearest neighbors.\n     * @param {Node|Leaf} B \n     */\n    _search(t, k, Q, B) {\n        // B is Node\n        if (Q.length >= k && B.pivot && B.radius && this._metric(t, B.pivot.element) - B.radius >= Q.first.value) {\n            return Q;\n        } \n        if (B.child1) this._search(t, k, Q, B.child1);\n        if (B.child2) this._search(t, k, Q, B.child2);\n        \n        // B is leaf\n        if (B.points) {\n            for (let i = 0, n = B.points.length; i < n; ++i) {\n                let p = B.points[i];\n                if (k > Q.length) {\n                    Q.push(p);\n                } else {\n                    Q.push(p);\n                    Q.pop();\n                }\n            }\n        }\n        return Q;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KNN\n */\nexport class KNN {\n    /**\n     * Generates a KNN list with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias KNN\n     * @param {Array=} elements - Elements which should be added to the KNN list\n     * @param {Function|\"precomputed\"} [metric = euclidean] metric is either precomputed or a function to use: (a, b) => distance\n     * @returns {KNN}\n     */\n    constructor(elements=null, metric=euclidean) {\n        this._metric = metric;\n        this._elements = elements instanceof Matrix ? elements : Matrix.from(elements);\n        const N = this._elements.shape[0];\n        if (metric === \"precomputed\") {\n            this._D = this._elements.clone();\n        } else {\n            this._D = distance_matrix(this._elements, metric);\n        }\n        this.KNN = [];\n        for (let row = 0; row < N; ++row) {\n            const distances = this._D.row(row);\n            const H = new Heap(null, d => d.value, \"min\");\n            for (let j = 0; j < N; ++j) {\n                H.push({\n                    value: distances[j],\n                    index: j,\n                });\n            }\n            this.KNN.push(H);\n        }\n    }\n\n    /**\n     * \n     * @param {Array|Number} t - query element or index.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        const metric = this._metric;\n        const KNN = this.KNN;\n        let H;\n        if (Array.isArray(t)) {\n            if (this._metric == \"precomputed\") {\n                throw \"Search by query element is only possible when not using a precomputed distance matrix!\"\n            } \n            const elements = this._elements;\n            const N = KNN.length;\n            let nearest_element_index = null;\n            let nearest_dist = Infinity;\n            for (let i = 0; i < N; ++i) {\n                const element = elements.row(i);\n                const dist = metric(t, element);\n                if (dist < nearest_dist) {\n                    nearest_element_index = i;\n                    nearest_dist = dist;\n                }\n            }\n            H = KNN[nearest_element_index];\n        } else if (Number.isInteger(t)) {\n            H = KNN[t]\n        }\n\n        let result = []\n        for (let i = 0; i < k; ++i) {\n            result.push(H.pop())\n        }\n        result.forEach(res => H.push(res.element))\n        return result\n    }    \n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n\n/**\n * @class\n * @alias DR\n * @borrows DR#parameter as DR#para\n * @borrows DR#parameter as DR#p\n */\nexport class DR {\n    /**\n     * Takes the default parameters and seals them, remembers the type of input {@link X}, and initializes the random number generator.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias DR\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed value for the random number generator.\n     * @returns {DR}\n     */\n    constructor(X, default_parameters, parameters) {\n        this._parameters = Object.assign(Object.seal(default_parameters), parameters);\n        if (Array.isArray(X)) {\n            this._type = \"array\";\n            this.X = Matrix.from(X);\n        } else if (X instanceof Matrix) {\n            this._type = \"matrix\";\n            this.X = X;\n        } else {\n            throw new Error(\"No valid type for X!\");\n        }\n        [this._N, this._D] = this.X.shape;\n        this._randomizer = new Randomizer(this._parameters.seed);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * Set and get parameters\n     * @param {String} [name = null] - Name of the parameter. If not given then returns all parameters as an Object.\n     * @param {any} [value = null] - Value of the parameter to set. If <code>name</code> is set and <code>value</code> is not given, returns the value of the respective parameter.\n     * @returns {DR|any|Object} \n     * On setting a parameter, this function returns the DR object. \n     * If <code>name</code> is set and <code>value == null</code> then return actual parameter value.\n     * If <code>name</code> is not given, then returns all parameters as an Object.\n     * \n     * @example\n     * '''\n     * const DR = new druid.TSNE(X, {d: 3}); // creates a new DR object, with parameter for <code>d</code> = 3.\n     * DR.parameter(\"d\"); // returns 3,\n     * DR.parameter(\"d\", 2); // sets parameter <code>d</code> to 2 and returns <code>DR</code>.\n     * '''\n     */\n    parameter(name = null, value = null) {\n        if (name === null) {\n            return Object.assign({}, this._parameters);\n        }\n        if (!this._parameters.hasOwnProperty(name)) {\n            throw new Error(`${name} is not a valid parameter!`);\n        }\n        if (value !== null) {\n            this._parameters[name] = value;\n            this._is_initialized = false;\n            return this;\n        } else {\n            return this._parameters[name];\n        }\n    }\n\n    para(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    p(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} the projection.\n     */\n    transform() {\n        this.check_init();\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @yields {Matrix|Number[][]} the intermediate steps of the projection.\n     */\n    *generator() {\n        return this.transform();\n    }\n\n    /**\n     * If the respective DR method has an <code>init</code> function, call it before <code>transform</code>.\n     * @returns {DR}\n     */\n    check_init() {\n        if (!this._is_initialized && typeof this.init === \"function\") {\n            this.init();\n            this._is_initialized = true;\n        }\n        return this;\n    }\n\n    /**\n     * @returns {Matrix|Number[][]} the projection in the type of input <code>X</code>.\n     */\n    get projection() {\n        if (this.hasOwnProperty(\"Y\")) {\n            this.check_init();\n            return this._type === \"matrix\" ? this.Y : this.Y.to2dArray;\n        } else {\n            throw new Error(\"The dataset is not transformed yet!\");\n        }\n    }\n\n    /**\n     * Computes the projection.\n     * @param  {...unknown} args - Arguments the transform method of the respective DR method takes.\n     * @returns {Promise<Matrix|Number[][]>} the dimensionality reduced dataset.\n     */\n    async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Matrix|Array} the dimensionality reduced dataset.\n     */\n    static transform(...args) {\n        let dr = new this(...args);\n        return dr.transform();\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Promise} a promise yielding the dimensionality reduced dataset.\n     */\n    static async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Generator} a generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    static *generator(...args) {\n        const dr = new this(...args);\n        const generator = dr.generator();\n        for (const result of generator) {\n            yield result;\n        }\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias PCA\n * @augments DR\n */\nexport class PCA extends DR {\n    /**\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias PCA\n     * @param {Matrix|Array<Array<Number>>} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @returns {PCA}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}. If parameter {@link A} is given, then project {@link A} with the principal components of {@link X}.\n     * @param {null|Matrix|Array} [A = null] - If given, the data to project.\n     * @returns {Matrix|Array} - The projected data.\n     */\n    transform(A = null) {\n        const V = this.principal_components();\n        if (A == null) {\n            const X = this.X;\n            this.Y = X.dot(V);\n            return this.projection;\n        } else if (Array.isArray(A)) {\n            return Matrix.from(A).dot(V).asArray;\n        } else if (A instanceof Matrix) {\n            return A.dot(V);\n        } else {\n            throw new Error(\"No valid type for A!\");\n        }\n    }\n\n    /**\n     * Computes the {@link d} principal components of Matrix {@link X}.\n     * @returns {Matrix}\n     */\n    principal_components() {\n        if (this.V) {\n            return this.V;\n        }\n        const { d, eig_args } = this._parameters;\n        const X = this.X;\n        const means = Matrix.from(X.meanCols);\n        const X_cent = X.sub(means);\n        const C = X_cent.transpose().dot(X_cent);\n        const { eigenvectors: V } = simultaneous_poweriteration(C, d, eig_args);\n        this.V = Matrix.from(V).transpose();\n        return this.V;\n    }\n\n    static principal_components(X, parameters) {\n        const dr = new this(X, parameters);\n        return dr.principal_components();\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias MDS\n * @extends DR\n */\nexport class MDS extends DR {\n    /**\n     * Classical MDS.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias MDS\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}.\n     * @returns {Matrix|Array}\n     */\n    transform() {\n        const X = this.X;\n        const rows = X.shape[0];\n        const { d, metric, eig_args } = this._parameters;\n        const A = metric === \"precomputed\" ? X : distance_matrix(X, metric);\n        const ai_ = A.meanCols;\n        const a_j = A.meanRows;\n        const a__ = A.mean;\n\n        this._d_X = A;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n\n        return this.projection;\n    }\n\n    /**\n     * @returns {Number} - the stress of the projection.\n     */\n    stress() {\n        const N = this.X.shape[0];\n        const Y = this.Y;\n        const d_X = this._d_X;\n        const d_Y = new Matrix();\n        d_Y.shape = [\n            N,\n            N,\n            (i, j) => {\n                return i < j ? euclidean(Y.row(i), Y.row(j)) : d_Y.entry(j, i);\n            },\n        ];\n        let top_sum = 0;\n        let bottom_sum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                top_sum += Math.pow(d_X.entry(i, j) - d_Y.entry(i, j), 2);\n                bottom_sum += Math.pow(d_X.entry(i, j), 2);\n            }\n        }\n        return Math.sqrt(top_sum / bottom_sum);\n    }\n}\n","/**\n *\n * @memberof module:optimization\n * @alias powell\n * @param {Function} f\n * @param {Array} x0\n * @param {Number} [max_iter = 300]\n * @returns {Array}\n * @see http://optimization-js.github.io/optimization-js/optimization.js.html#line438\n */\nexport default function (f, x0, max_iter = 300) {\n    const epsilon = 1e-2;\n    const n = x0.length;\n    let alpha = 1e-3;\n    let pfx = 10000;\n    let x = x0.slice();\n    let fx = f(x);\n    let convergence = false;\n\n    while (max_iter-- >= 0 && !convergence) {\n        convergence = true;\n        for (let i = 0; i < n; ++i) {\n            x[i] += 1e-6;\n            let fxi = f(x);\n            x[i] -= 1e-6;\n            let dx = (fxi - fx) / 1e-6;\n            if (Math.abs(dx) > epsilon) {\n                convergence = false;\n            }\n            x[i] -= alpha * dx;\n            fx = f(x);\n        }\n        alpha *= pfx >= fx ? 1.05 : 0.4;\n        pfx = fx;\n    }\n    return x;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n/**\n * @class\n * @alias Hierarchical_Clustering\n */\nexport class Hierarchical_Clustering {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias Hierarchical_Clustering\n     * @todo needs restructuring.\n     * @param {Matrix} - Data or distance matrix if metric is 'precomputed'\n     * @param {(\"single\"|\"complete\"|\"average\")} [linkage = \"complete\"]\n     * @param {Function|\"precomputed\"} [metric = euclidean]\n     * @returns {Hierarchical_Clustering}\n     */\n    constructor(matrix, linkage = \"complete\", metric = euclidean) {\n        this._id = 0;\n        this._matrix = matrix instanceof Matrix ? matrix : Matrix.from(matrix);\n        this._metric = metric;\n        this._linkage = linkage;\n        if (metric === \"precomputed\" && this._matrix.shape[0] !== this._matrix.shape[1]) {\n            throw new Error(\"If metric is 'precomputed', then matrix has to be square!\");\n        }\n        this.init();\n        this.root = this.do();\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} value - value where to cut the tree.\n     * @param {(\"distance\"|\"depth\")} [type = \"distance\"] - type of value.\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters(value, type = \"distance\") {\n        let clusters = [];\n        let accessor;\n        switch (type) {\n            case \"distance\":\n                accessor = (d) => d.dist;\n                break;\n            case \"depth\":\n                accessor = (d) => d.depth;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        this._traverse(this.root, accessor, value, clusters);\n        return clusters;\n    }\n\n    /**\n     * @private\n     * @param {} node\n     * @param {*} f\n     * @param {*} value\n     * @param {*} result\n     */\n    _traverse(node, f, value, result) {\n        if (f(node) <= value) {\n            result.push(node.leaves());\n        } else {\n            this._traverse(node.left, f, value, result);\n            this._traverse(node.right, f, value, result);\n        }\n    }\n\n    /**\n     * computes the tree.\n     */\n    init() {\n        const metric = this._metric;\n        const A = this._matrix;\n        const n = (this._n = A.shape[0]);\n        const d_min = (this._d_min = new Float64Array(n));\n        let distance_matrix;\n        if (metric !== \"precomputed\") {\n            distance_matrix = new Matrix(n, n, 0); //new Array(n);\n            for (let i = 0; i < n; ++i) {\n                d_min[i] = 0;\n                //distance_matrix[i] = new Float64Array(n);\n                for (let j = 0; j < n; ++j) {\n                    distance_matrix.set_entry(i, j, i === j ? Infinity : metric(A.row(i), A.row(j)));\n                    if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        } else {\n            distance_matrix = this._matrix.clone();\n            for (let i = 0; i < n; ++i) {\n                for (let j = 0; j < n; ++j) {\n                    if (i === j) {\n                        distance_matrix.set_entry(i, j, Infinity);\n                    } else if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        }\n        this._distance_matrix = distance_matrix;\n        const clusters = (this._clusters = new Array(n));\n        const c_size = (this._c_size = new Uint16Array(n));\n        for (let i = 0; i < n; ++i) {\n            clusters[i] = [];\n            clusters[i][0] = new Cluster(this._id++, null, null, 0, A.row(i), i, 1, 0);\n            c_size[i] = 1;\n        }\n        return this;\n    }\n\n    /**\n     * computes the tree.\n     */\n    do() {\n        const n = this._n;\n        const d_min = this._d_min;\n        const D = this._distance_matrix;\n        const clusters = this._clusters;\n        const c_size = this._c_size;\n        const linkage = this._linkage;\n        let root = null;\n        for (let p = 0, p_max = n - 1; p < p_max; ++p) {\n            let c1 = 0;\n            for (let i = 0; i < n; ++i) {\n                let D_i_min = D.entry(i, d_min[i]);\n                for (let j = i + 1; j < n; ++j) {\n                    if (D_i_min > D.entry(i, j)) {\n                        d_min[i] = j;\n                        D_i_min = D.entry(i, d_min[i]);\n                    }\n                }\n            }\n            for (let i = 0; i < n; ++i) {\n                if (D.entry(i, d_min[i]) < D.entry(c1, d_min[c1])) {\n                    c1 = i;\n                }\n            }\n            let c2 = d_min[c1];\n            let c1_cluster = clusters[c1][0];\n            let c2_cluster = clusters[c2][0];\n            let c1_cluster_indices = c1_cluster.isLeaf ? [c1_cluster.index] : c1_cluster.index;\n            let c2_cluster_indices = c2_cluster.isLeaf ? [c2_cluster.index] : c2_cluster.index;\n            let indices = c1_cluster_indices.concat(c2_cluster_indices);\n            let new_cluster = new Cluster(this._id++, c1_cluster, c2_cluster, D.entry(c1, c2), null, indices);\n            c1_cluster.parent = new_cluster;\n            c2_cluster.parent = new_cluster;\n            clusters[c1].unshift(new_cluster);\n            c_size[c1] += c_size[c2];\n            for (let j = 0; j < n; ++j) {\n                const D_c1_j = D.entry(c1, j);\n                const D_c2_j = D.entry(c2, j);\n                let value;\n                switch (linkage) {\n                    case \"single\":\n                        value = Math.min(D_c1_j, D_c2_j);\n                        break;\n                    case \"complete\":\n                        value = Math.max(D_c1_j, D_c2_j);\n                        break;\n                    case \"average\":\n                        value = (c_size[c1] * D_c1_j + c_size[c2] * D_c2_j) / (c_size[c1] + c_size[j]);\n                        break;\n                }\n                D.set_entry(j, c1, value);\n                D.set_entry(c1, j, value);\n            }\n\n            D.set_entry(c1, c1, Infinity);\n            for (let i = 0; i < n; ++i) {\n                D.set_entry(i, c2, Infinity);\n                D.set_entry(c2, i, Infinity);\n            }\n\n            /* for (let j = 0; j < n; ++j) {\n                if (d_min[j] === c2) {\n                    d_min[j] = c1;\n                }\n                if (D.entry(c1, j) < D.entry(c1, d_min[c1])) {\n                    d_min[c1] = j;\n                }\n            } */\n            root = new_cluster;\n        }\n        return root;\n    }\n}\n\nclass Cluster {\n    constructor(id, left, right, dist, centroid, index, size, depth) {\n        this.id = id;\n        this.left = left;\n        this.right = right;\n        this.dist = dist;\n        this.index = index;\n        this.size = size ?? left.size + right.size;\n        this.depth = depth ?? 1 + Math.max(left.depth, right.depth);\n        this.centroid = centroid ?? this._calculate_centroid(left, right);\n        this.parent = null;\n        return this;\n    }\n\n    _calculate_centroid(left, right) {\n        const l_size = left.size;\n        const r_size = right.size;\n        const l_centroid = left.centroid;\n        const r_centroid = right.centroid;\n        const size = this.size;\n        const n = left.centroid.length;\n        const new_centroid = new Float64Array(n);\n        for (let i = 0; i < n; ++i) {\n            new_centroid[i] = (l_size * l_centroid[i] + r_size * r_centroid[i]) / size;\n        }\n        return new_centroid;\n    }\n\n    get isLeaf() {\n        return this.depth === 0;\n    }\n\n    leaves() {\n        if (this.isLeaf) return [this];\n        const left = this.left;\n        const right = this.right;\n        return (left.isLeaf ? [left] : left.leaves()).concat(right.isLeaf ? [right] : right.leaves());\n    }\n\n    descendants() {\n        if (this.isLeaf) return [this];\n        const left_descendants = this.left.descendants();\n        const right_descendants = this.right.descendants();\n        return left_descendants.concat(right_descendants).concat([this]);\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { linspace, Matrix } from \"../matrix/index.js\";\nimport { min } from \"../util/index.js\";\n/**\n * @class\n * @alias KMedoids\n */\nexport class KMedoids {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMedoids\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - data matrix\n     * @param {Numbers} K - number of clusters\n     * @param {number} [max_iter=null] - maximum number of iterations. Default is 10 * Math.log10(N)\n     * @param {Function} [metric = euclidean] - metric defining the dissimilarity \n     * @param {Number} [seed = 1212] - seed value for random number generator\n     * @returns {KMedoids}\n     * @see {@link https://link.springer.com/chapter/10.1007/978-3-030-32047-8_16} Faster k-Medoids Clustering: Improving the PAM, CLARA, and CLARANS Algorithms\n     */\n    constructor(matrix, K, max_iter=null, metric = euclidean, seed=1212) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._A = this._matrix.to2dArray;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        this._max_iter = max_iter || 10 * Math.log10(N) \n        this._distance_matrix = new Matrix(N, N, \"zeros\");\n        /* for (let i = 1; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dist = metric(this._A[i], this._A[j]);\n                this._distance_matrix.set_entry(i, j, dist);\n                this._distance_matrix.set_entry(j, i, dist)\n            }\n        } */\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_medoids = this._get_random_medoids(K);\n        //if (init) this.init(K, this._cluster_medoids);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const A = this._A;\n        if (!this._is_initialized) {\n            this.init(K, this._cluster_medoids);\n        }\n        const result = new Array(K).fill().map(() => new Array());\n        A.forEach((x_j, j) => {\n            result[this._nearest_medoid(x_j, j).index_nearest].push(j);\n        })\n        result.medoids = this._cluster_medoids;\n        return result;\n    }\n\n    async* generator() {\n        const max_iter = this._max_iter;\n        yield this.get_clusters()\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n            yield this.get_clusters();\n        } while (!finish && ++i < max_iter)\n    }\n\n    /**\n     * Algorithm 1. FastPAM1: Improved SWAP algorithm\n     */\n    /* _iteration_1() {\n        const A = this._A;\n        const N = this._N;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        let DeltaTD = 0;\n        let m0 = null;\n        let x0 = null;\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const nearest_medoid = this._nearest_medoid(x_j, j);\n                const d_j = nearest_medoid.distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    // disance to new medoid\n                    const d_oj = this._get_distance(o, j, x_o, x_j);\n                    const {\n                        \"index_nearest\": n,\n                        \"distance_nearest\": d_n,\n                        \"distance_second\": d_s,\n                    } = this._nearest_medoid(x_o, o); \n                    this._clusters[o] = n; // cached values\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change\n                    if (d_oj < d_n) { // reassignment check\n                        deltaTD.forEach((d_i, i) => {\n                            if (n !== i) {\n                                deltaTD[i] = d_i + d_oj - d_n; // update loss change\n                            }\n                        });\n                    }\n                });\n                // choose best medoid i;\n                const i = deltaTD\n                    .map((d, i) => [d, i])\n                    .sort((d1, d2) => d1[0] - d2[0])[0][1];\n                const deltaTD_i = deltaTD[i];\n                // store\n                if (deltaTD_i < DeltaTD) {\n                    DeltaTD = deltaTD_i;\n                    m0 = i;\n                    x0 = j;\n                }\n            }\n        });\n\n        if (DeltaTD >= 0) {\n            return true // break loop if DeltaTD >= 0\n        }\n        // swap roles of medoid m and non-medoid x;\n        medoids[m0] = x0;\n        this._cluster_medoids = medoids;\n        return false\n    } */\n\n    /** Algorithm 2. FastPAM2: SWAP with multiple candidates\n     * \n     */\n    _iteration() {\n        const A = this._A;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        const cache = A.map((x_o, o) => this._nearest_medoid(x_o, o));\n        // empty best candidates array\n        const DeltaTD = new Array(K).fill(0);\n        const xs = new Array(K).fill(null);\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const d_j = cache[j].distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    if (j === o) return;\n                    const d_oj = this._get_distance(o, j, x_o, x_j); // distance to new medoid\n                    const {\"index_nearest\": n, \"distance_nearest\": d_n, \"distance_second\": d_s} = cache[o]; // cached\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change for x_o\n                    // Reassignment check\n                    if (d_oj < d_n) { \n                        // update loss change\n                        for (let i = 0; i < K; ++i) {\n                            if (i !== n) deltaTD[i] += d_oj - d_n;\n                        }\n                    }\n                });\n                // remember best swap for i;\n                deltaTD\n                    .map((d, i) => [d, i])\n                    .filter(([d, i]) => d < DeltaTD[i])\n                    .forEach(([d, i]) => {\n                        if (d < DeltaTD[i]) {\n                            DeltaTD[i] = d;\n                            xs[i] = j;\n                        }\n                    })\n            }\n        })\n        // stop if no improvements were found\n        if (min(DeltaTD) >= 0) return true; \n\n        // execute all improvements\n        while (min(DeltaTD) < 0) {\n            // swap roles of medoid m_i and non_medoid xs_i\n            const i = DeltaTD\n                .map((d, i) => [d, i])\n                .sort(([a], [b]) => a - b)[0][1];\n            if (medoids.filter(m => m == xs[i]).length == 0) {\n                medoids[i] = xs[i];\n            }\n            // disable the swap just performed\n            DeltaTD[i] = 0; \n            // recompute TD for remaining swap candidates\n            DeltaTD\n                .map((d_j, j) => [d_j, j])\n                .filter(([d_j]) => d_j < 0)\n                .forEach(([_, j]) => {\n                    const x_j = A[j];\n                    let sum = 0;\n                    A.forEach((x_o, o) => {\n                        if (medoids.findIndex(m => m != j && m == o) >= 0) return;\n                        if (i == j) return;\n                        if (cache[o].index_nearest === medoids[j])\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j), cache[o].distance_second) - cache[o].distance_nearest); \n                        else {\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j) - cache[o].distance_nearest, 0));\n                        }\n                    });\n                    DeltaTD[j] = sum;\n                })\n        }\n        this._cluster_medoids = medoids;\n        return false;\n    }\n\n    _get_distance(i, j, x_i=null, x_j=null) {\n        if (i === j) return 0;\n        const D = this._distance_matrix;\n        const A = this._A;\n        const metric = this._metric;\n        let d_ij = D.entry(i, j);\n        if (d_ij === 0) {\n            d_ij = metric(x_i || A[i], x_j || A[j]);\n            D.set_entry(i, j, d_ij);\n            D.set_entry(j, i, d_ij);\n        }\n        return d_ij;\n    }\n\n    _nearest_medoid(x_j, j) {\n        const medoids = this._cluster_medoids;\n        const A = this._A;\n        const [nearest, second] = medoids\n            .map((m, i) => {\n                const x_m = A[m]; \n                return [this._get_distance(j, m, x_j, x_m), i];\n            })\n            .sort((m1, m2) => m1[0] - m2[0]);\n        \n        return { \n            \"distance_nearest\": nearest[0], \n            \"index_nearest\": nearest[1],\n            \"distance_second\": second[0],\n            \"index_second\": second[1],\n        };\n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_medoids) {\n        if (!K) K = this._K;\n        if (!cluster_medoids) cluster_medoids = this._get_random_medoids(K);\n        const max_iter = this._max_iter;\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n        } while (!finish && ++i < max_iter)\n        return this;\n    }\n\n    /**\n     * Algorithm 3. FastPAM LAB: Linear Approximate BUILD initialization.\n     * @param {number} K - number of clusters\n     * \n     */\n    _get_random_medoids(K) {\n        const N = this._N;\n        const A = this._A;\n        const indices = linspace(0, N - 1);\n        const randomizer = this._randomizer;\n        const n = Math.min(N, 10 + Math.ceil(Math.sqrt(N)));\n        const TD = new Array(n).fill(Infinity);\n        const medoids = [];\n        // first medoid\n        let TD0 = Infinity;\n        let S = randomizer.choice(indices, n);\n        for (let j = 0; j < n; ++j) {\n            const S_j = S[j];\n            const x_j = A[S_j];\n            for (let o = 0; o < n; ++o) {\n                if (o === j) continue;\n                const x_o = A[S[o]];\n                TD[j] += this._get_distance(j, o, x_j, x_o);\n            }\n            if (TD[j] < TD0) {\n                TD0 = TD[j]; // smallest distance sum\n                medoids.push(S_j);\n            }\n        }\n        // other medoids\n        for (let i = 1; i < K; ++i) {\n            let DeltaTD = Infinity;\n            S = randomizer.choice(indices.filter(index => medoids.findIndex(d => d === index) < 0), n);\n            for (let j = 0; j < n; ++j) {\n                let deltaTD = 0;\n                const S_j = S[j];\n                const x_j = A[S_j];\n                for (let o = 0; o < n; ++o) {\n                    if (o === j) continue;\n                    const S_o = S[o];\n                    const x_o = A[S_o];\n                    let delta = this._get_distance(S_j, S_o, x_j, x_o) - min(medoids.map(m => this._get_distance(S_o, m, x_o)));\n                    if (delta < 0) {\n                        deltaTD = deltaTD + delta;\n                    }\n                }\n                // best reduction\n                if (deltaTD < DeltaTD) {\n                    DeltaTD = deltaTD;\n                    medoids.push(S_j);\n                }\n            }\n            TD0 += DeltaTD;\n        }\n        return medoids.slice(0, K);\n    }\n    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n/**\n * @class\n * @alias FASTMAP\n * @extends DR\n */\nexport class FASTMAP extends DR {\n    /**\n     * FastMap: a fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias FASTMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the dimensionality of the projection.\n     * @returns {FASTMAP}\n     * @see {@link https://doi.org/10.1145/223784.223812}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     * Chooses two points which are the most distant in the actual projection.\n     * @private\n     * @param {Function} dist\n     * @returns {Array} An array consisting of first index, second index, and distance between the two points.\n     */\n    _choose_distant_objects(dist) {\n        const X = this.X;\n        const N = X.shape[0];\n        let a_index = (this._randomizer.random_int % N) - 1;\n        let b_index = null;\n        let max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_ai = dist(a_index, i);\n            if (d_ai > max_dist) {\n                max_dist = d_ai;\n                b_index = i;\n            }\n        }\n        max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_bi = dist(b_index, i);\n            if (d_bi > max_dist) {\n                max_dist = d_bi;\n                a_index = i;\n            }\n        }\n        return [a_index, b_index, max_dist];\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} The {@link d}-dimensional projection of the data matrix {@link X}.\n     */\n    transform() {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric } = this._parameters;\n        const Y = new Matrix(N, d, 0);\n        let dist = (a, b) => metric(X.row(a), X.row(b));\n\n        for (let _col = 0; _col < d; ++_col) {\n            let old_dist = dist;\n            // choose pivot objects\n            const [a_index, b_index, d_ab] = this._choose_distant_objects(dist);\n            if (d_ab !== 0) {\n                // project the objects on the line (O_a, O_b)\n                for (let i = 0; i < N; ++i) {\n                    const d_ai = dist(a_index, i);\n                    const d_bi = dist(b_index, i);\n                    const y_i = (d_ai ** 2 + d_ab ** 2 - d_bi ** 2) / (2 * d_ab);\n                    Y.set_entry(i, _col, y_i);\n                }\n                // consider the projections of the objects on a\n                // hyperplane perpendicluar to the line (a, b);\n                // the distance function D'() between two\n                // projections is given by Eq.4\n                dist = (a, b) => Math.sqrt(old_dist(a, b) ** 2 - (Y.entry(a, _col) - Y.entry(b, _col)) ** 2);\n            }\n        }\n        // return embedding.\n        this.Y = Y;\n        return this.projection;\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { DR } from \"./DR.js\";\nimport euclidean from \"../metrics/euclidean.js\";\n\n/**\n * @class\n * @alias ISOMAP\n * @extends DR\n */\nexport class ISOMAP extends DR {\n    /**\n     * Isometric feature mapping (ISOMAP).\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias ISOMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link ISOMAP} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2319}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this.X.shape[0] / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const X = this.X;\n        const rows = this._N;\n        const { d, metric, eig_args, neighbors } = this._parameters;\n        // TODO: make knn extern and parameter for constructor or transform?\n        const D = new Matrix();\n        D.shape = [rows, rows, (i, j) => (i <= j ? metric(X.row(i), X.row(j)) : D.entry(j, i))];\n        const kNearestNeighbors = [];\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < rows; ++j) {\n                row.push({\n                    index: j,\n                    distance: D.entry(i, j),\n                });\n            }\n            const H = new Heap(row, (d) => d.distance, \"min\");\n            kNearestNeighbors.push(H.toArray().slice(1, neighbors + 1));\n        }\n\n        /*D = dijkstra(kNearestNeighbors);*/\n        // compute shortest paths\n        // TODO: make extern\n        /** @see {@link https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm} */\n        const G = new Matrix(rows, rows, (i, j) => {\n            const other = kNearestNeighbors[i].find((n) => n.index === j);\n            return other ? other.distance : Infinity;\n        });\n\n        for (let i = 0; i < rows; ++i) {\n            for (let j = 0; j < rows; ++j) {\n                for (let k = 0; k < rows; ++k) {\n                    G.set_entry(i, j, Math.min(G.entry(i, j), G.entry(i, k) + G.entry(k, j)));\n                }\n            }\n        }\n\n        let ai_ = new Float64Array(rows);\n        let a_j = new Float64Array(rows);\n        let a__ = 0;\n        const A = new Matrix(rows, rows, (i, j) => {\n            let val = G.entry(i, j);\n            val = val === Infinity ? 0 : val;\n            ai_[i] += val;\n            a_j[j] += val;\n            a__ += val;\n            return val;\n        });\n\n        ai_ = ai_.map((v) => v / rows);\n        a_j = a_j.map((v) => v / rows);\n        a__ /= rows ** 2;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        // compute d eigenvectors\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n        // return embedding\n        return this.projection;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { linspace } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KMeans\n */\nexport class KMeans {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMeans\n     * @todo needs restructuring. \n     * @param {Matrix} matrix \n     * @param {Numbers} K \n     * @param {Function} [metric = euclidean] \n     * @param {Number} [seed = 1987]\n     * @param {Boolean} [init = true]\n     * @returns {KMeans}\n     */\n    constructor(matrix, K, metric = euclidean, seed=1987, init = true) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_centroids = this._get_random_centroids(K);\n        if (init) this.init(K, this._cluster_centroids);\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const clusters = this._clusters;\n        const result = new Array(K).fill().map(() => new Array());\n        clusters.forEach((c, i) => result[c].push(i));\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Array} points \n     * @param {Array} candidates \n     */\n    _furthest_point(points, candidates) {\n        const A = this._matrix;\n        const metric = this._metric;\n        let i = points.length;\n        let H = Heap.heapify(\n            candidates, \n            (d) => {\n                const Ad = A.row(d)\n                let sum = 0;\n                for (let j = 0; j < i; ++j) {\n                    sum += metric(Ad, points[j])\n                }\n                return sum;\n            }, \n            \"max\"\n        )\n        return H.pop().element;\n    }\n\n    _get_random_centroids(K) {\n        const N = this._N;\n        const randomizer = this._randomizer;\n        const A = this._matrix;\n        const cluster_centroids = new Array(K).fill()\n        const indices = linspace(0, N - 1);\n        const random_point = randomizer.random_int % (N - 1);\n        cluster_centroids[0] = A.row(random_point);\n        const init_points = [random_point];\n        const sample_size = Math.floor((N - K) / K);// / K\n        for (let i = 1; i < K; ++i) {\n            // sampling + kmeans++ improvement?\n            const sample = randomizer.choice(indices.filter(d => init_points.indexOf(d) == -1), sample_size);\n            const furthest_point = this._furthest_point(cluster_centroids.slice(0, i), sample);\n            init_points.push(furthest_point);\n            cluster_centroids[i] = A.row(furthest_point);\n        }\n        return cluster_centroids;\n    }\n\n    _iteration(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const metric = this._metric;\n        const clusters = this._clusters;\n        let clusters_changed = false;\n        // find nearest cluster centroid.\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i)\n            let min_dist = Infinity;\n            let min_cluster = null;\n            for (let j = 0; j < K; ++j) {\n                let d = metric(cluster_centroids[j], Ai);\n                if (d < min_dist) {\n                    min_dist = d;\n                    min_cluster = j; \n                }\n            }\n            if (clusters[i] !== min_cluster) {\n                clusters_changed = true;\n            }\n            clusters[i] = min_cluster;\n        }\n        // update cluster centroid\n        // reset cluster centroids to 0\n        for (let i = 0; i < K; ++i) {\n            const centroid = cluster_centroids[i];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] = 0;\n            }\n        }\n        // compute centroid\n        this._compute_centroid(cluster_centroids);\n\n        return {   \n            \"clusters_changed\": clusters_changed,\n            \"cluster_centroids\": cluster_centroids\n        };\n    }\n\n    _compute_centroid(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const clusters = this._clusters;\n        const cluster_counter = new Array(K).fill(0);\n\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i);\n            const ci = clusters[i];\n            cluster_counter[ci]++;\n            const centroid = cluster_centroids[ci];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] += Ai[j];\n            }\n        }\n        for (let i = 0; i < K; ++i) {\n            const n = cluster_counter[i];\n            cluster_centroids[i] = cluster_centroids[i].map(c => c / n);\n        }\n        \n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_centroids) {\n        if (!K) K = this._K;\n        if (!cluster_centroids) cluster_centroids = this._get_random_centroids(K);\n        let clusters_changed = false;\n        do {\n            const iteration_result = this._iteration(cluster_centroids)\n            cluster_centroids = iteration_result.cluster_centroids;\n            clusters_changed = iteration_result.clusters_changed;\n        } while (clusters_changed)\n    }\n    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LDA\n * @extends DR\n */\nexport class LDA extends DR {\n    /**\n     * Linear Discriminant Analysis.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LDA\n     * @param {Matrix} X - The high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Array} parameters.labels - The labels / classes for each data point.\n     * @param {number} [parameters.d = 2] - The dimensionality of the projection.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://onlinelibrary.wiley.com/doi/10.1111/j.1469-1809.1936.tb02137.x}\n     */\n    constructor(X, parameters) {\n        super(X, { labels: null, d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, cols] = X.shape;\n        const { d, labels, eig_args } = this._parameters;\n        if (labels === null || labels.length != rows) {\n            throw new Error(\"LDA needs parameter label to every datapoint to work!\");\n        }\n        const unique_labels = {};\n        let label_id = 0;\n        labels.forEach((l, i) => {\n            if (l in unique_labels) {\n                unique_labels[l].count++;\n                unique_labels[l].rows.push(X.row(i));\n            } else {\n                unique_labels[l] = {\n                    id: label_id++,\n                    count: 1,\n                    rows: [X.row(i)],\n                };\n            }\n        });\n\n        // create X_mean and vector means;\n        const X_mean = X.mean;\n        const V_mean = new Matrix(label_id, cols);\n        for (const label in unique_labels) {\n            const V = Matrix.from(unique_labels[label].rows);\n            const v_mean = V.meanCols;\n            for (let j = 0; j < cols; ++j) {\n                V_mean.set_entry(unique_labels[label].id, j, v_mean[j]);\n            }\n        }\n        // scatter_between\n        let S_b = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j] - X_mean);\n            const N = unique_labels[label].count;\n            S_b = S_b.add(m.dot(m.transpose()).mult(N));\n        }\n\n        // scatter_within\n        let S_w = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j]);\n            const R = unique_labels[label].rows;\n            for (let i = 0, n = unique_labels[label].count; i < n; ++i) {\n                const row_v = new Matrix(cols, 1, (j, _) => R[i][j] - m.entry(j, 0));\n                S_w = S_w.add(row_v.dot(row_v.transpose()));\n            }\n        }\n\n        let { eigenvectors: V } = simultaneous_poweriteration(S_w.inverse().dot(S_b), d, eig_args);\n        V = Matrix.from(V).transpose();\n        this.Y = X.dot(V);\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { k_nearest_neighbors } from \"../matrix/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LLE\n * @extends DR\n */\nexport class LLE extends DR {\n    /**\n     * Locally Linear Embedding.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LLE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} neighbors - the label / class of each data point.\n     * @param {Number} [d = 2] - the dimensionality of the projection.\n     * @param {Function} [metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [seed = 1212] - the dimensionality of the projection.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2323}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const rows = this._N;\n        const cols = this._D;\n        const { neighbors, d, eig_args, metric } = this._parameters;\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        const O = new Matrix(neighbors, 1, 1);\n        const W = new Matrix(rows, rows);\n\n        for (let row = 0; row < rows; ++row) {\n            const nN_row = nN[row];\n            const Z = new Matrix(neighbors, cols, (i, j) => X.entry(nN_row[i].j, j) - X.entry(row, j));\n            const C = Z.dot(Z.T);\n            if (neighbors > cols) {\n                const C_trace = neumair_sum(C.diag) / 1000;\n                for (let j = 0; j < neighbors; ++j) {\n                    C.set_entry(j, j, C.entry(j, j) + C_trace);\n                }\n            }\n            // reconstruct;\n            let w = Matrix.solve_CG(C, O, this._randomizer);\n            w = w.divide(w.sum);\n            for (let j = 0; j < neighbors; ++j) {\n                W.set_entry(row, nN_row[j].j, w.entry(j, 0));\n            }\n        }\n        // comp embedding\n        const I = new Matrix(rows, rows, \"identity\");\n        const IW = I.sub(W);\n        const M = IW.T.dot(IW);\n        const { eigenvectors: V } = simultaneous_poweriteration(M.T.inverse(), d + 1, eig_args);\n        this.Y = Matrix.from(V.slice(1, 1 + d)).T;\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\nimport { MDS } from \"./MDS.js\";\nimport { KMedoids } from \"../clustering/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\n/**\n * @class\n * @alias LSP\n * @extends DR\n */\nexport class LSP extends DR {\n    /**\n     * Least Squares Projection.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LSP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.neighbors = Math.max(Math.floor(N / 10), 2)] - number of neighbors to consider.\n     * @param {Number} [parameters.control_points = Math.ceil(Math.sqrt(N))] - number of controlpoints\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {LSP}\n     * @see {@link https://ieeexplore.ieee.org/document/4378370}\n     * @todo accept precomputed distance matrix.\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, control_points: undefined, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        this.parameter(\"control_points\", Math.min(parameters.control_points ?? Math.ceil(Math.sqrt(this._N)), this._N - 1));\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     *\n     * @param {DR} DR - method used for position control points.\n     * @param {Object} DR_parameters - Object containing parameters for the DR method which projects the control points\n     * @returns {LSP}\n     */\n    init(DR = MDS, DR_parameters = {}, KNN = BallTree) {\n        if (this._is_initialized) return this;\n        const X = this.X;\n        const N = this._N;\n        const K = this.parameter(\"neighbors\");\n        const d = this.parameter(\"d\");\n        const seed = this.parameter(\"seed\");\n        const metric = this.parameter(\"metric\");\n        DR_parameters = Object.assign({d, metric, seed }, DR_parameters);\n        const nc = this.parameter(\"control_points\");\n        const control_points = new KMedoids(X, nc, null, metric).get_clusters().medoids;\n        const C = new Matrix(nc, N, \"zeros\");\n        control_points.forEach((c_i, i) => {\n            C.set_entry(i, c_i, 1);\n        });\n        const Y_C = new DR(Matrix.from(control_points.map((c_i) => X.row(c_i))), DR_parameters).transform();\n\n        const XA = X.to2dArray;\n        const knn = new KNN(XA, metric);\n        const L = new Matrix(N, N, \"I\");\n        const alpha = -1 / K;\n        XA.forEach((x_i, i) => {\n            for (const { index: j } of knn.search(x_i, K).iterate()) {\n                if (i === j) continue;\n                L.set_entry(i, j, alpha);\n            }\n        });\n        const A = L.concat(C, \"vertical\");\n\n        const z = new Matrix(N, d, \"zeros\");\n        const b = z.concat(Y_C, \"vertical\");\n\n        this._A = A;\n        this._b = b;\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const A = this._A;\n        const AT = A.T;\n        const b = this._b;\n        const ATA = AT.dot(A);\n        const ATb = AT.dot(b);\n        this.Y = Matrix.solve_CG(ATA, ATb, this._randomizer);\n        return this.projection;\n    }\n}\n","import { Matrix, k_nearest_neighbors } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LTSA\n * @extends DR\n */\nexport class LTSA extends DR {\n    /**\n     * Local Tangent Space Alignment\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LTSA\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} parameters.neighbors - the number of neighbors {@link LTSA} should use to project the data.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {Number} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://epubs.siam.org/doi/abs/10.1137/S1064827502419154}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        if (this._D <= this.parameter(\"d\")) {\n            throw new Error(`Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${this.parameter(\"d\")})!`);\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, D] = X.shape;\n        const { d, neighbors, metric, eig_args } = this._parameters;\n        // 1.1 determine k nearest neighbors\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        // center matrix\n        const O = new Matrix(D, D, \"center\");\n        const B = new Matrix(rows, rows, 0);\n\n        for (let row = 0; row < rows; ++row) {\n            // 1.2 compute the d largest eigenvectors of the correlation matrix\n            const I_i = [row, ...nN[row].map((n) => n.j)];\n            let X_i = Matrix.from(I_i.map((n) => X.row(n)));\n            // center X_i\n            X_i = X_i.dot(O);\n            // correlation matrix\n            const C = X_i.dot(X_i.transpose());\n            const { eigenvectors: g } = simultaneous_poweriteration(C, d, eig_args);\n            //g.push(linspace(0, k).map(_ => 1 / Math.sqrt(k + 1)));\n            const G_i_t = Matrix.from(g);\n            // 2. Constructing alignment matrix\n            const W_i = G_i_t.transpose()\n                .dot(G_i_t)\n                .add(1 / Math.sqrt(neighbors + 1));\n            for (let i = 0; i < neighbors + 1; ++i) {\n                for (let j = 0; j < neighbors + 1; ++j) {\n                    B.set_entry(I_i[i], I_i[j], B.entry(I_i[i], I_i[j]) - (i === j ? 1 : 0) + W_i.entry(i, j));\n                }\n            }\n        }\n\n        // 3. Aligning global coordinates\n        const { eigenvectors: Y } = simultaneous_poweriteration(B, d + 1, eig_args);\n        this.Y = Matrix.from(Y.slice(1)).transpose();\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias OPTICS\n */\nexport class OPTICS {\n    /**\n     * **O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure.\n     * @constructor\n     * @memberof module:clustering\n     * @alias OPTICS\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - the data.\n     * @param {Number} epsilon - the minimum distance which defines whether a point is a neighbor or not.\n     * @param {Number} min_points - the minimum number of points which a point needs to create a cluster. (Should be higher than 1, else each point creates a cluster.)\n     * @param {Function} [metric = euclidean] - the distance metric which defines the distance between two points of the {@link matrix}.\n     * @returns {OPTICS}\n     * @see {@link https://www.dbs.ifi.lmu.de/Publikationen/Papers/OPTICS.pdf}\n     * @see {@link https://en.wikipedia.org/wiki/OPTICS_algorithm}\n     */\n    constructor(matrix, epsilon, min_points, metric = euclidean) {\n        this._matrix = matrix;\n        this._epsilon = epsilon;\n        this._min_points = min_points;\n        this._metric = metric;\n\n        this._ordered_list = [];\n        this._clusters = [];\n        this._DB = new Array(matrix.shape[0]).fill();\n        this.init();\n        return this;\n    }\n\n    /**\n     * Computes the clustering.\n     */\n    init() {\n        const ordered_list = this._ordered_list;\n        const matrix = this._matrix;\n        const N = matrix.shape[0];\n        const DB = this._DB;\n        const clusters = this._clusters;\n        let cluster_index = this._cluster_index = 0;\n\n        for (let i = 0; i < N; ++i) {\n            DB[i] = {\n                \"element\": matrix.row(i),\n                \"index\": i,\n                \"reachability_distance\": undefined,\n                \"processed\": false,\n            }\n        }\n        for (const p of DB) {\n            if (p.processed) continue;\n            p.neighbors = this._get_neighbors(p);\n            p.processed = true;\n            clusters.push([p.index])\n            cluster_index = clusters.length - 1;\n            ordered_list.push(p);\n            if (this._core_distance(p) != undefined) {\n                const seeds = new Heap(null, d => d.reachability_distance, \"min\")\n                this._update(p, seeds);\n                this._expand_cluster(seeds, clusters[cluster_index]);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Array} An array consisting of the {@link epsilon}-neighborhood of {@link p}.\n     */\n    _get_neighbors(p) {\n        if (\"neighbors\" in p) return p.neighbors;\n        const DB = this._DB;\n        const metric = this._metric;\n        const epsilon = this._epsilon;\n        const neighbors = [];\n        for (const q of DB) {\n            if (q.index == p.index) continue;\n            if (metric(p.element, q.element) < epsilon) {\n                neighbors.push(q);\n            }\n        }\n        return neighbors;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Number} The distance to the {@link min_points}-th nearest point of {@link p}, or undefined if the {@link epsilon}-neighborhood has fewer elements than {@link min_points}.\n     */\n    _core_distance(p) {\n        const min_points = this._min_points;\n        const metric = this._metric;\n        if (p.neighbors && p.neighbors.length <= min_points) {\n            return undefined;\n        }\n        return metric(p.element, p.neighbors[min_points].element);\n    }\n\n    /**\n     * Updates the reachability distance of the points.\n     * @private\n     * @param {Object} p \n     * @param {Heap} seeds \n     */\n    _update(p, seeds) {\n        const metric = this._metric;\n        const core_distance = this._core_distance(p);\n        const neighbors = this._get_neighbors(p);//p.neighbors;\n        for (const q of neighbors) {\n            if (q.processed) continue;\n            const new_reachability_distance = Math.max(core_distance, metric(p.element, q.element));\n            //if (q.reachability_distance == undefined) { // q is not in seeds\n            if (seeds.raw_data().findIndex(d => d.element == q) < 0) {\n                q.reachability_distance = new_reachability_distance;\n                seeds.push(q);\n            } else { // q is in seeds\n                if (new_reachability_distance < q.reachability_distance) {\n                    q.reachability_distance = new_reachability_distance;\n                    seeds = Heap.heapify(seeds.data(), d => d.reachability_distance, \"min\"); // seeds change key =/\n                }\n            }\n        }\n    }\n\n    /**\n     * Expands the {@link cluster} with points in {@link seeds}.\n     * @private\n     * @param {Heap} seeds \n     * @param {Array} cluster \n     */\n    _expand_cluster(seeds, cluster) {\n        const ordered_list = this._ordered_list;\n        while (!seeds.empty) {\n            const q = seeds.pop().element;\n            q.neighbors = this._get_neighbors(q);\n            q.processed = true;\n            cluster.push(q.index);\n            ordered_list.push(q);\n            if (this._core_distance(q) != undefined) {\n                this._update(q, seeds);\n                this._expand_cluster(seeds, cluster);\n            }\n        }\n    }\n\n    /**\n     * Returns an array of clusters.\n     * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters() {\n        const clusters = [];\n        const outliers = [];\n        const min_points = this._min_points;\n        for (const cluster of this._clusters) {\n            if (cluster.length < min_points) {\n                outliers.push(...cluster);\n            } else {\n                clusters.push(cluster);\n            }\n        }\n        clusters.push(outliers);\n        return clusters;\n    }\n\n    /**\n     * @returns {Array} Returns an array, where the ith entry defines the cluster affirmation of the ith point of {@link matrix}. (-1 stands for outlier)\n     */\n    get_cluster_affirmation() {\n        const N = this._matrix.shape[0];\n        const result = new Array(N).fill();\n        const clusters = this.get_clusters();\n        for (let i = 0, n = clusters.length; i < n; ++i) {\n            const cluster = clusters[i]\n            for (const index of cluster) {\n                result[index] = (i < n - 1) ? i : -1;\n            }\n        }\n        return result;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA, MDS } from \"./index.js\";\nimport { distance_matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias SAMMON\n * @extends DR\n */\nexport class SAMMON extends DR {\n    /**\n     * SAMMON's Mapping\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias SAMMON\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {\"PCA\"|\"MDS\"|\"random\"} [parameters.init = \"random\"] - Either \"PCA\" or \"MDS\", with which SAMMON initialiates the projection. With \"random\" a random matrix gets used as starting point.\n     * @param {Object} [parameters.init_parameters] - Parameters for the {@link init}-DR method.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {SAMMON}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { magic: 0.1, d: 2, metric: euclidean, seed: 1212, init_DR: \"random\", init_parameters: {} }, parameters);\n        return this;\n    }\n\n    /**\n     * initializes the projection.\n     * @private\n     */\n    init() {\n        const N = this.X.shape[0];\n        const { d, metric, init_DR: init_DR, init_parameters: DR_parameters } = this._parameters;\n        if (init_DR === \"random\") {\n            const randomizer = this._randomizer;\n            this.Y = new Matrix(N, d, () => randomizer.random);\n        } else if ([\"PCA\", \"MDS\"].includes(init_DR)) {\n            this.Y = Matrix.from(init_DR == \"PCA\" ? PCA.transform(this.X, DR_parameters) : MDS.transform(this.X, DR_parameters));\n        } else {\n            throw new Error('init_DR needs to be either \"random\" or a DR method!')\n        }\n        this.distance_matrix = metric == \"precomputed\" ? Matrix.from(this.X) : distance_matrix(this.X, metric);\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Matrix|Array} - The projection of {@link X}.\n     */\n    transform(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n        }\n        return this.projection;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {Number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Generator} - A generator yielding the intermediate steps of the projection of {@link X}.\n     */\n    *generator(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n            yield this.projection;\n        }\n\n        return this.projection;\n    }\n\n    _step() {\n        const MAGIC = this.parameter(\"magic\");\n        const D = this.distance_matrix;\n        const N = this.X.shape[0];\n        const { d, metric } = this._parameters;\n        let Y = this.Y;\n\n        let G = new Matrix(N, d, 0);\n\n        let sum = new Float64Array(d);\n        for (let i = 0; i < N; ++i) {\n            let e1 = new Float64Array(d);\n            let e2 = new Float64Array(d);\n            const Yi = Y.row(i);\n            for (let j = 0; j < N; ++j) {\n                if (i === j) continue;\n                const Yj = Y.row(j);\n                const delta = new Float64Array(d);\n                for (let k = 0; k < d; ++k) {\n                    delta[k] = Yi[k] - Yj[k];\n                }\n                const dY = metric(Yi, Yj);\n                const dX = D.entry(i, j);\n                const dq = dX - dY;\n                const dr = Math.max(dX * dY, 1e-2);\n                for (let k = 0; k < d; ++k) {\n                    e1[k] += (delta[k] * dq) / dr;\n                    e2[k] += (dq - (Math.pow(delta[k], 2) * (1 + dq / dY)) / dY) / dr;\n                }\n            }\n            for (let k = 0; k < d; ++k) {\n                const val = Y.entry(i, k) + ((MAGIC * e1[k]) / Math.abs(e2[k]) || 0);\n                G.set_entry(i, k, val);\n                sum[k] += val;\n            }\n        }\n        for (let k = 0; k < d; ++k) {\n            sum[k] /= N;\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let k = 0; k < d; ++k) {\n                Y.set_entry(i, k, G.entry(i, k) - sum[k]);\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix, linspace, norm } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA } from \"./index.js\";\n\nexport class SQDMDS extends DR {\n    /**\n     * SQuadMDS: a lean Stochastic Quartet MDS improving global structure preservation in neighbor embedding like t-SNE and UMAP.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @param {Matrix|Number[][]} X\n     * @param {Object} [parameters]\n     * @param {Number} [parameters.d=2]\n     * @param {Function} [parameters.metric = euclidean]\n     * @param {Number} [parameters.decay_start = 0.1] - Percentage of iterations using exaggeration phase. If random init: it is recommended to start the decay later to give the time for the global config to adjust with big steps.\n     * @param {Number} [parameters.decay_cte = 0.34] - Controls the decay of the learning parameter.\n     * @param {Object} [parameters.init_DR]\n     * @returns {SQDMDS}\n     * @see {@link https://arxiv.org/pdf/2202.12087.pdf}\n     */\n    constructor(X, parameters) {\n        super(\n            X,\n            {\n                d: 2,\n                metric: euclidean,\n                seed: 1212,\n                decay_start: 0.1,\n                decay_cte: 0.34, // 0.34\n                init_DR: {type: \"random\"}\n            },\n            parameters\n        );\n\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    init() {\n        const N = this._N;\n        const d = this.parameter(\"d\");\n\n        // initialize helpers.\n        this._add = this.__add(d);\n        this._sub_div = this.__sub_div(d);\n        this._minus = this.__minus(d);\n        this._mult = this.__mult(d);\n        this._LR_init = Math.max(2, 0.005 * N);\n        this._LR = this._LR_init;\n        this._offset = -Math.exp(-1 / this.parameter(\"decay_cte\"));\n        this._momentums = new Matrix(N, d, 0);\n        this._grads = new Matrix(N, d, 0);\n        this._indices = linspace(0, N - 1);\n        // initialize projection.\n        const R = this._randomizer;\n        this.Y = new Matrix(N, d, () => R.random - 0.5);\n\n        // preparing metric for optimization.\n        const this_metric = this.parameter(\"metric\");\n        if (this_metric === \"precomputed\") {\n            this._HD_metric = function (i, j, X) {\n                return X.entry(i, j);\n            };\n            this._HD_metric_exaggeration = function (i, j, X) {\n                return Math.pow(X.entry(i, j), 2);\n            };\n        } else {\n            this._HD_metric = function (i, j, X) {\n                return this_metric(X.row(i), X.row(j));\n            };\n            if (this_metric == euclidean) {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return euclidean_squared(X.row(i), X.row(j));\n                };\n            } else {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return Math.pow(this_metric(X.row(i), X.row(j)), 2);\n                };\n            }\n        }\n        return;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {Number} [iterations=500] - Number of iterations.\n     * @returns {Matrix|Number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n        }\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Number[][]} the intermediate steps of the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Performs an optimization step.\n     * @private\n     * @param {Number} i - Acutal iteration.\n     * @param {Number} iterations - Number of iterations.\n     */\n    _step(i, iterations) {\n        const decay_start = this._decay_start;\n        if (i > decay_start) {\n            const decay_cte = this.parameter(\"decay_cte\");\n            const offset = this._offset;\n            const ratio = (i - decay_start) / (iterations - decay_start);\n            this._LR = this._LR_init * (Math.exp(-(ratio * ratio) / decay_cte) + offset);\n            this._distance_exaggeration = false;\n        } else {\n            this._distance_exaggeration = true;\n        }\n        this._nestrov_iteration(this._distance_exaggeration);\n    }\n\n    /**\n     * Creates quartets of non overlapping indices.\n     * @private\n     * @returns {Number[][]}\n     */\n    __quartets() {\n        const N = this._N;\n        const max_N = N - (N % 4);\n        const R = this._randomizer;\n        const shuffled_indices = R.choice(this._indices, max_N);\n        const result = [];\n        for (let i = 0; i < max_N; i += 4) {\n            result.push(Uint32Array.of(shuffled_indices[i], shuffled_indices[i + 1], shuffled_indices[i + 2], shuffled_indices[i + 3]));\n        }\n        return result;\n    }\n\n    /**\n     * Computes and applies gradients, and updates momentum.\n     * @private\n     * @param {Boolean} distance_exaggeration\n     */\n    _nestrov_iteration(distance_exaggeration) {\n        const momentums = this._momentums.mult(0.99, { inline: true });\n        const LR = this._LR;\n        const grads = this._fill_MDS_grads(this.Y.add(momentums), this._grads, distance_exaggeration);\n        const [n, d] = momentums.shape;\n        for (let i = 0; i < n; ++i) {\n            const g_i = grads.row(i);\n            const g_i_norm = norm(g_i);\n            if (g_i_norm == 0) continue;\n            const mul = LR / g_i_norm;\n            const m_i = momentums.row(i);\n            for (let j = 0; j < d; ++j) {\n                m_i[j] -= mul * g_i[j];\n            }\n        } // momentums -= (LR / norm) * grads\n        this.Y.add(momentums, { inline: true });\n    }\n\n    /**\n     * Computes the gradients.\n     * @param {Matrix} Y - The Projection.\n     * @param {Matrix} grads - The gradients.\n     * @param {Boolean} [exaggeration = false] - Whether or not to use early exaggeration.\n     * @param {Boolean} [zero_grad = true] - Whether or not to reset the gradient in the beginning.\n     * @returns {Matrix} the gradients.\n     */\n    _fill_MDS_grads(Y, grads, exaggeration = false, zero_grad = true) {\n        if (zero_grad) {\n            // compute new gradients\n            grads.values.fill(0);\n        }\n        const add = this._add;\n        const X = this.X;\n        let HD_metric;\n        if (exaggeration == true) {\n            HD_metric = this._HD_metric_exaggeration;\n        } else {\n            HD_metric = this._HD_metric;\n        }\n\n        const D_quartet = new Float64Array(6);\n        const quartets = this.__quartets();\n        for (const [i, j, k, l] of quartets) {\n            // compute quartet's HD distances.\n            D_quartet[0] = HD_metric(i, j, X);\n            D_quartet[1] = HD_metric(i, k, X);\n            D_quartet[2] = HD_metric(i, l, X);\n            D_quartet[3] = HD_metric(j, k, X);\n            D_quartet[4] = HD_metric(j, l, X);\n            D_quartet[5] = HD_metric(k, l, X);\n\n            const D_quartet_sum = neumair_sum(D_quartet);\n\n            if (D_quartet_sum > 0) {\n                for (let i = 0; i < 6; ++i) {\n                    D_quartet[i] /= D_quartet_sum;\n                    D_quartet[i] += 1e-11;\n                }\n            }\n            const [gi, gj, gk, gl] = this._compute_quartet_grads(Y, [i, j, k, l], D_quartet);\n\n            // add is inline, row acces the matrix\n            add(grads.row(i), gi);\n            add(grads.row(j), gj);\n            add(grads.row(k), gk);\n            add(grads.row(l), gl);\n        }\n        return grads;\n    }\n\n    /**\n     * Quartet gradients for a projection.\n     * @private\n     * @param {Matrix} Y - The acutal projection.\n     * @param {Number[]} quartet - The indices of the quartet.\n     * @param {Number[]} D_hd - The high-dimensional distances of the quartet.\n     * @returns {Number[][]} the gradients for the quartet.\n     */\n    _compute_quartet_grads(Y, quartet, [p_ab, p_ac, p_ad, p_bc, p_bd, p_cd]) {\n        const [a, b, c, d] = quartet.map((index) => Y.row(index));\n        // LD distances, add a small number just in case\n        const d_ab = euclidean(a, b) + 1e-12;\n        const d_ac = euclidean(a, c) + 1e-12;\n        const d_ad = euclidean(a, d) + 1e-12;\n        const d_bc = euclidean(b, c) + 1e-12;\n        const d_bd = euclidean(b, d) + 1e-12;\n        const d_cd = euclidean(c, d) + 1e-12;\n        const sum_LD_dist = neumair_sum([d_ab, d_ac, d_ad, d_bc, d_bd, d_cd]);\n\n        // for each element of the sum: use the same gradient function and just permute the points given in input.\n        const [gA1, gB1, gC1, gD1] = this._ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist);\n        const [gA2, gC2, gB2, gD2] = this._ABCD_grads(a, c, b, d, d_ac, d_ab, d_ad, d_bc, d_cd, d_bd, p_ac, sum_LD_dist);\n        const [gA3, gD3, gC3, gB3] = this._ABCD_grads(a, d, c, b, d_ad, d_ac, d_ab, d_cd, d_bd, d_bc, p_ad, sum_LD_dist);\n        const [gB4, gC4, gA4, gD4] = this._ABCD_grads(b, c, a, d, d_bc, d_ab, d_bd, d_ac, d_cd, d_ad, p_bc, sum_LD_dist);\n        const [gB5, gD5, gA5, gC5] = this._ABCD_grads(b, d, a, c, d_bd, d_ab, d_bc, d_ad, d_cd, d_ac, p_bd, sum_LD_dist);\n        const [gC6, gD6, gA6, gB6] = this._ABCD_grads(c, d, a, b, d_cd, d_ac, d_bc, d_ad, d_bd, d_ab, p_cd, sum_LD_dist);\n\n        const add = this._add;\n        const gA = add(gA1, gA2, gA3, gA4, gA5, gA6);\n        const gB = add(gB1, gB2, gB3, gB4, gB5, gB6);\n        const gC = add(gC1, gC2, gC3, gC4, gC5, gC6);\n        const gD = add(gD1, gD2, gD3, gD4, gD5, gD6);\n\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Gradients for one element of the loss function's sum.\n     * @private\n     */\n    _ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist) {\n        const ratio = d_ab / sum_LD_dist;\n        const twice_ratio = 2 * ((p_ab - ratio) / sum_LD_dist);\n        const minus = this._minus;\n        const add = this._add;\n        const mult = this._mult;\n        const sub_div = this._sub_div;\n        // no side effects because sub_div creates new arrays, and the inline functions work on this new created arrays.\n        const gA = mult(minus(mult(add(sub_div(a, b, d_ab), sub_div(a, c, d_ac), sub_div(a, d, d_ad)), ratio), sub_div(a, b, d_ab)), twice_ratio);\n        const gB = mult(minus(mult(add(sub_div(b, a, d_ab), sub_div(b, c, d_bc), sub_div(b, d, d_bd)), ratio), sub_div(b, a, d_ab)), twice_ratio);\n        const gC = mult(add(sub_div(c, a, d_ac), sub_div(c, b, d_bc), sub_div(c, d, d_cd)), ratio * twice_ratio);\n        const gD = mult(add(sub_div(d, a, d_ad), sub_div(d, b, d_bd), sub_div(d, c, d_cd)), ratio * twice_ratio);\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Inline!\n     */\n    __minus(d) {\n        return (a, b) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] -= b[i];\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __add(d) {\n        return (...summands) => {\n            const n = summands.length;\n            const s1 = summands[0];\n            for (let j = 1; j < n; ++j) {\n                const summand = summands[j];\n                for (let i = 0; i < d; ++i) {\n                    s1[i] += summand[i];\n                }\n            }\n            return s1;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __mult(d) {\n        return (a, v) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] *= v;\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Creates a new array <code>(x - y) / div</code>\n     */\n    __sub_div(d) {\n        return (x, y, div) => {\n            return Float64Array.from({ length: d }, (_, i) => (x[i] - y[i]) / div);\n        };\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TSNE\n * @extends DR\n */\nexport class TSNE extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TSNE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.perplexity = 50] - perplexity.\n     * @param {Number} [parameters.epsilon = 10] - learning parameter.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TSNE}\n     */\n    constructor(X, parameters) {\n        super(X, { perplexity: 50, epsilon: 10, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._iter = 0;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => this._randomizer.random);\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TSNE}\n     */\n    init() {\n        // init\n        const Htarget = Math.log(this.parameter(\"perplexity\"));\n        const N = this._N;\n        const D = this._D;\n        const {metric} = this._parameters;\n        const X = this.X;\n        let Delta;\n        if (metric ==\"precomputed\") {\n            Delta = druid.Matrix.from(X);\n        } else {\n            Delta = new Matrix(N, N);\n            for (let i = 0; i < N; ++i) {\n                const X_i = X.row(i);\n                for (let j = i + 1; j < N; ++j) {\n                    const distance = metric(X_i, X.row(j));\n                    Delta.set_entry(i, j, distance);\n                    Delta.set_entry(j, i, distance);\n                }\n            }\n        }\n\n        const P = new Matrix(N, N, \"zeros\");\n\n        this._ystep = new Matrix(N, D, \"zeros\");\n        this._gains = new Matrix(N, D, 1);\n\n        // search for fitting sigma\n        let prow = new Float64Array(N)\n        const tol = 1e-4;\n        const maxtries = 50;\n        for (let i = 0; i < N; ++i) {\n            let betamin = -Infinity;\n            let betamax = Infinity;\n            let beta = 1;\n            let done = false;\n\n            let num = 0;\n            while (!done) {\n                let psum = 0;\n                for (let j = 0; j < N; ++j) {\n                    let pj = Math.exp(-Delta.entry(i, j) * beta);\n                    if (i === j) pj = 0;\n                    prow[j] = pj;\n                    psum += pj;\n                }\n                let Hhere = 0;\n                for (let j = 0; j < N; ++j) {\n                    let pj = psum === 0 ? 0 : prow[j] / psum;\n                    prow[j] = pj;\n                    if (pj > 1e-7) {\n                        Hhere -= pj * Math.log(pj);\n                    }\n                }\n                if (Hhere > Htarget) {\n                    betamin = beta;\n                    beta = betamax === Infinity ? beta * 2 : (beta + betamax) / 2;\n                } else {\n                    betamax = beta;\n                    beta = betamin === -Infinity ? beta / 2 : (beta + betamin) / 2;\n                }\n                ++num;\n                if (Math.abs(Hhere - Htarget) < tol) done = true;\n                if (num >= maxtries) done = true;\n            }\n\n            for (let j = 0; j < N; ++j) {\n                P.set_entry(i, j, prow[j]);\n            }\n        }\n\n        //compute probabilities\n        const Pout = new Matrix(N, N, \"zeros\");\n        const N2 = N * 2;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i; j < N; ++j) {\n                const p = Math.max((P.entry(i, j) + P.entry(j, i)) / N2, 1e-100);\n                Pout.set_entry(i, j, p);\n                Pout.set_entry(j, i, p);\n            }\n        }\n        this._P = Pout;\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - Number of iterations.\n     * @returns {Matrix|Number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=500] - number of iterations.\n     * @yields {Matrix|Number[][]} - the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * performs a optimization step\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const P = this._P;\n        const ystep = this._ystep;\n        const gains = this._gains;\n        const N = this._N;\n        const { d: dim, epsilon} = this._parameters;\n        let Y = this.Y;\n\n        //calc cost gradient;\n        const pmul = iter < 100 ? 4 : 1;\n\n        // compute Q dist (unnormalized)\n        const Qu = new Matrix(N, N, \"zeros\");\n        let qsum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dsum = 0;\n                for (let d = 0; d < dim; ++d) {\n                    const dhere = Y.entry(i, d) - Y.entry(j, d);\n                    dsum += dhere * dhere;\n                }\n                const qu = 1 / (1 + dsum);\n                Qu.set_entry(i, j, qu);\n                Qu.set_entry(j, i, qu);\n                qsum += 2 * qu;\n            }\n        }\n\n        // normalize Q dist\n        const Q = new Matrix(N, N, 0);\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                const val = Math.max(Qu.entry(i, j) / qsum, 1e-100);\n                Q.set_entry(i, j, val);\n                Q.set_entry(j, i, val);\n            }\n        }\n\n        const grad = new Matrix(N, dim, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            for (let j = 0; j < N; ++j) {\n                const premult = 4 * (pmul * P.entry(i, j) - Q.entry(i, j)) * Qu.entry(i, j);\n                for (let d = 0; d < dim; ++d) {\n                    grad.set_entry(i, d, grad.entry(i, d) + premult * (Y.entry(i, d) - Y.entry(j, d)));\n                }\n            }\n        }\n\n        // perform gradient step\n        let ymean = new Float64Array(dim);\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const gid = grad.entry(i, d);\n                const sid = ystep.entry(i, d);\n                const gainid = gains.entry(i, d);\n\n                let newgain = Math.sign(gid) === Math.sign(sid) ? gainid * 0.8 : gainid + 0.2;\n                if (newgain < 0.01) newgain = 0.01;\n                gains.set_entry(i, d, newgain);\n\n                const momval = iter < 250 ? 0.5 : 0.8;\n                const newsid = momval * sid - epsilon * newgain * gid;\n                ystep.set_entry(i, d, newsid);\n\n                Y.set_entry(i, d, Y.entry(i, d) + newsid);\n                ymean[d] += Y.entry(i, d);\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < 2; ++d) {\n                Y.set_entry(i, d, Y.entry(i, d) - ymean[d] / N);\n            }\n        }\n\n        return this.Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { DisjointSet } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias TopoMap\n * @memberof module:dimensionality_reduction\n * @extends DR\n */\nexport class TopoMap extends DR {\n    /**\n     * TopoMap: A 0-dimensional Homology Preserving Projection of High-Dimensional Data.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TopoMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TopoMap}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._distance_matrix = new Matrix(this._N, this._N, 0);\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    __lazy_distance_matrix(i, j, metric) {\n        const D = this._distance_matrix;\n        const X = this.X;\n        const D_ij = D.entry(i, j);\n        if (D_ij === 0) {\n            let dist = metric(X.row(i), X.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n            return dist;\n        }\n        return D_ij;\n    }\n\n    /**\n     * Computes the minimum spanning tree, using a given metric\n     * @private\n     * @param {Function} metric\n     * @see {@link https://en.wikipedia.org/wiki/Kruskal%27s_algorithm}\n     */\n    _make_minimum_spanning_tree(metric = euclidean) {\n        const N = this._N;\n        const X = [...this.X];\n\n        let disjoint_set = new DisjointSet(X);\n        const F = [];\n        let E = [];\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                E.push([i, j, this.__lazy_distance_matrix(i, j, metric)]);\n            }\n        }\n        E = E.sort((a, b) => a[2] - b[2]);\n\n        for (const [u, v, w] of E) {\n            const set_u = disjoint_set.find(X[u]);\n            const set_v = disjoint_set.find(X[v]);\n            if (set_u !== set_v) {\n                F.push([u, v, w]);\n                disjoint_set.union(set_u, set_v);\n            }\n        }\n\n        return F.sort((a, b) => a[2] - b[2]);\n    }\n\n    /**\n     * initializes TopoMap. Sets all projcted points to zero, and computes a minimum spanning tree.\n     */\n    init() {\n        const { metric} = this._parameters\n        this.Y = new Matrix(this._N, 2, 0);\n        this._Emst = this._make_minimum_spanning_tree(metric);\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Returns true if Point C is left of line AB.\n     * @private\n     * @param {Array} PointA - Point A of line AB\n     * @param {Array} PointB - Point B of line AB\n     * @param {Array} PointC - Point C\n     * @returns {Boolean}\n     */\n    __hull_cross([ax, ay], [bx, by], [sx, sy]) {\n        return (bx - ax) * (sy - ay) - (by - ay) * (sx - ax) <= 0;\n    }\n\n    /**\n     * Computes the convex hull of the set of Points S\n     * @private\n     * @param {Array} S - Set of Points.\n     * @see {@link https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript}\n     * @returns {Array} convex hull of S. Starts at the bottom-most point and continues counter-clockwise.\n     */\n    __hull(S) {\n        const points = S.sort(([x1, y1], [x2, y2]) => y1 - y2 || x1 - x2);\n        const N = points.length;\n        if (N <= 2) return points;\n\n        const lower = [];\n        for (let i = 0; i < N; ++i) {\n            while (lower.length >= 2 && this.__hull_cross(lower[lower.length - 2], lower[lower.length - 1], points[i])) {\n                lower.pop();\n            }\n            lower.push(points[i]);\n        }\n        const upper = [];\n        for (let i = N - 1; i >= 0; --i) {\n            while (upper.length >= 2 && this.__hull_cross(upper[upper.length - 2], upper[upper.length - 1], points[i])) {\n                upper.pop();\n            }\n            upper.push(points[i]);\n        }\n        upper.pop();\n        lower.pop();\n        return lower.concat(upper);\n    }\n\n    /**\n     * Finds the angle to rotate Point A and B to lie on a line parallel to the x-axis.\n     * @private\n     * @param {Array} PointA\n     * @param {Array} PointB\n     * @return {Object} Object containing the sinus- and cosinus-values for a rotation.\n     */\n    __findAngle([p1x, p1y], [p2x, p2y]) {\n        const n = euclidean([p1x, p1y], [p2x, p2y]);\n        if (n === 0)\n            return {\n                sin: 0,\n                cos: 1,\n            };\n        const vec = [(p2x - p1x) / n, (p2y - p1y) / n];\n        const cos = vec[0];\n        let sin = Math.sqrt(1 - cos * cos);\n        sin = vec[1] >= 0 ? -sin : sin;\n        return {\n            sin: sin,\n            cos: cos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Array} hull\n     * @param {Array} p\n     * @param {Bool} topEdge\n     */\n    __align_hull(hull, p, topEdge) {\n        let v = -1;\n        let d2;\n        for (let i = 0; i < hull.length; ++i) {\n            const d = euclidean(hull[i], p);\n            if (v === -1) {\n                d2 = d;\n                v = i;\n            } else {\n                if (d2 > d) {\n                    d2 = d;\n                    v = i;\n                }\n            }\n        }\n\n        let v1;\n        let v2;\n        if (topEdge) {\n            v1 = hull[v];\n            v2 = hull[(v + 1) % hull.length];\n        } else {\n            if (v == 0) v = hull.length - 1;\n            v1 = hull[v];\n            v2 = hull[(v - 1) % hull.length];\n        }\n\n        const transformation = {\n            tx: -hull[v][0],\n            ty: -hull[v][1],\n        };\n\n        if (hull.length >= 2) {\n            const { sin, cos } = this.__findAngle(v1, v2);\n            transformation.sin = sin;\n            transformation.cos = cos;\n        } else {\n            transformation.sin = 0;\n            transformation.cos = 1;\n        }\n\n        return transformation;\n    }\n\n    /**\n     * @private\n     * @param {Array} Point - The point which should get transformed.\n     * @param {Object} Transformation - contains the values for translation and rotation.\n     */\n    __transform([px, py], { tx, ty, sin, cos }) {\n        let x = px + tx;\n        let y = py + ty;\n        let xx = x * cos - y * sin;\n        let yy = x * sin + y * cos;\n        return [xx, yy];\n    }\n\n    /**\n     * Calls {@link __transform} for each point in Set C\n     * @private\n     * @param {Array} C - Set of points.\n     * @param {Object} t - Transform object.\n     * @param {Number} yOffset - value to offset set C.\n     */\n    __transform_component(C, t, yOffset) {\n        const N = C.length;\n        for (let i = 0; i < N; ++i) {\n            const c = C[i];\n            const [cx, cy] = this.__transform(c, t);\n            c[0] = cx;\n            c[1] = cy + yOffset;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Array} u - point u\n     * @param {Array} v - point v\n     * @param {Number} w - edge weight w\n     */\n    __align_components(u, v, w) {\n        const points_u = [...u.__disjoint_set.children];\n        const points_v = [...v.__disjoint_set.children];\n\n        const hull_u = this.__hull(points_u);\n        const hull_v = this.__hull(points_v);\n\n        const t_u = this.__align_hull(hull_u, u, false);\n        const t_v = this.__align_hull(hull_v, v, true);\n\n        this.__transform_component(points_u, t_u, 0);\n        this.__transform_component(points_v, t_v, w);\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality 2.\n     */\n    transform() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n        }\n        return this.projection;\n    }\n\n    *generator() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n}\n","import { Matrix, linspace } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { PCA } from \"./PCA.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TriMap\n * @extends DR\n */\nexport class TriMap extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TriMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.weight_adj = 500] - scaling factor.\n     * @param {Number} [parameters.c = 5] - number of triplets multiplier.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Number} [parameters.tol = 1e-8] -\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TriMap}\n     * @see {@link https://arxiv.org/pdf/1910.00204v1.pdf}\n     * @see {@link https://github.com/eamid/trimap}\n     */\n    constructor(X, parameters) {\n        super(X, { weight_adj: 500, c: 5, d: 2, metric: euclidean, tol: 1e-8, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} [pca = null] - Initial Embedding (if null then PCA gets used).\n     * @param {KNN} [knn = null] - KNN Object (if null then BallTree gets used).\n     */\n    init(pca = null, knn = null) {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric, c } = this._parameters;\n        this.n_inliers = 2 * c;\n        this.n_outliers = 1 * c;\n        this.n_random = 1 * c;\n        this.Y = pca || new PCA(X, d).transform();\n        this.knn = knn || new BallTree(X.to2dArray, metric);\n        const { triplets, weights } = this._generate_triplets(this.n_inliers, this.n_outliers, this.n_random);\n        this.triplets = triplets;\n        this.weights = weights;\n        this.lr = (1000 * N) / triplets.shape[0];\n        this.C = Infinity;\n        this.vel = new Matrix(N, d, 0);\n        this.gain = new Matrix(N, d, 1);\n        return this;\n    }\n\n    /**\n     * Generates {@link n_inliers} x {@link n_outliers} x {@link n_random} triplets.\n     * @param {Number} n_inliers\n     * @param {Number} n_outliers\n     * @param {Number} n_random\n     */\n    _generate_triplets(n_inliers, n_outliers, n_random) {\n        const { metric, weight_adj } = this._parameters;\n        const X = this.X;\n        const N = X.shape[0];\n        const knn = this.knn;\n        const n_extra = Math.min(n_inliers + 20, N);\n        const nbrs = new Matrix(N, n_extra);\n        const knn_distances = new Matrix(N, n_extra);\n        for (let i = 0; i < N; ++i) {\n            knn.search(X.row(i), n_extra + 1)\n                .raw_data()\n                .filter((d) => d.value != 0)\n                .sort((a, b) => a.value - b.value)\n                .forEach((d, j) => {\n                    nbrs.set_entry(i, j, d.element.index);\n                    knn_distances.set_entry(i, j, d.value);\n                });\n        }\n        // scale parameter\n        const sig = new Float64Array(N);\n        for (let i = 0; i < N; ++i) {\n            sig[i] = Math.max((knn_distances.entry(i, 3) + knn_distances.entry(i, 4) + knn_distances.entry(i, 5) + knn_distances.entry(i, 6)) / 4, 1e-10);\n        }\n\n        const P = this._find_p(knn_distances, sig, nbrs);\n\n        let triplets = this._sample_knn_triplets(P, nbrs, n_inliers, n_outliers);\n        let n_triplets = triplets.shape[0];\n        const outlier_distances = new Float64Array(n_triplets);\n        for (let i = 0; i < n_triplets; ++i) {\n            const j = triplets.entry(i, 0);\n            const k = triplets.entry(i, 2);\n            outlier_distances[i] = metric(X.row(j), X.row(k));\n        }\n        let weights = this._find_weights(triplets, P, nbrs, outlier_distances, sig);\n\n        if (n_random > 0) {\n            const { random_triplets, random_weights } = this._sample_random_triplets(X, n_random, sig);\n            triplets = triplets.concat(random_triplets, \"vertical\");\n            weights = Float64Array.from([...weights, ...random_weights]);\n        }\n        n_triplets = triplets.shape[0];\n        let max_weight = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            if (isNaN(weights[i])) {\n                weights[i] = 0;\n            }\n            if (max_weight < weights[i]) max_weight = weights[i];\n        }\n        let max_weight_2 = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight;\n            weights[i] += 0.0001;\n            weights[i] = Math.log(1 + weight_adj * weights[i]);\n            if (max_weight_2 < weights[i]) max_weight_2 = weights[i];\n        }\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight_2;\n        }\n        return {\n            triplets: triplets,\n            weights: weights,\n        };\n    }\n\n    /**\n     * Calculates the similarity matrix P\n     * @private\n     * @param {Matrix} knn_distances - matrix of pairwise knn distances\n     * @param {Float64Array} sig - scaling factor for the distances\n     * @param {Matrix} nbrs - nearest neighbors\n     * @returns {Matrix} pairwise similarity matrix\n     */\n    _find_p(knn_distances, sig, nbrs) {\n        const [N, n_neighbors] = knn_distances.shape;\n        return new Matrix(N, n_neighbors, (i, j) => {\n            return Math.exp(-(knn_distances.entry(i, j) ** 2 / sig[i] / sig[nbrs.entry(i, j)]));\n        });\n    }\n\n    /**\n     * Sample nearest neighbors triplets based on the similarity values given in P.\n     * @private\n     * @param {Matrix} P - Matrix of pairwise similarities between each point and its neighbors given in matrix nbrs.\n     * @param {Matrix} nbrs - Nearest neighbors indices for each point. The similarity values are given in matrix {@link P}. Row i corresponds to the i-th point.\n     * @param {Number} n_inliers - Number of inlier points.\n     * @param {Number} n_outliers - Number of outlier points.\n     *\n     */\n    _sample_knn_triplets(P, nbrs, n_inliers, n_outliers) {\n        const N = nbrs.shape[0];\n        const triplets = new Matrix(N * n_inliers * n_outliers, 3);\n        for (let i = 0; i < N; ++i) {\n            let n_i = i * n_inliers * n_outliers;\n            const sort_indices = this.__argsort(P.row(i).map((d) => -d));\n            for (let j = 0; j < n_inliers; ++j) {\n                let n_j = j * n_outliers;\n                const sim = nbrs.entry(i, sort_indices[j]);\n                const samples = this._rejection_sample(n_outliers, N, sort_indices.slice(0, j + 1));\n                for (let k = 0; k < n_outliers; ++k) {\n                    const index = n_i + n_j + k;\n                    const out = samples[k];\n                    triplets.set_entry(index, 0, i);\n                    triplets.set_entry(index, 1, sim);\n                    triplets.set_entry(index, 2, out);\n                }\n            }\n        }\n        return triplets;\n    }\n\n    /**\n     * Should do the same as np.argsort()\n     * @private\n     * @param {Array} A\n     */\n    __argsort(A) {\n        return A.map((d, i) => {\n            return { d: d, i: i };\n        })\n            .sort((a, b) => a.d - b.d)\n            .map((d) => d.i);\n    }\n\n    /**\n     * Samples {@link n_samples} integers from a given interval [0, {@link max_int}] while rejection the values that are in the {@link rejects}.\n     * @private\n     * @param {*} n_samples\n     * @param {*} max_int\n     * @param {*} rejects\n     */\n    _rejection_sample(n_samples, max_int, rejects) {\n        const randomizer = this._randomizer;\n        const interval = linspace(0, max_int - 1).filter((d) => rejects.indexOf(d) < 0);\n        return randomizer.choice(interval, Math.min(n_samples, interval.length - 2));\n    }\n\n    /**\n     * Calculates the weights for the sampled nearest neighbors triplets\n     * @private\n     * @param {Matrix} triplets - Sampled Triplets.\n     * @param {Matrix} P - Pairwise similarity matrix.\n     * @param {Matrix} nbrs - nearest Neighbors\n     * @param {Float64Array} outlier_distances - Matrix of pairwise outlier distances\n     * @param {Float64Array} sig - scaling factor for the distances.\n     */\n    _find_weights(triplets, P, nbrs, outlier_distances, sig) {\n        const n_triplets = triplets.shape[0];\n        const weights = new Float64Array(n_triplets);\n        for (let t = 0; t < n_triplets; ++t) {\n            const i = triplets.entry(t, 0);\n            const sim = nbrs.row(i).indexOf(triplets.entry(t, 1));\n            const p_sim = P.entry(i, sim);\n            let p_out = Math.exp(-(outlier_distances[t] ** 2 / (sig[i] * sig[triplets.entry(t, 2)])));\n            if (p_out < 1e-20) p_out = 1e-20;\n            weights[t] = p_sim / p_out;\n        }\n        return weights;\n    }\n\n    /**\n     * Sample uniformly ranom triplets\n     * @private\n     * @param {Matrix} X - Data matrix.\n     * @param {Number} n_random - Number of random triplets per point\n     * @param {Float64Array} sig - Scaling factor for the distances\n     */\n    _sample_random_triplets(X, n_random, sig) {\n        const metric = this.parameter(\"metric\");\n        const randomizer = this._randomizer;\n        const N = X.shape[0];\n        const random_triplets = new Matrix(N * n_random, 3);\n        const random_weights = new Float64Array(N * n_random);\n        for (let i = 0; i < N; ++i) {\n            const n_i = i * n_random;\n            const indices = [...linspace(0, i - 1), ...linspace(i + 1, N - 1)];\n            for (let j = 0; j < n_random; ++j) {\n                let [sim, out] = randomizer.choice(indices, 2);\n                let p_sim = Math.exp(-(metric(X.row(i), X.row(sim)) ** 2 / (sig[i] * sig[sim])));\n                if (p_sim < 1e-20) p_sim = 1e-20;\n                let p_out = Math.exp(-(metric(X.row(i), X.row(out)) ** 2 / (sig[i] * sig[out])));\n                if (p_out < 1e-20) p_out = 1e-20;\n\n                if (p_sim < p_out) {\n                    [sim, out] = [out, sim];\n                    [p_sim, p_out] = [p_out, p_sim];\n                }\n                const index = n_i + j;\n                random_triplets.set_entry(index, 0, i);\n                random_triplets.set_entry(index, 1, sim);\n                random_triplets.set_entry(index, 2, out);\n                random_weights[index] = p_sim / p_out;\n            }\n        }\n        return {\n            random_triplets: random_triplets,\n            random_weights: random_weights,\n        };\n    }\n\n    /**\n     * Computes the gradient for updating the embedding.\n     * @param {Matrix} Y - The embedding\n     */\n    _grad(Y) {\n        const n_inliers = this.n_inliers;\n        const n_outliers = this.n_outliers;\n        const triplets = this.triplets;\n        const weights = this.weights;\n        const [N, dim] = Y.shape;\n        const n_triplets = triplets.shape[0];\n        const grad = new Matrix(N, dim, 0);\n        let y_ij = new Float64Array(dim);\n        let y_ik = new Float64Array(dim);\n        let d_ij = 1;\n        let d_ik = 1;\n        let n_viol = 0;\n        let loss = 0;\n        const n_knn_triplets = N * n_inliers * n_outliers;\n\n        for (let t = 0; t < n_triplets; ++t) {\n            const [i, j, k] = triplets.row(t);\n            // update y_ij, y_ik, d_ij, d_ik\n            if (t % n_outliers == 0 || t >= n_knn_triplets) {\n                d_ij = 1;\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_jd = Y.entry(j, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ij[d] = Y_id - Y_jd;\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ij += y_ij[d] ** 2;\n                    d_ik += y_ik[d] ** 2;\n                }\n                // update y_ik and d_ik only\n            } else {\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ik += y_ik[d] ** 2;\n                }\n            }\n\n            if (d_ij > d_ik) ++n_viol;\n            loss += weights[t] / (1 + d_ik / d_ij);\n            const w = (weights[t] / (d_ij + d_ik)) ** 2;\n            for (let d = 0; d < dim; ++d) {\n                const gs = y_ij[d] * d_ik * w;\n                const go = y_ik[d] * d_ij * w;\n                grad.set_entry(i, d, grad.entry(i, d) + gs - go);\n                grad.set_entry(j, d, grad.entry(j, d) - gs);\n                grad.set_entry(k, d, grad.entry(k, d) + go);\n            }\n        }\n        return { grad, loss, n_viol };\n    }\n\n    /**\n     *\n     * @param {Number} max_iteration\n     */\n    transform(max_iteration = 400) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n        }\n        return this.projection;\n    }\n\n    /**\n     * @param {Number} max_iteration\n     * @yields {Matrix}\n     * @returns {Matrix}\n     */\n    *generator(max_iteration = 800) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Does the iteration step.\n     * @private\n     * @param {Number} iter\n     */\n    _next(iter) {\n        const gamma = iter > 150 ? 0.5 : 0.3;\n        const old_C = this.C;\n        const vel = this.vel;\n        const Y = this.Y.add(vel.mult(gamma));\n        const { grad, loss, n_viol } = this._grad(Y);\n        this.C = loss;\n        this.Y = this._update_embedding(Y, iter, grad);\n        this.lr *= old_C > loss + this._parameters.tol ? 1.01 : 0.9;\n        return this.Y;\n    }\n\n    /**\n     * Updates the embedding.\n     * @private\n     * @param {Matrix} Y\n     * @param {Number} iter\n     * @param {Matrix} grad\n     */\n    _update_embedding(Y, iter, grad) {\n        const [N, dim] = Y.shape;\n        const gamma = iter > 150 ? 0.9 : 0.5; // moment parameter\n        const min_gain = 0.01;\n        const gain = this.gain;\n        const vel = this.vel;\n        const lr = this.lr;\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const new_gain = Math.sign(vel.entry(i, d)) != Math.sign(grad.entry(i, d)) ? gain.entry(i, d) + 0.2 : Math.max(gain.entry(i, d) * 0.8, min_gain);\n                gain.set_entry(i, d, new_gain);\n                vel.set_entry(i, d, gamma * vel.entry(i, d) - lr * gain.entry(i, d) * grad.entry(i, d));\n                Y.set_entry(i, d, Y.entry(i, d) + vel.entry(i, d));\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { linspace } from \"../matrix/index.js\";\nimport { powell } from \"../optimization/index.js\";\nimport { DR } from \"./DR.js\";\nimport { max } from \"../util/index.js\";\nimport { KNN } from \"../knn/index.js\";\n\n/**\n * @class\n * @alias UMAP\n * @extends DR\n */\nexport class UMAP extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias UMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Number} [parameters.n_neighbors = 15] - size of the local neighborhood.\n     * @param {Number} [parameters.local_connectivity = 1] - number of nearest neighbors connected in the local neighborhood.\n     * @param {Number} [parameters.min_dist = 1] - controls how tightly points get packed together.\n     * @param {Number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points in the high-dimensional space.\n     * @param {Number} [parameters._spread = 1] - The effective scale of embedded points. (In combination with {@link parameters.min_dist})\n     * @param {Number} [parameters._set_op_mix_ratio = 1] - Interpolate between union and intersection.\n     * @param {Number} [parameters._repulsion_strength = 1]  - Weighting applied to negative samples.\n     * @param {Number} [parameters._negative_sample_rate = 5] - The number of negative samples per positive sample.\n     * @param {Number} [parameters._n_epochs = 350] - The number of training epochs.\n     * @param {Number} [parameter._initial_alpha = 1] - The initial learning rate for the optimization.\n     * @param {Number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {UMAP}\n     */\n    constructor(X, parameters) {\n        super(X, { n_neighbors: 15, local_connectivity: 1, min_dist: 1, d: 2, metric: euclidean, seed: 1212, _spread: 1, _set_op_mix_ratio: 1, _repulsion_strength: 1, _negative_sample_rate: 5, _n_epochs: 350, _initial_alpha: 1 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        /* let n_neighbors = Math.min(this._N - 1, parameters.n_neighbors);\n        this.parameter(\"n_neighbors\", n_neighbors);\n        this.parameter(\"local_connectivity\", Math.min(this.parameter(\"local_connectivity\"), n_neighbors - 1)); */\n        if (this.parameter(\"n_neighbors\") > this._N) {\n            throw new Error(`Parameter n_neighbors (=${this.parameter(\"n_neighbors\")}) needs to be smaller than dataset size (N=${this._N})!`);\n        }\n        if (this.parameter(\"local_connectivity\") > this.parameter(\"n_neighbors\")) {\n            throw new Error(`Parameter local_connectivity (=${this.parameter(\"local_connectivity\")}) needs to be smaller than parameter n_neighbors (=${this.parameter(\"n_neighbors\")})`);\n        }\n        this._iter = 0;\n        const randomizer = this._randomizer;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => randomizer.random);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} spread\n     * @param {Number} min_dist\n     * @returns {Array}\n     */\n    _find_ab_params(spread, min_dist) {\n        const curve = (x, a, b) => 1 / (1 + a * Math.pow(x, 2 * b));\n        const xv = linspace(0, spread * 3, 300);\n        const yv = linspace(0, spread * 3, 300);\n\n        for (let i = 0, n = xv.length; i < n; ++i) {\n            const xv_i = xv[i];\n            yv[i] = xv_i < min_dist ? 1 : Math.exp(-(xv_i - min_dist) / spread);\n        }\n\n        const err = (p) => {\n            const error = linspace(1, 300).map((_, i) => yv[i] - curve(xv[i], p[0], p[1]));\n            return Math.sqrt(neumair_sum(error.map((e) => e * e)));\n        };\n\n        return powell(err, [1, 1]);\n    }\n\n    /**\n     * @private\n     * @param {Array<Array>} distances\n     * @param {Array<Number>} sigmas\n     * @param {Array<Number>} rhos\n     * @returns {Array}\n     */\n    _compute_membership_strengths(distances, sigmas, rhos) {\n        for (let i = 0, n = distances.length; i < n; ++i) {\n            for (let j = 0, m = distances[i].length; j < m; ++j) {\n                const v = distances[i][j].value - rhos[i];\n                distances[i][j].value = v > 0 ? Math.exp(-v / sigmas[i]) : 1;\n            }\n        }\n        return distances;\n    }\n\n    /**\n     * @private\n     * @param {KNN|BallTree} knn\n     * @param {Number} k\n     * @returns {Object}\n     */\n    _smooth_knn_dist(knn, k) {\n        const SMOOTH_K_TOLERANCE = 1e-5;\n        const MIN_K_DIST_SCALE = 1e-3;\n        const n_iter = 64;\n        const { local_connectivity, metric } = this._parameters;\n        const target = Math.log2(k);\n        const rhos = [];\n        const sigmas = [];\n        const X = this.X;\n        const N = X.shape[0];\n        //const distances = [...X].map(x_i => knn.search(x_i, k).raw_data().reverse());\n\n        const distances = [];\n        if (metric === \"precomputed\") {\n            for (let i = 0; i < N; ++i) {\n                distances.push(knn.search(i, k).reverse());\n            }\n        } else {\n            for (const x_i of X) {\n                distances.push(knn.search(x_i, k).raw_data().reverse());\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            let lo = 0;\n            let hi = Infinity;\n            let mid = 1;\n\n            const search_result = distances[i];\n            const non_zero_dist = search_result.filter((d) => d.value > 0);\n            const non_zero_dist_length = non_zero_dist.length;\n            if (non_zero_dist_length >= local_connectivity) {\n                const index = Math.floor(local_connectivity);\n                const interpolation = local_connectivity - index;\n                if (index > 0) {\n                    rhos.push(non_zero_dist[index - 1]);\n                    if (interpolation > SMOOTH_K_TOLERANCE) {\n                        rhos[i].value += interpolation * (non_zero_dist[index].value - non_zero_dist[index - 1]);\n                    }\n                } else {\n                    rhos[i].value = interpolation * non_zero_dist[0].value;\n                }\n            } else if (non_zero_dist_length > 0) {\n                rhos[i] = non_zero_dist[non_zero_dist_length - 1].value;\n            }\n            for (let x = 0; x < n_iter; ++x) {\n                let psum = 0;\n                for (let j = 0; j < k; ++j) {\n                    const d = search_result[j].value - rhos[i];\n                    psum += d > 0 ? Math.exp(-(d / mid)) : 1;\n                }\n                if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n                    break;\n                }\n                if (psum > target) {\n                    [hi, mid] = [mid, (lo + hi) / 2];\n                } else {\n                    if (hi === Infinity) {\n                        [lo, mid] = [mid, mid * 2];\n                    } else {\n                        [lo, mid] = [mid, (lo + hi) / 2];\n                    }\n                }\n            }\n            sigmas[i] = mid;\n\n            const mean_ithd = search_result.reduce((a, b) => a + b.value, 0) / search_result.length;\n            //let mean_d = null;\n            if (rhos[i] > 0) {\n                if (sigmas[i] < MIN_K_DIST_SCALE * mean_ithd) {\n                    sigmas[i] = MIN_K_DIST_SCALE * mean_ithd;\n                }\n            } else {\n                const mean_d = distances.reduce((acc, res) => acc + res.reduce((a, b) => a + b.value, 0) / res.length);\n                if (sigmas[i] > MIN_K_DIST_SCALE * mean_d) {\n                    sigmas[i] = MIN_K_DIST_SCALE * mean_d;\n                }\n            }\n        }\n        return {\n            distances: distances,\n            sigmas: sigmas,\n            rhos: rhos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Matrix} X\n     * @param {Number} n_neighbors\n     * @returns {Matrix}\n     */\n    _fuzzy_simplicial_set(X, n_neighbors) {\n        const N = X.shape[0];\n        const { metric, _set_op_mix_ratio } = this._parameters;\n        const knn = metric === \"precomputed\" ? new KNN(X, \"precomputed\") : new BallTree(X.to2dArray, metric);\n        let { distances, sigmas, rhos } = this._smooth_knn_dist(knn, n_neighbors);\n        distances = this._compute_membership_strengths(distances, sigmas, rhos);\n        const result = new Matrix(N, N, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            const distances_i = distances[i];\n            for (let j = 0; j < distances_i.length; ++j) {\n                result.set_entry(i, distances_i[j].element.index, distances_i[j].value);\n            }\n        }\n\n        const transposed_result = result.T;\n        const prod_matrix = result.mult(transposed_result);\n        return result\n            .add(transposed_result)\n            .sub(prod_matrix)\n            .mult(_set_op_mix_ratio)\n            .add(prod_matrix.mult(1 - _set_op_mix_ratio));\n    }\n\n    /**\n     * @private\n     * @param {Number} n_epochs\n     * @returns {Array}\n     */\n    _make_epochs_per_sample(n_epochs) {\n        const weights = this._weights;\n        const result = new Float32Array(weights.length).fill(-1);\n        const weights_max = max(weights);\n        const n_samples = weights.map((w) => n_epochs * (w / weights_max));\n        for (let i = 0; i < result.length; ++i) if (n_samples[i] > 0) result[i] = Math.round(n_epochs / n_samples[i]);\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Matrix} graph\n     * @returns {Object}\n     */\n    _tocoo(graph) {\n        const rows = [];\n        const cols = [];\n        const data = [];\n        const [rows_n, cols_n] = graph.shape;\n        for (let row = 0; row < rows_n; ++row) {\n            for (let col = 0; col < cols_n; ++col) {\n                const entry = graph.entry(row, col);\n                if (entry !== 0) {\n                    rows.push(row);\n                    cols.push(col);\n                    data.push(entry);\n                }\n            }\n        }\n        return {\n            rows: rows,\n            cols: cols,\n            data: data,\n        };\n    }\n\n    /**\n     * Computes all necessary\n     * @returns {UMAP}\n     */\n    init() {\n        const { _spread, min_dist, n_neighbors, _n_epochs, _negative_sample_rate } = this._parameters;\n        const [a, b] = this._find_ab_params(_spread, min_dist);\n        this._a = a;\n        this._b = b;\n        this._graph = this._fuzzy_simplicial_set(this.X, n_neighbors);\n        const { rows, cols, data: weights } = this._tocoo(this._graph);\n        this._head = rows;\n        this._tail = cols;\n        this._weights = weights;\n        this._epochs_per_sample = this._make_epochs_per_sample(_n_epochs);\n        this._epochs_per_negative_sample = this._epochs_per_sample.map((d) => d * _negative_sample_rate);\n        this._epoch_of_next_sample = this._epochs_per_sample.slice();\n        this._epoch_of_next_negative_sample = this._epochs_per_negative_sample.slice();\n        return this;\n    }\n\n    graph() {\n        this.check_init();\n        return { cols: this._head, rows: this._tail, weights: this._weights };\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    transform(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {Number} [iterations=350] - number of iterations.\n     * @returns {Matrix|Array}\n     */\n    *generator(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * @private\n     * @param {Number} x\n     * @returns {Number}\n     */\n    _clip(x) {\n        if (x > 4) return 4;\n        if (x < -4) return -4;\n        return x;\n    }\n\n    /**\n     * performs the optimization step.\n     * @private\n     * @param {Matrix} head_embedding\n     * @param {Matrix} tail_embedding\n     * @param {Matrix} head\n     * @param {Matrix} tail\n     * @returns {Matrix}\n     */\n    _optimize_layout(head_embedding, tail_embedding, head, tail) {\n        const randomizer = this._randomizer;\n        const { _repulsion_strength, d: dim } = this._parameters;\n        const { _alpha: alpha, _a: a, _b: b, _epochs_per_sample: epochs_per_sample, _epochs_per_negative_sample: epochs_per_negative_sample, _epoch_of_next_negative_sample: epoch_of_next_negative_sample, _epoch_of_next_sample: epoch_of_next_sample, _clip: clip } = this;\n        const tail_length = tail.length;\n\n        for (let i = 0, n = epochs_per_sample.length; i < n; ++i) {\n            if (epoch_of_next_sample[i] <= this._iter) {\n                const j = head[i];\n                const k = tail[i];\n                const current = head_embedding.row(j);\n                const other = tail_embedding.row(k);\n                const dist = euclidean_squared(current, other);\n                let grad_coeff = 0;\n                if (dist > 0) {\n                    grad_coeff = (-2 * a * b * Math.pow(dist, b - 1)) / (a * Math.pow(dist, b) + 1);\n                }\n                for (let d = 0; d < dim; ++d) {\n                    const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                    const c = current[d] + grad_d;\n                    const o = other[d] - grad_d;\n                    current[d] = c;\n                    other[d] = o;\n                    head_embedding.set_entry(j, d, c);\n                    tail_embedding.set_entry(k, d, o);\n                }\n                epoch_of_next_sample[i] += epochs_per_sample[i];\n                const n_neg_samples = (this._iter - epoch_of_next_negative_sample[i]) / epochs_per_negative_sample[i];\n                for (let p = 0; p < n_neg_samples; ++p) {\n                    const k = randomizer.random_int % tail_length;\n                    const other = tail_embedding.row(tail[k]);\n                    const dist = euclidean_squared(current, other);\n                    let grad_coeff = 0;\n                    if (dist > 0) {\n                        grad_coeff = (2 * _repulsion_strength * b) / ((0.01 + dist) * (a * Math.pow(dist, b) + 1));\n                    } else if (j === k) {\n                        continue;\n                    }\n                    for (let d = 0; d < dim; ++d) {\n                        const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                        const c = current[d] + grad_d;\n                        const o = other[d] - grad_d;\n                        current[d] = c;\n                        other[d] = o;\n                        head_embedding.set_entry(j, d, c);\n                        tail_embedding.set_entry(tail[k], d, o);\n                    }\n                }\n                epoch_of_next_negative_sample[i] += n_neg_samples * epochs_per_negative_sample[i];\n            }\n        }\n        return head_embedding;\n    }\n\n    /**\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const Y = this.Y;\n        const { _initial_alpha, _n_epochs } = this._parameters;\n        this._alpha = _initial_alpha * (1 - iter / _n_epochs);\n        this.Y = this._optimize_layout(Y, Y, this._head, this._tail);\n\n        return this.Y;\n    }\n}\n","/**\n * Computes the canberra distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias canberra\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the canberra distance between <code>a</code> and <code>b</code>.\n * @see {@link https://en.wikipedia.org/wiki/Canberra_distance}\n */\nexport default function(a, b) {\n    if (a.length !== b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += (Math.abs(a[i] - b[i]) / (Math.abs(a[i]) + Math.abs(b[i])))\n    }\n    return sum;\n}","/**\n * Computes the chebyshev distance (L<sub>∞</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias chebyshev\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the chebyshev distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let res = [];\n    for (let i = 0; i < n; ++i) {\n        res.push(Math.abs(a[i] - b[i]));\n    }\n    return Math.max(...res);\n}\n","/**\n * Computes the cosine distance (not similarity) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias cosine\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} The cosine distance between {@link a} and {@link b}.\n * \n * @example\n * import * as druid from \"@saehrimnir/druidjs\";\n * \n * druid.cosine([1,0],[1,1]) == 0.7853981633974484 == π/4;\n * \n */\nexport default function (a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    let sum_a = 0;\n    let sum_b = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += a[i] * b[i];\n        sum_a += a[i] * a[i];\n        sum_b += b[i] * b[i];\n    }\n    return Math.acos(sum / (Math.sqrt(sum_a) * Math.sqrt(sum_b)));\n}\n","/**\n * Computes the hamming distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias hamming\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the hamming distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let disagree = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        disagree += x != y;\n    }\n    return disagree / n;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the inner product between two arrays of the same length.\n * @memberof module:linear_algebra\n * @alias inner_product\n * @param {Array|Float64Array} a - Array a\n * @param {Array|Float64Array} b - Array b\n * @returns The inner product between {@link a} and {@link b}\n */\nexport default function (a, b) {\n    const N = a.length;\n    if (N != b.length) {\n        throw new Error(\"Array a and b must have the same length!\")\n    }\n    let sum = 0;\n    for (let i = 0; i < N; ++i) {\n        sum += a * b;\n    }\n    return sum;\n}\n","/**\n * Computes the jaccard distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias jaccard\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the jaccard distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_non_zero = 0;\n    let num_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_non_zero += x || y;\n        num_equal += x && y;\n    }\n    return (num_non_zero - num_equal) / num_non_zero;\n}\n","/**\n * Numerical stable summation with the Kahan summation algorithm.\n * @memberof module:numerical\n * @alias kahan_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n    let y, t;\n\n    for (let i = 0; i < n; ++i) {\n        y = summands[i] - compensation;\n        t = sum + y;\n        compensation = t - sum - y;\n        sum = t;\n    }\n    return sum;\n}\n","/**\n * Computes the manhattan distance (<code>l<sub>1</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias manhattan\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the manhattan distance between <code>a</code> and <code>b</code>.\n */ \nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += Math.abs(a[i] - b[i]);\n    }\n    return sum;\n}\n","import { norm } from \"./index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Normalizes Vector {@link v}.\n * @memberof module:matrix\n * @alias normalize\n * @param {Array<Number>|Float64Array} v - Vector\n * @param {Function} metric \n * @returns {Array<Number>|Float64Array} - The normalized vector with length 1.\n */\nexport default function(v, metric = euclidean)  {\n    const v_norm = norm(v, metric);\n    return v.map(value => value / v_norm);\n}","import { Matrix, norm } from \"../matrix/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} with householder transformations.\n * @memberof module:linear_algebra\n * @alias qr_householder\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_Householder_reflections}\n * @see {@link http://mlwiki.org/index.php/Householder_Transformation}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, rows, \"I\");\n    const R = A.clone();\n\n    for (let j = 0; j < cols; ++j) {\n        const x = Matrix.from(R.col(j).slice(j));\n        const x_norm = norm(x);\n        const x0 = x.entry(0, 0);\n        const rho = -Math.sign(x0);\n        const u1 = x0 - rho * x_norm;\n        const u = x.divide(u1).set_entry(0, 0, 1);\n        const beta = (-rho * u1) / x_norm;\n\n        const u_outer_u = u.outer(u);\n        const R_block = R.get_block(j, 0);\n        const new_R = R_block.sub(u_outer_u.dot(R_block).mult(beta));\n        const Q_block = Q.get_block(0, j);\n        const new_Q = Q_block.sub(Q_block.dot(u_outer_u).mult(beta));\n        R.set_block(j, 0, new_R);\n        Q.set_block(0, j, new_Q);\n    }\n    return { R, Q };\n}\n","/**\n * Computes the Sokal-Michener distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias sokal_michener\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the Sokal-Michener distance between <code>a</code> and <code>b</code>.  \n */\nexport default function(a, b) {\n    if (a.length != b.length) return undefined\n    const n = a.length;\n    let num_not_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_not_equal += x != y;\n    }\n    return (2 * num_not_equal) / (n + num_not_equal);\n}","/**\n * Computes the yule distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias yule\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the yule distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_true_true = 0;\n    let num_true_false = 0;\n    let num_false_true = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_true_true += x && y;\n        num_true_false += x && !y;\n        num_false_true += !x && x;\n    }\n    const num_false_false = n - num_true_true - num_true_false - num_false_true;\n    return num_true_false == 0 || num_false_true == 0 ? 0 : (2 * num_true_false * num_false_true) / (num_true_true * num_false_false + num_true_false * num_false_true);\n}\n"],"names":["a","b","Math","sqrt","euclidean_squared","summands","n","length","sum","compensation","i","summand","t","abs","s","Float64Array","x_y","neumair_sum","A","k","metric","euclidean","rows","shape","D","distance_matrix","nN","Array","row","from","map","distance","col","j","sort","slice","Matrix","A_i","dist","set_entry","start","end","number","max","round","result","v","vector","cols","Error","Q","R","q","q_dot_v","q_","v_","v_norm","norm","seed","max_iterations","qr","qr_gramschmidt","tol","randomizer","Randomizer","random","oldQ","clone","QR","dot","values","eigenvalues","diag","eigenvectors","transpose","to2dArray","constructor","value","this","_rows","_cols","_data","static","type","isArray","m","_","data","subarray","iterate_rows","Symbol","iterator","set_row","offset","result_col","entry","T","inverse","B","h","i_max","max_val","Infinity","val","h_val","i_val","f","B_row_row","B_i_j","join","I","B_i","C","e","outer","l","concat","rows_A","cols_A","rows_B","cols_B","X","set_block","offset_row","offset_col","get_block","start_row","start_col","end_row","end_col","new_row","new_col","gather","row_indices","col_indices","N","row_index","col_index","_apply_array","_apply_rowwise_array","_apply_colwise_array","_apply","value_rows","value_cols","mult","inline","divide","add","sub","push","asArray","min_row_col","min","mean","meanRows","meanCols","b_i","x","r","d","z","alpha","r_next","beta","L","U","LU","L_diag","U_diag","det","M","MT","MtM","MMt","V","Sigma","simultaneous_poweriteration","sigma","_seed","_N","_M","_MATRIX_A","_UPPER_MASK","_LOWER_MASK","_mt","_mti","Date","getTime","mt","mti","random_int","y","mag01","kk","N_M","M_N","choice","sample","index_list","linspace","random_index","splice","undefined","Heap","elements","accessor","comparator","heapify","_accessor","_container","_comparator","heap","container","element","floor","_heapify_down","_swap","index_a","index_b","_heapify_up","index","parentIndex","node","start_index","left","right","pop","item","first","iterate","toArray","raw_data","empty","DisjointSet","_list","Set","make_set","list","has","__disjoint_set","parent","children","size","find","union","node_x","node_y","forEach","BallTree","_Node","pivot","child1","child2","radius","_Leaf","points","_metric","_root","_construct","c","_greatest_spread","sorted_elements","p_index","p","spread","reduce","acc","current","search","_search","KNN","_elements","_D","distances","H","nearest_element_index","nearest_dist","Number","isInteger","res","DR","default_parameters","parameters","_parameters","Object","assign","seal","_type","_randomizer","_is_initialized","parameter","name","hasOwnProperty","para","transform","check_init","projection","generator","init","Y","async","args","PCA","super","eig_args","principal_components","means","X_cent","MDS","ai_","a_j","a__","_d_X","stress","d_X","d_Y","top_sum","bottom_sum","pow","x0","max_iter","pfx","fx","convergence","fxi","dx","Cluster","id","centroid","depth","_calculate_centroid","l_size","r_size","l_centroid","r_centroid","new_centroid","isLeaf","leaves","descendants","left_descendants","right_descendants","KMedoids","matrix","K","_matrix","_A","_K","_max_iter","log10","_distance_matrix","_clusters","fill","_cluster_medoids","_get_random_medoids","get_clusters","x_j","_nearest_medoid","index_nearest","medoids","finish","_iteration","cache","x_o","o","DeltaTD","xs","findIndex","d_j","distance_nearest","deltaTD","d_oj","_get_distance","d_n","distance_second","d_s","filter","x_i","d_ij","nearest","second","x_m","m1","m2","index_second","cluster_medoids","indices","ceil","TD","TD0","S","S_j","S_o","delta","_choose_distant_objects","a_index","b_index","max_dist","d_ai","d_bi","_col","old_dist","d_ab","y_i","linkage","_id","_linkage","root","do","clusters","_traverse","_n","d_min","_d_min","c_size","_c_size","Uint16Array","p_max","c1","D_i_min","c2","c1_cluster","c2_cluster","c1_cluster_indices","c2_cluster_indices","new_cluster","unshift","D_c1_j","D_c2_j","neighbors","kNearestNeighbors","G","other","_cluster_centroids","_get_random_centroids","_furthest_point","candidates","Ad","cluster_centroids","random_point","init_points","sample_size","indexOf","furthest_point","clusters_changed","Ai","min_dist","min_cluster","_compute_centroid","cluster_counter","ci","iteration_result","labels","unique_labels","label_id","count","X_mean","V_mean","label","v_mean","S_b","S_w","row_v","k_nearest_neighbors","O","W","nN_row","Z","C_trace","w","solve_CG","IW","control_points","DR_parameters","nc","c_i","Y_C","XA","knn","_b","AT","ATA","ATb","I_i","X_i","g","G_i_t","W_i","epsilon","min_points","_epsilon","_min_points","_ordered_list","_DB","ordered_list","DB","cluster_index","_cluster_index","reachability_distance","processed","_get_neighbors","_core_distance","seeds","_update","_expand_cluster","core_distance","new_reachability_distance","cluster","outliers","get_cluster_affirmation","magic","init_DR","init_parameters","includes","_step","MAGIC","e1","e2","Yi","Yj","dY","dX","dq","dr","decay_start","decay_cte","_add","__add","_sub_div","__sub_div","_minus","__minus","_mult","__mult","_LR_init","_LR","_offset","exp","_momentums","_grads","_indices","this_metric","_HD_metric","_HD_metric_exaggeration","iterations","_decay_start","ratio","_distance_exaggeration","_nestrov_iteration","__quartets","max_N","shuffled_indices","Uint32Array","of","distance_exaggeration","momentums","LR","grads","_fill_MDS_grads","g_i","g_i_norm","mul","m_i","exaggeration","zero_grad","HD_metric","D_quartet","quartets","D_quartet_sum","gi","gj","gk","gl","_compute_quartet_grads","quartet","p_ab","p_ac","p_ad","p_bc","p_bd","p_cd","d_ac","d_ad","d_bc","d_bd","d_cd","sum_LD_dist","gA1","gB1","gC1","gD1","_ABCD_grads","gA2","gC2","gB2","gD2","gA3","gD3","gC3","gB3","gB4","gC4","gA4","gD4","gB5","gD5","gA5","gC5","gC6","gD6","gA6","gB6","twice_ratio","minus","sub_div","s1","div","perplexity","_iter","Htarget","log","Delta","druid","P","_ystep","_gains","prow","betamin","betamax","done","num","psum","pj","Hhere","Pout","N2","_P","next","iter","ystep","gains","dim","pmul","Qu","qsum","dsum","dhere","qu","grad","premult","ymean","gid","sid","gainid","newgain","sign","newsid","__lazy_distance_matrix","D_ij","_make_minimum_spanning_tree","disjoint_set","F","E","u","set_u","set_v","_Emst","__hull_cross","ax","ay","bx","by","sx","sy","__hull","x1","y1","x2","y2","lower","upper","__findAngle","p1x","p1y","p2x","p2y","sin","cos","vec","__align_hull","hull","topEdge","d2","v1","v2","transformation","tx","ty","__transform","px","py","__transform_component","yOffset","cx","cy","__align_components","points_u","points_v","hull_u","hull_v","t_u","t_v","Emst","components","component_u","component_v","weight_adj","pca","n_inliers","n_outliers","n_random","triplets","weights","_generate_triplets","lr","vel","gain","n_extra","nbrs","knn_distances","sig","_find_p","_sample_knn_triplets","n_triplets","outlier_distances","_find_weights","random_triplets","random_weights","_sample_random_triplets","max_weight","isNaN","max_weight_2","n_neighbors","n_i","sort_indices","__argsort","n_j","sim","samples","_rejection_sample","out","n_samples","max_int","rejects","interval","p_sim","p_out","_grad","y_ij","y_ik","d_ik","n_viol","loss","n_knn_triplets","Y_id","Y_jd","Y_kd","gs","go","max_iteration","_next","gamma","old_C","_update_embedding","new_gain","local_connectivity","_spread","_set_op_mix_ratio","_repulsion_strength","_negative_sample_rate","_n_epochs","_initial_alpha","_find_ab_params","xv","yv","xv_i","powell","error","_compute_membership_strengths","sigmas","rhos","_smooth_knn_dist","SMOOTH_K_TOLERANCE","MIN_K_DIST_SCALE","target","log2","reverse","lo","hi","mid","search_result","non_zero_dist","non_zero_dist_length","interpolation","mean_ithd","mean_d","_fuzzy_simplicial_set","distances_i","transposed_result","prod_matrix","_make_epochs_per_sample","n_epochs","_weights","Float32Array","weights_max","_tocoo","graph","rows_n","cols_n","_a","_graph","_head","_tail","_epochs_per_sample","_epochs_per_negative_sample","_epoch_of_next_sample","_epoch_of_next_negative_sample","_clip","_optimize_layout","head_embedding","tail_embedding","head","tail","_alpha","epochs_per_sample","epochs_per_negative_sample","epoch_of_next_negative_sample","epoch_of_next_sample","clip","tail_length","grad_coeff","grad_d","n_neg_samples","sum_a","sum_b","acos","disagree","num_non_zero","num_equal","x_norm","rho","u1","u_outer_u","R_block","new_R","Q_block","new_Q","num_not_equal","num_true_true","num_true_false","num_false_true"],"mappings":"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"}