{"version":3,"file":"druid.min.js","sources":["../src/metrics/euclidean.js","../src/metrics/euclidean_squared.js","../src/matrix/k_nearest_neighbors.js","../src/matrix/distance_matrix.js","../src/matrix/linspace.js","../src/matrix/norm.js","../src/numerical/neumair_sum.js","../src/linear_algebra/qr.js","../src/linear_algebra/simultaneous_poweriteration.js","../src/matrix/Matrix.js","../src/util/randomizer.js","../src/util/max.js","../src/util/min.js","../src/datastructure/Heap.js","../src/datastructure/DisjointSet.js","../src/knn/BallTree.js","../src/knn/KNN.js","../src/dimred/DR.js","../src/dimred/PCA.js","../src/dimred/MDS.js","../src/optimization/powell.js","../src/clustering/Hierarchical_Clustering.js","../src/clustering/KMedoids.js","../src/dimred/FASTMAP.js","../src/dimred/ISOMAP.js","../src/clustering/KMeans.js","../src/dimred/LDA.js","../src/dimred/LLE.js","../src/dimred/LSP.js","../src/dimred/LTSA.js","../src/clustering/OPTICS.js","../src/dimred/SAMMON.js","../src/dimred/SQDMDS.js","../src/dimred/TSNE.js","../src/dimred/TopoMap.js","../src/dimred/TriMap.js","../src/dimred/UMAP.js","../src/metrics/canberra.js","../src/metrics/chebyshev.js","../src/metrics/cosine.js","../src/metrics/hamming.js","../src/linear_algebra/inner_product.js","../src/metrics/jaccard.js","../src/numerical/kahan_sum.js","../src/metrics/manhattan.js","../src/matrix/normalize.js","../src/linear_algebra/qr_householder.js","../src/metrics/sokal_michener.js","../src/index.js","../src/metrics/yule.js"],"sourcesContent":["import { euclidean_squared } from \"../metrics/index.js\";\n/**\n * Computes the euclidean distance (<code>l<sub>2</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    return Math.sqrt(euclidean_squared(a, b));\n}\n","/**\n * Computes the squared euclidean distance (l<sub>2</sub><sup>2</sup>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias euclidean_squared\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the squared euclidean distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        const a_b = a[i] - b[i];\n        sum += a_b * a_b;\n    }\n    return sum;\n}\n","import { distance_matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Computes the k-nearest neighbors of each row of {@link A}.\n * @memberof module:matrix\n * @alias k_nearest_neigbhors\n * @param {Matrix} A - Either the data matrix, or a distance matrix.\n * @param {Number} k - The number of neighbors to compute.\n * @param {Function|\"precomputed\"} [metric=euclidean]\n * @returns {Array<Object>} -\n */\nexport default function (A, k, metric = euclidean) {\n    const rows = A.shape[0];\n    let D = metric == \"precomputed\" ? A : distance_matrix(A, metric);\n    let nN = new Array(rows);\n    for (let row = 0; row < rows; ++row) {\n        nN[row] = Array.from(D.row(row))\n            .map((distance, col) => {\n                return {\n                    i: row,\n                    j: col,\n                    distance: distance,\n                };\n            })\n            .sort((a, b) => a.distance - b.distance)\n            .slice(1, k + 1);\n    }\n    return nN;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"./index.js\";\n\n/**\n * Computes the distance matrix of datamatrix {@link A}.\n * @memberof module:matrix\n * @alias distance_matrix\n * @param {Matrix} A - Matrix.\n * @param {Function} [metric=euclidean] - The diistance metric.\n * @returns {Matrix} D - The distance matrix of {@link A}.\n */\nexport default function (A, metric = euclidean) {\n    let n = A.shape[0];\n    const D = new Matrix(n, n);\n    for (let i = 0; i < n; ++i) {\n        const A_i = A.row(i);\n        for (let j = i + 1; j < n; ++j) {\n            const dist = metric(A_i, A.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n        }\n    }\n    return D;\n}\n","/**\n * Creates an Array containing {@link number} numbers from {@link start} to {@link end}.\n * If <code>{@link number} = null</null>.\n * @memberof module:matrix\n * @alias linspace\n * @param {Number} start - Start value.\n * @param {Number} end - End value.\n * @param {Number} [number = null] - Number of number between {@link start} and {@link end}.\n * @returns {Array} - An array with {@link number} entries, beginning at {@link start} ending at {@link end}.\n */\nexport default function (start, end, number = null) {\n    if (!number) {\n        number = Math.max(Math.round(end - start) + 1, 1);\n    }\n    if (number < 2) {\n        return number === 1 ? [start] : [];\n    }\n    let result = new Array(number);\n    number -= 1;\n    for (let i = number; i >= 0; --i) {\n        result[i] = (i * end + (number - i) * start) / number;\n    }\n    return result;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n//import { neumair_sum } from \"../numerical/index\";\n\n/**\n * Computes the norm of a vector, by computing its distance to **0**.\n * @memberof module:matrix\n * @alias norm\n * @param {Matrix|Array<Number>|Float64Array} v - Vector.\n * @param {Function} [metric = euclidean] - Which metric should be used to compute the norm.\n * @returns {Number} - The norm of {@link v}.\n */\nexport default function (v, metric = euclidean) {\n    let vector = null;\n    if (v instanceof Matrix) {\n        let [rows, cols] = v.shape;\n        if (rows === 1) vector = v.row(0);\n        else if (cols === 1) vector = v.col(0);\n        else throw new Error(\"Matrix must be 1d!\");\n    } else {\n        vector = v;\n    }\n    const n = vector.length;\n    const zeros = new Float64Array(n);\n    return metric(vector, zeros);\n}\n","/**\n * Numerical stable summation with the Neumair summation algorithm.\n * @memberof module:numerical\n * @alias neumair_sum\n * @param {Number[]} summands - Array of values to sum up.\n * @returns {Number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements}\n */\nexport default function (summands) {\n    const n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n\n    for (let i = 0; i < n; ++i) {\n        const summand = summands[i];\n        const t = sum + summand;\n        if (Math.abs(sum) >= Math.abs(summand)) {\n            compensation += sum - t + summand;\n        } else {\n            compensation += summand - t + sum;\n        }\n        sum = t;\n    }\n    return sum + compensation;\n}\n","import { Matrix, norm } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix `A` using Gram-Schmidt process.\n * @memberof module:linear_algebra\n * @alias qr\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_the_Gram%E2%80%93Schmidt_process}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, cols, \"identity\");\n    const R = new Matrix(cols, cols, 0);\n\n    for (let j = 0; j < cols; ++j) {\n        let v = A.col(j);\n        for (let i = 0; i < j; ++i) {\n            const q = Q.col(i);\n            const q_dot_v = neumair_sum(q.map((q_, k) => q_ * v[k]));\n            for (let k = 0; k < rows; ++k) {\n                v[k] -= q_dot_v * q[k];\n            }\n            R.set_entry(i, j, q_dot_v);\n        }\n        const v_norm = norm(v, euclidean);\n        for (let k = 0; k < rows; ++k) {\n            Q.set_entry(k, j, v[k] / v_norm);\n        }\n        R.set_entry(j, j, v_norm);\n    }\n    return { R, Q };\n}\n","import { qr as qr_gramschmidt } from \"./index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\n\n/**\n * Computes the `k` biggest Eigenvectors and Eigenvalues from Matrix `A` with the QR-Algorithm.\n * @memberof module:linear_algebra\n * @alias simultaneous_poweriteration\n * @param {Matrix} A - The Matrix\n * @param {Number} k - The number of eigenvectors and eigenvalues to compute.\n * @param {Object} parameters - Object containing parameterization of the simultanious poweriteration method.\n * @param {Number} [parameters.max_iterations=100] - The number of maxiumum iterations the algorithm should run.\n * @param {Number|Randomizer} [parameters.seed=1212] - The seed value or a randomizer used in the algorithm.\n * @param {Function} [parameters.qr=qr_gramschmidt] - The QR technique to use.\n * @param {Number} [parameters.tol=1e-8] - Tolerated error for stopping criteria.\n * @returns {{eigenvalues: Number[], eigenvectors: Number[][]}} the `k` biggest eigenvectors and eigenvalues of Matrix `A`.\n */\nexport default function (A, k = 2, {seed = 1212, max_iterations = 100, qr = qr_gramschmidt, tol = 1e-8} = {}) {\n    const randomizer = seed instanceof Randomizer ? seed : new Randomizer(seed);\n    if (!(A instanceof Matrix)) A = Matrix.from(A);\n    const n = A.shape[0];\n    let { Q, R } = qr(new Matrix(n, k, () => (randomizer.random - .5) * 2));\n    while (max_iterations--) {\n        const oldQ = Q;\n        const Z = A.dot(Q);\n        const QR = qr(Z);\n        Q = QR.Q;\n        R = QR.R;\n        const error = euclidean_squared(Q.values, oldQ.values);\n        if (error < tol) {\n            break;\n        }\n    }\n\n    const eigenvalues = R.diag;\n    const eigenvectors = Q.transpose().to2dArray;\n    return { eigenvalues, eigenvectors };\n}\n","import { neumair_sum } from \"../numerical/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n/**\n * @class\n * @alias Matrix\n * @requires module:numerical/neumair_sum\n */\nexport class Matrix {\n    /**\n     * creates a new Matrix. Entries are stored in a Float64Array.\n     * @memberof module:matrix\n     * @param {number} rows - The amount of rows of the matrix.\n     * @param {number} cols - The amount of columns of the matrix.\n     * @param {(function|string|number)} value=0 - Can be a function with row and col as parameters, a number, or \"zeros\", \"identity\" or \"I\", or \"center\".\n     *  - **function**: for each entry the function gets called with the parameters for the actual row and column.\n     *  - **string**: allowed are\n     *      - \"zero\", creates a zero matrix.\n     *      - \"identity\" or \"I\", creates an identity matrix.\n     *      - \"center\", creates an center matrix.\n     *  - **number**: create a matrix filled with the given value.\n     * @example\n     *\n     * let A = new Matrix(10, 10, () => Math.random()); //creates a 10 times 10 random matrix.\n     * let B = new Matrix(3, 3, \"I\"); // creates a 3 times 3 identity matrix.\n     * @returns {Matrix} returns a {@link rows} times {@link cols} Matrix filled with {@link value}.\n     */\n    constructor(rows = null, cols = null, value = null) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = null;\n        if (rows && cols) {\n            if (!value) {\n                this._data = new Float64Array(rows * cols);\n                return this;\n            }\n            if (typeof value === \"function\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value(row, col);\n                    }\n                }\n                return this;\n            }\n            if (typeof value === \"string\") {\n                if (value === \"zeros\") {\n                    return new Matrix(rows, cols, 0);\n                }\n                if (value === \"identity\" || value === \"I\") {\n                    this._data = new Float64Array(rows * cols);\n                    for (let row = 0; row < rows; ++row) {\n                        this._data[row * cols + row] = 1;\n                    }\n                    return this;\n                }\n                if (value === \"center\" && rows == cols) {\n                    this._data = new Float64Array(rows * cols);\n                    value = (i, j) => (i === j ? 1 : 0) - 1 / rows;\n                    for (let row = 0; row < rows; ++row) {\n                        for (let col = 0; col < cols; ++col) {\n                            this._data[row * cols + col] = value(row, col);\n                        }\n                    }\n                    return this;\n                }\n            }\n            if (typeof value === \"number\") {\n                this._data = new Float64Array(rows * cols);\n                for (let row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col) {\n                        this._data[row * cols + col] = value;\n                    }\n                }\n                return this;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Creates a Matrix out of {@link A}.\n     * @param {(Matrix|Array|Float64Array|number)} A - The matrix, array, or number, which should converted to a Matrix.\n     * @param {\"row\"|\"col\"|\"diag\"} [type = \"row\"] - If {@link A} is a Array or Float64Array, then type defines if it is a row- or a column vector.\n     * @returns {Matrix}\n     *\n     * @example\n     * let A = Matrix.from([[1, 0], [0, 1]]); //creates a two by two identity matrix.\n     * let S = Matrix.from([1, 2, 3], \"diag\"); // creates a 3 by 3 matrix with 1, 2, 3 on its diagonal. [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n     */\n    static from(A, type = \"row\") {\n        if (A instanceof Matrix) {\n            return A.clone();\n        } else if (Matrix.isArray(A)) {\n            let m = A.length;\n            if (m === 0) throw new Error(\"Array is empty\");\n            // 1d\n            if (!Matrix.isArray(A[0])) {\n                if (type === \"row\") {\n                    return new Matrix(1, m, (_, j) => A[j]);\n                } else if (type === \"col\") {\n                    return new Matrix(m, 1, (i) => A[i]);\n                } else if (type === \"diag\") {\n                    return new Matrix(m, m, (i, j) => (i == j ? A[i] : 0));\n                } else {\n                    throw new Error(\"1d array has NaN entries\");\n                }\n                // 2d\n            } else {\n                let n = A[0].length;\n                for (let row = 0; row < m; ++row) {\n                    if (A[row].length !== n) {\n                        throw new Error(\"various array lengths\");\n                    }\n                }\n                return new Matrix(m, n, (i, j) => A[i][j]);\n            }\n        } else if (typeof A === \"number\") {\n            return new Matrix(1, 1, A);\n        } else {\n            throw new Error(\"error\");\n        }\n    }\n\n    /**\n     * Returns the {@link row}<sup>th</sup> row from the Matrix.\n     * @param {Number} row\n     * @returns {Float64Array}\n     */\n    row(row) {\n        const data = this.values;\n        const cols = this._cols;\n        return data.subarray(row * cols, (row + 1) * cols);\n    }\n\n    /**\n     * Returns an generator yielding each row of the Matrix.\n     * @yields {Float64Array}\n     */\n    *iterate_rows() {\n        const cols = this._cols;\n        const rows = this._rows;\n        const data = this.values;\n        for (let row = 0; row < rows; ++row) {\n            yield data.subarray(row * cols, (row + 1) * cols);\n        }\n    }\n\n    /**\n     * Makes a {@link Matrix} object an iterable object.\n     * @yields {Float64Array}\n     */\n    *[Symbol.iterator]() {\n        for (const row of this.iterate_rows()) {\n            yield row;\n        }\n    }\n\n    /**\n     * Sets the entries of {@link row}<sup>th</sup> row from the Matrix to the entries from {@link values}.\n     * @param {Number} row\n     * @param {Array} values\n     * @returns {Matrix}\n     */\n    set_row(row, values) {\n        const cols = this._cols;\n        if (Matrix.isArray(values) && values.length === cols) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values[col];\n            }\n        } else if (values instanceof Matrix && values.shape[1] === cols && values.shape[0] === 1) {\n            const offset = row * cols;\n            for (let col = 0; col < cols; ++col) {\n                this.values[offset + col] = values._data[col];\n            }\n        } else {\n            throw new Error(\"Values not valid! Needs to be either an Array, a Float64Array, or a fitting Matrix!\")\n        }\n        return this;\n    }\n\n    /**\n     * Swaps the rows {@link row1} and {@link row2} of the Matrix.\n     * @param {Number} row1\n     * @param {Number} row2\n     * @returns {Matrix}\n     */\n    swap_rows(row1, row2) {\n        const cols = this._cols;\n        const data = this.values;\n        for (let i = row1 * cols, j = row2 * cols, col = 0; col < cols; ++col, ++i, ++j) {\n            const t = data[i];\n            data[i] = data[j];\n            data[j] = t;\n        }\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> column from the Matrix.\n     * @param {Number} col\n     * @returns {Array}\n     */\n    col(col) {\n        const result_col = new Float64Array(this._rows);\n        for (let row = 0; row < this._rows; ++row) {\n            result_col[row] = this.values[row * this._cols + col];\n        }\n        return result_col;\n    }\n\n    /**\n     * Returns the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @returns {float64}\n     */\n    entry(row, col) {\n        return this.values[row * this._cols + col];\n    }\n\n    /**\n     * Sets the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix to the given {@link value}.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    set_entry(row, col, value) {\n        this.values[row * this._cols + col] = value;\n        return this;\n    }\n\n    /**\n     * Adds a given {@link value} to the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    add_entry(row, col, value) {\n      this.values[row * this._cols + col] += value;\n      return this;\n    }\n\n    /**\n     * Subtracts a given {@link value} from the {@link col}<sup>th</sup> entry from the {@link row}<sup>th</sup> row of the Matrix.\n     * @param {int} row\n     * @param {int} col\n     * @param {float64} value\n     * @returns {Matrix}\n     */\n    sub_entry(row, col, value) {\n      this.values[row * this._cols + col] -= value;\n      return this;\n    }\n\n    /**\n     * Returns a new transposed Matrix.\n     * @returns {Matrix}\n     */\n    transpose() {\n        let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n        return B;\n    }\n\n    /**\n     * Returns a new transposed Matrix. Short-form of {@function transpose}.\n     * @returns {Matrix}\n     */\n    get T() {\n        return this.transpose();\n    }\n\n    /**\n     * Returns the inverse of the Matrix.\n     * @returns {Matrix}\n     */\n    inverse() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const A = this.clone();\n        const B = new Matrix(rows, cols, 'I');\n\n        // foreach column\n        for (let col = 0; col < cols; ++col) {\n            // Search for maximum in this column (pivot)\n            let max_idx = col;\n            let max_val = Math.abs(A.entry(col, col));\n            for (let row = col + 1; row < rows; ++row) {\n                const val = Math.abs(A.entry(row, col));\n                if (max_val < val) {\n                    max_idx = row;\n                    max_val = val;\n                }\n            }\n            if (max_val === 0) {\n                throw new Error('Cannot compute inverse of Matrix, determinant is zero');\n            }\n            // Swap maximum row with current row\n            if (max_idx !== col) {\n                A.swap_rows(col, max_idx);\n                B.swap_rows(col, max_idx);\n            }\n\n            // eliminate non-zero values on the other rows at column c\n            const A_col = A.row(col);\n            const B_col = B.row(col);\n            for (let row = 0; row < rows; ++row) {\n                if (row !== col) {\n                    // eliminate value at column c and row r\n                    const A_row = A.row(row);\n                    const B_row = B.row(row);\n                    if (A_row[col] !== 0) {\n                        const f = A_row[col] / A_col[col];\n                        // sub (f * row c) from row r to eliminate the value at column c\n                        for (let s = col; s < cols; ++s) {\n                            A_row[s] -= (f * A_col[s]);\n                        }\n                        for (let s = 0; s < cols; ++s) {\n                            B_row[s] -= (f * B_col[s]);\n                        }\n                    }\n                } else {\n                    // normalize value at Acc to 1 (diagonal):\n                    // divide each value of row r=c by the value at Acc\n                    const f = A_col[col];\n                    for (let s = col; s < cols; ++s) {\n                        A_col[s] /= f;\n                    }\n                    for (let s = 0; s < cols; ++s) {\n                        B_col[s] /= f;\n                    }\n                }\n            }\n        }\n        return B;\n    }\n\n    /**\n     * Returns the dot product. If {@link B} is an Array or Float64Array then an Array gets returned. If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [rows_A, cols_A] = A.shape;\n            const [rows_B, cols_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows.\n                Must be equal!`);\n            }\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_i = A.row(row);\n                const B_val = B.values;\n                let sum = 0;\n                for (let i = 0, j = col; i < cols_A; ++i, j += cols_B) {\n                    sum += A_i[i] * B_val[j];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Transposes the current matrix and returns the dot product with {@link B}.\n     * If {@link B} is an Array or Float64Array then an Array gets returned.\n     * If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    transDot(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [cols_A, rows_A] = A.shape; // transpose matrix\n            const [rows_B, cols_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${[rows_A, cols_A].join(\" ⨯ \")}-Matrix, B is a ${B.shape.join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows, which must be equal!`);\n            }\n            // let B = new Matrix(this._cols, this._rows, (row, col) => this.entry(col, row));\n            // this.values[row * this._cols + col];\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_val = A.values;\n                const B_val = B.values;\n                let sum = 0;\n                for (let i = 0, j = row, k = col; i < cols_A; ++i, j += rows_A, k += cols_B) {\n                    sum += A_val[j] * B_val[k];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._cols;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.col(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Returns the dot product with the transposed version of {@link B}.\n     * If {@link B} is an Array or Float64Array then an Array gets returned.\n     * If {@link B} is a Matrix then a Matrix gets returned.\n     * @param {(Matrix|Array|Float64Array)} B the right side\n     * @returns {(Matrix|Array)}\n     */\n    dotTrans(B) {\n        if (B instanceof Matrix) {\n            let A = this;\n            const [rows_A, cols_A] = A.shape;\n            const [cols_B, rows_B] = B.shape;\n            if (cols_A !== rows_B) {\n                throw new Error(`A.dot(B): A is a ${A.shape.join(\" ⨯ \")}-Matrix, B is a ${[rows_B, cols_B].join(\" ⨯ \")}-Matrix:\n                A has ${cols_A} cols and B ${rows_B} rows, which must be equal!`);\n            }\n            const C = new Matrix(rows_A, cols_B, (row, col) => {\n                const A_i = A.row(row);\n                const B_i = B.row(col);\n                let sum = 0;\n                for (let i = 0; i < cols_A; ++i) {\n                    sum += A_i[i] * B_i[i];\n                }\n                return sum;\n            });\n            return C;\n        } else if (Matrix.isArray(B)) {\n            let rows = this._rows;\n            if (B.length !== rows) {\n                throw new Error(`A.dot(B): A has ${rows} cols and B has ${B.length} rows. Must be equal!`);\n            }\n            let C = new Array(rows);\n            for (let row = 0; row < rows; ++row) {\n                C[row] = neumair_sum(this.row(row).map((e) => e * B[row]));\n            }\n            return C;\n        } else {\n            throw new Error(`B must be Matrix or Array`);\n        }\n    }\n\n    /**\n     * Computes the outer product from {@link this} and {@link B}.\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    outer(B) {\n        let A = this;\n        let l = A._data.length;\n        let r = B._data.length;\n        if (l != r) return undefined;\n        let C = new Matrix();\n        C.shape = [\n            l,\n            l,\n            (i, j) => {\n                if (i <= j) {\n                    return A._data[i] * B._data[j];\n                } else {\n                    return C.entry(j, i);\n                }\n            },\n        ];\n        return C;\n    }\n\n    /**\n     * Appends matrix {@link B} to the matrix.\n     * @param {Matrix} B - matrix to append.\n     * @param {\"horizontal\"|\"vertical\"|\"diag\"} [type = \"horizontal\"] - type of concatenation.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 1], [1, 1]]); // 2 by 2 matrix filled with ones.\n     * let B = Matrix.from([[2, 2], [2, 2]]); // 2 by 2 matrix filled with twos.\n     *\n     * A.concat(B, \"horizontal\"); // 2 by 4 matrix. [[1, 1, 2, 2], [1, 1, 2, 2]]\n     * A.concat(B, \"vertical\"); // 4 by 2 matrix. [[1, 1], [1, 1], [2, 2], [2, 2]]\n     * A.concat(B, \"diag\"); // 4 by 4 matrix. [[1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 2, 2], [0, 0, 2, 2]]\n     */\n    concat(B, type = \"horizontal\") {\n        const A = this;\n        const [rows_A, cols_A] = A.shape;\n        const [rows_B, cols_B] = B.shape;\n        if (type == \"horizontal\") {\n            if (rows_A != rows_B) {\n                throw new Error(`A.concat(B, \"horizontal\"): A and B need same number of rows, A has ${rows_A} rows, B has ${rows_B} rows.`);\n            }\n            const X = new Matrix(rows_A, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(0, cols_A, B);\n            return X;\n        } else if (type == \"vertical\") {\n            if (cols_A != cols_B) {\n                throw new Error(`A.concat(B, \"vertical\"): A and B need same number of columns, A has ${cols_A} columns, B has ${cols_B} columns.`);\n            }\n            const X = new Matrix(rows_A + rows_B, cols_A, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, 0, B);\n            return X;\n        } else if (type == \"diag\") {\n            const X = new Matrix(rows_A + rows_B, cols_A + cols_B, \"zeros\");\n            X.set_block(0, 0, A);\n            X.set_block(rows_A, cols_A, B);\n            return X;\n        } else {\n            throw new Error(`type must be \"horizontal\" or \"vertical\", but type is ${type}!`);\n        }\n    }\n\n    /**\n     * Writes the entries of B in A at an offset position given by {@link offset_row} and {@link offset_col}.\n     * @param {int} offset_row\n     * @param {int} offset_col\n     * @param {Matrix} B\n     * @returns {Matrix}\n     */\n    set_block(offset_row, offset_col, B) {\n        const rows = Math.min(this._rows - offset_row, B.shape[0]);\n        const cols = Math.min(this._cols - offset_col, B.shape[1]);\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col) {\n                this.set_entry(row + offset_row, col + offset_col, B.entry(row, col));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Extracts the entries from the {@link start_row}<sup>th</sup> row to the {@link end_row}<sup>th</sup> row, the {@link start_col}<sup>th</sup> column to the {@link end_col}<sup>th</sup> column of the matrix.\n     * If {@link end_row} or {@link end_col} is empty, the respective value is set to {@link this.rows} or {@link this.cols}.\n     * @param {Number} start_row\n     * @param {Number} start_col\n     * @param {Number} [end_row = null]\n     * @param {Number} [end_col = null]\n     * @returns {Matrix} Returns a end_row - start_row times end_col - start_col matrix, with respective entries from the matrix.\n     * @example\n     *\n     * let A = Matrix.from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); // a 3 by 3 matrix.\n     *\n     * A.get_block(1, 1); // [[5, 6], [8, 9]]\n     * A.get_block(0, 0, 1, 1); // [[1]]\n     * A.get_block(1, 1, 2, 2); // [[5]]\n     * A.get_block(0, 0, 2, 2); // [[1, 2], [4, 5]]\n     */\n    get_block(start_row, start_col, end_row = null, end_col = null) {\n        const [rows, cols] = this.shape;\n        end_row = end_row ?? rows;\n        end_col = end_col ?? cols;\n        if (end_row <= start_row || end_col <= start_col) {\n            throw new Error(`\n                end_row must be greater than start_row, and\n                end_col must be greater than start_col, but\n                end_row = ${end_row}, start_row = ${start_row}, end_col = ${end_col}, and start_col = ${start_col}!`);\n        }\n        const X = new Matrix(end_row - start_row, end_col - start_col, \"zeros\");\n        for (let row = start_row, new_row = 0; row < end_row; ++row, ++new_row) {\n            for (let col = start_col, new_col = 0; col < end_col; ++col, ++new_col) {\n                X.set_entry(new_row, new_col, this.entry(row, col));\n            }\n        }\n        return X;\n        //return new Matrix(end_row - start_row, end_col - start_col, (i, j) => this.entry(i + start_row, j + start_col));\n    }\n\n    /**\n     * Returns a new array gathering entries defined by the indices given by argument.\n     * @param {Array<Number>} row_indices - Array consists of indices of rows for gathering entries of this matrix\n     * @param {Array<Number>} col_indices  - Array consists of indices of cols for gathering entries of this matrix\n     * @returns {Matrix}\n     */\n    gather(row_indices, col_indices) {\n        const N = row_indices.length;\n        const D = col_indices.length;\n\n        const R = new Matrix(N, D);\n        for (let i = 0; i < N; ++i) {\n            const row_index = row_indices[i];\n            for (let j = 0; j < N; ++j) {\n                const col_index = col_indices[j];\n                R.set_entry(i, j, this.entry(row_index, col_index));\n            }\n        }\n\n        return R;\n    }\n\n    /**\n     * Applies a function to each entry of the matrix.\n     * @private\n     * @param {Function} f function takes 2 parameters, the value of the actual entry and a value given by the function {@link v}. The result of {@link f} gets writen to the Matrix.\n     * @param {Function} v function takes 2 parameters for row and col, and returns a value witch should be applied to the colth entry of the rowth row of the matrix.\n     */\n    _apply_array(f, v) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let i = 0, row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col, ++i) {\n                data[i] = f(data[i], v(row, col));\n            }\n        }\n        return this;\n    }\n\n    _apply_rowwise_array(values, f) {\n        return this._apply_array(f, (_, j) => values[j]);\n    }\n\n    _apply_colwise_array(values, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        for (let i = 0, row = 0; row < rows; ++row) {\n            const val = values[row];\n            for (let col = 0; col < cols; ++col, ++i) {\n                data[i] = f(data[i], val);\n            }\n        }\n        return this;\n    }\n\n    _apply(value, f) {\n        const data = this.values;\n        const [rows, cols] = this.shape;\n        if (value instanceof Matrix) {\n            const values = value.values;\n            const [value_rows, value_cols] = value.shape;\n            if (value_rows === 1) {\n                if (cols !== value_cols) {\n                    throw new Error(`cols !== value_cols`);\n                }\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], values[col]);\n                    }\n                }\n            } else if (value_cols === 1) {\n                if (rows !== value_rows) {\n                    throw new Error(`rows !== value_rows`);\n                }\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    const v =  values[row];\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], v);\n                    }\n                }\n            } else if (rows == value_rows && cols == value_cols) {\n                for (let i = 0, n = rows * cols; i < n; ++i) {\n                    data[i] = f(data[i], values[i]);\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else if (Matrix.isArray(value)) {\n            if (value.length === rows) {\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    const v = value[row];\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], v);\n                    }\n                }\n            } else if (value.length === cols) {\n                for (let i = 0, row = 0; row < rows; ++row) {\n                    for (let col = 0; col < cols; ++col, ++i) {\n                        data[i] = f(data[i], value[col]);\n                    }\n                }\n            } else {\n                throw new Error(`error`);\n            }\n        } else { // scalar value\n            for (let i = 0, n = rows * cols; i < n; ++i) {\n                data[i] = f(data[i], value);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Clones the Matrix.\n     * @returns {Matrix}\n     */\n    clone() {\n        let B = new Matrix();\n        B._rows = this._rows;\n        B._cols = this._cols;\n        B._data = this.values.slice(0);\n        return B;\n    }\n\n    /**\n     * Entrywise multiplication with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies multiplication to the element, otherwise it creates first a copy and applies the multiplication on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.mult(2); // [[2, 4], [6, 8]];\n     * A.mult(B); // [[1, 4], [9, 16]];\n     */\n    mult(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a * b);\n    }\n\n    /**\n     * Entrywise division with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies division to the element, otherwise it creates first a copy and applies the division on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.divide(2); // [[0.5, 1], [1.5, 2]];\n     * A.divide(B); // [[1, 1], [1, 1]];\n     */\n    divide(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a / b);\n    }\n\n    /**\n     * Entrywise addition with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false]  - If true, applies addition to the element, otherwise it creates first a copy and applies the addition on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.add(2); // [[3, 4], [5, 6]];\n     * A.add(B); // [[2, 4], [6, 8]];\n     */\n    add(value, {inline = false} = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a + b);\n    }\n\n    /**\n     * Entrywise subtraction with {@link value}.\n     * @param {Matrix|Array|Number} value\n     * @param {Object} [options]\n     * @param {Boolean} [options.inline = false] - If true, applies subtraction to the element, otherwise it creates first a copy and applies the subtraction on the copy.\n     * @returns {Matrix}\n     * @example\n     *\n     * let A = Matrix.from([[1, 2], [3, 4]]); // a 2 by 2 matrix.\n     * let B = A.clone(); // B == A;\n     *\n     * A.sub(2); // [[-1, 0], [1, 2]];\n     * A.sub(B); // [[0, 0], [0, 0]];\n     */\n    sub(value, { inline = false } = {}) {\n        const A = inline ? this : this.clone();\n        return A._apply(value, (a, b) => a - b);\n    }\n\n    /**\n     * Returns the number of rows and columns of the Matrix.\n     * @returns {Array} An Array in the form [rows, columns].\n     */\n    get shape() {\n        return [this._rows, this._cols];\n    }\n\n    /**\n     * Returns the matrix in the given shape with the given function which returns values for the entries of the matrix.\n     * @param {Array} parameter - takes an Array in the form [rows, cols, value], where rows and cols are the number of rows and columns of the matrix, and value is a function which takes two parameters (row and col) which has to return a value for the colth entry of the rowth row.\n     * @returns {Matrix}\n     */\n    set shape([rows, cols, value = () => 0]) {\n        this._rows = rows;\n        this._cols = cols;\n        this._data = new Float64Array(rows * cols);\n        for (let i = 0, row = 0; row < rows; ++row) {\n            for (let col = 0; col < cols; ++col, ++i) {\n                this._data[i] = value(row, col);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Float64Arrays.\n     * @returns {Array<Float64Array>}\n     */\n    get to2dArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(row);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the Matrix as a Array of Arrays.\n     * @returns {Array<Array>}\n     */\n    get asArray() {\n        const result = [];\n        for (const row of this.iterate_rows()) {\n            result.push(Array.from(row));\n        }\n        return result;\n    }\n\n    /**\n     * Returns the diagonal of the Matrix.\n     * @returns {Float64Array}\n     */\n    get diag() {\n        const rows = this._rows;\n        const cols = this._cols;\n        const min_row_col = Math.min(rows, cols);\n        let result = new Float64Array(min_row_col);\n        for (let i = 0; i < min_row_col; ++i) {\n            result[i] = this.entry(i, i);\n        }\n        return result;\n    }\n\n    /**\n     * Returns the mean of all entries of the Matrix.\n     * @returns {Number}\n     */\n    get mean() {\n        const sum = this.sum;\n        const n = this._rows * this._cols;\n        return sum / n;\n    }\n\n    /**\n     * Returns the sum oof all entries of the Matrix.\n     * @returns {Number}\n     */\n    get sum() {\n        const data = this.values;\n        return neumair_sum(data);\n    }\n\n    /**\n     * Returns the entries of the Matrix.\n     * @returns {Float64Array}\n     */\n    get values() {\n        const data = this._data;\n        return data;\n    }\n\n    /**\n     * Returns the mean of each row of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanRows() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: rows });\n        for (let i = 0, row = 0; row < rows; ++row) {\n            let sum = 0;\n            for (let col = 0; col < cols; ++col, ++i) {\n                sum += data[i];\n            }\n            result[row] = sum / cols;\n        }\n        return result;\n    }\n\n    /** Returns the mean of each column of the matrix.\n     * @returns {Float64Array}\n     */\n    get meanCols() {\n        const data = this.values;\n        const rows = this._rows;\n        const cols = this._cols;\n        const result = Float64Array.from({ length: cols });\n        for (let col = 0; col < cols; ++col) {\n            let sum = 0;\n            for (let i = col, row = 0; row < rows; ++row, i += cols) {\n                sum += data[i];\n            }\n            result[col] = sum / rows;\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b} using the conjugate gradient method. Returns the result x.\n     * @param {Matrix} A - Matrix\n     * @param {Matrix} b - Matrix\n     * @param {Randomizer} [randomizer=null]\n     * @param {Number} [tol=1e-3]\n     * @returns {Matrix}\n     */\n    static solve_CG(A, b, randomizer, tol = 1e-3) {\n        if (randomizer === null) {\n            randomizer = new Randomizer();\n        }\n        const rows = A.shape[0];\n        const cols = b.shape[1];\n        let result = new Matrix(rows, 0);\n        for (let i = 0; i < cols; ++i) {\n            const b_i = Matrix.from(b.col(i)).T;\n            let x = new Matrix(rows, 1, () => randomizer.random);\n            let r = b_i.sub(A.dot(x));\n            let d = r.clone();\n            do {\n                const z = A.dot(d);\n                const alpha = r.transDot(r).entry(0, 0) / d.transDot(z).entry(0, 0);\n                x = x.add(d.mult(alpha));\n                const r_next = r.sub(z.mult(alpha));\n                const beta = r_next.transDot(r_next).entry(0, 0) / r.transDot(r).entry(0, 0);\n                d = r_next.add(d.mult(beta));\n                r = r_next;\n            } while (Math.abs(r.mean) > tol);\n            result = result.concat(x, \"horizontal\");\n        }\n        return result;\n    }\n\n    /**\n     * Solves the equation {@link A}x = {@link b}. Returns the result x.\n     * @param {Matrix} A - Matrix or LU Decomposition\n     * @param {Matrix} b - Matrix\n     * @returns {Matrix}\n     */\n    static solve(A, b) {\n        let { L: L, U: U } = \"L\" in A && \"U\" in A ? A : Matrix.LU(A);\n        let rows = L.shape[0];\n        let x = b.clone();\n\n        // forward\n        for (let row = 0; row < rows; ++row) {\n            for (let col = 0; col < row - 1; ++col) {\n                x.sub_entry(0, row, L.entry(row, col) * x.entry(1, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / L.entry(row, row));\n        }\n\n        // backward\n        for (let row = rows - 1; row >= 0; --row) {\n            for (let col = rows - 1; col > row; --col) {\n                x.sub_entry(0, row, U.entry(row, col) * x.entry(0, col));\n            }\n            x.set_entry(0, row, x.entry(0, row) / U.entry(row, row));\n        }\n\n        return x;\n    }\n\n    /**\n     * {@link L}{@link U} decomposition of the Matrix {@link A}. Creates two matrices, so that the dot product LU equals A.\n     * @param {Matrix} A\n     * @returns {{L: Matrix, U: Matrix}} result - Returns the left triangle matrix {@link L} and the upper triangle matrix {@link U}.\n     */\n    static LU(A) {\n        const rows = A.shape[0];\n        const L = new Matrix(rows, rows, \"zeros\");\n        const U = new Matrix(rows, rows, \"identity\");\n\n        for (let j = 0; j < rows; ++j) {\n            for (let i = j; i < rows; ++i) {\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(i, k) * U.entry(k, j);\n                }\n                L.set_entry(i, j, A.entry(i, j) - sum);\n            }\n            for (let i = j; i < rows; ++i) {\n                if (L.entry(j, j) === 0) {\n                    return undefined;\n                }\n                let sum = 0;\n                for (let k = 0; k < j; ++k) {\n                    sum += L.entry(j, k) * U.entry(k, i);\n                }\n                U.set_entry(j, i, (A.entry(j, i) - sum) / L.entry(j, j));\n            }\n        }\n\n        return { L: L, U: U };\n    }\n\n    /**\n     * Computes the determinante of {@link A}, by using the LU decomposition of {@link A}.\n     * @param {Matrix} A\n     * @returns {Number} det - Returns the determinate of the Matrix {@link A}.\n     */\n    static det(A) {\n        const rows = A.shape[0];\n        const { L, U } = Matrix.LU(A);\n        const L_diag = L.diag;\n        const U_diag = U.diag;\n        let det = L_diag[0] * U_diag[0];\n        for (let row = 1; row < rows; ++row) {\n            det *= L_diag[row] * U_diag[row];\n        }\n        return det;\n    }\n\n    /**\n     * Computes the {@link k} components of the SVD decomposition of the matrix {@link M}\n     * @param {Matrix} M\n     * @param {int} [k=2]\n     * @returns {{U: Matrix, Sigma: Matrix, V: Matrix}}\n     */\n    static SVD(M, k = 2) {\n        let MtM = M.transDot(M);\n        let MMt = M.dotTrans(M);\n        let { eigenvectors: V, eigenvalues: Sigma } = simultaneous_poweriteration(MtM, k);\n        let { eigenvectors: U } = simultaneous_poweriteration(MMt, k);\n        return { U: U, Sigma: Sigma.map((sigma) => Math.sqrt(sigma)), V: V };\n\n        //Algorithm 1a: Householder reduction to bidiagonal form:\n        /* const [m, n] = A.shape;\n        let U = new Matrix(m, n, (i, j) => i == j ? 1 : 0);\n        console.log(U.to2dArray)\n        let V = new Matrix(n, m, (i, j) => i == j ? 1 : 0);\n        console.log(V.to2dArray)\n        let B = Matrix.bidiagonal(A.clone(), U, V);\n        console.log(U,V,B)\n        return { U: U, \"Sigma\": B, V: V }; */\n    }\n\n    static isArray(A) {\n      return Array.isArray(A) || A instanceof Float64Array || A instanceof Float32Array;\n    }\n}\n","import { linspace, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @memberof module:utils\n * @alias Randomizer\n */\nexport class Randomizer {\n    /**\n     * Mersenne Twister random number generator.\n     * @constructor\n     * @param {Number} [_seed=new Date().getTime()] - The seed for the random number generator. If <code>_seed == null</code> then the actual time gets used as seed.\n     * @see https://github.com/bmurray7/mersenne-twister-examples/blob/master/javascript-mersenne-twister.js\n     */\n    constructor(_seed) {\n        this._N = 624;\n        this._M = 397;\n        this._MATRIX_A = 0x9908b0df;\n        this._UPPER_MASK = 0x80000000;\n        this._LOWER_MASK = 0x7fffffff;\n        this._mt = new Array(this._N);\n        this._mti = this.N + 1;\n\n        this.seed = _seed || new Date().getTime();\n        return this;\n    }\n\n    set seed(_seed) {\n        this._seed = _seed;\n        let mt = this._mt;\n\n        mt[0] = _seed >>> 0;\n        for (this._mti = 1; this._mti < this._N; this._mti += 1) {\n            let mti = this._mti;\n            let s = mt[mti - 1] ^ (mt[mti - 1] >>> 30);\n            mt[mti] = ((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253 + mti;\n            mt[mti] >>>= 0;\n        }\n    }\n\n    /**\n     * Returns the seed of the random number generator.\n     * @returns {Number} - The seed.\n     */\n    get seed() {\n        return this._seed;\n    }\n\n    /**\n     * Returns a float between 0 and 1.\n     * @returns {Number} - A random number between [0, 1]\n     */\n    get random() {\n        return this.random_int * (1.0 / 4294967296.0);\n    }\n\n    /**\n     * Returns an integer between 0 and MAX_INTEGER.\n     * @returns {Integer} - A random integer.\n     */\n    get random_int() {\n        let y,\n            mag01 = new Array(0x0, this._MATRIX_A);\n        if (this._mti >= this._N) {\n            let kk;\n\n            /* if (this._mti == this._N + 1) {\n                this.seed = 5489;\n            } */\n\n            let N_M = this._N - this._M;\n            let M_N = this._M - this._N;\n\n            for (kk = 0; kk < N_M; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + this._M] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n            for (; kk < this._N - 1; ++kk) {\n                y = (this._mt[kk] & this._UPPER_MASK) | (this._mt[kk + 1] & this._LOWER_MASK);\n                this._mt[kk] = this._mt[kk + M_N] ^ (y >>> 1) ^ mag01[y & 0x1];\n            }\n\n            y = (this._mt[this._N - 1] & this._UPPER_MASK) | (this._mt[0] & this._LOWER_MASK);\n            this._mt[this._N - 1] = this._mt[this._M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n            this._mti = 0;\n        }\n\n        y = this._mt[(this._mti += 1)];\n        y ^= y >>> 11;\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= y >>> 18;\n\n        return y >>> 0;\n    }\n\n    gauss_random() {\n        let x, y, r;\n        if (this._val != null) {\n            x = this._val, this._val = null;\n            return x;\n        } else do {\n            x = 2 * this.random - 1;\n            y = 2 * this.random - 1;\n            r = x * x + y * y;\n        } while (!r || r > 1);\n        const c = Math.sqrt(-2 * Math.log(r) / r);\n        this._val = y * c; // cache this for next function call for efficiency\n        return x * c;\n    }\n\n    /**\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    choice(A, n) {\n        if (A instanceof Matrix) {\n            let rows = A.shape[0];\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A.row(d));\n        } else if (Array.isArray(A) || A instanceof Float64Array) {\n            let rows = A.length;\n            if (n > rows) {\n                throw new Error(\"n bigger than A!\");\n            }\n            let sample = new Array(n);\n            let index_list = linspace(0, rows - 1);\n            for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n                let random_index = this.random_int % l;\n                sample[i] = index_list.splice(random_index, 1)[0];\n            }\n            return sample.map((d) => A[d]);\n        }\n    }\n\n    /**\n     * @static\n     * Returns samples from an input Matrix or Array.\n     * @param {Matrix|Array|Float64Array} A - The input Matrix or Array.\n     * @param {Number} n - The number of samples.\n     * @param {Number} seed - The seed for the random number generator.\n     * @returns {Array} - A random selection form {@link A} of {@link n} samples.\n     */\n    static choice(A, n, seed = 1212) {\n        const R = new Randomizer(seed);\n        return R.choice(A, n);\n        /* let rows = A.shape[0];\n        if (n > rows) {\n            throw new Error(\"n bigger than A!\");\n        }\n        let rand = new Randomizer(seed);\n        let sample = new Array(n);\n        let index_list = linspace(0, rows - 1);\n        for (let i = 0, l = index_list.length; i < n; ++i, --l) {\n            let random_index = rand.random_int % l;\n            sample[i] = index_list.splice(random_index, 1)[0];\n        }\n        //return result;\n        //return new Matrix(n, cols, (row, col) => A.entry(sample[row], col))\n        return sample.map((d) => A.row(d)); */\n    }\n}\n","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias max\n * @param {Array} values \n * @returns {Number}\n */\nexport default function (values) {\n    let max;\n    for (const value of values) {\n        if (value != null && (max < value || (max === undefined && value >= value))) {\n            max = value;\n        }\n    }\n    return max;\n}","/**\n * Returns maximum in Array {@link values}.\n * @memberof module:utils\n * @alias min\n * @param {Array} values\n * @returns {Number}\n */\nexport default function (values) {\n    let min;\n    for (const value of values) {\n        if (value != null && (min > value || (min === undefined && value <= value))) {\n            min = value;\n        }\n    }\n    return min;\n}","/**\n * @class\n * @alias Heap\n */\nexport class Heap {\n    /**\n     * A heap is a datastructure holding its elements in a specific way, so that the top element would be the first entry of an ordered list.\n     * @constructor\n     * @memberof module:datastructure\n     * @alias Heap\n     * @param {Array=} elements - Contains the elements for the Heap. {@link elements} can be null.\n     * @param {Function} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(\"min\"|\"max\"|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     * @see {@link https://en.wikipedia.org/wiki/Binary_heap}\n     */\n    constructor(elements = null, accessor = d => d, comparator = \"min\") {\n        if (elements) {\n            return Heap.heapify(elements, accessor, comparator);\n        } else {\n            this._accessor = accessor;\n            this._container = [];\n            if (comparator == \"min\") {\n                this._comparator = (a, b) => a < b;\n            } else if (comparator == \"max\") {\n                this._comparator = (a, b) => a > b;\n            } else {\n                this._comparator = comparator;\n            }\n            return this\n        }\n    }\n\n    /**\n     * Creates a Heap from an Array\n     * @param {Array|Set} elements - Contains the elements for the Heap.\n     * @param {Function=} [accessor = (d) => d] - Function returns the value of the element.\n     * @param {(String=|Function)} [comparator = \"min\"] - Function returning true or false defining the wished order of the Heap, or String for predefined function. (\"min\" for a Min-Heap, \"max\" for a Max_heap)\n     * @returns {Heap}\n     */\n    static heapify(elements, accessor = d => d, comparator = \"min\") {\n        const heap = new Heap(null, accessor, comparator);\n        const container = heap._container;\n        for (const e of elements) {\n            container.push({\n                \"element\": e,\n                \"value\": accessor(e),\n            });\n        }\n        for (let i = Math.floor((elements.length / 2) - 1); i >= 0; --i) {\n            heap._heapify_down(i);\n        }\n        return heap;\n    }\n\n    /**\n     * Swaps elements of container array.\n     * @private\n     * @param {Number} index_a \n     * @param {Number} index_b \n     */\n    _swap(index_a, index_b) {\n        const container = this._container;\n        [container[index_b], container[index_a]] = [container[index_a], container[index_b]];\n        return;\n    }\n\n    /**\n     * @private\n     */\n    _heapify_up() {\n        const container = this._container;\n        let index = container.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (!this._comparator(container[index].value, container[parentIndex].value)) {\n                break;\n            } else {\n            this._swap(parentIndex, index)\n            index = parentIndex;\n            }\n        }\n    }\n\n    /**\n     * Pushes the element to the heap.\n     * @param {} element\n     * @returns {Heap}\n     */\n    push(element) {\n        const value = this._accessor(element);\n        //const node = new Node(element, value);\n        const node = {\"element\": element, \"value\": value};\n        this._container.push(node);\n        this._heapify_up();\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Number} [start_index = 0] \n     */\n    _heapify_down(start_index=0) {\n        const container = this._container;\n        const comparator = this._comparator;\n        const length = container.length;\n        let left = 2 * start_index + 1;\n        let right = 2 * start_index + 2;\n        let index = start_index;\n        if (index > length) throw \"index higher than length\"\n        if (left < length && comparator(container[left].value, container[index].value)) {\n            index = left;\n        }\n        if (right < length && comparator(container[right].value, container[index].value)) {\n            index = right;\n        }\n        if (index !== start_index) {\n            this._swap(start_index, index);\n            this._heapify_down(index);\n        }\n    }\n\n    /**\n     * Removes and returns the top entry of the heap.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    pop() {\n        const container = this._container;\n        if (container.length === 0) {\n            return null;\n        } else if (container.length === 1) {\n            return container.pop();\n        }\n        this._swap(0, container.length - 1);\n        const item = container.pop();\n        this._heapify_down();\n        return item;\n    }\n\n    /**\n     * Returns the top entry of the heap without removing it.\n     * @returns {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    get first() {\n        return this._container.length > 0 ? this._container[0] : null;\n    }\n\n\n    /**\n     * Yields the raw data\n     * @yields {Object} Object consists of the element and its value (computed by {@link accessor}).\n     */\n    * iterate() {\n        for (let i = 0, n = this._container.length; i < n; ++i) {\n            yield this._container[i].element;\n        }\n    }\n\n    /**\n     * Returns the heap as ordered array.\n     * @returns {Array} Array consisting the elements ordered by {@link comparator}.\n     */\n    toArray() {\n        return this.data()\n            .sort((a,b) => this._comparator(a, b) ? -1 : 0)\n    }\n\n    /**\n     * Returns elements of container array.\n     * @returns {Array} Array consisting the elements.\n     */\n    data() {\n        return this._container\n            .map(d => d.element)\n    }\n\n    /**\n     * Returns the container array.\n     * @returns {Array} The container array.\n     */\n    raw_data() {\n        return this._container;\n    }\n\n    /**\n     * The size of the heap.\n     * @returns {Number}\n     */\n    get length() {\n        return this._container.length;\n    }\n\n    /**\n     * Returns false if the the heap has entries, true if the heap has no entries.\n     * @returns {Boolean}\n     */\n    get empty() {\n        return this.length === 0;\n    }\n}","/**\n * @class\n * @alias DisjointSet\n * @see {@link https://en.wikipedia.org/wiki/Disjoint-set_data_structure}\n */\nexport class DisjointSet {\n    /**\n     * @constructor\n     * @alias DisjointSet\n     * @memberof module:datastructure\n     * @param {Array=} elements \n     * @returns {DisjointSet}\n     */\n    constructor(elements = null) {\n        this._list = new Set();\n        if (elements) {\n            for (const e of elements) {\n                this.make_set(e);\n            }\n        }\n        return this;\n    }\n\n    make_set(x) {\n        const list = this._list;\n        if (!list.has(x)) {\n            list.add(x);\n            x.__disjoint_set = {};\n            x.__disjoint_set.parent = x;\n            x.__disjoint_set.children = new Set([x]);\n            x.__disjoint_set.size = 1;\n        }\n        return this;\n    }\n\n    find(x) {\n        const list = this._list;\n        if (list.has(x)) {\n            if (x.__disjoint_set.parent !== x) {\n                x.__disjoint_set.children.add(...x);\n                x.__disjoint_set.parent = this.find(x.__disjoint_set.parent);\n                return x.__disjoint_set.parent;\n            } else {\n                return x;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    union(x, y) {\n        let node_x = this.find(x);\n        let node_y = this.find(y);\n\n        if (node_x === node_y) return this;\n        if (node_x.__disjoint_set.size < node_y.__disjoint_set.size) [node_x, node_y] = [node_y, node_x];\n\n        node_y.__disjoint_set.parent = node_x;\n        // keep track of children?\n        node_y.__disjoint_set.children.forEach(node_x.__disjoint_set.children.add, node_x.__disjoint_set.children);\n        node_x.__disjoint_set.size += node_y.__disjoint_set.size;\n\n        return this;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n/**\n * @class\n * @alias BallTree\n */\nexport class BallTree {\n    /**\n     * Generates a BallTree with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias BallTree\n     * @param {Array=} elements - Elements which should be added to the BallTree\n     * @param {Function} [metric = euclidean] metric to use: (a, b) => distance\n     * @see {@link https://en.wikipedia.org/wiki/Ball_tree}\n     * @see {@link https://github.com/invisal/noobjs/blob/master/src/tree/BallTree.js}\n     * @returns {BallTree}\n     */\n    constructor(elements = null, metric = euclidean) {\n        this._Node = class {\n            constructor(pivot, child1=null, child2=null, radius=null) {\n                this.pivot = pivot;\n                this.child1 = child1;\n                this.child2 = child2;\n                this.radius = radius;\n            }\n        }\n        this._Leaf = class {\n            constructor(points) {\n                this.points = points;\n            }\n        }\n        this._metric = metric;\n        if (elements) {\n            this.add(elements);\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @param {Array<*>} elements - new elements.\n     * @returns {BallTree}\n     */\n    add(elements) {\n        elements = elements.map((element, index) => {\n            return {index: index, element: element}\n        })\n        this._root = this._construct(elements);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {Array<*>} elements \n     * @returns {Node} root of balltree.\n     */\n    _construct(elements) {\n        if (elements.length === 1) {\n            return new this._Leaf(elements);\n        } else {\n            let c = this._greatest_spread(elements);\n            let sorted_elements = elements.sort((a, b) => a.element[c] - b.element[c]);\n            let n = sorted_elements.length;\n            let p_index = Math.floor(n / 2);\n            let p = elements[p_index];\n            let L = sorted_elements.slice(0, p_index);\n            let R = sorted_elements.slice(p_index, n);\n            let radius = Math.max(...elements.map(d => this._metric(p.element, d.element)));\n            let B\n            if (L.length > 0 && R.length > 0) {         \n                B = new this._Node(p, this._construct(L), this._construct(R), radius);\n            } else {\n                B = new this._Leaf(elements);\n            }\n            return B;\n        }\n    }\n\n    /**\n     * @private\n     * @param {Node} B \n     * @returns {Number}\n     */\n    _greatest_spread(B) {\n        let d = B[0].element.length;\n        let start = new Array(d);\n\n        for (let i = 0; i < d; ++i) {\n            start[i] = [Infinity, -Infinity];\n        }\n\n        let spread = B.reduce((acc, current) => {\n            for (let i = 0; i < d; ++i) {\n                acc[i][0] = Math.min(acc[i][0], current.element[i]);\n                acc[i][1] = Math.max(acc[i][1], current.element[i]);\n            }\n            return acc;\n        }, start);\n        spread = spread.map(d => d[1] - d[0]);\n        \n        let c = 0;\n        for (let i = 0; i < d; ++i) {\n            c = spread[i] > spread[c] ? i : c;\n        }\n        return c;\n    }\n\n    /**\n     * \n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        return this._search(t, k, new Heap(null, d => this._metric(d.element, t), \"max\"), this._root);\n    }\n\n    /**\n     * @private\n     * @param {*} t - query element.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @param {Heap} Q - Heap consists of the currently found {@link k} nearest neighbors.\n     * @param {Node|Leaf} B \n     */\n    _search(t, k, Q, B) {\n        // B is Node\n        if (Q.length >= k && B.pivot && B.radius && this._metric(t, B.pivot.element) - B.radius >= Q.first.value) {\n            return Q;\n        } \n        if (B.child1) this._search(t, k, Q, B.child1);\n        if (B.child2) this._search(t, k, Q, B.child2);\n        \n        // B is leaf\n        if (B.points) {\n            for (let i = 0, n = B.points.length; i < n; ++i) {\n                let p = B.points[i];\n                if (k > Q.length) {\n                    Q.push(p);\n                } else {\n                    Q.push(p);\n                    Q.pop();\n                }\n            }\n        }\n        return Q;\n    }\n}","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KNN\n */\nexport class KNN {\n    /**\n     * Generates a KNN list with given {@link elements}.\n     * @constructor\n     * @memberof module:knn\n     * @alias KNN\n     * @param {Array=} elements - Elements which should be added to the KNN list\n     * @param {Function|\"precomputed\"} [metric = euclidean] metric is either precomputed or a function to use: (a, b) => distance\n     * @returns {KNN}\n     */\n    constructor(elements=null, metric=euclidean) {\n        this._metric = metric;\n        this._elements = elements instanceof Matrix ? elements : Matrix.from(elements);\n        const N = this._elements.shape[0];\n        if (metric === \"precomputed\") {\n            this._D = this._elements.clone();\n        } else {\n            this._D = distance_matrix(this._elements, metric);\n        }\n        this.KNN = [];\n        for (let row = 0; row < N; ++row) {\n            const distances = this._D.row(row);\n            const H = new Heap(null, d => d.value, \"min\");\n            for (let j = 0; j < N; ++j) {\n                H.push({\n                    value: distances[j],\n                    index: j,\n                });\n            }\n            this.KNN.push(H);\n        }\n    }\n\n    /**\n     * \n     * @param {Array|Number} t - query element or index.\n     * @param {Number} [k = 5] - number of nearest neighbors to return.\n     * @returns {Heap} - Heap consists of the {@link k} nearest neighbors.\n     */\n    search(t, k = 5) {\n        const metric = this._metric;\n        const KNN = this.KNN;\n        let H;\n        if (Array.isArray(t)) {\n            if (this._metric == \"precomputed\") {\n                throw \"Search by query element is only possible when not using a precomputed distance matrix!\"\n            } \n            const elements = this._elements;\n            const N = KNN.length;\n            let nearest_element_index = null;\n            let nearest_dist = Infinity;\n            for (let i = 0; i < N; ++i) {\n                const element = elements.row(i);\n                const dist = metric(t, element);\n                if (dist < nearest_dist) {\n                    nearest_element_index = i;\n                    nearest_dist = dist;\n                }\n            }\n            H = KNN[nearest_element_index];\n        } else if (Number.isInteger(t)) {\n            H = KNN[t]\n        }\n\n        let result = []\n        for (let i = 0; i < k; ++i) {\n            result.push(H.pop())\n        }\n        result.forEach(res => H.push(res.element))\n        return result\n    }    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { Randomizer } from \"../util/index.js\";\n\n/**\n * @class\n * @alias DR\n * @borrows DR#parameter as DR#para\n * @borrows DR#parameter as DR#p\n */\nexport class DR {\n    /**\n     * Takes the default parameters and seals them, remembers the type of input {@link X}, and initializes the random number generator.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias DR\n     * @param {Matrix|number[][]} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the seed value for the random number generator.\n     * @returns {DR}\n     */\n    constructor(X, default_parameters, parameters) {\n        this._parameters = Object.assign(Object.seal(default_parameters), parameters);\n        if (Array.isArray(X)) {\n            this._type = \"array\";\n            this.X = Matrix.from(X);\n        } else if (X instanceof Matrix) {\n            this._type = \"matrix\";\n            this.X = X;\n        } else {\n            throw new Error(\"No valid type for X!\");\n        }\n        [this._N, this._D] = this.X.shape;\n        this._randomizer = new Randomizer(this._parameters.seed);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * Set and get parameters\n     * @param {string} [name = null] - Name of the parameter. If not given then returns all parameters as an Object.\n     * @param {any} [value = null] - Value of the parameter to set. If <code>name</code> is set and <code>value</code> is not given, returns the value of the respective parameter.\n     * @returns {DR|any|object}\n     * On setting a parameter, this function returns the DR object.\n     * If <code>name</code> is set and <code>value == null</code> then return actual parameter value.\n     * If <code>name</code> is not given, then returns all parameters as an Object.\n     *\n     * @example\n     * '''\n     * const DR = new druid.TSNE(X, {d: 3}); // creates a new DR object, with parameter for <code>d</code> = 3.\n     * DR.parameter(\"d\"); // returns 3,\n     * DR.parameter(\"d\", 2); // sets parameter <code>d</code> to 2 and returns <code>DR</code>.\n     * '''\n     */\n    parameter(name = null, value = null) {\n        if (name === null) {\n            return Object.assign({}, this._parameters);\n        }\n        if (!this._parameters.hasOwnProperty(name)) {\n            throw new Error(`${name} is not a valid parameter!`);\n        }\n        if (value !== null) {\n            this._parameters[name] = value;\n            this._is_initialized = false;\n            return this;\n        } else {\n            return this._parameters[name];\n        }\n    }\n\n    para(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    p(name = null, value = null) {\n        return this.parameter(name, value);\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} the projection.\n     */\n    transform() {\n        this.check_init();\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @yields {Matrix|number[][]} the intermediate steps of the projection.\n     */\n    *generator() {\n        return this.transform();\n    }\n\n    /**\n     * If the respective DR method has an <code>init</code> function, call it before <code>transform</code>.\n     * @returns {DR}\n     */\n    check_init() {\n        if (!this._is_initialized && typeof this.init === \"function\") {\n            this.init();\n            this._is_initialized = true;\n        }\n        return this;\n    }\n\n    /**\n     * @returns {Matrix|number[][]} the projection in the type of input <code>X</code>.\n     */\n    get projection() {\n        if (this.hasOwnProperty(\"Y\")) {\n            this.check_init();\n            return this._type === \"matrix\" ? this.Y : this.Y.to2dArray;\n        } else {\n            throw new Error(\"The dataset is not transformed yet!\");\n        }\n    }\n\n    /**\n     * Computes the projection.\n     * @param  {...unknown} args - Arguments the transform method of the respective DR method takes.\n     * @returns {Promise<Matrix|number[][]>} the dimensionality reduced dataset.\n     */\n    async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Matrix|number[][]} the dimensionality reduced dataset.\n     */\n    static transform(...args) {\n        let dr = new this(...args);\n        return dr.transform();\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Promise} a promise yielding the dimensionality reduced dataset.\n     */\n    static async transform_async(...args) {\n        return this.transform(...args);\n    }\n\n    /**\n     * Computes the projection.\n     * @static\n     * @param  {...unknown} args - Takes the same arguments of the constructor of the respective DR method.\n     * @returns {Generator} a generator yielding the intermediate steps of the dimensionality reduction method.\n     */\n    static *generator(...args) {\n        const dr = new this(...args);\n        const generator = dr.generator();\n        for (const result of generator) {\n            yield result;\n        }\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias PCA\n * @augments DR\n */\nexport class PCA extends DR {\n    /**\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias PCA\n     * @param {Matrix|number[][]} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {object} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @returns {PCA}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}. If parameter {@link A} is given, then project {@link A} with the principal components of {@link X}.\n     * @param {null|Matrix|number[][]} [A = null] - If given, the data to project.\n     * @returns {Matrix|number[][]} - The projected data.\n     */\n    transform(A = null) {\n        const V = this.principal_components();\n        if (A == null) {\n            const X = this.X;\n            this.Y = X.dot(V);\n            return this.projection;\n        } else if (Array.isArray(A)) {\n            return Matrix.from(A).dot(V).asArray;\n        } else if (A instanceof Matrix) {\n            return A.dot(V);\n        } else {\n            throw new Error(\"No valid type for A!\");\n        }\n    }\n\n    /**\n     * Computes the {@link d} principal components of Matrix {@link X}.\n     * @returns {Matrix}\n     */\n    principal_components() {\n        if (this.V) {\n            return this.V;\n        }\n        const { d, eig_args } = this._parameters;\n        const X = this.X;\n        const X_cent = X.sub(X.meanCols);\n        const C = X_cent.transDot(X_cent);\n        const { eigenvectors: V } = simultaneous_poweriteration(C, d, eig_args);\n        this.V = Matrix.from(V).transpose();\n        return this.V;\n    }\n\n    static principal_components(X, parameters) {\n        const dr = new this(X, parameters);\n        return dr.principal_components();\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { distance_matrix, Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias MDS\n * @extends DR\n */\nexport class MDS extends DR {\n    /**\n     * Classical MDS.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias MDS\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {object} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality {@link d}.\n     * @returns {Matrix|number[][]}\n     */\n    transform() {\n        const X = this.X;\n        const rows = X.shape[0];\n        const { d, metric, eig_args } = this._parameters;\n        const A = metric === \"precomputed\" ? X : distance_matrix(X, metric);\n        const ai_ = A.meanCols;\n        const a_j = A.meanRows;\n        const a__ = A.mean;\n\n        this._d_X = A;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n\n        return this.projection;\n    }\n\n    /**\n     * @returns {number} - the stress of the projection.\n     */\n    stress() {\n        const N = this.X.shape[0];\n        const Y = this.Y;\n        const d_X = this._d_X;\n        const d_Y = new Matrix();\n        d_Y.shape = [\n            N,\n            N,\n            (i, j) => {\n                return i < j ? euclidean(Y.row(i), Y.row(j)) : d_Y.entry(j, i);\n            },\n        ];\n        let top_sum = 0;\n        let bottom_sum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                top_sum += Math.pow(d_X.entry(i, j) - d_Y.entry(i, j), 2);\n                bottom_sum += Math.pow(d_X.entry(i, j), 2);\n            }\n        }\n        return Math.sqrt(top_sum / bottom_sum);\n    }\n}\n","/**\n *\n * @memberof module:optimization\n * @alias powell\n * @param {Function} f\n * @param {number[]} x0\n * @param {number} [max_iter = 300]\n * @returns {number[]}\n * @see http://optimization-js.github.io/optimization-js/optimization.js.html#line438\n */\nexport default function (f, x0, max_iter = 300) {\n    const epsilon = 1e-2;\n    const n = x0.length;\n    let alpha = 1e-3;\n    let pfx = 10000;\n    let x = x0.slice();\n    let fx = f(x);\n    let convergence = false;\n\n    while (max_iter-- >= 0 && !convergence) {\n        convergence = true;\n        for (let i = 0; i < n; ++i) {\n            x[i] += 1e-6;\n            let fxi = f(x);\n            x[i] -= 1e-6;\n            let dx = (fxi - fx) / 1e-6;\n            if (Math.abs(dx) > epsilon) {\n                convergence = false;\n            }\n            x[i] -= alpha * dx;\n            fx = f(x);\n        }\n        alpha *= pfx >= fx ? 1.05 : 0.4;\n        pfx = fx;\n    }\n    return x;\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\n/**\n * @class\n * @alias Hierarchical_Clustering\n */\nexport class Hierarchical_Clustering {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias Hierarchical_Clustering\n     * @todo needs restructuring.\n     * @param {Matrix} - Data or distance matrix if metric is 'precomputed'\n     * @param {(\"single\"|\"complete\"|\"average\")} [linkage = \"complete\"]\n     * @param {Function|\"precomputed\"} [metric = euclidean]\n     * @returns {Hierarchical_Clustering}\n     */\n    constructor(matrix, linkage = \"complete\", metric = euclidean) {\n        this._id = 0;\n        this._matrix = matrix instanceof Matrix ? matrix : Matrix.from(matrix);\n        this._metric = metric;\n        this._linkage = linkage;\n        if (metric === \"precomputed\" && this._matrix.shape[0] !== this._matrix.shape[1]) {\n            throw new Error(\"If metric is 'precomputed', then matrix has to be square!\");\n        }\n        this.init();\n        this.root = this.do();\n        return this;\n    }\n\n    /**\n     *\n     * @param {Number} value - value where to cut the tree.\n     * @param {(\"distance\"|\"depth\")} [type = \"distance\"] - type of value.\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters(value, type = \"distance\") {\n        let clusters = [];\n        let accessor;\n        switch (type) {\n            case \"distance\":\n                accessor = (d) => d.dist;\n                break;\n            case \"depth\":\n                accessor = (d) => d.depth;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        this._traverse(this.root, accessor, value, clusters);\n        return clusters;\n    }\n\n    /**\n     * @private\n     * @param {} node\n     * @param {*} f\n     * @param {*} value\n     * @param {*} result\n     */\n    _traverse(node, f, value, result) {\n        if (f(node) <= value) {\n            result.push(node.leaves());\n        } else {\n            this._traverse(node.left, f, value, result);\n            this._traverse(node.right, f, value, result);\n        }\n    }\n\n    /**\n     * computes the tree.\n     */\n    init() {\n        const metric = this._metric;\n        const A = this._matrix;\n        const n = (this._n = A.shape[0]);\n        const d_min = (this._d_min = new Float64Array(n));\n        let distance_matrix;\n        if (metric !== \"precomputed\") {\n            distance_matrix = new Matrix(n, n, 0); //new Array(n);\n            for (let i = 0; i < n; ++i) {\n                d_min[i] = 0;\n                //distance_matrix[i] = new Float64Array(n);\n                for (let j = 0; j < n; ++j) {\n                    distance_matrix.set_entry(i, j, i === j ? Infinity : metric(A.row(i), A.row(j)));\n                    if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        } else {\n            distance_matrix = this._matrix.clone();\n            for (let i = 0; i < n; ++i) {\n                for (let j = 0; j < n; ++j) {\n                    if (i === j) {\n                        distance_matrix.set_entry(i, j, Infinity);\n                    } else if (distance_matrix.entry(i, d_min[i]) > distance_matrix.entry(i, j)) {\n                        d_min[i] = j;\n                    }\n                }\n            }\n        }\n        this._distance_matrix = distance_matrix;\n        const clusters = (this._clusters = new Array(n));\n        const c_size = (this._c_size = new Uint16Array(n));\n        for (let i = 0; i < n; ++i) {\n            clusters[i] = [];\n            clusters[i][0] = new Cluster(this._id++, null, null, 0, A.row(i), i, 1, 0);\n            c_size[i] = 1;\n        }\n        return this;\n    }\n\n    /**\n     * computes the tree.\n     */\n    do() {\n        const n = this._n;\n        const d_min = this._d_min;\n        const D = this._distance_matrix;\n        const clusters = this._clusters;\n        const c_size = this._c_size;\n        const linkage = this._linkage;\n        let root = null;\n        for (let p = 0, p_max = n - 1; p < p_max; ++p) {\n            let c1 = 0;\n            for (let i = 0; i < n; ++i) {\n                let D_i_min = D.entry(i, d_min[i]);\n                for (let j = i + 1; j < n; ++j) {\n                    if (D_i_min > D.entry(i, j)) {\n                        d_min[i] = j;\n                        D_i_min = D.entry(i, d_min[i]);\n                    }\n                }\n            }\n            for (let i = 0; i < n; ++i) {\n                if (D.entry(i, d_min[i]) < D.entry(c1, d_min[c1])) {\n                    c1 = i;\n                }\n            }\n            let c2 = d_min[c1];\n            let c1_cluster = clusters[c1][0];\n            let c2_cluster = clusters[c2][0];\n            let c1_cluster_indices = c1_cluster.isLeaf ? [c1_cluster.index] : c1_cluster.index;\n            let c2_cluster_indices = c2_cluster.isLeaf ? [c2_cluster.index] : c2_cluster.index;\n            let indices = c1_cluster_indices.concat(c2_cluster_indices);\n            let new_cluster = new Cluster(this._id++, c1_cluster, c2_cluster, D.entry(c1, c2), null, indices);\n            c1_cluster.parent = new_cluster;\n            c2_cluster.parent = new_cluster;\n            clusters[c1].unshift(new_cluster);\n            c_size[c1] += c_size[c2];\n            for (let j = 0; j < n; ++j) {\n                const D_c1_j = D.entry(c1, j);\n                const D_c2_j = D.entry(c2, j);\n                let value;\n                switch (linkage) {\n                    case \"single\":\n                        value = Math.min(D_c1_j, D_c2_j);\n                        break;\n                    case \"complete\":\n                        value = Math.max(D_c1_j, D_c2_j);\n                        break;\n                    case \"average\":\n                        value = (c_size[c1] * D_c1_j + c_size[c2] * D_c2_j) / (c_size[c1] + c_size[j]);\n                        break;\n                }\n                D.set_entry(j, c1, value);\n                D.set_entry(c1, j, value);\n            }\n\n            D.set_entry(c1, c1, Infinity);\n            for (let i = 0; i < n; ++i) {\n                D.set_entry(i, c2, Infinity);\n                D.set_entry(c2, i, Infinity);\n            }\n\n            /* for (let j = 0; j < n; ++j) {\n                if (d_min[j] === c2) {\n                    d_min[j] = c1;\n                }\n                if (D.entry(c1, j) < D.entry(c1, d_min[c1])) {\n                    d_min[c1] = j;\n                }\n            } */\n            root = new_cluster;\n        }\n        return root;\n    }\n}\n\nclass Cluster {\n    constructor(id, left, right, dist, centroid, index, size, depth) {\n        this.id = id;\n        this.left = left;\n        this.right = right;\n        this.dist = dist;\n        this.index = index;\n        this.size = size ?? left.size + right.size;\n        this.depth = depth ?? 1 + Math.max(left.depth, right.depth);\n        this.centroid = centroid ?? this._calculate_centroid(left, right);\n        this.parent = null;\n        return this;\n    }\n\n    _calculate_centroid(left, right) {\n        const l_size = left.size;\n        const r_size = right.size;\n        const l_centroid = left.centroid;\n        const r_centroid = right.centroid;\n        const size = this.size;\n        const n = left.centroid.length;\n        const new_centroid = new Float64Array(n);\n        for (let i = 0; i < n; ++i) {\n            new_centroid[i] = (l_size * l_centroid[i] + r_size * r_centroid[i]) / size;\n        }\n        return new_centroid;\n    }\n\n    get isLeaf() {\n        return this.depth === 0;\n    }\n\n    leaves() {\n        if (this.isLeaf) return [this];\n        const left = this.left;\n        const right = this.right;\n        return (left.isLeaf ? [left] : left.leaves()).concat(right.isLeaf ? [right] : right.leaves());\n    }\n\n    descendants() {\n        if (this.isLeaf) return [this];\n        const left_descendants = this.left.descendants();\n        const right_descendants = this.right.descendants();\n        return left_descendants.concat(right_descendants).concat([this]);\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { linspace, Matrix } from \"../matrix/index.js\";\nimport { min } from \"../util/index.js\";\n/**\n * @class\n * @alias KMedoids\n */\nexport class KMedoids {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMedoids\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - data matrix\n     * @param {Numbers} K - number of clusters\n     * @param {number} [max_iter=null] - maximum number of iterations. Default is 10 * Math.log10(N)\n     * @param {Function} [metric = euclidean] - metric defining the dissimilarity \n     * @param {Number} [seed = 1212] - seed value for random number generator\n     * @returns {KMedoids}\n     * @see {@link https://link.springer.com/chapter/10.1007/978-3-030-32047-8_16} Faster k-Medoids Clustering: Improving the PAM, CLARA, and CLARANS Algorithms\n     */\n    constructor(matrix, K, max_iter=null, metric = euclidean, seed=1212) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._A = this._matrix.to2dArray;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        this._max_iter = max_iter || 10 * Math.log10(N) \n        this._distance_matrix = new Matrix(N, N, \"zeros\");\n        /* for (let i = 1; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dist = metric(this._A[i], this._A[j]);\n                this._distance_matrix.set_entry(i, j, dist);\n                this._distance_matrix.set_entry(j, i, dist)\n            }\n        } */\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_medoids = this._get_random_medoids(K);\n        //if (init) this.init(K, this._cluster_medoids);\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const A = this._A;\n        if (!this._is_initialized) {\n            this.init(K, this._cluster_medoids);\n        }\n        const result = new Array(K).fill().map(() => new Array());\n        A.forEach((x_j, j) => {\n            result[this._nearest_medoid(x_j, j).index_nearest].push(j);\n        })\n        result.medoids = this._cluster_medoids;\n        return result;\n    }\n\n    async* generator() {\n        const max_iter = this._max_iter;\n        yield this.get_clusters()\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n            yield this.get_clusters();\n        } while (!finish && ++i < max_iter)\n    }\n\n    /**\n     * Algorithm 1. FastPAM1: Improved SWAP algorithm\n     */\n    /* _iteration_1() {\n        const A = this._A;\n        const N = this._N;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        let DeltaTD = 0;\n        let m0 = null;\n        let x0 = null;\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const nearest_medoid = this._nearest_medoid(x_j, j);\n                const d_j = nearest_medoid.distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    // disance to new medoid\n                    const d_oj = this._get_distance(o, j, x_o, x_j);\n                    const {\n                        \"index_nearest\": n,\n                        \"distance_nearest\": d_n,\n                        \"distance_second\": d_s,\n                    } = this._nearest_medoid(x_o, o); \n                    this._clusters[o] = n; // cached values\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change\n                    if (d_oj < d_n) { // reassignment check\n                        deltaTD.forEach((d_i, i) => {\n                            if (n !== i) {\n                                deltaTD[i] = d_i + d_oj - d_n; // update loss change\n                            }\n                        });\n                    }\n                });\n                // choose best medoid i;\n                const i = deltaTD\n                    .map((d, i) => [d, i])\n                    .sort((d1, d2) => d1[0] - d2[0])[0][1];\n                const deltaTD_i = deltaTD[i];\n                // store\n                if (deltaTD_i < DeltaTD) {\n                    DeltaTD = deltaTD_i;\n                    m0 = i;\n                    x0 = j;\n                }\n            }\n        });\n\n        if (DeltaTD >= 0) {\n            return true // break loop if DeltaTD >= 0\n        }\n        // swap roles of medoid m and non-medoid x;\n        medoids[m0] = x0;\n        this._cluster_medoids = medoids;\n        return false\n    } */\n\n    /** Algorithm 2. FastPAM2: SWAP with multiple candidates\n     * \n     */\n    _iteration() {\n        const A = this._A;\n        const K = this._K;\n        const medoids = this._cluster_medoids;\n        const cache = A.map((x_o, o) => this._nearest_medoid(x_o, o));\n        // empty best candidates array\n        const DeltaTD = new Array(K).fill(0);\n        const xs = new Array(K).fill(null);\n        A.forEach((x_j, j) => {\n            if (medoids.findIndex(m => m === j) < 0) {\n                const d_j = cache[j].distance_nearest; // distance to current medoid\n                const deltaTD = new Array(K).fill(-d_j); // change if making j a medoid\n                A.forEach((x_o, o) => {\n                    if (j === o) return;\n                    const d_oj = this._get_distance(o, j, x_o, x_j); // distance to new medoid\n                    const {\"index_nearest\": n, \"distance_nearest\": d_n, \"distance_second\": d_s} = cache[o]; // cached\n                    deltaTD[n] += Math.min(d_oj, d_s) - d_n; // loss change for x_o\n                    // Reassignment check\n                    if (d_oj < d_n) { \n                        // update loss change\n                        for (let i = 0; i < K; ++i) {\n                            if (i !== n) deltaTD[i] += d_oj - d_n;\n                        }\n                    }\n                });\n                // remember best swap for i;\n                deltaTD\n                    .map((d, i) => [d, i])\n                    .filter(([d, i]) => d < DeltaTD[i])\n                    .forEach(([d, i]) => {\n                        if (d < DeltaTD[i]) {\n                            DeltaTD[i] = d;\n                            xs[i] = j;\n                        }\n                    })\n            }\n        })\n        // stop if no improvements were found\n        if (min(DeltaTD) >= 0) return true; \n\n        // execute all improvements\n        while (min(DeltaTD) < 0) {\n            // swap roles of medoid m_i and non_medoid xs_i\n            const i = DeltaTD\n                .map((d, i) => [d, i])\n                .sort(([a], [b]) => a - b)[0][1];\n            if (medoids.filter(m => m == xs[i]).length == 0) {\n                medoids[i] = xs[i];\n            }\n            // disable the swap just performed\n            DeltaTD[i] = 0; \n            // recompute TD for remaining swap candidates\n            DeltaTD\n                .map((d_j, j) => [d_j, j])\n                .filter(([d_j]) => d_j < 0)\n                .forEach(([_, j]) => {\n                    const x_j = A[j];\n                    let sum = 0;\n                    A.forEach((x_o, o) => {\n                        if (medoids.findIndex(m => m != j && m == o) >= 0) return;\n                        if (i == j) return;\n                        if (cache[o].index_nearest === medoids[j])\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j), cache[o].distance_second) - cache[o].distance_nearest); \n                        else {\n                            sum += (Math.min(this._get_distance(o, j, x_o, x_j) - cache[o].distance_nearest, 0));\n                        }\n                    });\n                    DeltaTD[j] = sum;\n                })\n        }\n        this._cluster_medoids = medoids;\n        return false;\n    }\n\n    _get_distance(i, j, x_i=null, x_j=null) {\n        if (i === j) return 0;\n        const D = this._distance_matrix;\n        const A = this._A;\n        const metric = this._metric;\n        let d_ij = D.entry(i, j);\n        if (d_ij === 0) {\n            d_ij = metric(x_i || A[i], x_j || A[j]);\n            D.set_entry(i, j, d_ij);\n            D.set_entry(j, i, d_ij);\n        }\n        return d_ij;\n    }\n\n    _nearest_medoid(x_j, j) {\n        const medoids = this._cluster_medoids;\n        const A = this._A;\n        const [nearest, second] = medoids\n            .map((m, i) => {\n                const x_m = A[m]; \n                return [this._get_distance(j, m, x_j, x_m), i];\n            })\n            .sort((m1, m2) => m1[0] - m2[0]);\n        \n        return { \n            \"distance_nearest\": nearest[0], \n            \"index_nearest\": nearest[1],\n            \"distance_second\": second[0],\n            \"index_second\": second[1],\n        };\n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_medoids) {\n        if (!K) K = this._K;\n        if (!cluster_medoids) cluster_medoids = this._get_random_medoids(K);\n        const max_iter = this._max_iter;\n        let finish = false;\n        let i = 0\n        do {\n            finish = this._iteration();\n        } while (!finish && ++i < max_iter)\n        return this;\n    }\n\n    /**\n     * Algorithm 3. FastPAM LAB: Linear Approximate BUILD initialization.\n     * @param {number} K - number of clusters\n     * \n     */\n    _get_random_medoids(K) {\n        const N = this._N;\n        const A = this._A;\n        const indices = linspace(0, N - 1);\n        const randomizer = this._randomizer;\n        const n = Math.min(N, 10 + Math.ceil(Math.sqrt(N)));\n        const TD = new Array(n).fill(Infinity);\n        const medoids = [];\n        // first medoid\n        let TD0 = Infinity;\n        let S = randomizer.choice(indices, n);\n        for (let j = 0; j < n; ++j) {\n            const S_j = S[j];\n            const x_j = A[S_j];\n            for (let o = 0; o < n; ++o) {\n                if (o === j) continue;\n                const x_o = A[S[o]];\n                TD[j] += this._get_distance(j, o, x_j, x_o);\n            }\n            if (TD[j] < TD0) {\n                TD0 = TD[j]; // smallest distance sum\n                medoids.push(S_j);\n            }\n        }\n        // other medoids\n        for (let i = 1; i < K; ++i) {\n            let DeltaTD = Infinity;\n            S = randomizer.choice(indices.filter(index => medoids.findIndex(d => d === index) < 0), n);\n            for (let j = 0; j < n; ++j) {\n                let deltaTD = 0;\n                const S_j = S[j];\n                const x_j = A[S_j];\n                for (let o = 0; o < n; ++o) {\n                    if (o === j) continue;\n                    const S_o = S[o];\n                    const x_o = A[S_o];\n                    let delta = this._get_distance(S_j, S_o, x_j, x_o) - min(medoids.map(m => this._get_distance(S_o, m, x_o)));\n                    if (delta < 0) {\n                        deltaTD = deltaTD + delta;\n                    }\n                }\n                // best reduction\n                if (deltaTD < DeltaTD) {\n                    DeltaTD = deltaTD;\n                    medoids.push(S_j);\n                }\n            }\n            TD0 += DeltaTD;\n        }\n        return medoids.slice(0, K);\n    }\n    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias FASTMAP\n * @extends DR\n */\nexport class FASTMAP extends DR {\n    /**\n     * FastMap: a fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias FASTMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the dimensionality of the projection.\n     * @returns {FASTMAP}\n     * @see {@link https://doi.org/10.1145/223784.223812}\n     */\n    constructor(X, parameters) {\n        super(X, { d: 2, metric: euclidean, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     * Chooses two points which are the most distant in the actual projection.\n     * @private\n     * @param {function} dist\n     * @returns {number[]} An array consisting of first index, second index, and distance between the two points.\n     */\n    _choose_distant_objects(dist) {\n        const X = this.X;\n        const N = X.shape[0];\n        let a_index = (this._randomizer.random_int % N) - 1;\n        let b_index = null;\n        let max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_ai = dist(a_index, i);\n            if (d_ai > max_dist) {\n                max_dist = d_ai;\n                b_index = i;\n            }\n        }\n        max_dist = -Infinity;\n        for (let i = 0; i < N; ++i) {\n            const d_bi = dist(b_index, i);\n            if (d_bi > max_dist) {\n                max_dist = d_bi;\n                a_index = i;\n            }\n        }\n        return [a_index, b_index, max_dist];\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} The {@link d}-dimensional projection of the data matrix {@link X}.\n     */\n    transform() {\n        const X = this.X;\n        const N = X.shape[0];\n        const { d, metric } = this._parameters;\n        const Y = new Matrix(N, d, 0);\n        let dist = (a, b) => metric(X.row(a), X.row(b));\n\n        for (let _col = 0; _col < d; ++_col) {\n            let old_dist = dist;\n            // choose pivot objects\n            const [a_index, b_index, d_ab] = this._choose_distant_objects(dist);\n            if (d_ab !== 0) {\n                // project the objects on the line (O_a, O_b)\n                for (let i = 0; i < N; ++i) {\n                    const d_ai = dist(a_index, i);\n                    const d_bi = dist(b_index, i);\n                    const y_i = (d_ai ** 2 + d_ab ** 2 - d_bi ** 2) / (2 * d_ab);\n                    Y.set_entry(i, _col, y_i);\n                }\n                // consider the projections of the objects on a\n                // hyperplane perpendicluar to the line (a, b);\n                // the distance function D'() between two\n                // projections is given by Eq.4\n                dist = (a, b) => Math.sqrt(old_dist(a, b) ** 2 - (Y.entry(a, _col) - Y.entry(b, _col)) ** 2);\n            }\n        }\n        // return embedding.\n        this.Y = Y;\n        return this.projection;\n    }\n}\n","import { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { Matrix } from \"../matrix/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { DR } from \"./DR.js\";\nimport euclidean from \"../metrics/euclidean.js\";\n\n/**\n * @class\n * @alias ISOMAP\n * @extends DR\n */\nexport class ISOMAP extends DR {\n    /**\n     * Isometric feature mapping (ISOMAP).\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias ISOMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} parameters.neighbors - the number of neighbors {@link ISOMAP} should use to project the data.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {object} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2319}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this.X.shape[0] / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const X = this.X;\n        const rows = this._N;\n        const { d, metric, eig_args, neighbors } = this._parameters;\n        // TODO: make knn extern and parameter for constructor or transform?\n        const D = new Matrix();\n        D.shape = [rows, rows, (i, j) => (i <= j ? metric(X.row(i), X.row(j)) : D.entry(j, i))];\n        const kNearestNeighbors = [];\n        for (let i = 0; i < rows; ++i) {\n            const row = [];\n            for (let j = 0; j < rows; ++j) {\n                row.push({\n                    index: j,\n                    distance: D.entry(i, j),\n                });\n            }\n            const H = new Heap(row, (d) => d.distance, \"min\");\n            kNearestNeighbors.push(H.toArray().slice(1, neighbors + 1));\n        }\n\n        /*D = dijkstra(kNearestNeighbors);*/\n        // compute shortest paths\n        // TODO: make extern\n        /** @see {@link https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm} */\n        const G = new Matrix(rows, rows, (i, j) => {\n            const other = kNearestNeighbors[i].find((n) => n.index === j);\n            return other ? other.distance : Infinity;\n        });\n\n        for (let i = 0; i < rows; ++i) {\n            for (let j = 0; j < rows; ++j) {\n                let min_val = G.entry(i, j);\n                for (let k = 0; k < rows; ++k) {\n                    min_val = Math.min(min_val, G.entry(i, k) + G.entry(k, j));\n                }\n                G.set_entry(i, j, min_val);\n            }\n        }\n\n        let ai_ = new Float64Array(rows);\n        let a_j = new Float64Array(rows);\n        let a__ = 0;\n        const A = new Matrix(rows, rows, (i, j) => {\n            let val = G.entry(i, j);\n            val = val === Infinity ? 0 : val;\n            ai_[i] += val;\n            a_j[j] += val;\n            a__ += val;\n            return val;\n        });\n\n        ai_ = ai_.map((v) => v / rows);\n        a_j = a_j.map((v) => v / rows);\n        a__ /= rows ** 2;\n        const B = new Matrix(rows, rows, (i, j) => A.entry(i, j) - ai_[i] - a_j[j] + a__);\n\n        // compute d eigenvectors\n        const { eigenvectors: V } = simultaneous_poweriteration(B, d, eig_args);\n        this.Y = Matrix.from(V).transpose();\n        // return embedding\n        return this.projection;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Randomizer } from \"../util/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\nimport { linspace } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias KMeans\n */\nexport class KMeans {\n    /**\n     * @constructor\n     * @memberof module:clustering\n     * @alias KMeans\n     * @todo needs restructuring. \n     * @param {Matrix} matrix \n     * @param {Numbers} K \n     * @param {Function} [metric = euclidean] \n     * @param {Number} [seed = 1987]\n     * @param {Boolean} [init = true]\n     * @returns {KMeans}\n     */\n    constructor(matrix, K, metric = euclidean, seed=1987, init = true) {\n        this._metric = metric;\n        this._matrix = matrix;\n        this._K = K;\n        const [N, D] = matrix.shape;\n        this._N = N;\n        this._D = D;\n        if (K > N) K = N;\n        this._randomizer = new Randomizer(seed);\n        this._clusters = new Array(N).fill(undefined);\n        this._cluster_centroids = this._get_random_centroids(K);\n        if (init) this.init(K, this._cluster_centroids);\n        return this;\n    }\n\n    /**\n     * @returns {Array<Array>} - Array of clusters with the indices of the rows in given {@link matrix}. \n     */\n    get_clusters() {\n        const K = this._K;\n        const clusters = this._clusters;\n        const result = new Array(K).fill().map(() => new Array());\n        clusters.forEach((c, i) => result[c].push(i));\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Array} points \n     * @param {Array} candidates \n     */\n    _furthest_point(points, candidates) {\n        const A = this._matrix;\n        const metric = this._metric;\n        let i = points.length;\n        let H = Heap.heapify(\n            candidates, \n            (d) => {\n                const Ad = A.row(d)\n                let sum = 0;\n                for (let j = 0; j < i; ++j) {\n                    sum += metric(Ad, points[j])\n                }\n                return sum;\n            }, \n            \"max\"\n        )\n        return H.pop().element;\n    }\n\n    _get_random_centroids(K) {\n        const N = this._N;\n        const randomizer = this._randomizer;\n        const A = this._matrix;\n        const cluster_centroids = new Array(K).fill()\n        const indices = linspace(0, N - 1);\n        const random_point = randomizer.random_int % (N - 1);\n        cluster_centroids[0] = A.row(random_point);\n        const init_points = [random_point];\n        const sample_size = Math.floor((N - K) / K);// / K\n        for (let i = 1; i < K; ++i) {\n            // sampling + kmeans++ improvement?\n            const sample = randomizer.choice(indices.filter(d => init_points.indexOf(d) == -1), sample_size);\n            const furthest_point = this._furthest_point(cluster_centroids.slice(0, i), sample);\n            init_points.push(furthest_point);\n            cluster_centroids[i] = A.row(furthest_point);\n        }\n        return cluster_centroids;\n    }\n\n    _iteration(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const metric = this._metric;\n        const clusters = this._clusters;\n        let clusters_changed = false;\n        // find nearest cluster centroid.\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i)\n            let min_dist = Infinity;\n            let min_cluster = null;\n            for (let j = 0; j < K; ++j) {\n                let d = metric(cluster_centroids[j], Ai);\n                if (d < min_dist) {\n                    min_dist = d;\n                    min_cluster = j; \n                }\n            }\n            if (clusters[i] !== min_cluster) {\n                clusters_changed = true;\n            }\n            clusters[i] = min_cluster;\n        }\n        // update cluster centroid\n        // reset cluster centroids to 0\n        for (let i = 0; i < K; ++i) {\n            const centroid = cluster_centroids[i];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] = 0;\n            }\n        }\n        // compute centroid\n        this._compute_centroid(cluster_centroids);\n\n        return {   \n            \"clusters_changed\": clusters_changed,\n            \"cluster_centroids\": cluster_centroids\n        };\n    }\n\n    _compute_centroid(cluster_centroids) {\n        const K = cluster_centroids.length;\n        const N = this._N;\n        const D = this._D;\n        const A = this._matrix;\n        const clusters = this._clusters;\n        const cluster_counter = new Array(K).fill(0);\n\n        for (let i = 0; i < N; ++i) {\n            const Ai = A.row(i);\n            const ci = clusters[i];\n            cluster_counter[ci]++;\n            const centroid = cluster_centroids[ci];\n            for (let j = 0; j < D; ++j) {\n                centroid[j] += Ai[j];\n            }\n        }\n        for (let i = 0; i < K; ++i) {\n            const n = cluster_counter[i];\n            cluster_centroids[i] = cluster_centroids[i].map(c => c / n);\n        }\n        \n    }\n\n    /**\n     * Computes {@link K} clusters out of the {@link matrix}.\n     * @param {Number} K - number of clusters.\n     */\n    init(K, cluster_centroids) {\n        if (!K) K = this._K;\n        if (!cluster_centroids) cluster_centroids = this._get_random_centroids(K);\n        let clusters_changed = false;\n        do {\n            const iteration_result = this._iteration(cluster_centroids)\n            cluster_centroids = iteration_result.cluster_centroids;\n            clusters_changed = iteration_result.clusters_changed;\n        } while (clusters_changed)\n    }\n    \n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LDA\n * @extends DR\n */\nexport class LDA extends DR {\n    /**\n     * Linear Discriminant Analysis.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LDA\n     * @param {Matrix} X - The high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {any[]} parameters.labels - The labels / classes for each data point.\n     * @param {number} [parameters.d = 2] - The dimensionality of the projection.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {object} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://onlinelibrary.wiley.com/doi/10.1111/j.1469-1809.1936.tb02137.x}\n     */\n    constructor(X, parameters) {\n        super(X, { labels: null, d: 2, seed: 1212, eig_args: {} }, parameters);\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, cols] = X.shape;\n        const { d, labels, eig_args } = this._parameters;\n        if (labels === null || labels.length != rows) {\n            throw new Error(\"LDA needs parameter label to every datapoint to work!\");\n        }\n        const unique_labels = {};\n        let label_id = 0;\n        labels.forEach((l, i) => {\n            if (l in unique_labels) {\n                unique_labels[l].count++;\n                unique_labels[l].rows.push(X.row(i));\n            } else {\n                unique_labels[l] = {\n                    id: label_id++,\n                    count: 1,\n                    rows: [X.row(i)],\n                };\n            }\n        });\n\n        // create X_mean and vector means;\n        const X_mean = X.mean;\n        const V_mean = new Matrix(label_id, cols);\n        for (const label in unique_labels) {\n            const V = Matrix.from(unique_labels[label].rows);\n            const v_mean = V.meanCols;\n            for (let j = 0; j < cols; ++j) {\n                V_mean.set_entry(unique_labels[label].id, j, v_mean[j]);\n            }\n        }\n        // scatter_between\n        let S_b = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j] - X_mean);\n            const N = unique_labels[label].count;\n            S_b = S_b.add(m.dotTrans(m).mult(N));\n        }\n\n        // scatter_within\n        let S_w = new Matrix(cols, cols);\n        for (const label in unique_labels) {\n            const v = V_mean.row(unique_labels[label].id);\n            const m = new Matrix(cols, 1, (j) => v[j]);\n            const R = unique_labels[label].rows;\n            for (let i = 0, n = unique_labels[label].count; i < n; ++i) {\n                const row_v = new Matrix(cols, 1, (j, _) => R[i][j] - m.entry(j, 0));\n                S_w = S_w.add(row_v.dotTrans(row_v));\n            }\n        }\n\n        let { eigenvectors: V } = simultaneous_poweriteration(S_w.inverse().dot(S_b), d, eig_args);\n        V = Matrix.from(V).transpose();\n        this.Y = X.dot(V);\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { k_nearest_neighbors } from \"../matrix/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LLE\n * @extends DR\n */\nexport class LLE extends DR {\n    /**\n     * Locally Linear Embedding.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LLE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} parameters.neighbors - the label / class of each data point.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the dimensionality of the projection.\n     * @param {object} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://doi.org/10.1126/science.290.5500.2323}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const rows = this._N;\n        const cols = this._D;\n        const { neighbors, d, eig_args, metric } = this._parameters;\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        const O = new Matrix(neighbors, 1, 1);\n        const W = new Matrix(rows, rows);\n\n        for (let row = 0; row < rows; ++row) {\n            const nN_row = nN[row];\n            const Z = new Matrix(neighbors, cols, (i, j) => X.entry(nN_row[i].j, j) - X.entry(row, j));\n            const C = Z.dotTrans(Z);\n            if (neighbors > cols) {\n                const C_trace = neumair_sum(C.diag) / 1000;\n                for (let j = 0; j < neighbors; ++j) {\n                    C.add_entry(j, j, C_trace);\n                }\n            }\n            // reconstruct;\n            let w = Matrix.solve_CG(C, O, this._randomizer);\n            w = w.divide(w.sum);\n            for (let j = 0; j < neighbors; ++j) {\n                W.set_entry(row, nN_row[j].j, w.entry(j, 0));\n            }\n        }\n        // comp embedding\n        const I = new Matrix(rows, rows, \"identity\");\n        const IW = I.sub(W);\n        const M = IW.transDot(IW);\n        const { eigenvectors: V } = simultaneous_poweriteration(M.T.inverse(), d + 1, eig_args);\n        this.Y = Matrix.from(V.slice(1, 1 + d)).T;\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { DR } from \"./DR.js\";\nimport { MDS } from \"./MDS.js\";\nimport { KMedoids } from \"../clustering/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\n/**\n * @class\n * @alias LSP\n * @extends DR\n */\nexport class LSP extends DR {\n    /**\n     * Least Squares Projection.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LSP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.neighbors = Math.max(Math.floor(N / 10), 2)] - number of neighbors to consider.\n     * @param {number} [parameters.control_points = Math.ceil(Math.sqrt(N))] - number of controlpoints\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {LSP}\n     * @see {@link https://ieeexplore.ieee.org/document/4378370}\n     * @todo accept precomputed distance matrix.\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, control_points: undefined, d: 2, metric: euclidean, seed: 1212 }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        this.parameter(\"control_points\", Math.min(this._parameters.control_points ?? Math.ceil(Math.sqrt(this._N)), this._N - 1));\n        this._is_initialized = false;\n        return this;\n    }\n\n    /**\n     *\n     * @param {DR} DR - method used for position control points.\n     * @param {object} DR_parameters - Object containing parameters for the DR method which projects the control points\n     * @returns {LSP}\n     */\n    init(DR = MDS, DR_parameters = {}, KNN = BallTree) {\n        if (this._is_initialized) return this;\n        const X = this.X;\n        const N = this._N;\n        const K = this.parameter(\"neighbors\");\n        const d = this.parameter(\"d\");\n        const seed = this.parameter(\"seed\");\n        const metric = this.parameter(\"metric\");\n        DR_parameters = Object.assign({ d, metric, seed }, DR_parameters);\n        const nc = this.parameter(\"control_points\");\n        const control_points = new KMedoids(X, nc, null, metric).get_clusters().medoids;\n        const C = new Matrix(nc, N, \"zeros\");\n        control_points.forEach((c_i, i) => {\n            C.set_entry(i, c_i, 1);\n        });\n        const Y_C = new DR(Matrix.from(control_points.map((c_i) => X.row(c_i))), DR_parameters).transform();\n\n        const XA = X.to2dArray;\n        const knn = new KNN(XA, metric);\n        const L = new Matrix(N, N, \"I\");\n        const alpha = -1 / K;\n        XA.forEach((x_i, i) => {\n            for (const { index: j } of knn.search(x_i, K).iterate()) {\n                if (i === j) continue;\n                L.set_entry(i, j, alpha);\n            }\n        });\n        const A = L.concat(C, \"vertical\");\n\n        const z = new Matrix(N, d, \"zeros\");\n        const b = z.concat(Y_C, \"vertical\");\n\n        this._A = A;\n        this._b = b;\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Computes the projection.\n     * @returns {Matrix} Returns the projection.\n     */\n    transform() {\n        this.check_init();\n        const A = this._A;\n        const b = this._b;\n        const ATA = A.transDot(A);\n        const ATb = A.transDot(b);\n        this.Y = Matrix.solve_CG(ATA, ATb, this._randomizer);\n        return this.projection;\n    }\n}\n","import { Matrix, k_nearest_neighbors } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { simultaneous_poweriteration } from \"../linear_algebra/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias LTSA\n * @extends DR\n */\nexport class LTSA extends DR {\n    /**\n     * Local Tangent Space Alignment\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias LTSA\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} parameters.neighbors - the number of neighbors {@link LTSA} should use to project the data.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @param {object} [parameters.eig_args] - Parameters for the eigendecomposition algorithm.\n     * @see {@link https://epubs.siam.org/doi/abs/10.1137/S1064827502419154}\n     */\n    constructor(X, parameters) {\n        super(X, { neighbors: undefined, d: 2, metric: euclidean, seed: 1212, eig_args: {} }, parameters);\n        this.parameter(\"neighbors\", Math.min(this._parameters.neighbors ?? Math.max(Math.floor(this._N / 10), 2), this._N - 1));\n        if (!this._parameters.eig_args.hasOwnProperty(\"seed\")) {\n            this._parameters.eig_args.seed = this._randomizer;\n        }\n        if (this._D <= this.parameter(\"d\")) {\n            throw new Error(`Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${this.parameter(\"d\")})!`);\n        }\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality {@link d}.\n     */\n    transform() {\n        const X = this.X;\n        const [rows, D] = X.shape;\n        const { d, neighbors, metric, eig_args } = this._parameters;\n        // 1.1 determine k nearest neighbors\n        const nN = k_nearest_neighbors(X, neighbors, metric);\n        // center matrix\n        const O = new Matrix(D, D, \"center\");\n        const B = new Matrix(rows, rows, 0);\n\n        for (let row = 0; row < rows; ++row) {\n            // 1.2 compute the d largest eigenvectors of the correlation matrix\n            const I_i = [row, ...nN[row].map((n) => n.j)];\n            let X_i = Matrix.from(I_i.map((n) => X.row(n)));\n            // center X_i\n            X_i = X_i.dot(O);\n            // correlation matrix\n            const C = X_i.dotTrans(X_i);\n            const { eigenvectors: g } = simultaneous_poweriteration(C, d, eig_args);\n            //g.push(linspace(0, k).map(_ => 1 / Math.sqrt(k + 1)));\n            const G_i_t = Matrix.from(g);\n            // 2. Constructing alignment matrix\n            const W_i = G_i_t.transDot(G_i_t).add(1 / Math.sqrt(neighbors + 1));\n            for (let i = 0; i < neighbors + 1; ++i) {\n                for (let j = 0; j < neighbors + 1; ++j) {\n                    B.add_entry(I_i[i], I_i[j], W_i.entry(i, j) - (i === j ? 1 : 0));\n                }\n            }\n        }\n\n        // 3. Aligning global coordinates\n        const { eigenvectors: Y } = simultaneous_poweriteration(B, d + 1, eig_args);\n        this.Y = Matrix.from(Y.slice(1)).transpose();\n\n        // return embedding\n        return this.projection;\n    }\n}\n","import { euclidean } from \"../metrics/index.js\";\nimport { Heap } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias OPTICS\n */\nexport class OPTICS {\n    /**\n     * **O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure.\n     * @constructor\n     * @memberof module:clustering\n     * @alias OPTICS\n     * @todo needs restructuring. \n     * @param {Matrix} matrix - the data.\n     * @param {Number} epsilon - the minimum distance which defines whether a point is a neighbor or not.\n     * @param {Number} min_points - the minimum number of points which a point needs to create a cluster. (Should be higher than 1, else each point creates a cluster.)\n     * @param {Function} [metric = euclidean] - the distance metric which defines the distance between two points of the {@link matrix}.\n     * @returns {OPTICS}\n     * @see {@link https://www.dbs.ifi.lmu.de/Publikationen/Papers/OPTICS.pdf}\n     * @see {@link https://en.wikipedia.org/wiki/OPTICS_algorithm}\n     */\n    constructor(matrix, epsilon, min_points, metric = euclidean) {\n        this._matrix = matrix;\n        this._epsilon = epsilon;\n        this._min_points = min_points;\n        this._metric = metric;\n\n        this._ordered_list = [];\n        this._clusters = [];\n        this._DB = new Array(matrix.shape[0]).fill();\n        this.init();\n        return this;\n    }\n\n    /**\n     * Computes the clustering.\n     */\n    init() {\n        const ordered_list = this._ordered_list;\n        const matrix = this._matrix;\n        const N = matrix.shape[0];\n        const DB = this._DB;\n        const clusters = this._clusters;\n        let cluster_index = this._cluster_index = 0;\n\n        for (let i = 0; i < N; ++i) {\n            DB[i] = {\n                \"element\": matrix.row(i),\n                \"index\": i,\n                \"reachability_distance\": undefined,\n                \"processed\": false,\n            }\n        }\n        for (const p of DB) {\n            if (p.processed) continue;\n            p.neighbors = this._get_neighbors(p);\n            p.processed = true;\n            clusters.push([p.index])\n            cluster_index = clusters.length - 1;\n            ordered_list.push(p);\n            if (this._core_distance(p) != undefined) {\n                const seeds = new Heap(null, d => d.reachability_distance, \"min\")\n                this._update(p, seeds);\n                this._expand_cluster(seeds, clusters[cluster_index]);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Array} An array consisting of the {@link epsilon}-neighborhood of {@link p}.\n     */\n    _get_neighbors(p) {\n        if (\"neighbors\" in p) return p.neighbors;\n        const DB = this._DB;\n        const metric = this._metric;\n        const epsilon = this._epsilon;\n        const neighbors = [];\n        for (const q of DB) {\n            if (q.index == p.index) continue;\n            if (metric(p.element, q.element) < epsilon) {\n                neighbors.push(q);\n            }\n        }\n        return neighbors;\n    }\n\n    /**\n     * \n     * @private\n     * @param {Object} p - a point of {@link matrix}.\n     * @returns {Number} The distance to the {@link min_points}-th nearest point of {@link p}, or undefined if the {@link epsilon}-neighborhood has fewer elements than {@link min_points}.\n     */\n    _core_distance(p) {\n        const min_points = this._min_points;\n        const metric = this._metric;\n        if (p.neighbors && p.neighbors.length <= min_points) {\n            return undefined;\n        }\n        return metric(p.element, p.neighbors[min_points].element);\n    }\n\n    /**\n     * Updates the reachability distance of the points.\n     * @private\n     * @param {Object} p \n     * @param {Heap} seeds \n     */\n    _update(p, seeds) {\n        const metric = this._metric;\n        const core_distance = this._core_distance(p);\n        const neighbors = this._get_neighbors(p);//p.neighbors;\n        for (const q of neighbors) {\n            if (q.processed) continue;\n            const new_reachability_distance = Math.max(core_distance, metric(p.element, q.element));\n            //if (q.reachability_distance == undefined) { // q is not in seeds\n            if (seeds.raw_data().findIndex(d => d.element == q) < 0) {\n                q.reachability_distance = new_reachability_distance;\n                seeds.push(q);\n            } else { // q is in seeds\n                if (new_reachability_distance < q.reachability_distance) {\n                    q.reachability_distance = new_reachability_distance;\n                    seeds = Heap.heapify(seeds.data(), d => d.reachability_distance, \"min\"); // seeds change key =/\n                }\n            }\n        }\n    }\n\n    /**\n     * Expands the {@link cluster} with points in {@link seeds}.\n     * @private\n     * @param {Heap} seeds \n     * @param {Array} cluster \n     */\n    _expand_cluster(seeds, cluster) {\n        const ordered_list = this._ordered_list;\n        while (!seeds.empty) {\n            const q = seeds.pop().element;\n            q.neighbors = this._get_neighbors(q);\n            q.processed = true;\n            cluster.push(q.index);\n            ordered_list.push(q);\n            if (this._core_distance(q) != undefined) {\n                this._update(q, seeds);\n                this._expand_cluster(seeds, cluster);\n            }\n        }\n    }\n\n    /**\n     * Returns an array of clusters.\n     * @returns {Array<Array>} Array of clusters with the indices of the rows in given {@link matrix}.\n     */\n    get_clusters() {\n        const clusters = [];\n        const outliers = [];\n        const min_points = this._min_points;\n        for (const cluster of this._clusters) {\n            if (cluster.length < min_points) {\n                outliers.push(...cluster);\n            } else {\n                clusters.push(cluster);\n            }\n        }\n        clusters.push(outliers);\n        return clusters;\n    }\n\n    /**\n     * @returns {Array} Returns an array, where the ith entry defines the cluster affirmation of the ith point of {@link matrix}. (-1 stands for outlier)\n     */\n    get_cluster_affirmation() {\n        const N = this._matrix.shape[0];\n        const result = new Array(N).fill();\n        const clusters = this.get_clusters();\n        for (let i = 0, n = clusters.length; i < n; ++i) {\n            const cluster = clusters[i]\n            for (const index of cluster) {\n                result[index] = (i < n - 1) ? i : -1;\n            }\n        }\n        return result;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA, MDS } from \"./index.js\";\nimport { distance_matrix } from \"../matrix/index.js\";\n\n/**\n * @class\n * @alias SAMMON\n * @extends DR\n */\nexport class SAMMON extends DR {\n    /**\n     * SAMMON's Mapping\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias SAMMON\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function|\"precomputed\"} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {\"PCA\"|\"MDS\"|\"random\"} [parameters.init = \"random\"] - Either \"PCA\" or \"MDS\", with which SAMMON initialiates the projection. With \"random\" a random matrix gets used as starting point.\n     * @param {object} [parameters.init_parameters] - Parameters for the {@link init}-DR method.\n     * @param {number} [parameters.magic = 0.1] - learning rate for gradient descent.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {SAMMON}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { magic: 0.1, d: 2, metric: euclidean, seed: 1212, init_DR: \"random\", init_parameters: {} }, parameters);\n        return this;\n    }\n\n    /**\n     * initializes the projection.\n     * @private\n     */\n    init() {\n        const N = this.X.shape[0];\n        const { d, metric, init_DR: init_DR, init_parameters: DR_parameters } = this._parameters;\n        if (init_DR === \"random\") {\n            const randomizer = this._randomizer;\n            this.Y = new Matrix(N, d, () => randomizer.random);\n        } else if ([\"PCA\", \"MDS\"].includes(init_DR)) {\n            this.Y = Matrix.from(init_DR == \"PCA\" ? PCA.transform(this.X, DR_parameters) : MDS.transform(this.X, DR_parameters));\n        } else {\n            throw new Error('init_DR needs to be either \"random\" or a DR method!');\n        }\n        this.distance_matrix = metric == \"precomputed\" ? Matrix.from(this.X) : distance_matrix(this.X, metric);\n        return this;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Matrix|Array} - The projection of {@link X}.\n     */\n    transform(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n        }\n        return this.projection;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimenionality 2.\n     * @param {number} [max_iter=200] - Maximum number of iteration steps.\n     * @returns {Generator} - A generator yielding the intermediate steps of the projection of {@link X}.\n     */\n    *generator(max_iter = 200) {\n        if (!this._is_initialized) this.init();\n\n        for (let j = 0; j < max_iter; ++j) {\n            this._step();\n            yield this.projection;\n        }\n\n        return this.projection;\n    }\n\n    _step() {\n        const MAGIC = this.parameter(\"magic\");\n        const D = this.distance_matrix;\n        const N = this.X.shape[0];\n        const { d, metric } = this._parameters;\n        let Y = this.Y;\n\n        let G = new Matrix(N, d, 0);\n\n        let sum = new Float64Array(d);\n        for (let i = 0; i < N; ++i) {\n            let e1 = new Float64Array(d);\n            let e2 = new Float64Array(d);\n            const Yi = Y.row(i);\n            for (let j = 0; j < N; ++j) {\n                if (i === j) continue;\n                const Yj = Y.row(j);\n                const delta = new Float64Array(d);\n                for (let k = 0; k < d; ++k) {\n                    delta[k] = Yi[k] - Yj[k];\n                }\n                const dY = metric(Yi, Yj);\n                const dX = D.entry(i, j);\n                const dq = dX - dY;\n                const dr = Math.max(dX * dY, 1e-2);\n                for (let k = 0; k < d; ++k) {\n                    e1[k] += (delta[k] * dq) / dr;\n                    e2[k] += (dq - (Math.pow(delta[k], 2) * (1 + dq / dY)) / dY) / dr;\n                }\n            }\n            for (let k = 0; k < d; ++k) {\n                const val = Y.entry(i, k) + ((MAGIC * e1[k]) / Math.abs(e2[k]) || 0);\n                G.set_entry(i, k, val);\n                sum[k] += val;\n            }\n        }\n        for (let k = 0; k < d; ++k) {\n            sum[k] /= N;\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let k = 0; k < d; ++k) {\n                Y.set_entry(i, k, G.entry(i, k) - sum[k]);\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix, linspace, norm } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { DR } from \"./DR.js\";\nimport { PCA } from \"./index.js\";\n\nexport class SQDMDS extends DR {\n    /**\n     * SQuadMDS: a lean Stochastic Quartet MDS improving global structure preservation in neighbor embedding like t-SNE and UMAP.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @param {Matrix|number[][]} X\n     * @param {object} [parameters]\n     * @param {number} [parameters.d=2]\n     * @param {function} [parameters.metric = euclidean]\n     * @param {number} [parameters.decay_start = 0.1] - Percentage of iterations using exaggeration phase. If random init: it is recommended to start the decay later to give the time for the global config to adjust with big steps.\n     * @param {number} [parameters.decay_cte = 0.34] - Controls the decay of the learning parameter.\n     * @param {object} [parameters.init_DR]\n     * @returns {SQDMDS}\n     * @see {@link https://arxiv.org/pdf/2202.12087.pdf}\n     */\n    constructor(X, parameters) {\n        super(\n            X,\n            {\n                d: 2,\n                metric: euclidean,\n                seed: 1212,\n                decay_start: 0.1,\n                decay_cte: 0.34, // 0.34\n                init_DR: { type: \"random\" },\n            },\n            parameters\n        );\n\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    init() {\n        const N = this._N;\n        const d = this.parameter(\"d\");\n\n        // initialize helpers.\n        this._add = this.__add(d);\n        this._sub_div = this.__sub_div(d);\n        this._minus = this.__minus(d);\n        this._mult = this.__mult(d);\n        this._LR_init = Math.max(2, 0.005 * N);\n        this._LR = this._LR_init;\n        this._offset = -Math.exp(-1 / this.parameter(\"decay_cte\"));\n        this._momentums = new Matrix(N, d, 0);\n        this._grads = new Matrix(N, d, 0);\n        this._indices = linspace(0, N - 1);\n        // initialize projection.\n        const R = this._randomizer;\n        this.Y = new Matrix(N, d, () => R.random - 0.5);\n\n        // preparing metric for optimization.\n        const this_metric = this.parameter(\"metric\");\n        if (this_metric === \"precomputed\") {\n            this._HD_metric = function (i, j, X) {\n                return X.entry(i, j);\n            };\n            this._HD_metric_exaggeration = function (i, j, X) {\n                return Math.pow(X.entry(i, j), 2);\n            };\n        } else {\n            this._HD_metric = function (i, j, X) {\n                return this_metric(X.row(i), X.row(j));\n            };\n            if (this_metric == euclidean) {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return euclidean_squared(X.row(i), X.row(j));\n                };\n            } else {\n                this._HD_metric_exaggeration = function (i, j, X) {\n                    return Math.pow(this_metric(X.row(i), X.row(j)), 2);\n                };\n            }\n        }\n        return;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {number} [iterations=500] - number of iterations.\n     * @returns {Matrix|number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n        }\n        return this.projection;\n    }\n\n    /**\n     * Computes the projection.\n     * @param {number} [iterations=500] - number of iterations.\n     * @yields {Matrix|number[][]} the intermediate steps of the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        this._decay_start = Math.round(this.parameter(\"decay_start\") * iterations);\n        for (let i = 0; i < iterations; ++i) {\n            this._step(i, iterations);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Performs an optimization step.\n     * @private\n     * @param {number} i - Acutal iteration.\n     * @param {number} iterations - Number of iterations.\n     */\n    _step(i, iterations) {\n        const decay_start = this._decay_start;\n        if (i > decay_start) {\n            const decay_cte = this.parameter(\"decay_cte\");\n            const offset = this._offset;\n            const ratio = (i - decay_start) / (iterations - decay_start);\n            this._LR = this._LR_init * (Math.exp(-(ratio * ratio) / decay_cte) + offset);\n            this._distance_exaggeration = false;\n        } else {\n            this._distance_exaggeration = true;\n        }\n        this._nestrov_iteration(this._distance_exaggeration);\n    }\n\n    /**\n     * Creates quartets of non overlapping indices.\n     * @private\n     * @returns {number[][]}\n     */\n    __quartets() {\n        const N = this._N;\n        const max_N = N - (N % 4);\n        const R = this._randomizer;\n        const shuffled_indices = R.choice(this._indices, max_N);\n        const result = [];\n        for (let i = 0; i < max_N; i += 4) {\n            result.push(Uint32Array.of(shuffled_indices[i], shuffled_indices[i + 1], shuffled_indices[i + 2], shuffled_indices[i + 3]));\n        }\n        return result;\n    }\n\n    /**\n     * Computes and applies gradients, and updates momentum.\n     * @private\n     * @param {boolean} distance_exaggeration\n     */\n    _nestrov_iteration(distance_exaggeration) {\n        const momentums = this._momentums.mult(0.99, { inline: true });\n        const LR = this._LR;\n        const grads = this._fill_MDS_grads(this.Y.add(momentums), this._grads, distance_exaggeration);\n        const [n, d] = momentums.shape;\n        for (let i = 0; i < n; ++i) {\n            const g_i = grads.row(i);\n            const g_i_norm = norm(g_i);\n            if (g_i_norm == 0) continue;\n            const mul = LR / g_i_norm;\n            const m_i = momentums.row(i);\n            for (let j = 0; j < d; ++j) {\n                m_i[j] -= mul * g_i[j];\n            }\n        } // momentums -= (LR / norm) * grads\n        this.Y.add(momentums, { inline: true });\n    }\n\n    /**\n     * Computes the gradients.\n     * @param {Matrix} Y - The Projection.\n     * @param {Matrix} grads - The gradients.\n     * @param {boolean} [exaggeration = false] - Whether or not to use early exaggeration.\n     * @param {boolean} [zero_grad = true] - Whether or not to reset the gradient in the beginning.\n     * @returns {Matrix} the gradients.\n     */\n    _fill_MDS_grads(Y, grads, exaggeration = false, zero_grad = true) {\n        if (zero_grad) {\n            // compute new gradients\n            grads.values.fill(0);\n        }\n        const add = this._add;\n        const X = this.X;\n        let HD_metric;\n        if (exaggeration == true) {\n            HD_metric = this._HD_metric_exaggeration;\n        } else {\n            HD_metric = this._HD_metric;\n        }\n\n        const D_quartet = new Float64Array(6);\n        const quartets = this.__quartets();\n        for (const [i, j, k, l] of quartets) {\n            // compute quartet's HD distances.\n            D_quartet[0] = HD_metric(i, j, X);\n            D_quartet[1] = HD_metric(i, k, X);\n            D_quartet[2] = HD_metric(i, l, X);\n            D_quartet[3] = HD_metric(j, k, X);\n            D_quartet[4] = HD_metric(j, l, X);\n            D_quartet[5] = HD_metric(k, l, X);\n\n            const D_quartet_sum = neumair_sum(D_quartet);\n\n            if (D_quartet_sum > 0) {\n                for (let i = 0; i < 6; ++i) {\n                    D_quartet[i] /= D_quartet_sum;\n                    D_quartet[i] += 1e-11;\n                }\n            }\n            const [gi, gj, gk, gl] = this._compute_quartet_grads(Y, [i, j, k, l], D_quartet);\n\n            // add is inline, row acces the matrix\n            add(grads.row(i), gi);\n            add(grads.row(j), gj);\n            add(grads.row(k), gk);\n            add(grads.row(l), gl);\n        }\n        return grads;\n    }\n\n    /**\n     * Quartet gradients for a projection.\n     * @private\n     * @param {Matrix} Y - The acutal projection.\n     * @param {number[]} quartet - The indices of the quartet.\n     * @param {number[]} D_hd - The high-dimensional distances of the quartet.\n     * @returns {number[][]} the gradients for the quartet.\n     */\n    _compute_quartet_grads(Y, quartet, [p_ab, p_ac, p_ad, p_bc, p_bd, p_cd]) {\n        const [a, b, c, d] = quartet.map((index) => Y.row(index));\n        // LD distances, add a small number just in case\n        const d_ab = euclidean(a, b) + 1e-12;\n        const d_ac = euclidean(a, c) + 1e-12;\n        const d_ad = euclidean(a, d) + 1e-12;\n        const d_bc = euclidean(b, c) + 1e-12;\n        const d_bd = euclidean(b, d) + 1e-12;\n        const d_cd = euclidean(c, d) + 1e-12;\n        const sum_LD_dist = neumair_sum([d_ab, d_ac, d_ad, d_bc, d_bd, d_cd]);\n\n        // for each element of the sum: use the same gradient function and just permute the points given in input.\n        const [gA1, gB1, gC1, gD1] = this._ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist);\n        const [gA2, gC2, gB2, gD2] = this._ABCD_grads(a, c, b, d, d_ac, d_ab, d_ad, d_bc, d_cd, d_bd, p_ac, sum_LD_dist);\n        const [gA3, gD3, gC3, gB3] = this._ABCD_grads(a, d, c, b, d_ad, d_ac, d_ab, d_cd, d_bd, d_bc, p_ad, sum_LD_dist);\n        const [gB4, gC4, gA4, gD4] = this._ABCD_grads(b, c, a, d, d_bc, d_ab, d_bd, d_ac, d_cd, d_ad, p_bc, sum_LD_dist);\n        const [gB5, gD5, gA5, gC5] = this._ABCD_grads(b, d, a, c, d_bd, d_ab, d_bc, d_ad, d_cd, d_ac, p_bd, sum_LD_dist);\n        const [gC6, gD6, gA6, gB6] = this._ABCD_grads(c, d, a, b, d_cd, d_ac, d_bc, d_ad, d_bd, d_ab, p_cd, sum_LD_dist);\n\n        const add = this._add;\n        const gA = add(gA1, gA2, gA3, gA4, gA5, gA6);\n        const gB = add(gB1, gB2, gB3, gB4, gB5, gB6);\n        const gC = add(gC1, gC2, gC3, gC4, gC5, gC6);\n        const gD = add(gD1, gD2, gD3, gD4, gD5, gD6);\n\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Gradients for one element of the loss function's sum.\n     * @private\n     */\n    _ABCD_grads(a, b, c, d, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd, p_ab, sum_LD_dist) {\n        const ratio = d_ab / sum_LD_dist;\n        const twice_ratio = 2 * ((p_ab - ratio) / sum_LD_dist);\n        const minus = this._minus;\n        const add = this._add;\n        const mult = this._mult;\n        const sub_div = this._sub_div;\n        // no side effects because sub_div creates new arrays, and the inline functions work on this new created arrays.\n        const gA = mult(minus(mult(add(sub_div(a, b, d_ab), sub_div(a, c, d_ac), sub_div(a, d, d_ad)), ratio), sub_div(a, b, d_ab)), twice_ratio);\n        const gB = mult(minus(mult(add(sub_div(b, a, d_ab), sub_div(b, c, d_bc), sub_div(b, d, d_bd)), ratio), sub_div(b, a, d_ab)), twice_ratio);\n        const gC = mult(add(sub_div(c, a, d_ac), sub_div(c, b, d_bc), sub_div(c, d, d_cd)), ratio * twice_ratio);\n        const gD = mult(add(sub_div(d, a, d_ad), sub_div(d, b, d_bd), sub_div(d, c, d_cd)), ratio * twice_ratio);\n        return [gA, gB, gC, gD];\n    }\n\n    /**\n     * Inline!\n     */\n    __minus(d) {\n        return (a, b) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] -= b[i];\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __add(d) {\n        return (...summands) => {\n            const n = summands.length;\n            const s1 = summands[0];\n            for (let j = 1; j < n; ++j) {\n                const summand = summands[j];\n                for (let i = 0; i < d; ++i) {\n                    s1[i] += summand[i];\n                }\n            }\n            return s1;\n        };\n    }\n\n    /**\n     * Inline!\n     */\n    __mult(d) {\n        return (a, v) => {\n            for (let i = 0; i < d; ++i) {\n                a[i] *= v;\n            }\n            return a;\n        };\n    }\n\n    /**\n     * Creates a new array <code>(x - y) / div</code>\n     */\n    __sub_div(d) {\n        return (x, y, div) => {\n            return Float64Array.from({ length: d }, (_, i) => (x[i] - y[i]) / div);\n        };\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean_squared } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TSNE\n * @extends DR\n */\nexport class TSNE extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TSNE\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.perplexity = 50] - perplexity.\n     * @param {number} [parameters.epsilon = 10] - learning parameter.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function|\"precomputed\"} [parameters.metric = euclidean_squared] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TSNE}\n     */\n    constructor(X, parameters) {\n        super(X, { perplexity: 50, epsilon: 10, d: 2, metric: euclidean_squared, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._iter = 0;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => this._randomizer.gauss_random() * 1e-4);\n        return this;\n    }\n\n    /**\n     *\n     * @returns {TSNE}\n     */\n    init() {\n        // init\n        const Htarget = Math.log(this.parameter(\"perplexity\"));\n        const N = this._N;\n        const D = this._D;\n        const { metric } = this._parameters;\n        const X = this.X;\n        let Delta;\n        if (metric == \"precomputed\") {\n            Delta = druid.Matrix.from(X);\n        } else {\n            Delta = new Matrix(N, N);\n            for (let i = 0; i < N; ++i) {\n                const X_i = X.row(i);\n                for (let j = i + 1; j < N; ++j) {\n                    const distance = metric(X_i, X.row(j));\n                    Delta.set_entry(i, j, distance);\n                    Delta.set_entry(j, i, distance);\n                }\n            }\n        }\n\n        const P = new Matrix(N, N, 0);\n\n        this._ystep = new Matrix(N, D, 0);\n        this._gains = new Matrix(N, D, 1);\n\n        // search for fitting sigma\n        const tol = 1e-4;\n        const maxtries = 50;\n        for (let i = 0; i < N; ++i) {\n            const dist_i = Delta.row(i);\n            const prow = P.row(i);\n            let betamin = -Infinity;\n            let betamax = Infinity;\n            let beta = 1;\n            let cnt = maxtries;\n            let done = false;\n            let psum;\n\n            while (!done && cnt--) {\n                // compute entropy and kernel row with beta precision\n                psum = 0;\n                let dp_sum = 0;\n                for (let j = 0; j < N; ++j) {\n                    const dist = dist_i[j];\n                    const pj = i !== j ? Math.exp(-dist * beta) : 0;\n                    dp_sum += dist * pj;\n                    prow[j] = pj;\n                    psum += pj;\n                }\n                // compute entropy\n                const H = psum > 0 ? Math.log(psum) + (beta * dp_sum) / psum : 0;\n                if (H > Htarget) {\n                    betamin = beta;\n                    beta = betamax === Infinity ? beta * 2 : (beta + betamax) / 2;\n                } else {\n                    betamax = beta;\n                    beta = betamin === -Infinity ? beta / 2 : (beta + betamin) / 2;\n                }\n                done = Math.abs(H - Htarget) < tol;\n            }\n            // normalize p\n            for (let j = 0; j < N; ++j) {\n                prow[j] /= psum;\n            }\n        }\n\n        // compute probabilities\n        const N2 = N * 2;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i; j < N; ++j) {\n                const p = Math.max((P.entry(i, j) + P.entry(j, i)) / N2, 1e-100);\n                P.set_entry(i, j, p);\n                P.set_entry(j, i, p);\n            }\n        }\n        this._P = P;\n        return this;\n    }\n\n    /**\n     *\n     * @param {number} [iterations=500] - number of iterations.\n     * @returns {Matrix|number[][]} the projection.\n     */\n    transform(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {number} [iterations=500] - number of iterations.\n     * @yields {Matrix|number[][]} - the projection.\n     */\n    *generator(iterations = 500) {\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * performs a optimization step\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const P = this._P;\n        const ystep = this._ystep;\n        const gains = this._gains;\n        const N = this._N;\n        const { d: dim, epsilon } = this._parameters;\n        let Y = this.Y;\n\n        //calc cost gradient;\n        const pmul = iter < 100 ? 4 : 1;\n\n        // compute Q dist (unnormalized)\n        const Qu = new Matrix(N, N, \"zeros\");\n        let qsum = 0;\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                let dsum = 0;\n                for (let d = 0; d < dim; ++d) {\n                    const dhere = Y.entry(i, d) - Y.entry(j, d);\n                    dsum += dhere * dhere;\n                }\n                const qu = 1 / (1 + dsum);\n                Qu.set_entry(i, j, qu);\n                Qu.set_entry(j, i, qu);\n                qsum += 2 * qu;\n            }\n        }\n\n        // normalize Q dist\n        const Q = new Matrix(N, N, 0);\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                const val = Math.max(Qu.entry(i, j) / qsum, 1e-100);\n                Q.set_entry(i, j, val);\n                Q.set_entry(j, i, val);\n            }\n        }\n\n        const grad = new Matrix(N, dim, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            for (let j = 0; j < N; ++j) {\n                const premult = 4 * (pmul * P.entry(i, j) - Q.entry(i, j)) * Qu.entry(i, j);\n                for (let d = 0; d < dim; ++d) {\n                    grad.add_entry(i, d, premult * (Y.entry(i, d) - Y.entry(j, d)));\n                }\n            }\n        }\n\n        // perform gradient step\n        let ymean = new Float64Array(dim);\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const gid = grad.entry(i, d);\n                const sid = ystep.entry(i, d);\n                const gainid = gains.entry(i, d);\n\n                let newgain = Math.sign(gid) === Math.sign(sid) ? gainid * 0.8 : gainid + 0.2;\n                if (newgain < 0.01) newgain = 0.01;\n                gains.set_entry(i, d, newgain);\n\n                const momval = iter < 250 ? 0.5 : 0.8;\n                const newsid = momval * sid - epsilon * newgain * gid;\n                ystep.set_entry(i, d, newsid);\n\n                Y.add_entry(i, d, newsid);\n                ymean[d] += Y.entry(i, d);\n            }\n        }\n\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                Y.sub_entry(i, d, ymean[d] / N);\n            }\n        }\n\n        return this.Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { DR } from \"./DR.js\";\nimport { DisjointSet } from \"../datastructure/index.js\";\n\n/**\n * @class\n * @alias TopoMap\n * @memberof module:dimensionality_reduction\n * @extends DR\n */\nexport class TopoMap extends DR {\n    /**\n     * TopoMap: A 0-dimensional Homology Preserving Projection of High-Dimensional Data.\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TopoMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {Object} parameters - Object containing parameterization of the DR method.\n     * @param {Function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TopoMap}\n     * @see {@link https://arxiv.org/pdf/2009.01512.pdf}\n     */\n    constructor(X, parameters) {\n        super(X, { metric: euclidean, seed: 1212 }, parameters);\n        [this._N, this._D] = this.X.shape;\n        this._distance_matrix = new Matrix(this._N, this._N, 0);\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    __lazy_distance_matrix(i, j, metric) {\n        const D = this._distance_matrix;\n        const X = this.X;\n        const D_ij = D.entry(i, j);\n        if (D_ij === 0) {\n            let dist = metric(X.row(i), X.row(j));\n            D.set_entry(i, j, dist);\n            D.set_entry(j, i, dist);\n            return dist;\n        }\n        return D_ij;\n    }\n\n    /**\n     * Computes the minimum spanning tree, using a given metric\n     * @private\n     * @param {function} metric\n     * @see {@link https://en.wikipedia.org/wiki/Kruskal%27s_algorithm}\n     */\n    _make_minimum_spanning_tree(metric = euclidean) {\n        const N = this._N;\n        const X = [...this.X];\n\n        let disjoint_set = new DisjointSet(X);\n        const F = [];\n        let E = [];\n        for (let i = 0; i < N; ++i) {\n            for (let j = i + 1; j < N; ++j) {\n                E.push([i, j, this.__lazy_distance_matrix(i, j, metric)]);\n            }\n        }\n        E = E.sort((a, b) => a[2] - b[2]);\n\n        for (const [u, v, w] of E) {\n            const set_u = disjoint_set.find(X[u]);\n            const set_v = disjoint_set.find(X[v]);\n            if (set_u !== set_v) {\n                F.push([u, v, w]);\n                disjoint_set.union(set_u, set_v);\n            }\n        }\n\n        return F.sort((a, b) => a[2] - b[2]);\n    }\n\n    /**\n     * initializes TopoMap. Sets all projcted points to zero, and computes a minimum spanning tree.\n     */\n    init() {\n        const { metric } = this._parameters;\n        this.Y = new Matrix(this._N, 2, 0);\n        this._Emst = this._make_minimum_spanning_tree(metric);\n        this._is_initialized = true;\n        return this;\n    }\n\n    /**\n     * Returns true if Point C is left of line AB.\n     * @private\n     * @param {number[][]} PointA - Point A of line AB\n     * @param {number[][]} PointB - Point B of line AB\n     * @param {number[][]} PointC - Point C\n     * @returns {boolean}\n     */\n    __hull_cross([ax, ay], [bx, by], [sx, sy]) {\n        return (bx - ax) * (sy - ay) - (by - ay) * (sx - ax) <= 0;\n    }\n\n    /**\n     * Computes the convex hull of the set of Points S\n     * @private\n     * @param {number[][]} S - Set of Points.\n     * @see {@link https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript}\n     * @returns {number[][]} convex hull of S. Starts at the bottom-most point and continues counter-clockwise.\n     */\n    __hull(S) {\n        const points = S.sort(([x1, y1], [x2, y2]) => y1 - y2 || x1 - x2);\n        const N = points.length;\n        if (N <= 2) return points;\n\n        const lower = [];\n        for (let i = 0; i < N; ++i) {\n            while (lower.length >= 2 && this.__hull_cross(lower[lower.length - 2], lower[lower.length - 1], points[i])) {\n                lower.pop();\n            }\n            lower.push(points[i]);\n        }\n        const upper = [];\n        for (let i = N - 1; i >= 0; --i) {\n            while (upper.length >= 2 && this.__hull_cross(upper[upper.length - 2], upper[upper.length - 1], points[i])) {\n                upper.pop();\n            }\n            upper.push(points[i]);\n        }\n        upper.pop();\n        lower.pop();\n        return lower.concat(upper);\n    }\n\n    /**\n     * Finds the angle to rotate Point A and B to lie on a line parallel to the x-axis.\n     * @private\n     * @param {number[]} PointA\n     * @param {number[]} PointB\n     * @return {object} Object containing the sinus- and cosinus-values for a rotation.\n     */\n    __findAngle([p1x, p1y], [p2x, p2y]) {\n        const n = euclidean([p1x, p1y], [p2x, p2y]);\n        if (n === 0)\n            return {\n                sin: 0,\n                cos: 1,\n            };\n        const vec = [(p2x - p1x) / n, (p2y - p1y) / n];\n        const cos = vec[0];\n        let sin = Math.sqrt(1 - cos * cos);\n        sin = vec[1] >= 0 ? -sin : sin;\n        return {\n            sin: sin,\n            cos: cos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {number[][]} hull\n     * @param {number[]} p\n     * @param {boolean} topEdge\n     */\n    __align_hull(hull, p, topEdge) {\n        let v = -1;\n        let d2;\n        for (let i = 0; i < hull.length; ++i) {\n            const d = euclidean(hull[i], p);\n            if (v === -1) {\n                d2 = d;\n                v = i;\n            } else {\n                if (d2 > d) {\n                    d2 = d;\n                    v = i;\n                }\n            }\n        }\n\n        let v1;\n        let v2;\n        if (topEdge) {\n            v1 = hull[v];\n            v2 = hull[(v + 1) % hull.length];\n        } else {\n            if (v == 0) v = hull.length - 1;\n            v1 = hull[v];\n            v2 = hull[(v - 1) % hull.length];\n        }\n\n        const transformation = {\n            tx: -hull[v][0],\n            ty: -hull[v][1],\n        };\n\n        if (hull.length >= 2) {\n            const { sin, cos } = this.__findAngle(v1, v2);\n            transformation.sin = sin;\n            transformation.cos = cos;\n        } else {\n            transformation.sin = 0;\n            transformation.cos = 1;\n        }\n\n        return transformation;\n    }\n\n    /**\n     * @private\n     * @param {number[][]} Point - The point which should get transformed.\n     * @param {object} Transformation - contains the values for translation and rotation.\n     */\n    __transform([px, py], { tx, ty, sin, cos }) {\n        let x = px + tx;\n        let y = py + ty;\n        let xx = x * cos - y * sin;\n        let yy = x * sin + y * cos;\n        return [xx, yy];\n    }\n\n    /**\n     * Calls {@link __transform} for each point in Set C\n     * @private\n     * @param {number[][]} C - Set of points.\n     * @param {object} t - Transform object.\n     * @param {number} yOffset - value to offset set C.\n     */\n    __transform_component(C, t, yOffset) {\n        const N = C.length;\n        for (let i = 0; i < N; ++i) {\n            const c = C[i];\n            const [cx, cy] = this.__transform(c, t);\n            c[0] = cx;\n            c[1] = cy + yOffset;\n        }\n    }\n\n    /**\n     * @private\n     * @param {number[]} u - point u\n     * @param {number[]} v - point v\n     * @param {number} w - edge weight w\n     */\n    __align_components(u, v, w) {\n        const points_u = [...u.__disjoint_set.children];\n        const points_v = [...v.__disjoint_set.children];\n\n        const hull_u = this.__hull(points_u);\n        const hull_v = this.__hull(points_v);\n\n        const t_u = this.__align_hull(hull_u, u, false);\n        const t_v = this.__align_hull(hull_v, v, true);\n\n        this.__transform_component(points_u, t_u, 0);\n        this.__transform_component(points_v, t_v, w);\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality 2.\n     */\n    transform() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n        }\n        return this.projection;\n    }\n\n    /**\n     * Transforms the inputdata {@link X} to dimensionality 2.\n     * @yields {Matrix|number[][]}\n     */\n    *generator() {\n        if (!this._is_initialized) this.init();\n        const Emst = this._Emst;\n        const Y = this.Y.to2dArray;\n        const components = new DisjointSet(\n            Y.map((y, i) => {\n                y.i = i;\n                return y;\n            })\n        );\n\n        for (const [u, v, w] of Emst) {\n            const component_u = components.find(Y[u]);\n            const component_v = components.find(Y[v]);\n            if (component_u === component_v) continue;\n            this.__align_components(component_u, component_v, w);\n            components.union(component_u, component_v);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n}\n","import { Matrix, linspace } from \"../matrix/index.js\";\nimport { euclidean } from \"../metrics/index.js\";\nimport { PCA } from \"./PCA.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { DR } from \"./DR.js\";\n\n/**\n * @class\n * @alias TriMap\n * @extends DR\n */\nexport class TriMap extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias TriMap\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.weight_adj = 500] - scaling factor.\n     * @param {number} [parameters.c = 5] - number of triplets multiplier.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {number} [parameters.tol = 1e-8] -\n     * @param {function} [parameters.metric = euclidean] - the metric which defines the distance between two points.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {TriMap}\n     * @see {@link https://arxiv.org/pdf/1910.00204v1.pdf}\n     * @see {@link https://github.com/eamid/trimap}\n     */\n    constructor(X, parameters) {\n        super(X, { weight_adj: 500, c: 5, d: 2, metric: euclidean, tol: 1e-8, seed: 1212 }, parameters);\n        return this;\n    }\n\n    /**\n     *\n     * @param {Matrix} [pca = null] - Initial Embedding (if null then PCA gets used).\n     * @param {KNN} [knn = null] - KNN Object (if null then BallTree gets used).\n     */\n    init(pca = null, knn = null) {\n        const X = this.X;\n        const N = X.shape[0];\n        const { c, d, metric, seed } = this._parameters;\n        this.n_inliers = 2 * c;\n        this.n_outliers = 1 * c;\n        this.n_random = 1 * c;\n        this.Y = pca || new PCA(X, { d, seed }).transform();\n        this.knn = knn || new BallTree(X.to2dArray, metric);\n        const { triplets, weights } = this._generate_triplets(this.n_inliers, this.n_outliers, this.n_random);\n        this.triplets = triplets;\n        this.weights = weights;\n        this.lr = (1000 * N) / triplets.shape[0];\n        this.C = Infinity;\n        this.vel = new Matrix(N, d, 0);\n        this.gain = new Matrix(N, d, 1);\n        return this;\n    }\n\n    /**\n     * Generates {@link n_inliers} x {@link n_outliers} x {@link n_random} triplets.\n     * @param {number} n_inliers\n     * @param {number} n_outliers\n     * @param {number} n_random\n     */\n    _generate_triplets(n_inliers, n_outliers, n_random) {\n        const { metric, weight_adj } = this._parameters;\n        const X = this.X;\n        const N = X.shape[0];\n        const knn = this.knn;\n        const n_extra = Math.min(n_inliers + 20, N);\n        const nbrs = new Matrix(N, n_extra);\n        const knn_distances = new Matrix(N, n_extra);\n        for (let i = 0; i < N; ++i) {\n            knn.search(X.row(i), n_extra + 1)\n                .raw_data()\n                .filter((d) => d.value != 0)\n                .sort((a, b) => a.value - b.value)\n                .forEach((d, j) => {\n                    nbrs.set_entry(i, j, d.element.index);\n                    knn_distances.set_entry(i, j, d.value);\n                });\n        }\n        // scale parameter\n        const sig = new Float64Array(N);\n        for (let i = 0; i < N; ++i) {\n            sig[i] = Math.max((knn_distances.entry(i, 3) + knn_distances.entry(i, 4) + knn_distances.entry(i, 5) + knn_distances.entry(i, 6)) / 4, 1e-10);\n        }\n\n        const P = this._find_p(knn_distances, sig, nbrs);\n\n        let triplets = this._sample_knn_triplets(P, nbrs, n_inliers, n_outliers);\n        let n_triplets = triplets.shape[0];\n        const outlier_distances = new Float64Array(n_triplets);\n        for (let i = 0; i < n_triplets; ++i) {\n            const j = triplets.entry(i, 0);\n            const k = triplets.entry(i, 2);\n            outlier_distances[i] = metric(X.row(j), X.row(k));\n        }\n        let weights = this._find_weights(triplets, P, nbrs, outlier_distances, sig);\n\n        if (n_random > 0) {\n            const { random_triplets, random_weights } = this._sample_random_triplets(X, n_random, sig);\n            triplets = triplets.concat(random_triplets, \"vertical\");\n            weights = Float64Array.from([...weights, ...random_weights]);\n        }\n        n_triplets = triplets.shape[0];\n        let max_weight = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            if (isNaN(weights[i])) {\n                weights[i] = 0;\n            }\n            if (max_weight < weights[i]) max_weight = weights[i];\n        }\n        let max_weight_2 = -Infinity;\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight;\n            weights[i] += 0.0001;\n            weights[i] = Math.log(1 + weight_adj * weights[i]);\n            if (max_weight_2 < weights[i]) max_weight_2 = weights[i];\n        }\n        for (let i = 0; i < n_triplets; ++i) {\n            weights[i] /= max_weight_2;\n        }\n        return {\n            triplets: triplets,\n            weights: weights,\n        };\n    }\n\n    /**\n     * Calculates the similarity matrix P\n     * @private\n     * @param {Matrix} knn_distances - matrix of pairwise knn distances\n     * @param {Float64Array} sig - scaling factor for the distances\n     * @param {Matrix} nbrs - nearest neighbors\n     * @returns {Matrix} pairwise similarity matrix\n     */\n    _find_p(knn_distances, sig, nbrs) {\n        const [N, n_neighbors] = knn_distances.shape;\n        return new Matrix(N, n_neighbors, (i, j) => {\n            return Math.exp(-(knn_distances.entry(i, j) ** 2 / sig[i] / sig[nbrs.entry(i, j)]));\n        });\n    }\n\n    /**\n     * Sample nearest neighbors triplets based on the similarity values given in P.\n     * @private\n     * @param {Matrix} P - Matrix of pairwise similarities between each point and its neighbors given in matrix nbrs.\n     * @param {Matrix} nbrs - Nearest neighbors indices for each point. The similarity values are given in matrix {@link P}. Row i corresponds to the i-th point.\n     * @param {number} n_inliers - number of inlier points.\n     * @param {number} n_outliers - number of outlier points.\n     *\n     */\n    _sample_knn_triplets(P, nbrs, n_inliers, n_outliers) {\n        const N = nbrs.shape[0];\n        const triplets = new Matrix(N * n_inliers * n_outliers, 3);\n        for (let i = 0; i < N; ++i) {\n            let n_i = i * n_inliers * n_outliers;\n            const sort_indices = this.__argsort(P.row(i));\n            for (let j = 0; j < n_inliers; ++j) {\n                let n_j = j * n_outliers;\n                const sim = nbrs.entry(i, sort_indices[j]);\n                const samples = this._rejection_sample(n_outliers, N, sort_indices.slice(0, j + 1));\n                for (let k = 0; k < n_outliers; ++k) {\n                    const index = n_i + n_j + k;\n                    const out = samples[k];\n                    triplets.set_entry(index, 0, i);\n                    triplets.set_entry(index, 1, sim);\n                    triplets.set_entry(index, 2, out);\n                }\n            }\n        }\n        return triplets;\n    }\n\n    /**\n     * Should do the same as np.argsort()\n     * @private\n     * @param {number[]} A\n     */\n    __argsort(A) {\n        return linspace(0, A.length - 1).sort((i, j) => A[j] - A[i]);\n    }\n\n    /**\n     * Samples {@link n_samples} integers from a given interval [0, {@link max_int}] while rejection the values that are in the {@link rejects}.\n     * @private\n     * @param {*} n_samples\n     * @param {*} max_int\n     * @param {*} rejects\n     */\n    _rejection_sample(n_samples, max_int, rejects) {\n        const randomizer = this._randomizer;\n        const interval = linspace(0, max_int - 1).filter((d) => rejects.indexOf(d) < 0);\n        return randomizer.choice(interval, Math.min(n_samples, interval.length - 2));\n    }\n\n    /**\n     * Calculates the weights for the sampled nearest neighbors triplets\n     * @private\n     * @param {Matrix} triplets - Sampled Triplets.\n     * @param {Matrix} P - Pairwise similarity matrix.\n     * @param {Matrix} nbrs - nearest Neighbors\n     * @param {Float64Array} outlier_distances - Matrix of pairwise outlier distances\n     * @param {Float64Array} sig - scaling factor for the distances.\n     */\n    _find_weights(triplets, P, nbrs, outlier_distances, sig) {\n        const n_triplets = triplets.shape[0];\n        const weights = new Float64Array(n_triplets);\n        for (let t = 0; t < n_triplets; ++t) {\n            const i = triplets.entry(t, 0);\n            const sim = nbrs.row(i).indexOf(triplets.entry(t, 1));\n            const p_sim = P.entry(i, sim);\n            let p_out = Math.exp(-(outlier_distances[t] ** 2 / (sig[i] * sig[triplets.entry(t, 2)])));\n            if (p_out < 1e-20) p_out = 1e-20;\n            weights[t] = p_sim / p_out;\n        }\n        return weights;\n    }\n\n    /**\n     * Sample uniformly ranom triplets\n     * @private\n     * @param {Matrix} X - Data matrix.\n     * @param {number} n_random - number of random triplets per point\n     * @param {Float64Array} sig - Scaling factor for the distances\n     */\n    _sample_random_triplets(X, n_random, sig) {\n        const metric = this.parameter(\"metric\");\n        const randomizer = this._randomizer;\n        const N = X.shape[0];\n        const random_triplets = new Matrix(N * n_random, 3);\n        const random_weights = new Float64Array(N * n_random);\n        for (let i = 0; i < N; ++i) {\n            const n_i = i * n_random;\n            const indices = [...linspace(0, i - 1), ...linspace(i + 1, N - 1)];\n            for (let j = 0; j < n_random; ++j) {\n                let [sim, out] = randomizer.choice(indices, 2);\n                let p_sim = Math.exp(-(metric(X.row(i), X.row(sim)) ** 2 / (sig[i] * sig[sim])));\n                if (p_sim < 1e-20) p_sim = 1e-20;\n                let p_out = Math.exp(-(metric(X.row(i), X.row(out)) ** 2 / (sig[i] * sig[out])));\n                if (p_out < 1e-20) p_out = 1e-20;\n\n                if (p_sim < p_out) {\n                    [sim, out] = [out, sim];\n                    [p_sim, p_out] = [p_out, p_sim];\n                }\n                const index = n_i + j;\n                random_triplets.set_entry(index, 0, i);\n                random_triplets.set_entry(index, 1, sim);\n                random_triplets.set_entry(index, 2, out);\n                random_weights[index] = p_sim / p_out;\n            }\n        }\n        return {\n            random_triplets: random_triplets,\n            random_weights: random_weights,\n        };\n    }\n\n    /**\n     * Computes the gradient for updating the embedding.\n     * @param {Matrix} Y - The embedding\n     */\n    _grad(Y) {\n        const n_inliers = this.n_inliers;\n        const n_outliers = this.n_outliers;\n        const triplets = this.triplets;\n        const weights = this.weights;\n        const [N, dim] = Y.shape;\n        const n_triplets = triplets.shape[0];\n        const grad = new Matrix(N, dim, 0);\n        let y_ij = new Float64Array(dim);\n        let y_ik = new Float64Array(dim);\n        let d_ij = 1;\n        let d_ik = 1;\n        let n_viol = 0;\n        let loss = 0;\n        const n_knn_triplets = N * n_inliers * n_outliers;\n\n        for (let t = 0; t < n_triplets; ++t) {\n            const [i, j, k] = triplets.row(t);\n            // update y_ij, y_ik, d_ij, d_ik\n            if (t % n_outliers == 0 || t >= n_knn_triplets) {\n                d_ij = 1;\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_jd = Y.entry(j, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ij[d] = Y_id - Y_jd;\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ij += y_ij[d] ** 2;\n                    d_ik += y_ik[d] ** 2;\n                }\n                // update y_ik and d_ik only\n            } else {\n                d_ik = 1;\n                for (let d = 0; d < dim; ++d) {\n                    const Y_id = Y.entry(i, d);\n                    const Y_kd = Y.entry(k, d);\n                    y_ik[d] = Y_id - Y_kd;\n                    d_ik += y_ik[d] ** 2;\n                }\n            }\n\n            if (d_ij > d_ik) ++n_viol;\n            loss += weights[t] / (1 + d_ik / d_ij);\n            const w = (weights[t] / (d_ij + d_ik)) ** 2;\n            for (let d = 0; d < dim; ++d) {\n                const gs = y_ij[d] * d_ik * w;\n                const go = y_ik[d] * d_ij * w;\n                grad.add_entry(i, d, gs - go);\n                grad.sub_entry(j, d, gs);\n                grad.add_entry(k, d, go);\n            }\n        }\n        return { grad, loss, n_viol };\n    }\n\n    /**\n     *\n     * @param {number} max_iteration\n     * @returns {Matrix|number[][]}\n     */\n    transform(max_iteration = 400) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n        }\n        return this.projection;\n    }\n\n    /**\n     * @param {number} max_iteration\n     * @yields {Matrix|number[][]}\n     * @returns {Matrix|number[][]}\n     */\n    *generator(max_iteration = 800) {\n        this.check_init();\n        for (let iter = 0; iter < max_iteration; ++iter) {\n            this._next(iter);\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * Does the iteration step.\n     * @private\n     * @param {number} iter\n     */\n    _next(iter) {\n        const gamma = iter > 150 ? 0.5 : 0.3;\n        const old_C = this.C;\n        const vel = this.vel;\n        const Y = this.Y.add(vel.mult(gamma));\n        const { grad, loss, n_viol } = this._grad(Y);\n        this.C = loss;\n        this.Y = this._update_embedding(Y, iter, grad);\n        this.lr *= old_C > loss + this._parameters.tol ? 1.01 : 0.9;\n        return this.Y;\n    }\n\n    /**\n     * Updates the embedding.\n     * @private\n     * @param {Matrix} Y\n     * @param {number} iter\n     * @param {Matrix} grad\n     */\n    _update_embedding(Y, iter, grad) {\n        const [N, dim] = Y.shape;\n        const gamma = iter > 150 ? 0.9 : 0.5; // moment parameter\n        const min_gain = 0.01;\n        const gain = this.gain;\n        const vel = this.vel;\n        const lr = this.lr;\n        for (let i = 0; i < N; ++i) {\n            for (let d = 0; d < dim; ++d) {\n                const new_gain = Math.sign(vel.entry(i, d)) != Math.sign(grad.entry(i, d)) ? gain.entry(i, d) + 0.2 : Math.max(gain.entry(i, d) * 0.8, min_gain);\n                gain.set_entry(i, d, new_gain);\n                vel.set_entry(i, d, gamma * vel.entry(i, d) - lr * gain.entry(i, d) * grad.entry(i, d));\n                Y.set_entry(i, d, Y.entry(i, d) + vel.entry(i, d));\n            }\n        }\n        return Y;\n    }\n}\n","import { Matrix } from \"../matrix/index.js\";\nimport { euclidean, euclidean_squared } from \"../metrics/index.js\";\nimport { BallTree } from \"../knn/index.js\";\nimport { neumair_sum } from \"../numerical/index.js\";\nimport { linspace } from \"../matrix/index.js\";\nimport { powell } from \"../optimization/index.js\";\nimport { DR } from \"./DR.js\";\nimport { max } from \"../util/index.js\";\nimport { KNN } from \"../knn/index.js\";\n\n/**\n * @class\n * @alias UMAP\n * @extends DR\n */\nexport class UMAP extends DR {\n    /**\n     *\n     * @constructor\n     * @memberof module:dimensionality_reduction\n     * @alias UMAP\n     * @param {Matrix} X - the high-dimensional data.\n     * @param {object} parameters - Object containing parameterization of the DR method.\n     * @param {number} [parameters.n_neighbors = 15] - size of the local neighborhood.\n     * @param {number} [parameters.local_connectivity = 1] - number of nearest neighbors connected in the local neighborhood.\n     * @param {number} [parameters.min_dist = 1] - controls how tightly points get packed together.\n     * @param {number} [parameters.d = 2] - the dimensionality of the projection.\n     * @param {function} [parameters.metric = euclidean] - the metric which defines the distance between two points in the high-dimensional space.\n     * @param {number} [parameters._spread = 1] - The effective scale of embedded points. (In combination with {@link parameters.min_dist})\n     * @param {number} [parameters._set_op_mix_ratio = 1] - Interpolate between union and intersection.\n     * @param {number} [parameters._repulsion_strength = 1]  - Weighting applied to negative samples.\n     * @param {number} [parameters._negative_sample_rate = 5] - The number of negative samples per positive sample.\n     * @param {number} [parameters._n_epochs = 350] - The number of training epochs.\n     * @param {number} [parameter._initial_alpha = 1] - The initial learning rate for the optimization.\n     * @param {number} [parameters.seed = 1212] - the seed for the random number generator.\n     * @returns {UMAP}\n     */\n    constructor(X, parameters) {\n        super(\n            X,\n            {\n                n_neighbors: 15,\n                local_connectivity: 1,\n                min_dist: 1,\n                d: 2,\n                metric: euclidean,\n                seed: 1212,\n                _spread: 1,\n                _set_op_mix_ratio: 1,\n                _repulsion_strength: 1,\n                _negative_sample_rate: 5,\n                _n_epochs: 350,\n                _initial_alpha: 1,\n            },\n            parameters\n        );\n        [this._N, this._D] = this.X.shape;\n        /* let n_neighbors = Math.min(this._N - 1, parameters.n_neighbors);\n        this.parameter(\"n_neighbors\", n_neighbors);\n        this.parameter(\"local_connectivity\", Math.min(this.parameter(\"local_connectivity\"), n_neighbors - 1)); */\n        if (this.parameter(\"n_neighbors\") > this._N) {\n            throw new Error(`Parameter n_neighbors (=${this.parameter(\"n_neighbors\")}) needs to be smaller than dataset size (N=${this._N})!`);\n        }\n        if (this.parameter(\"local_connectivity\") > this.parameter(\"n_neighbors\")) {\n            throw new Error(`Parameter local_connectivity (=${this.parameter(\"local_connectivity\")}) needs to be smaller than parameter n_neighbors (=${this.parameter(\"n_neighbors\")})`);\n        }\n        this._iter = 0;\n        const randomizer = this._randomizer;\n        this.Y = new Matrix(this._N, this.parameter(\"d\"), () => randomizer.random);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} spread\n     * @param {number} min_dist\n     * @returns {number[]}\n     */\n    _find_ab_params(spread, min_dist) {\n        const curve = (x, a, b) => 1 / (1 + a * Math.pow(x, 2 * b));\n        const xv = linspace(0, spread * 3, 300);\n        const yv = linspace(0, spread * 3, 300);\n\n        for (let i = 0, n = xv.length; i < n; ++i) {\n            const xv_i = xv[i];\n            yv[i] = xv_i < min_dist ? 1 : Math.exp(-(xv_i - min_dist) / spread);\n        }\n\n        const err = (p) => {\n            const error = linspace(1, 300).map((_, i) => yv[i] - curve(xv[i], p[0], p[1]));\n            return Math.sqrt(neumair_sum(error.map((e) => e * e)));\n        };\n\n        return powell(err, [1, 1]);\n    }\n\n    /**\n     * @private\n     * @param {number[][]} distances\n     * @param {number[]} sigmas\n     * @param {number[]} rhos\n     * @returns {number[]}\n     */\n    _compute_membership_strengths(distances, sigmas, rhos) {\n        for (let i = 0, n = distances.length; i < n; ++i) {\n            const rho = rhos[i];\n            const curr_dist = distances[i];\n            for (let j = 0, m = curr_dist.length; j < m; ++j) {\n                const v = curr_dist[j].value - rho;\n                curr_dist[j].value = v > 0 ? Math.exp(-v / sigmas[i]) : 1.0;\n            }\n        }\n        return distances;\n    }\n\n    /**\n     * @private\n     * @param {KNN|BallTree} knn\n     * @param {number} k\n     * @returns {object}\n     */\n    _smooth_knn_dist(knn, k) {\n        const SMOOTH_K_TOLERANCE = 1e-5;\n        const MIN_K_DIST_SCALE = 1e-3;\n        const n_iter = 64;\n        const { local_connectivity, metric } = this._parameters;\n        const target = Math.log2(k);\n        const rhos = [];\n        const sigmas = [];\n        const X = this.X;\n        const N = X.shape[0];\n        //const distances = [...X].map(x_i => knn.search(x_i, k).raw_data().reverse());\n\n        const distances = [];\n        if (metric === \"precomputed\") {\n            for (let i = 0; i < N; ++i) {\n                distances.push(knn.search(i, k).reverse());\n            }\n        } else {\n            for (const x_i of X) {\n                distances.push(knn.search(x_i, k).raw_data().reverse());\n            }\n        }\n\n        const index = Math.floor(local_connectivity);\n        const interpolation = local_connectivity - index;\n        for (let i = 0; i < N; ++i) {\n            let lo = 0;\n            let hi = Infinity;\n            let mid = 1;\n            let rho = 0;\n\n            const search_result = distances[i];\n            const non_zero_dist = search_result.filter((d) => d.value > 0);\n            const non_zero_dist_length = non_zero_dist.length;\n            if (non_zero_dist_length >= local_connectivity) {\n                if (index > 0) {\n                    rho = non_zero_dist[index - 1].value;\n                    if (interpolation > SMOOTH_K_TOLERANCE) {\n                        rho += interpolation * (non_zero_dist[index].value - non_zero_dist[index - 1].value);\n                    }\n                } else {\n                    rho = interpolation * non_zero_dist[0].value;\n                }\n            } else if (non_zero_dist_length > 0) {\n                rho = non_zero_dist[non_zero_dist_length - 1].value;\n            }\n            for (let x = 0; x < n_iter; ++x) {\n                let psum = 0;\n                for (let j = 0; j < k; ++j) {\n                    const d = search_result[j].value - rho;\n                    psum += d > 0 ? Math.exp(-(d / mid)) : 1;\n                }\n                if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n                    break;\n                }\n                if (psum > target) {\n                    [hi, mid] = [mid, (lo + hi) / 2];\n                } else {\n                    if (hi === Infinity) {\n                        [lo, mid] = [mid, mid * 2];\n                    } else {\n                        [lo, mid] = [mid, (lo + hi) / 2];\n                    }\n                }\n            }\n\n            //let mean_d = null;\n            if (rho > 0) {\n                const mean_ithd = search_result.reduce((a, b) => a + b.value, 0) / search_result.length;\n                if (mid < MIN_K_DIST_SCALE * mean_ithd) {\n                    mid = MIN_K_DIST_SCALE * mean_ithd;\n                }\n            } else {\n                const mean_d = distances.reduce((acc, res) => acc + res.reduce((a, b) => a + b.value, 0) / res.length);\n                if (mid < MIN_K_DIST_SCALE * mean_d) {\n                    mid = MIN_K_DIST_SCALE * mean_d;\n                }\n            }\n            rhos[i] = rho;\n            sigmas[i] = mid;\n        }\n        return {\n            distances: distances,\n            sigmas: sigmas,\n            rhos: rhos,\n        };\n    }\n\n    /**\n     * @private\n     * @param {Matrix} X\n     * @param {number} n_neighbors\n     * @returns {Matrix}\n     */\n    _fuzzy_simplicial_set(X, n_neighbors) {\n        const N = X.shape[0];\n        const { metric, _set_op_mix_ratio } = this._parameters;\n        const knn = metric === \"precomputed\" ? new KNN(X, \"precomputed\") : new BallTree(X.to2dArray, metric);\n        let { distances, sigmas, rhos } = this._smooth_knn_dist(knn, n_neighbors);\n        distances = this._compute_membership_strengths(distances, sigmas, rhos);\n        const result = new Matrix(N, N, \"zeros\");\n        for (let i = 0; i < N; ++i) {\n            const distances_i = distances[i];\n            for (let j = 0; j < distances_i.length; ++j) {\n                result.set_entry(i, distances_i[j].element.index, distances_i[j].value);\n            }\n        }\n\n        const transposed_result = result.T;\n        const prod_matrix = result.mult(transposed_result);\n        return result\n            .add(transposed_result)\n            .sub(prod_matrix)\n            .mult(_set_op_mix_ratio)\n            .add(prod_matrix.mult(1 - _set_op_mix_ratio));\n    }\n\n    /**\n     * @private\n     * @param {number} n_epochs\n     * @returns {Float32Array}\n     */\n    _make_epochs_per_sample(n_epochs) {\n        const weights = this._weights;\n        const result = new Float32Array(weights.length).fill(-1);\n        const weight_scl = n_epochs / max(weights);\n        weights.forEach((w, i) => {\n            const sample = w * weight_scl;\n            if (sample > 0) result[i] = Math.round(n_epochs / sample);\n        });\n        return result;\n    }\n\n    /**\n     * @private\n     * @param {Matrix} graph\n     * @returns {object}\n     */\n    _tocoo(graph) {\n        const rows = [];\n        const cols = [];\n        const data = [];\n        const [rows_n, cols_n] = graph.shape;\n        for (let row = 0; row < rows_n; ++row) {\n            for (let col = 0; col < cols_n; ++col) {\n                const entry = graph.entry(row, col);\n                if (entry !== 0) {\n                    rows.push(row);\n                    cols.push(col);\n                    data.push(entry);\n                }\n            }\n        }\n        return {\n            rows: rows,\n            cols: cols,\n            data: data,\n        };\n    }\n\n    /**\n     * Computes all necessary\n     * @returns {UMAP}\n     */\n    init() {\n        const { _spread, min_dist, n_neighbors, _n_epochs, _negative_sample_rate } = this._parameters;\n        const [a, b] = this._find_ab_params(_spread, min_dist);\n        this._a = a;\n        this._b = b;\n        this._graph = this._fuzzy_simplicial_set(this.X, n_neighbors);\n        const { rows, cols, data: weights } = this._tocoo(this._graph);\n        this._head = rows;\n        this._tail = cols;\n        this._weights = weights;\n        this._epochs_per_sample = this._make_epochs_per_sample(_n_epochs);\n        this._epochs_per_negative_sample = this._epochs_per_sample.map((d) => d * _negative_sample_rate);\n        this._epoch_of_next_sample = this._epochs_per_sample.slice();\n        this._epoch_of_next_negative_sample = this._epochs_per_negative_sample.slice();\n        return this;\n    }\n\n    graph() {\n        this.check_init();\n        return { cols: this._head, rows: this._tail, weights: this._weights };\n    }\n\n    /**\n     *\n     * @param {number} [iterations=350] - number of iterations.\n     * @returns {Matrix|number[][]}\n     */\n    transform(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n        }\n        return this.projection;\n    }\n\n    /**\n     *\n     * @param {number} [iterations=350] - number of iterations.\n     * @returns {Matrix|number[][]}\n     */\n    *generator(iterations = 350) {\n        if (this.parameter(\"_n_epochs\") != iterations) {\n            this.parameter(\"_n_epochs\", iterations);\n            this.init();\n        }\n        this.check_init();\n        for (let i = 0; i < iterations; ++i) {\n            this.next();\n            yield this.projection;\n        }\n        return this.projection;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @returns {number}\n     */\n    _clip(x) {\n        if (x > 4) return 4;\n        if (x < -4) return -4;\n        return x;\n    }\n\n    /**\n     * performs the optimization step.\n     * @private\n     * @param {Matrix} head_embedding\n     * @param {Matrix} tail_embedding\n     * @param {Matrix} head\n     * @param {Matrix} tail\n     * @returns {Matrix}\n     */\n    _optimize_layout(head_embedding, tail_embedding, head, tail) {\n        const randomizer = this._randomizer;\n        const { _repulsion_strength, d: dim } = this._parameters;\n        const {\n            _alpha: alpha,\n            _a: a,\n            _b: b,\n            _epochs_per_sample: epochs_per_sample,\n            _epochs_per_negative_sample: epochs_per_negative_sample,\n            _epoch_of_next_negative_sample: epoch_of_next_negative_sample,\n            _epoch_of_next_sample: epoch_of_next_sample,\n            _clip: clip,\n        } = this;\n        const tail_length = tail.length;\n\n        for (let i = 0, n = epochs_per_sample.length; i < n; ++i) {\n            if (epoch_of_next_sample[i] <= this._iter) {\n                const j = head[i];\n                const k = tail[i];\n                const current = head_embedding.row(j);\n                const other = tail_embedding.row(k);\n                const dist = euclidean_squared(current, other);\n                if (dist > 0) {\n                    const grad_coeff = (-2 * a * b * Math.pow(dist, b - 1)) / (a * Math.pow(dist, b) + 1);\n                    for (let d = 0; d < dim; ++d) {\n                        const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                        current[d] += grad_d;\n                        other[d] -= grad_d;\n                    }\n                }\n                epoch_of_next_sample[i] += epochs_per_sample[i];\n                const n_neg_samples = (this._iter - epoch_of_next_negative_sample[i]) / epochs_per_negative_sample[i];\n                for (let p = 0; p < n_neg_samples; ++p) {\n                    const k = randomizer.random_int % tail_length;\n                    const other = tail_embedding.row(tail[k]);\n                    const dist = euclidean_squared(current, other);\n                    if (dist > 0) {\n                        const grad_coeff = (2 * _repulsion_strength * b) / ((0.01 + dist) * (a * Math.pow(dist, b) + 1));\n                        for (let d = 0; d < dim; ++d) {\n                            const grad_d = clip(grad_coeff * (current[d] - other[d])) * alpha;\n                            current[d] += grad_d;\n                            other[d] -= grad_d;\n                        }\n                    } else if (j === k) {\n                        continue;\n                    }\n                }\n                epoch_of_next_negative_sample[i] += n_neg_samples * epochs_per_negative_sample[i];\n            }\n        }\n        return head_embedding;\n    }\n\n    /**\n     * @private\n     * @returns {Matrix}\n     */\n    next() {\n        const iter = ++this._iter;\n        const Y = this.Y;\n        const { _initial_alpha, _n_epochs } = this._parameters;\n        this._alpha = _initial_alpha * (1 - iter / _n_epochs);\n        this.Y = this._optimize_layout(Y, Y, this._head, this._tail);\n\n        return this.Y;\n    }\n}\n","/**\n * Computes the canberra distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias canberra\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the canberra distance between <code>a</code> and <code>b</code>.\n * @see {@link https://en.wikipedia.org/wiki/Canberra_distance}\n */\nexport default function(a, b) {\n    if (a.length !== b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += (Math.abs(a[i] - b[i]) / (Math.abs(a[i]) + Math.abs(b[i])))\n    }\n    return sum;\n}","/**\n * Computes the chebyshev distance (L<sub>∞</sub>) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias chebyshev\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the chebyshev distance between {@link a} and {@link b}.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let res = [];\n    for (let i = 0; i < n; ++i) {\n        res.push(Math.abs(a[i] - b[i]));\n    }\n    return Math.max(...res);\n}\n","/**\n * Computes the cosine distance (not similarity) between {@link a} and {@link b}.\n * @memberof module:metrics\n * @alias cosine\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} The cosine distance between {@link a} and {@link b}.\n * \n * @example\n * import * as druid from \"@saehrimnir/druidjs\";\n * \n * druid.cosine([1,0],[1,1]) == 0.7853981633974484 == π/4;\n * \n */\nexport default function (a, b) {\n    if (a.length !== b.length) return undefined;\n    let n = a.length;\n    let sum = 0;\n    let sum_a = 0;\n    let sum_b = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += a[i] * b[i];\n        sum_a += a[i] * a[i];\n        sum_b += b[i] * b[i];\n    }\n    return Math.acos(sum / (Math.sqrt(sum_a) * Math.sqrt(sum_b)));\n}\n","/**\n * Computes the hamming distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias hamming\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the hamming distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let disagree = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i];\n        const y = b[i];\n        disagree += x != y;\n    }\n    return disagree / n;\n}\n","import { neumair_sum } from \"../numerical/index.js\";\n\n/**\n * Computes the inner product between two arrays of the same length.\n * @memberof module:linear_algebra\n * @alias inner_product\n * @param {Array|Float64Array} a - Array a\n * @param {Array|Float64Array} b - Array b\n * @returns The inner product between {@link a} and {@link b}\n */\nexport default function (a, b) {\n    const N = a.length;\n    if (N != b.length) {\n        throw new Error(\"Array a and b must have the same length!\")\n    }\n    let sum = 0;\n    for (let i = 0; i < N; ++i) {\n        sum += a * b;\n    }\n    return sum;\n}\n","/**\n * Computes the jaccard distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias jaccard\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the jaccard distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_non_zero = 0;\n    let num_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_non_zero += x || y;\n        num_equal += x && y;\n    }\n    return (num_non_zero - num_equal) / num_non_zero;\n}\n","/**\n * Numerical stable summation with the Kahan summation algorithm.\n * @memberof module:numerical\n * @alias kahan_sum\n * @param {Array} summands - Array of values to sum up.\n * @returns {number} The sum.\n * @see {@link https://en.wikipedia.org/wiki/Kahan_summation_algorithm}\n */\nexport default function (summands) {\n    let n = summands.length;\n    let sum = 0;\n    let compensation = 0;\n    let y, t;\n\n    for (let i = 0; i < n; ++i) {\n        y = summands[i] - compensation;\n        t = sum + y;\n        compensation = t - sum - y;\n        sum = t;\n    }\n    return sum;\n}\n","/**\n * Computes the manhattan distance (<code>l<sub>1</sub></code>) between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias manhattan\n * @param {Array<Number>} a\n * @param {Array<Number>} b\n * @returns {Number} the manhattan distance between <code>a</code> and <code>b</code>.\n */ \nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let sum = 0;\n    for (let i = 0; i < n; ++i) {\n        sum += Math.abs(a[i] - b[i]);\n    }\n    return sum;\n}\n","import { norm } from \"./index.js\";\nimport { euclidean } from \"../metrics/index.js\";\n\n/**\n * Normalizes Vector {@link v}.\n * @memberof module:matrix\n * @alias normalize\n * @param {Array<Number>|Float64Array} v - Vector\n * @param {Function} metric \n * @returns {Array<Number>|Float64Array} - The normalized vector with length 1.\n */\nexport default function(v, metric = euclidean)  {\n    const v_norm = norm(v, metric);\n    return v.map(value => value / v_norm);\n}","import { Matrix, norm } from \"../matrix/index.js\";\n\n/**\n * Computes the QR Decomposition of the Matrix {@link A} with householder transformations.\n * @memberof module:linear_algebra\n * @alias qr_householder\n * @param {Matrix} A\n * @returns {{R: Matrix, Q: Matrix}}\n * @see {@link https://en.wikipedia.org/wiki/QR_decomposition#Using_Householder_reflections}\n * @see {@link http://mlwiki.org/index.php/Householder_Transformation}\n */\nexport default function (A) {\n    const [rows, cols] = A.shape;\n    const Q = new Matrix(rows, rows, \"I\");\n    const R = A.clone();\n\n    for (let j = 0; j < cols; ++j) {\n        const x = Matrix.from(R.col(j).slice(j));\n        const x_norm = norm(x);\n        const x0 = x.entry(0, 0);\n        const rho = -Math.sign(x0);\n        const u1 = x0 - rho * x_norm;\n        const u = x.divide(u1).set_entry(0, 0, 1);\n        const beta = (-rho * u1) / x_norm;\n\n        const u_outer_u = u.outer(u);\n        const R_block = R.get_block(j, 0);\n        const new_R = R_block.sub(u_outer_u.dot(R_block).mult(beta));\n        const Q_block = Q.get_block(0, j);\n        const new_Q = Q_block.sub(Q_block.dot(u_outer_u).mult(beta));\n        R.set_block(j, 0, new_R);\n        Q.set_block(0, j, new_Q);\n    }\n    return { R, Q };\n}\n","/**\n * Computes the Sokal-Michener distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias sokal_michener\n * @param {Number[]} a \n * @param {Number[]} b \n * @returns {Number} the Sokal-Michener distance between <code>a</code> and <code>b</code>.  \n */\nexport default function(a, b) {\n    if (a.length != b.length) return undefined\n    const n = a.length;\n    let num_not_equal = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_not_equal += x != y;\n    }\n    return (2 * num_not_equal) / (n + num_not_equal);\n}","export * from \"./util/index.js\";\nexport * from \"./numerical/index.js\";\nexport * from \"./metrics/index.js\";\nexport * from \"./matrix/index.js\";\nexport * from \"./knn/index.js\";\nexport * from \"./datastructure/index.js\";\nexport * from \"./linear_algebra/index.js\";\nexport * from \"./dimred/index.js\";\nexport * from \"./optimization/index.js\";\nexport * from \"./clustering/index.js\";\n//export { version } from \"../package.json\" assert { type: \"json\"};\nexport const version = \"0.7.2\";\n","/**\n * Computes the yule distance between <code>a</code> and <code>b</code>.\n * @memberof module:metrics\n * @alias yule\n * @param {Number[]} a\n * @param {Number[]} b\n * @returns {Number} the yule distance between <code>a</code> and <code>b</code>.\n */\nexport default function (a, b) {\n    if (a.length != b.length) return undefined;\n    const n = a.length;\n    let num_true_true = 0;\n    let num_true_false = 0;\n    let num_false_true = 0;\n    for (let i = 0; i < n; ++i) {\n        const x = a[i] != 0;\n        const y = b[i] != 0;\n        num_true_true += x && y;\n        num_true_false += x && !y;\n        num_false_true += !x && x;\n    }\n    const num_false_false = n - num_true_true - num_true_false - num_false_true;\n    return num_true_false == 0 || num_false_true == 0 ? 0 : (2 * num_true_false * num_false_true) / (num_true_true * num_false_false + num_true_false * num_false_true);\n}\n"],"names":["euclidean","a","b","Math","sqrt","euclidean_squared","length","n","sum","i","a_b","k_nearest_neighbors","A","k","metric","rows","shape","D","distance_matrix","nN","Array","row","from","map","distance","col","j","sort","slice","Matrix","A_i","dist","set_entry","linspace","start","end","number","max","round","result","norm","v","vector","cols","Error","Float64Array","neumair_sum","summands","compensation","summand","t","abs","qr_gramschmidt","Q","R","q","q_dot_v","q_","v_norm","simultaneous_poweriteration","seed","max_iterations","qr","tol","randomizer","Randomizer","random","oldQ","QR","dot","values","eigenvalues","diag","eigenvectors","transpose","to2dArray","constructor","value","this","_rows","_cols","_data","type","clone","isArray","m","_","data","subarray","iterate_rows","Symbol","iterator","set_row","offset","swap_rows","row1","row2","result_col","entry","add_entry","sub_entry","T","inverse","B","max_idx","max_val","val","A_col","B_col","A_row","B_row","f","s","rows_A","cols_A","rows_B","cols_B","join","B_val","C","e","transDot","A_val","dotTrans","B_i","outer","l","concat","X","set_block","offset_row","offset_col","min","get_block","start_row","start_col","end_row","end_col","new_row","new_col","gather","row_indices","col_indices","N","row_index","col_index","_apply_array","_apply_rowwise_array","_apply_colwise_array","_apply","value_rows","value_cols","mult","inline","divide","add","sub","push","asArray","min_row_col","mean","meanRows","meanCols","solve_CG","b_i","x","r","d","z","alpha","r_next","beta","solve","L","U","LU","det","L_diag","U_diag","SVD","M","MtM","MMt","V","Sigma","sigma","Float32Array","_seed","_N","_M","_MATRIX_A","_UPPER_MASK","_LOWER_MASK","_mt","_mti","Date","getTime","mt","mti","random_int","y","mag01","kk","N_M","M_N","gauss_random","_val","c","log","choice","sample","index_list","random_index","splice","undefined","Heap","elements","accessor","comparator","heapify","_accessor","_container","_comparator","heap","container","element","floor","_heapify_down","_swap","index_a","index_b","_heapify_up","index","parentIndex","node","start_index","left","right","pop","item","first","iterate","toArray","raw_data","empty","DisjointSet","_list","Set","make_set","list","has","__disjoint_set","parent","children","size","find","union","node_x","node_y","forEach","BallTree","_Node","pivot","child1","child2","radius","_Leaf","points","_metric","_root","_construct","_greatest_spread","sorted_elements","p_index","p","Infinity","spread","reduce","acc","current","search","_search","KNN","_elements","_D","distances","H","nearest_element_index","nearest_dist","Number","isInteger","res","DR","default_parameters","parameters","_parameters","Object","assign","seal","_type","_randomizer","_is_initialized","parameter","name","hasOwnProperty","para","transform","check_init","projection","generator","init","Y","transform_async","args","PCA","super","eig_args","principal_components","X_cent","MDS","ai_","a_j","a__","_d_X","stress","d_X","d_Y","top_sum","bottom_sum","pow","powell","x0","max_iter","pfx","fx","convergence","fxi","dx","Cluster","id","centroid","depth","_calculate_centroid","l_size","r_size","l_centroid","r_centroid","new_centroid","isLeaf","leaves","descendants","left_descendants","right_descendants","KMedoids","matrix","K","_matrix","_A","_K","_max_iter","log10","_distance_matrix","_clusters","fill","_cluster_medoids","_get_random_medoids","get_clusters","x_j","_nearest_medoid","index_nearest","medoids","finish","_iteration","cache","x_o","o","DeltaTD","xs","findIndex","d_j","distance_nearest","deltaTD","d_oj","_get_distance","d_n","distance_second","d_s","filter","x_i","d_ij","nearest","second","x_m","m1","m2","index_second","cluster_medoids","indices","ceil","TD","TD0","S","S_j","S_o","delta","_choose_distant_objects","a_index","b_index","max_dist","d_ai","d_bi","_col","old_dist","d_ab","y_i","linkage","_id","_linkage","root","do","clusters","_traverse","_n","d_min","_d_min","c_size","_c_size","Uint16Array","p_max","c1","D_i_min","c2","c1_cluster","c2_cluster","c1_cluster_indices","c2_cluster_indices","new_cluster","unshift","D_c1_j","D_c2_j","neighbors","kNearestNeighbors","G","other","min_val","_cluster_centroids","_get_random_centroids","_furthest_point","candidates","Ad","cluster_centroids","random_point","init_points","sample_size","indexOf","furthest_point","clusters_changed","Ai","min_dist","min_cluster","_compute_centroid","cluster_counter","ci","iteration_result","labels","unique_labels","label_id","count","X_mean","V_mean","label","v_mean","S_b","S_w","row_v","O","W","nN_row","Z","C_trace","w","IW","control_points","DR_parameters","nc","c_i","Y_C","XA","knn","_b","ATA","ATb","I_i","X_i","g","G_i_t","W_i","epsilon","min_points","_epsilon","_min_points","_ordered_list","_DB","ordered_list","DB","cluster_index","_cluster_index","reachability_distance","processed","_get_neighbors","_core_distance","seeds","_update","_expand_cluster","core_distance","new_reachability_distance","cluster","outliers","get_cluster_affirmation","magic","init_DR","init_parameters","includes","_step","MAGIC","e1","e2","Yi","Yj","dY","dX","dq","dr","decay_start","decay_cte","_add","__add","_sub_div","__sub_div","_minus","__minus","_mult","__mult","_LR_init","_LR","_offset","exp","_momentums","_grads","_indices","this_metric","_HD_metric","_HD_metric_exaggeration","iterations","_decay_start","ratio","_distance_exaggeration","_nestrov_iteration","__quartets","max_N","shuffled_indices","Uint32Array","of","distance_exaggeration","momentums","LR","grads","_fill_MDS_grads","g_i","g_i_norm","mul","m_i","exaggeration","zero_grad","HD_metric","D_quartet","quartets","D_quartet_sum","gi","gj","gk","gl","_compute_quartet_grads","quartet","p_ab","p_ac","p_ad","p_bc","p_bd","p_cd","d_ac","d_ad","d_bc","d_bd","d_cd","sum_LD_dist","gA1","gB1","gC1","gD1","_ABCD_grads","gA2","gC2","gB2","gD2","gA3","gD3","gC3","gB3","gB4","gC4","gA4","gD4","gB5","gD5","gA5","gC5","gC6","gD6","gA6","gB6","twice_ratio","minus","sub_div","s1","div","perplexity","_iter","Htarget","Delta","druid","P","_ystep","_gains","dist_i","prow","psum","betamin","betamax","cnt","done","dp_sum","pj","N2","_P","next","iter","ystep","gains","dim","pmul","Qu","qsum","dsum","dhere","qu","grad","premult","ymean","gid","sid","gainid","newgain","sign","newsid","__lazy_distance_matrix","D_ij","_make_minimum_spanning_tree","disjoint_set","F","E","u","set_u","set_v","_Emst","__hull_cross","ax","ay","bx","by","sx","sy","__hull","x1","y1","x2","y2","lower","upper","__findAngle","p1x","p1y","p2x","p2y","sin","cos","vec","__align_hull","hull","topEdge","d2","v1","v2","transformation","tx","ty","__transform","px","py","__transform_component","yOffset","cx","cy","__align_components","points_u","points_v","hull_u","hull_v","t_u","t_v","Emst","components","component_u","component_v","weight_adj","pca","n_inliers","n_outliers","n_random","triplets","weights","_generate_triplets","lr","vel","gain","n_extra","nbrs","knn_distances","sig","_find_p","_sample_knn_triplets","n_triplets","outlier_distances","_find_weights","random_triplets","random_weights","_sample_random_triplets","max_weight","isNaN","max_weight_2","n_neighbors","n_i","sort_indices","__argsort","n_j","sim","samples","_rejection_sample","out","n_samples","max_int","rejects","interval","p_sim","p_out","_grad","y_ij","y_ik","d_ik","n_viol","loss","n_knn_triplets","Y_id","Y_jd","Y_kd","gs","go","max_iteration","_next","gamma","old_C","_update_embedding","new_gain","local_connectivity","_spread","_set_op_mix_ratio","_repulsion_strength","_negative_sample_rate","_n_epochs","_initial_alpha","_find_ab_params","xv","yv","xv_i","error","_compute_membership_strengths","sigmas","rhos","rho","curr_dist","_smooth_knn_dist","SMOOTH_K_TOLERANCE","MIN_K_DIST_SCALE","target","log2","reverse","interpolation","lo","hi","mid","search_result","non_zero_dist","non_zero_dist_length","mean_ithd","mean_d","_fuzzy_simplicial_set","distances_i","transposed_result","prod_matrix","_make_epochs_per_sample","n_epochs","_weights","weight_scl","_tocoo","graph","rows_n","cols_n","_a","_graph","_head","_tail","_epochs_per_sample","_epochs_per_negative_sample","_epoch_of_next_sample","_epoch_of_next_negative_sample","_clip","_optimize_layout","head_embedding","tail_embedding","head","tail","_alpha","epochs_per_sample","epochs_per_negative_sample","epoch_of_next_negative_sample","epoch_of_next_sample","clip","tail_length","grad_coeff","grad_d","n_neg_samples","sum_a","sum_b","acos","disagree","num_non_zero","num_equal","x_norm","u1","u_outer_u","R_block","new_R","Q_block","new_Q","num_not_equal","num_true_true","num_true_false","num_false_true"],"mappings":"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"}