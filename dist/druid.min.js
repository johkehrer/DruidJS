// https://renecutura.eu v0.5.1 Copyright 2022 Rene Cutura
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).druid=t.druid||{})}(this,(function(t){"use strict";function e(t,e){return Math.sqrt(s(t,e))}function r(t){let e=t.length,r=0,s=0;for(let n=0;n<e;++n){let e=t[n],i=r+e;Math.abs(r)>=Math.abs(e)?s+=r-i+e:s+=e-i+r,r=i}return r+s}function s(t,e){if(t.length!=e.length)return;let s=t.length,n=new Array(s);for(let r=0;r<s;++r){let s=t[r],i=e[r];n[r]=(s-i)*(s-i)}return r(n)}function n(t,r,s=e){const n=t.shape[0];let o="precomputed"==s?t:i(t,s),a=new Array(n);for(let t=0;t<n;++t)a[t]=Array.from(o.row(t)).map(((e,r)=>({i:t,j:r,distance:e}))).sort(((t,e)=>t.distance-e.distance)).slice(1,r+1);return a}function i(t,r=e){let s=t.shape[0];const n=new _(s,s);for(let e=0;e<s;++e){const i=t.row(e);for(let o=e+1;o<s;++o){const s=r(i,t.row(o));n.set_entry(e,o,s),n.set_entry(o,e,s)}}return n}function o(t,e,r=null){if(r||(r=Math.max(Math.round(e-t)+1,1)),r<2)return 1===r?[t]:[];let s=new Array(r);for(let n=r-=1;n>=0;--n)s[n]=(n*e+(r-n)*t)/r;return s}function a(t,r=e){let s=null;if(t instanceof _){let[e,r]=t.shape;if(1===e)s=t.row(0);else{if(1!==r)throw new Error("Matrix must be 1d!");s=t.col(0)}}else s=t;const n=s.length;return r(s,Float64Array.from({length:n},(()=>0)))}function h(t){const[s,n]=t.shape,i=new _(s,n,"identity"),o=new _(n,n,0);for(let h=0;h<n;++h){let n=t.col(h);for(let t=0;t<h;++t){const e=i.col(t),s=r(e.map(((t,e)=>t*n[e])));o.set_entry(t,h,s),n=n.map(((t,r)=>t-s*e[r]))}const l=a(n,e);for(let t=0;t<s;++t)i.set_entry(t,h,n[t]/l);o.set_entry(h,h,l)}return{R:o,Q:i}}function l(t,e=2,{seed:r=1212,max_iterations:n=100,qr:i=h,tol:o=1e-8}={}){const a=r instanceof c?r:new c(r);t instanceof _||(t=_.from(t));const l=t.shape[0];let{Q:u,R:f}=i(new _(l,e,(()=>2*(a.random-.5))));for(;n--;){const e=u.clone(),r=i(t.dot(u));u=r.Q,f=r.R;if(s(u.values,e.values)<o)break}return{eigenvalues:f.diag,eigenvectors:u.transpose().to2dArray}}class _{constructor(t=null,e=null,r=null){if(this._rows=t,this._cols=e,this._data=null,t&&e){if(!r)return this._data=new Float64Array(t*e),this;if("function"==typeof r){this._data=new Float64Array(t*e);for(let s=0;s<t;++s)for(let t=0;t<e;++t)this._data[s*e+t]=r(s,t);return this}if("string"==typeof r){if("zeros"===r)return new _(t,e,0);if("identity"===r||"I"===r){this._data=new Float64Array(t*e);for(let r=0;r<t;++r)this._data[r*e+r]=1;return this}if("center"===r&&t==e){this._data=new Float64Array(t*e),r=(e,r)=>(e===r?1:0)-1/t;for(let s=0;s<t;++s)for(let t=0;t<e;++t)this._data[s*e+t]=r(s,t);return this}}if("number"==typeof r){this._data=new Float64Array(t*e);for(let s=0;s<t;++s)for(let t=0;t<e;++t)this._data[s*e+t]=r;return this}}return this}static from(t,e="row"){if(t instanceof _)return t.clone();if(!(Array.isArray(t)||t instanceof Float64Array)){if("number"==typeof t)return new _(1,1,t);throw new Error("error")}{let r=t.length;if(0===r)throw new Error("Array is empty");if(!(Array.isArray(t[0])||t[0]instanceof Float64Array)){if("row"===e)return new _(1,r,((e,r)=>t[r]));if("col"===e)return new _(r,1,(e=>t[e]));if("diag"===e)return new _(r,r,((e,r)=>e==r?t[e]:0));throw new Error("1d array has NaN entries")}if(Array.isArray(t[0])||t[0]instanceof Float64Array){let e=t[0].length;for(let s=0;s<r;++s)if(t[s].length!==e)throw new Error("various array lengths");return new _(r,e,((e,r)=>t[e][r]))}}}row(t){const e=this.values,r=this._cols;return e.subarray(t*r,(t+1)*r)}*iterate_rows(){const t=this._cols,e=this._rows,r=this.values;for(let s=0;s<e;++s)yield r.subarray(s*t,(s+1)*t)}*[Symbol.iterator](){for(const t of this.iterate_rows())yield t}set_row(t,e){let r=this._cols;if(Array.isArray(e)&&e.length===r){let s=t*r;for(let t=0;t<r;++t)this.values[s+t]=e[t]}else if(e instanceof _&&e.shape[1]===r&&1===e.shape[0]){let s=t*r;for(let t=0;t<r;++t)this.values[s+t]=e._data[t]}return this}col(t){let e=new Float64Array(this._rows);for(let r=0;r<this._rows;++r)e[r]=this.values[r*this._cols+t];return e}entry(t,e){return this.values[t*this._cols+e]}set_entry(t,e,r){return this.values[t*this._cols+e]=r,this}transpose(){return new _(this._cols,this._rows,((t,e)=>this.entry(e,t)))}get T(){return this.transpose()}inverse(){const t=this._rows,e=this._cols;let r=new _(t,2*e,((t,r)=>r>=e?t===r-e?1:0:this.entry(t,r))),s=0,n=0;for(;s<t&&n<e;){var i=0;let o=-1/0;for(let e=s;e<t;++e){let t=Math.abs(r.entry(e,n));o<t&&(i=e,o=t)}if(0==r.entry(i,n))n++;else{for(let t=0;t<2*e;++t){let e=r.entry(s,t),n=r.entry(i,t);r.set_entry(s,t,e),r.set_entry(i,t,n)}for(let i=s+1;i<t;++i){let t=r.entry(i,n)/r.entry(s,n);r.set_entry(i,n,0);for(let o=n+1;o<2*e;++o)r.set_entry(i,o,r.entry(i,o)-r.entry(s,o)*t)}s++,n++}}for(let s=0;s<t;++s){let t=r.entry(s,s);for(let n=s;n<2*e;++n)r.set_entry(s,n,r.entry(s,n)/t)}for(let s=t-1;s>=0;--s){let t=r.entry(s,s);for(let n=0;n<s;n++){let i=r.entry(n,s)/t;for(let t=n;t<2*e;++t){let e=r.entry(n,t);e-=r.entry(s,t)*i,r.set_entry(n,t,e)}}}return new _(t,e,((t,s)=>r.entry(t,s+e)))}dot(t){if(t instanceof _){let e=this;if(e.shape[1]!==t.shape[0])throw new Error(`A.dot(B): A is a ${e.shape.join(" тип ")}-Matrix, B is a ${t.shape.join(" тип ")}-Matrix: \n                A has ${e.shape[1]} cols and B ${t.shape[0]} rows. \n                Must be equal!`);let r=e.shape[1];return new _(e.shape[0],t.shape[1],((s,n)=>{const i=e.row(s),o=t.col(n);let a=0;for(let t=0;t<r;++t)a+=i[t]*o[t];return a}))}if(Array.isArray(t)||t instanceof Float64Array){let e=this._rows;if(t.length!==e)throw new Error(`A.dot(B): A has ${e} cols and B has ${t.length} rows. Must be equal!`);let s=new Array(e);for(let n=0;n<e;++n)s[n]=r(this.row(n).map((e=>e*t[n])));return s}throw new Error("B must be Matrix or Array")}outer(t){let e=this,r=e._data.length;if(r!=t._data.length)return;let s=new _;return s.shape=[r,r,(r,n)=>r<=n?e._data[r]*t._data[n]:s.entry(n,r)],s}concat(t,e="horizontal"){const r=this,[s,n]=r.shape,[i,o]=t.shape;if("horizontal"==e){if(s!=i)throw new Error(`A.concat(B, "horizontal"): A and B need same number of rows, A has ${s} rows, B has ${i} rows.`);const e=new _(s,n+o,"zeros");return e.set_block(0,0,r),e.set_block(0,n,t),e}if("vertical"==e){if(n!=o)throw new Error(`A.concat(B, "vertical"): A and B need same number of columns, A has ${n} columns, B has ${o} columns.`);const e=new _(s+i,n,"zeros");return e.set_block(0,0,r),e.set_block(s,0,t),e}if("diag"==e){const e=new _(s+i,n+o,"zeros");return e.set_block(0,0,r),e.set_block(s,n,t),e}throw new Error(`type must be "horizontal" or "vertical", but type is ${e}!`)}set_block(t,e,r){let[s,n]=r.shape;for(let i=0;i<s;++i)if(!(i>this._rows))for(let s=0;s<n;++s)s>this._cols||this.set_entry(i+t,s+e,r.entry(i,s));return this}get_block(t,e,r=null,s=null){const[n,i]=this.shape;if(s=s??i,(r=r??n)<=t||s<=e)throw new Error(`\n                end_row must be greater than start_row, and \n                end_col must be greater than start_col, but\n                end_row = ${r}, start_row = ${t}, end_col = ${s}, and start_col = ${e}!`);const o=new _(r-t,s-e,"zeros");for(let n=t,i=0;n<r;++n,++i)for(let t=e,r=0;t<s;++t,++r)o.set_entry(i,r,this.entry(n,t));return o}gather(t,e){const r=t.length,s=e.length,n=new _(r,s);for(let s=0;s<r;++s){const i=t[s];for(let t=0;t<r;++t){const r=e[t];n.set_entry(s,t,this.entry(i,r))}}return n}_apply_array(t,e){const r=this.values,[s,n]=this.shape;for(let i=0;i<s;++i){const s=i*n;for(let o=0;o<n;++o){const n=s+o;r[n]=t(r[n],e(i,o))}}return this}_apply_rowwise_array(t,e){return this._apply_array(e,((e,r)=>t[r]))}_apply_colwise_array(t,e){const r=this.values,[s,n]=this.shape;for(let i=0;i<s;++i){const s=i*n;for(let o=0;o<n;++o){const n=s+o;r[n]=e(r[n],t[i])}}return this}_apply(t,e){let r=this.values;if(t instanceof _){let[s,n]=t.shape,[i,o]=this.shape;if(1===s){if(o!==n)throw new Error("cols !== value_cols");for(let s=0;s<i;++s)for(let n=0;n<o;++n)r[s*o+n]=e(r[s*o+n],t.entry(0,n))}else if(1===n){if(i!==s)throw new Error("rows !== value_rows");for(let s=0;s<i;++s)for(let n=0;n<o;++n)r[s*o+n]=e(r[s*o+n],t.entry(s,0))}else{if(i!=s||o!=n)throw new Error("error");for(let s=0;s<i;++s)for(let n=0;n<o;++n)r[s*o+n]=e(r[s*o+n],t.entry(s,n))}}else if(Array.isArray(t)){let s=this._rows,n=this._cols;if(t.length===s)for(let i=0;i<s;++i)for(let s=0;s<n;++s)r[i*n+s]=e(r[i*n+s],t[i]);else{if(t.length!==n)throw new Error("error");for(let i=0;i<s;++i)for(let s=0;s<n;++s)r[i*n+s]=e(r[i*n+s],t[s])}}else for(let s=0,n=this._rows*this._cols;s<n;++s)r[s]=e(r[s],t);return this}clone(){let t=new _;return t._rows=this._rows,t._cols=this._cols,t._data=this.values.slice(0),t}mult(t){return this.clone()._apply(t,((t,e)=>t*e))}divide(t){return this.clone()._apply(t,((t,e)=>t/e))}add(t){return this.clone()._apply(t,((t,e)=>t+e))}sub(t){return this.clone()._apply(t,((t,e)=>t-e))}get shape(){return[this._rows,this._cols]}set shape([t,e,r=(()=>0)]){this._rows=t,this._cols=e,this._data=new Float64Array(t*e);for(let s=0;s<t;++s)for(let t=0;t<e;++t)this._data[s*e+t]=r(s,t);return this}get to2dArray(){const t=[];for(const e of this.iterate_rows())t.push(e);return t}get asArray(){const t=[];for(const e of this.iterate_rows())t.push(Array.from(e));return t}get diag(){const t=this._rows,e=this._cols,r=Math.min(t,e);let s=new Float64Array(r);for(let t=0;t<r;++t)s[t]=this.entry(t,t);return s}get mean(){return this.sum/(this._rows*this._cols)}get sum(){return r(this.values)}get values(){return this._data}get meanRows(){const t=this.values,e=this._rows,r=this._cols,s=Float64Array.from({length:e});for(let n=0;n<e;++n){s[n]=0;for(let e=0;e<r;++e)s[n]+=t[n*r+e];s[n]/=r}return s}get meanCols(){const t=this.values,e=this._rows,r=this._cols,s=Float64Array.from({length:r});for(let n=0;n<r;++n){s[n]=0;for(let i=0;i<e;++i)s[n]+=t[i*r+n];s[n]/=e}return s}static solve_CG(t,e,r,s=.001){null===r&&(r=new c);const n=t.shape[0],i=e.shape[1];let o=new _(n,0);for(let a=0;a<i;++a){const i=_.from(e.col(a)).T;let h=new _(n,1,(()=>r.random)),l=i.sub(t.dot(h)),c=l.clone();do{const e=t.dot(c),r=l.T.dot(l).entry(0,0)/c.T.dot(e).entry(0,0);h=h.add(c.mult(r));const s=l.sub(e.mult(r)),n=s.T.dot(s).entry(0,0)/l.T.dot(l).entry(0,0);c=s.add(c.mult(n)),l=s}while(Math.abs(l.mean)>s);o=o.concat(h,"horizontal")}return o}static solve(t,e){let{L:r,U:s}="L"in t&&"U"in t?t:_.LU(t),n=r.shape[0],i=e.clone();for(let t=0;t<n;++t){for(let e=0;e<t-1;++e)i.set_entry(0,t,i.entry(0,t)-r.entry(t,e)*i.entry(1,e));i.set_entry(0,t,i.entry(0,t)/r.entry(t,t))}for(let t=n-1;t>=0;--t){for(let e=n-1;e>t;--e)i.set_entry(0,t,i.entry(0,t)-s.entry(t,e)*i.entry(0,e));i.set_entry(0,t,i.entry(0,t)/s.entry(t,t))}return i}static LU(t){const e=t.shape[0],r=new _(e,e,"zeros"),s=new _(e,e,"identity");for(let n=0;n<e;++n){for(let i=n;i<e;++i){let e=0;for(let t=0;t<n;++t)e+=r.entry(i,t)*s.entry(t,n);r.set_entry(i,n,t.entry(i,n)-e)}for(let i=n;i<e;++i){if(0===r.entry(n,n))return;let e=0;for(let t=0;t<n;++t)e+=r.entry(n,t)*s.entry(t,i);s.set_entry(n,i,(t.entry(n,i)-e)/r.entry(n,n))}}return{L:r,U:s}}static det(t){const e=t.shape[0],{L:r,U:s}=_.LU(t),n=r.diag,i=s.diag;let o=n[0]*i[0];for(let t=1;t<e;++t)o*=n[t]*i[t];return o}static SVD(t,e=2){const r=t.T;let s=r.dot(t),n=t.dot(r),{eigenvectors:i,eigenvalues:o}=l(s,e),{eigenvectors:a}=l(n,e);return{U:a,Sigma:o.map((t=>Math.sqrt(t))),V:i}}}class c{constructor(t){return this._N=624,this._M=397,this._MATRIX_A=2567483615,this._UPPER_MASK=2147483648,this._LOWER_MASK=2147483647,this._mt=new Array(this._N),this._mti=this.N+1,this.seed=t||(new Date).getTime(),this}set seed(t){this._seed=t;let e=this._mt;for(e[0]=t>>>0,this._mti=1;this._mti<this._N;this._mti+=1){let t=this._mti,r=e[t-1]^e[t-1]>>>30;e[t]=(1812433253*((4294901760&r)>>>16)<<16)+1812433253*(65535&r)+t,e[t]>>>=0}}get seed(){return this._seed}get random(){return this.random_int*(1/4294967296)}get random_int(){let t,e=new Array(0,this._MATRIX_A);if(this._mti>=this._N){let r,s=this._N-this._M,n=this._M-this._N;for(r=0;r<s;++r)t=this._mt[r]&this._UPPER_MASK|this._mt[r+1]&this._LOWER_MASK,this._mt[r]=this._mt[r+this._M]^t>>>1^e[1&t];for(;r<this._N-1;++r)t=this._mt[r]&this._UPPER_MASK|this._mt[r+1]&this._LOWER_MASK,this._mt[r]=this._mt[r+n]^t>>>1^e[1&t];t=this._mt[this._N-1]&this._UPPER_MASK|this._mt[0]&this._LOWER_MASK,this._mt[this._N-1]=this._mt[this._M-1]^t>>>1^e[1&t],this._mti=0}return t=this._mt[this._mti+=1],t^=t>>>11,t^=t<<7&2636928640,t^=t<<15&4022730752,t^=t>>>18,t>>>0}choice(t,e){if(t instanceof _){let r=t.shape[0];if(e>r)throw new Error("n bigger than A!");let s=new Array(e),n=o(0,r-1);for(let t=0,r=n.length;t<e;++t,--r){let e=this.random_int%r;s[t]=n.splice(e,1)[0]}return s.map((e=>t.row(e)))}if(Array.isArray(t)||t instanceof Float64Array){let r=t.length;if(e>r)throw new Error("n bigger than A!");let s=new Array(e),n=o(0,r-1);for(let t=0,r=n.length;t<e;++t,--r){let e=this.random_int%r;s[t]=n.splice(e,1)[0]}return s.map((e=>t[e]))}}static choice(t,e,r=1212){return new c(r).choice(t,e)}}function u(t){let e;for(const r of t)null!=r&&(e<r||void 0===e&&r>=r)&&(e=r);return e}function f(t){let e;for(const r of t)null!=r&&(e>r||void 0===e&&r<=r)&&(e=r);return e}class d{constructor(t=null,e=(t=>t),r="min"){return t?d.heapify(t,e,r):(this._accessor=e,this._container=[],this._comparator="min"==r?(t,e)=>t<e:"max"==r?(t,e)=>t>e:r,this)}static heapify(t,e=(t=>t),r="min"){const s=new d(null,e,r),n=s._container;for(const r of t)n.push({element:r,value:e(r)});for(let e=Math.floor(t.length/2-1);e>=0;--e)s._heapify_down(e);return s}_swap(t,e){const r=this._container;[r[e],r[t]]=[r[t],r[e]]}_heapify_up(){const t=this._container;let e=t.length-1;for(;e>0;){let r=Math.floor((e-1)/2);if(!this._comparator(t[e].value,t[r].value))break;this._swap(r,e),e=r}}push(t){const e={element:t,value:this._accessor(t)};return this._container.push(e),this._heapify_up(),this}_heapify_down(t=0){const e=this._container,r=this._comparator,s=e.length;let n=2*t+1,i=2*t+2,o=t;if(o>s)throw"index higher than length";n<s&&r(e[n].value,e[o].value)&&(o=n),i<s&&r(e[i].value,e[o].value)&&(o=i),o!==t&&(this._swap(t,o),this._heapify_down(o))}pop(){const t=this._container;if(0===t.length)return null;if(1===t.length)return t.pop();this._swap(0,t.length-1);const e=t.pop();return this._heapify_down(),e}get first(){return this._container.length>0?this._container[0]:null}*iterate(){for(let t=0,e=this._container.length;t<e;++t)yield this._container[t].element}toArray(){return this.data().sort(((t,e)=>this._comparator(t,e)?-1:0))}data(){return this._container.map((t=>t.element))}raw_data(){return this._container}get length(){return this._container.length}get empty(){return 0===this.length}}class p{constructor(t=null){if(this._list=new Set,t)for(const e of t)this.make_set(e);return this}make_set(t){const e=this._list;return e.has(t)||(e.add(t),t.__disjoint_set={},t.__disjoint_set.parent=t,t.__disjoint_set.children=new Set([t]),t.__disjoint_set.size=1),this}find(t){return this._list.has(t)?t.__disjoint_set.parent!==t?(t.__disjoint_set.children.add(...t),t.__disjoint_set.parent=this.find(t.__disjoint_set.parent),t.__disjoint_set.parent):t:null}union(t,e){let r=this.find(t),s=this.find(e);return r===s||(r.__disjoint_set.size<s.__disjoint_set.size&&([r,s]=[s,r]),s.__disjoint_set.parent=r,s.__disjoint_set.children.forEach(r.__disjoint_set.children.add,r.__disjoint_set.children),r.__disjoint_set.size+=s.__disjoint_set.size),this}}class m{constructor(t=null,r=e){return this._Node=class{constructor(t,e=null,r=null,s=null){this.pivot=t,this.child1=e,this.child2=r,this.radius=s}},this._Leaf=class{constructor(t){this.points=t}},this._metric=r,t&&this.add(t),this}add(t){return t=t.map(((t,e)=>({index:e,element:t}))),this._root=this._construct(t),this}_construct(t){if(1===t.length)return new this._Leaf(t);{let e,r=this._greatest_spread(t),s=t.sort(((t,e)=>t.element[r]-e.element[r])),n=s.length,i=Math.floor(n/2),o=t[i],a=s.slice(0,i),h=s.slice(i,n),l=Math.max(...t.map((t=>this._metric(o.element,t.element))));return e=a.length>0&&h.length>0?new this._Node(o,this._construct(a),this._construct(h),l):new this._Leaf(t),e}}_greatest_spread(t){let e=t[0].element.length,r=new Array(e);for(let t=0;t<e;++t)r[t]=[1/0,-1/0];let s=t.reduce(((t,r)=>{for(let s=0;s<e;++s)t[s][0]=Math.min(t[s][0],r.element[s]),t[s][1]=Math.max(t[s][1],r.element[s]);return t}),r);s=s.map((t=>t[1]-t[0]));let n=0;for(let t=0;t<e;++t)n=s[t]>s[n]?t:n;return n}search(t,e=5){return this._search(t,e,new d(null,(e=>this._metric(e.element,t)),"max"),this._root)}_search(t,e,r,s){if(r.length>=e&&s.pivot&&s.radius&&this._metric(t,s.pivot.element)-s.radius>=r.first.value)return r;if(s.child1&&this._search(t,e,r,s.child1),s.child2&&this._search(t,e,r,s.child2),s.points)for(let t=0,n=s.points.length;t<n;++t){let n=s.points[t];e>r.length?r.push(n):(r.push(n),r.pop())}return r}}class y{constructor(t=null,r=e){this._metric=r,this._elements=t instanceof _?t:_.from(t);const s=this._elements.shape[0];this._D="precomputed"===r?this._elements.clone():i(this._elements,r),this.KNN=[];for(let t=0;t<s;++t){const e=this._D.row(t),r=new d(null,(t=>t.value),"min");for(let t=0;t<s;++t)r.push({value:e[t],index:t});this.KNN.push(r)}}search(t,e=5){const r=this._metric,s=this.KNN;let n;if(Array.isArray(t)){if("precomputed"==this._metric)throw"Search by query element is only possible when not using a precomputed distance matrix!";const e=this._elements,i=s.length;let o=null,a=1/0;for(let s=0;s<i;++s){const n=r(t,e.row(s));n<a&&(o=s,a=n)}n=s[o]}else Number.isInteger(t)&&(n=s[t]);let i=[];for(let t=0;t<e;++t)i.push(n.pop());return i.forEach((t=>n.push(t.element))),i}}class g{constructor(t,e,r){if(this._parameters=Object.assign(Object.seal(e),r),Array.isArray(t))this._type="array",this.X=_.from(t);else{if(!(t instanceof _))throw new Error("No valid type for X!");this._type="matrix",this.X=t}return[this._N,this._D]=this.X.shape,this._randomizer=new c(this._parameters.seed),this._is_initialized=!1,this}parameter(t,e=null){if(!this._parameters.hasOwnProperty(t))throw new Error(`${t} is not a valid parameter!`);return e?(this._parameters[t]=e,this._is_initialized=!1,this):this._parameters[t]}para(t,e=null){return this.parameter(t,e)}p(t,e=null){return this.parameter(t,e)}transform(){return this.check_init(),this.projection}*generator(){return this.transform()}check_init(){return this._is_initialized||"function"!=typeof this.init||(this.init(),this._is_initialized=!0),this}get projection(){if(this.hasOwnProperty("Y"))return this.check_init(),"matrix"===this._type?this.Y:this.Y.to2dArray;throw new Error("The dataset is not transformed yet!")}async transform_async(...t){return this.transform(...t)}static transform(...t){return new this(...t).transform()}static async transform_async(...t){return this.transform(...t)}static*generator(...t){const e=new this(...t).generator();for(const t of e)yield t}}class w extends g{constructor(t,e){return super(t,{d:2,seed:1212,eig_args:{}},e),this._parameters.eig_args.hasOwnProperty("seed")||(this._parameters.eig_args.seed=this._randomizer),this}transform(t=null){const e=this.principal_components();if(null==t){const t=this.X;return this.Y=t.dot(e),this.projection}if(Array.isArray(t))return _.from(t).dot(e).asArray;if(t instanceof _)return t.dot(e);throw new Error("No valid type for A!")}principal_components(){if(this.V)return this.V;const{d:t,eig_args:e}=this._parameters,r=this.X,s=_.from(r.meanCols),n=r.sub(s),i=n.transpose().dot(n),{eigenvectors:o}=l(i,t,e);return this.V=_.from(o).transpose(),this.V}static principal_components(t,e){return new this(t,e).principal_components()}}class A extends g{constructor(t,r){return super(t,{d:2,metric:e,seed:1212,eig_args:{}},r),this._parameters.eig_args.hasOwnProperty("seed")||(this._parameters.eig_args.seed=this._randomizer),this}transform(){const t=this.X,e=t.shape[0],{d:r,metric:s,eig_args:n}=this._parameters,o="precomputed"===s?t:i(t,s),a=o.meanCols,h=o.meanRows,c=o.mean;this._d_X=o;const u=new _(e,e,((t,e)=>o.entry(t,e)-a[t]-h[e]+c)),{eigenvectors:f}=l(u,r,n);return this.Y=_.from(f).transpose(),this.projection}stress(){const t=this.X.shape[0],r=this.Y,s=this._d_X,n=new _;n.shape=[t,t,(t,s)=>t<s?e(r.row(t),r.row(s)):n.entry(s,t)];let i=0,o=0;for(let e=0;e<t;++e)for(let r=e+1;r<t;++r)i+=Math.pow(s.entry(e,r)-n.entry(e,r),2),o+=Math.pow(s.entry(e,r),2);return Math.sqrt(i/o)}}function x(t,e,r=300){const s=e.length;let n=.001,i=1e4,o=e.slice(),a=t(o),h=!1;for(;r-- >=0&&!h;){h=!0;for(let e=0;e<s;++e){o[e]+=1e-6;let r=t(o);o[e]-=1e-6;let s=(r-a)/1e-6;Math.abs(s)>.01&&(h=!1),o[e]-=n*s,a=t(o)}n*=i>=a?1.05:.4,i=a}return o}class b{constructor(t,e,r,s,n,i,o,a){return this.id=t,this.left=e,this.right=r,this.dist=s,this.index=i,this.size=o??e.size+r.size,this.depth=a??1+Math.max(e.depth,r.depth),this.centroid=n??this._calculate_centroid(e,r),this.parent=null,this}_calculate_centroid(t,e){const r=t.size,s=e.size,n=t.centroid,i=e.centroid,o=this.size,a=t.centroid.length,h=new Float64Array(a);for(let t=0;t<a;++t)h[t]=(r*n[t]+s*i[t])/o;return h}get isLeaf(){return 0===this.depth}leaves(){if(this.isLeaf)return[this];const t=this.left,e=this.right;return(t.isLeaf?[t]:t.leaves()).concat(e.isLeaf?[e]:e.leaves())}descendants(){if(this.isLeaf)return[this];const t=this.left.descendants(),e=this.right.descendants();return t.concat(e).concat([this])}}class M{constructor(t,r,s=null,n=e,i=1212){this._metric=n,this._matrix=t,this._A=this._matrix.to2dArray,this._K=r;const[o,a]=t.shape;return this._N=o,this._D=a,this._max_iter=s||10*Math.log10(o),this._distance_matrix=new _(o,o,"zeros"),r>o&&(r=o),this._randomizer=new c(i),this._clusters=new Array(o).fill(void 0),this._cluster_medoids=this._get_random_medoids(r),this._is_initialized=!1,this}get_clusters(){const t=this._K,e=this._A;this._is_initialized||this.init(t,this._cluster_medoids);const r=new Array(t).fill().map((()=>new Array));return e.forEach(((t,e)=>{r[this._nearest_medoid(t,e).index_nearest].push(e)})),r.medoids=this._cluster_medoids,r}async*generator(){const t=this._max_iter;yield this.get_clusters();let e=!1,r=0;do{e=this._iteration(),yield this.get_clusters()}while(!e&&++r<t)}_iteration(){const t=this._A,e=this._K,r=this._cluster_medoids,s=t.map(((t,e)=>this._nearest_medoid(t,e))),n=new Array(e).fill(0),i=new Array(e).fill(null);if(t.forEach(((o,a)=>{if(r.findIndex((t=>t===a))<0){const r=s[a].distance_nearest,h=new Array(e).fill(-r);t.forEach(((t,r)=>{if(a===r)return;const n=this._get_distance(r,a,t,o),{index_nearest:i,distance_nearest:l,distance_second:_}=s[r];if(h[i]+=Math.min(n,_)-l,n<l)for(let t=0;t<e;++t)t!==i&&(h[t]+=n-l)})),h.map(((t,e)=>[t,e])).filter((([t,e])=>t<n[e])).forEach((([t,e])=>{t<n[e]&&(n[e]=t,i[e]=a)}))}})),f(n)>=0)return!0;for(;f(n)<0;){const e=n.map(((t,e)=>[t,e])).sort((([t],[e])=>t-e))[0][1];0==r.filter((t=>t==i[e])).length&&(r[e]=i[e]),n[e]=0,n.map(((t,e)=>[t,e])).filter((([t])=>t<0)).forEach((([i,o])=>{const a=t[o];let h=0;t.forEach(((t,n)=>{r.findIndex((t=>t!=o&&t==n))>=0||e!=o&&(s[n].index_nearest===r[o]?h+=Math.min(this._get_distance(n,o,t,a),s[n].distance_second)-s[n].distance_nearest:h+=Math.min(this._get_distance(n,o,t,a)-s[n].distance_nearest,0))})),n[o]=h}))}return this._cluster_medoids=r,!1}_get_distance(t,e,r=null,s=null){if(t===e)return 0;const n=this._distance_matrix,i=this._A,o=this._metric;let a=n.entry(t,e);return 0===a&&(a=o(r||i[t],s||i[e]),n.set_entry(t,e,a),n.set_entry(e,t,a)),a}_nearest_medoid(t,e){const r=this._cluster_medoids,s=this._A,[n,i]=r.map(((r,n)=>{const i=s[r];return[this._get_distance(e,r,t,i),n]})).sort(((t,e)=>t[0]-e[0]));return{distance_nearest:n[0],index_nearest:n[1],distance_second:i[0],index_second:i[1]}}init(t,e){t||(t=this._K),e||(e=this._get_random_medoids(t));const r=this._max_iter;let s=!1,n=0;do{s=this._iteration()}while(!s&&++n<r);return this}_get_random_medoids(t){const e=this._N,r=this._A,s=o(0,e-1),n=this._randomizer,i=Math.min(e,10+Math.ceil(Math.sqrt(e))),a=new Array(i).fill(1/0),h=[];let l=1/0,_=n.choice(s,i);for(let t=0;t<i;++t){const e=_[t],s=r[e];for(let e=0;e<i;++e){if(e===t)continue;const n=r[_[e]];a[t]+=this._get_distance(t,e,s,n)}a[t]<l&&(l=a[t],h.push(e))}for(let e=1;e<t;++e){let t=1/0;_=n.choice(s.filter((t=>h.findIndex((e=>e===t))<0)),i);for(let e=0;e<i;++e){let s=0;const n=_[e],o=r[n];for(let t=0;t<i;++t){if(t===e)continue;const i=_[t],a=r[i];let l=this._get_distance(n,i,o,a)-f(h.map((t=>this._get_distance(i,t,a))));l<0&&(s+=l)}s<t&&(t=s,h.push(n))}l+=t}return h.slice(0,t)}}t.BallTree=m,t.DisjointSet=p,t.FASTMAP=class extends g{constructor(t,r){return super(t,{d:2,metric:e,seed:1212},r),this}_choose_distant_objects(t){const e=this.X.shape[0];let r=this._randomizer.random_int%e-1,s=null,n=-1/0;for(let i=0;i<e;++i){const e=t(r,i);e>n&&(n=e,s=i)}n=-1/0;for(let i=0;i<e;++i){const e=t(s,i);e>n&&(n=e,r=i)}return[r,s,n]}transform(){const t=this.X,e=t.shape[0],{d:r,metric:s}=this._parameters,n=new _(e,r,0);let i=(e,r)=>s(t.row(e),t.row(r));for(let t=0;t<r;++t){let r=i;const[s,o,a]=this._choose_distant_objects(i);if(0!==a){for(let r=0;r<e;++r){const e=(i(s,r)**2+a**2-i(o,r)**2)/(2*a);n.set_entry(r,t,e)}i=(e,s)=>Math.sqrt(r(e,s)**2-(n.entry(e,t)-n.entry(s,t))**2)}}return this.Y=n,this.projection}},t.Heap=d,t.Hierarchical_Clustering=class{constructor(t,r="complete",s=e){if(this._id=0,this._matrix=t instanceof _?t:_.from(t),this._metric=s,this._linkage=r,"precomputed"===s&&this._matrix.shape[0]!==this._matrix.shape[1])throw new Error("If metric is 'precomputed', then matrix has to be square!");return this.init(),this.root=this.do(),this}get_clusters(t,e="distance"){let r,s=[];switch(e){case"distance":r=t=>t.dist;break;case"depth":r=t=>t.depth;break;default:throw new Error("invalid type")}return this._traverse(this.root,r,t,s),s}_traverse(t,e,r,s){e(t)<=r?s.push(t.leaves()):(this._traverse(t.left,e,r,s),this._traverse(t.right,e,r,s))}init(){const t=this._metric,e=this._matrix,r=this._n=e.shape[0],s=this._d_min=new Float64Array(r);let n;if("precomputed"!==t){n=new _(r,r,0);for(let i=0;i<r;++i){s[i]=0;for(let o=0;o<r;++o)n.set_entry(i,o,i===o?1/0:t(e.row(i),e.row(o))),n.entry(i,s[i])>n.entry(i,o)&&(s[i]=o)}}else{n=this._matrix.clone();for(let t=0;t<r;++t)for(let e=0;e<r;++e)t===e?n.set_entry(t,e,1/0):n.entry(t,s[t])>n.entry(t,e)&&(s[t]=e)}this._distance_matrix=n;const i=this._clusters=new Array(r),o=this._c_size=new Uint16Array(r);for(let t=0;t<r;++t)i[t]=[],i[t][0]=new b(this._id++,null,null,0,e.row(t),t,1,0),o[t]=1;return this}do(){const t=this._n,e=this._d_min,r=this._distance_matrix,s=this._clusters,n=this._c_size,i=this._linkage;let o=null;for(let a=0,h=t-1;a<h;++a){let a=0;for(let s=0;s<t;++s){let n=r.entry(s,e[s]);for(let i=s+1;i<t;++i)n>r.entry(s,i)&&(e[s]=i,n=r.entry(s,e[s]))}for(let s=0;s<t;++s)r.entry(s,e[s])<r.entry(a,e[a])&&(a=s);let h=e[a],l=s[a][0],_=s[h][0],c=l.isLeaf?[l.index]:l.index,u=_.isLeaf?[_.index]:_.index,f=c.concat(u),d=new b(this._id++,l,_,r.entry(a,h),null,f);l.parent=d,_.parent=d,s[a].unshift(d),n[a]+=n[h];for(let e=0;e<t;++e){const t=r.entry(a,e),s=r.entry(h,e);let o;switch(i){case"single":o=Math.min(t,s);break;case"complete":o=Math.max(t,s);break;case"average":o=(n[a]*t+n[h]*s)/(n[a]+n[e])}r.set_entry(e,a,o),r.set_entry(a,e,o)}r.set_entry(a,a,1/0);for(let e=0;e<t;++e)r.set_entry(e,h,1/0),r.set_entry(h,e,1/0);o=d}return o}},t.ISOMAP=class extends g{constructor(t,r){return super(t,{neighbors:void 0,d:2,metric:e,seed:1212,eig_args:{}},r),this.parameter("neighbors",Math.min(this._parameters.neighbors??Math.max(Math.floor(this.X.shape[0]/10),2),this._N-1)),this._parameters.eig_args.hasOwnProperty("seed")||(this._parameters.eig_args.seed=this._randomizer),this}transform(){this.check_init();const t=this.X,e=this._N,{d:r,metric:s,eig_args:n,neighbors:i}=this._parameters,o=new _;o.shape=[e,e,(e,r)=>e<=r?s(t.row(e),t.row(r)):o.entry(r,e)];const a=[];for(let t=0;t<e;++t){const r=[];for(let s=0;s<e;++s)r.push({index:s,distance:o.entry(t,s)});const s=new d(r,(t=>t.distance),"min");a.push(s.toArray().slice(1,i+1))}const h=new _(e,e,((t,e)=>{const r=a[t].find((t=>t.index===e));return r?r.distance:1/0}));for(let t=0;t<e;++t)for(let r=0;r<e;++r)for(let s=0;s<e;++s)h.set_entry(t,r,Math.min(h.entry(t,r),h.entry(t,s)+h.entry(s,r)));let c=new Float64Array(e),u=new Float64Array(e),f=0;const p=new _(e,e,((t,e)=>{let r=h.entry(t,e);return r=r===1/0?0:r,c[t]+=r,u[e]+=r,f+=r,r}));c=c.map((t=>t/e)),u=u.map((t=>t/e)),f/=e**2;const m=new _(e,e,((t,e)=>p.entry(t,e)-c[t]-u[e]+f)),{eigenvectors:y}=l(m,r,n);return this.Y=_.from(y).transpose(),this.projection}},t.KMeans=class{constructor(t,r,s=e,n=1987,i=!0){this._metric=s,this._matrix=t,this._K=r;const[o,a]=t.shape;return this._N=o,this._D=a,r>o&&(r=o),this._randomizer=new c(n),this._clusters=new Array(o).fill(void 0),this._cluster_centroids=this._get_random_centroids(r),i&&this.init(r,this._cluster_centroids),this}get_clusters(){const t=this._K,e=this._clusters,r=new Array(t).fill().map((()=>new Array));return e.forEach(((t,e)=>r[t].push(e))),r}_furthest_point(t,e){const r=this._matrix,s=this._metric;let n=t.length;return d.heapify(e,(e=>{const i=r.row(e);let o=0;for(let e=0;e<n;++e)o+=s(i,t[e]);return o}),"max").pop().element}_get_random_centroids(t){const e=this._N,r=this._randomizer,s=this._matrix,n=new Array(t).fill(),i=o(0,e-1),a=r.random_int%(e-1);n[0]=s.row(a);const h=[a],l=Math.floor((e-t)/t);for(let e=1;e<t;++e){const t=r.choice(i.filter((t=>-1==h.indexOf(t))),l),o=this._furthest_point(n.slice(0,e),t);h.push(o),n[e]=s.row(o)}return n}_iteration(t){const e=t.length,r=this._N,s=this._D,n=this._matrix,i=this._metric,o=this._clusters;let a=!1;for(let s=0;s<r;++s){const r=n.row(s);let h=1/0,l=null;for(let s=0;s<e;++s){let e=i(t[s],r);e<h&&(h=e,l=s)}o[s]!==l&&(a=!0),o[s]=l}for(let r=0;r<e;++r){const e=t[r];for(let t=0;t<s;++t)e[t]=0}return this._compute_centroid(t),{clusters_changed:a,cluster_centroids:t}}_compute_centroid(t){const e=t.length,r=this._N,s=this._D,n=this._matrix,i=this._clusters,o=new Array(e).fill(0);for(let e=0;e<r;++e){const r=n.row(e),a=i[e];o[a]++;const h=t[a];for(let t=0;t<s;++t)h[t]+=r[t]}for(let r=0;r<e;++r){const e=o[r];t[r]=t[r].map((t=>t/e))}}init(t,e){t||(t=this._K),e||(e=this._get_random_centroids(t));let r=!1;do{const t=this._iteration(e);e=t.cluster_centroids,r=t.clusters_changed}while(r)}},t.KMedoids=M,t.KNN=y,t.LDA=class extends g{constructor(t,e){return super(t,{labels:null,d:2,seed:1212,eig_args:{}},e),this._parameters.eig_args.hasOwnProperty("seed")||(this._parameters.eig_args.seed=this._randomizer),this}transform(){const t=this.X,[e,r]=t.shape,{d:s,labels:n,eig_args:i}=this._parameters;if(null===n||n.length!=e)throw new Error("LDA needs parameter label to every datapoint to work!");const o={};let a=0;n.forEach(((e,r)=>{e in o?(o[e].count++,o[e].rows.push(t.row(r))):o[e]={id:a++,count:1,rows:[t.row(r)]}}));const h=t.mean,c=new _(a,r);for(const t in o){const e=_.from(o[t].rows).meanCols;for(let s=0;s<r;++s)c.set_entry(o[t].id,s,e[s])}let u=new _(r,r);for(const t in o){const e=c.row(o[t].id),s=new _(r,1,(t=>e[t]-h)),n=o[t].count;u=u.add(s.dot(s.transpose()).mult(n))}let f=new _(r,r);for(const t in o){const e=c.row(o[t].id),s=new _(r,1,(t=>e[t])),n=o[t].rows;for(let e=0,i=o[t].count;e<i;++e){const t=new _(r,1,((t,r)=>n[e][t]-s.entry(t,0)));f=f.add(t.dot(t.transpose()))}}let{eigenvectors:d}=l(f.inverse().dot(u),s,i);return d=_.from(d).transpose(),this.Y=t.dot(d),this.projection}},t.LLE=class extends g{constructor(t,r){return super(t,{neighbors:void 0,d:2,metric:e,seed:1212,eig_args:{}},r),this.parameter("neighbors",Math.min(r.neighbors??Math.max(Math.floor(this._N/10),2),this._N-1)),this._parameters.eig_args.hasOwnProperty("seed")||(this._parameters.eig_args.seed=this._randomizer),this}transform(){const t=this.X,e=this._N,s=this._D,{neighbors:i,d:o,eig_args:a,metric:h}=this._parameters,c=n(t,i,h),u=new _(i,1,1),f=new _(e,e);for(let n=0;n<e;++n){const e=c[n],o=new _(i,s,((r,s)=>t.entry(e[r].j,s)-t.entry(n,s))),a=o.dot(o.T);if(i>s){const t=r(a.diag)/1e3;for(let e=0;e<i;++e)a.set_entry(e,e,a.entry(e,e)+t)}let h=_.solve_CG(a,u,this._randomizer);h=h.divide(h.sum);for(let t=0;t<i;++t)f.set_entry(n,e[t].j,h.entry(t,0))}const d=new _(e,e,"identity").sub(f),p=d.T.dot(d),{eigenvectors:m}=l(p.T.inverse(),o+1,a);return this.Y=_.from(m.slice(1,1+o)).T,this.projection}},t.LSP=class extends g{constructor(t,r){return super(t,{neighbors:void 0,control_points:void 0,d:2,metric:e,seed:1212},r),this.parameter("neighbors",Math.min(r.neighbors??Math.max(Math.floor(this._N/10),2),this._N-1)),this.parameter("control_points",Math.min(r.control_points??Math.ceil(Math.sqrt(this._N)),this._N-1)),this._is_initialized=!1,this}init(t=A,e={},r=m){if(this._is_initialized)return this;const s=this.X,n=this._N,i=this.parameter("neighbors"),o=this.parameter("d"),a=this.parameter("seed"),h=this.parameter("metric");e=Object.assign({d:o,metric:h,seed:a},e);const l=this.parameter("control_points"),c=new M(s,l,null,h).get_clusters().medoids,u=new _(l,n,"zeros");c.forEach(((t,e)=>{u.set_entry(e,t,1)}));const f=new t(_.from(c.map((t=>s.row(t)))),e).transform(),d=s.to2dArray,p=new r(d,h),y=new _(n,n,"I"),g=-1/i;d.forEach(((t,e)=>{for(const{index:r}of p.search(t,i).iterate())e!==r&&y.set_entry(e,r,g)}));const w=y.concat(u,"vertical"),x=new _(n,o,"zeros").concat(f,"vertical");return this._A=w,this._b=x,this._is_initialized=!0,this}transform(){this.check_init();const t=this._A,e=t.T,r=this._b,s=e.dot(t),n=e.dot(r);return this.Y=_.solve_CG(s,n,this._randomizer),this.projection}},t.LTSA=class extends g{constructor(t,r){if(super(t,{neighbors:void 0,d:2,metric:e,seed:1212,eig_args:{}},r),this.parameter("neighbors",Math.min(r.neighbors??Math.max(Math.floor(this._N/10),2),this._N-1)),this._parameters.eig_args.hasOwnProperty("seed")||(this._parameters.eig_args.seed=this._randomizer),this._D<=this.parameter("d"))throw new Error(`Dimensionality of X (D = ${this._D}) must be greater than the required dimensionality of the result (d = ${this.parameter("d")})!`);return this}transform(){const t=this.X,[e,r]=t.shape,{d:s,neighbors:i,metric:o,eig_args:a}=this._parameters,h=n(t,i,o),c=new _(r,r,"center"),u=new _(e,e,0);for(let r=0;r<e;++r){const e=[r,...h[r].map((t=>t.j))];let n=_.from(e.map((e=>t.row(e))));n=n.dot(c);const o=n.dot(n.transpose()),{eigenvectors:f}=l(o,s,a),d=_.from(f),p=d.transpose().dot(d).add(1/Math.sqrt(i+1));for(let t=0;t<i+1;++t)for(let r=0;r<i+1;++r)u.set_entry(e[t],e[r],u.entry(e[t],e[r])-(t===r?1:0)+p.entry(t,r))}const{eigenvectors:f}=l(u,s+1,a);return this.Y=_.from(f.slice(1)).transpose(),this.projection}},t.MDS=A,t.Matrix=_,t.OPTICS=class{constructor(t,r,s,n=e){return this._matrix=t,this._epsilon=r,this._min_points=s,this._metric=n,this._ordered_list=[],this._clusters=[],this._DB=new Array(t.shape[0]).fill(),this.init(),this}init(){const t=this._ordered_list,e=this._matrix,r=e.shape[0],s=this._DB,n=this._clusters;let i=this._cluster_index=0;for(let t=0;t<r;++t)s[t]={element:e.row(t),index:t,reachability_distance:void 0,processed:!1};for(const e of s)if(!e.processed&&(e.neighbors=this._get_neighbors(e),e.processed=!0,n.push([e.index]),i=n.length-1,t.push(e),null!=this._core_distance(e))){const t=new d(null,(t=>t.reachability_distance),"min");this._update(e,t),this._expand_cluster(t,n[i])}return this}_get_neighbors(t){if("neighbors"in t)return t.neighbors;const e=this._DB,r=this._metric,s=this._epsilon,n=[];for(const i of e)i.index!=t.index&&r(t.element,i.element)<s&&n.push(i);return n}_core_distance(t){const e=this._min_points,r=this._metric;if(!(t.neighbors&&t.neighbors.length<=e))return r(t.element,t.neighbors[e].element)}_update(t,e){const r=this._metric,s=this._core_distance(t),n=this._get_neighbors(t);for(const i of n){if(i.processed)continue;const n=Math.max(s,r(t.element,i.element));e.raw_data().findIndex((t=>t.element==i))<0?(i.reachability_distance=n,e.push(i)):n<i.reachability_distance&&(i.reachability_distance=n,e=d.heapify(e.data(),(t=>t.reachability_distance),"min"))}}_expand_cluster(t,e){const r=this._ordered_list;for(;!t.empty;){const s=t.pop().element;s.neighbors=this._get_neighbors(s),s.processed=!0,e.push(s.index),r.push(s),null!=this._core_distance(s)&&(this._update(s,t),this._expand_cluster(t,e))}}get_clusters(){const t=[],e=[],r=this._min_points;for(const s of this._clusters)s.length<r?e.push(...s):t.push(s);return t.push(e),t}get_cluster_affirmation(){const t=this._matrix.shape[0],e=new Array(t).fill(),r=this.get_clusters();for(let t=0,s=r.length;t<s;++t){const n=r[t];for(const r of n)e[r]=t<s-1?t:-1}return e}},t.PCA=w,t.Randomizer=c,t.SAMMON=class extends g{constructor(t,r){return super(t,{magic:.1,d:2,metric:e,seed:1212,init_DR:"random",init_parameters:{}},r),this}init(){const t=this.X.shape[0],{d:e,metric:r,init_DR:s,init_parameters:n}=this._parameters;if("random"===s){const r=this._randomizer;this.Y=new _(t,e,(()=>r.random))}else{if(!["PCA","MDS"].includes(s))throw new Error('init_DR needs to be either "random" or a DR method!');this.Y=_.from("PCA"==s?w.transform(this.X,n):A.transform(this.X,n))}return this.distance_matrix="precomputed"==r?_.from(this.X):i(this.X,r),this}transform(t=200){this._is_initialized||this.init();for(let e=0;e<t;++e)this._step();return this.projection}*generator(t=200){this._is_initialized||this.init();for(let e=0;e<t;++e)this._step(),yield this.projection;return this.projection}_step(){const t=this.parameter("magic"),e=this.distance_matrix,r=this.X.shape[0],{d:s,metric:n}=this._parameters;let i=this.Y,o=new _(r,s,0),a=new Float64Array(s);for(let h=0;h<r;++h){let l=new Float64Array(s),_=new Float64Array(s);const c=i.row(h);for(let t=0;t<r;++t){if(h===t)continue;const r=i.row(t),o=new Float64Array(s);for(let t=0;t<s;++t)o[t]=c[t]-r[t];const a=n(c,r),u=e.entry(h,t),f=u-a,d=Math.max(u*a,.01);for(let t=0;t<s;++t)l[t]+=o[t]*f/d,_[t]+=(f-Math.pow(o[t],2)*(1+f/a)/a)/d}for(let e=0;e<s;++e){const r=i.entry(h,e)+(t*l[e]/Math.abs(_[e])||0);o.set_entry(h,e,r),a[e]+=r}}for(let t=0;t<s;++t)a[t]/=r;for(let t=0;t<r;++t)for(let e=0;e<s;++e)i.set_entry(t,e,o.entry(t,e)-a[e]);return i}},t.TSNE=class extends g{constructor(t,r){return super(t,{perplexity:50,epsilon:10,d:2,metric:e,seed:1212},r),[this._N,this._D]=this.X.shape,this._iter=0,this.Y=new _(this._N,this.parameter("d"),(()=>this._randomizer.random)),this}init(){const t=Math.log(this.parameter("perplexity")),e=this._N,r=this._D,{metric:s}=this._parameters,n=this.X;let i;if("precomputed"==s)i=druid.Matrix.from(n);else{i=new _(e,e);for(let t=0;t<e;++t){const r=n.row(t);for(let o=t+1;o<e;++o){const e=s(r,n.row(o));i.set_entry(t,o,e),i.set_entry(o,t,e)}}}const o=new _(e,e,"zeros");this._ystep=new _(e,r,"zeros"),this._gains=new _(e,r,1);let a=new Float64Array(e);for(let r=0;r<e;++r){let s=-1/0,n=1/0,h=1,l=!1,_=0;for(;!l;){let o=0;for(let t=0;t<e;++t){let e=Math.exp(-i.entry(r,t)*h);r===t&&(e=0),a[t]=e,o+=e}let c=0;for(let t=0;t<e;++t){let e=0===o?0:a[t]/o;a[t]=e,e>1e-7&&(c-=e*Math.log(e))}c>t?(s=h,h=n===1/0?2*h:(h+n)/2):(n=h,h=s===-1/0?h/2:(h+s)/2),++_,Math.abs(c-t)<1e-4&&(l=!0),_>=50&&(l=!0)}for(let t=0;t<e;++t)o.set_entry(r,t,a[t])}const h=new _(e,e,"zeros"),l=2*e;for(let t=0;t<e;++t)for(let r=t;r<e;++r){const e=Math.max((o.entry(t,r)+o.entry(r,t))/l,1e-100);h.set_entry(t,r,e),h.set_entry(r,t,e)}return this._P=h,this}transform(t=500){this.check_init();for(let e=0;e<t;++e)this.next();return this.projection}*generator(t=500){this.check_init();for(let e=0;e<t;++e)this.next(),yield this.projection;return this.projection}next(){const t=++this._iter,e=this._P,r=this._ystep,s=this._gains,n=this._N,{d:i,epsilon:o}=this._parameters;let a=this.Y;const h=t<100?4:1,l=new _(n,n,"zeros");let c=0;for(let t=0;t<n;++t)for(let e=t+1;e<n;++e){let r=0;for(let s=0;s<i;++s){const n=a.entry(t,s)-a.entry(e,s);r+=n*n}const s=1/(1+r);l.set_entry(t,e,s),l.set_entry(e,t,s),c+=2*s}const u=new _(n,n,0);for(let t=0;t<n;++t)for(let e=t+1;e<n;++e){const r=Math.max(l.entry(t,e)/c,1e-100);u.set_entry(t,e,r),u.set_entry(e,t,r)}const f=new _(n,i,"zeros");for(let t=0;t<n;++t)for(let r=0;r<n;++r){const s=4*(h*e.entry(t,r)-u.entry(t,r))*l.entry(t,r);for(let e=0;e<i;++e)f.set_entry(t,e,f.entry(t,e)+s*(a.entry(t,e)-a.entry(r,e)))}let d=new Float64Array(i);for(let e=0;e<n;++e)for(let n=0;n<i;++n){const i=f.entry(e,n),h=r.entry(e,n),l=s.entry(e,n);let _=Math.sign(i)===Math.sign(h)?.8*l:l+.2;_<.01&&(_=.01),s.set_entry(e,n,_);const c=(t<250?.5:.8)*h-o*_*i;r.set_entry(e,n,c),a.set_entry(e,n,a.entry(e,n)+c),d[n]+=a.entry(e,n)}for(let t=0;t<n;++t)for(let e=0;e<2;++e)a.set_entry(t,e,a.entry(t,e)-d[e]/n);return this.Y}},t.TopoMap=class extends g{constructor(t,r){return super(t,{metric:e,seed:1212},r),[this._N,this._D]=this.X.shape,this._distance_matrix=new _(this._N,this._N,0),this}__lazy_distance_matrix(t,e,r){const s=this._distance_matrix,n=this.X,i=s.entry(t,e);if(0===i){let i=r(n.row(t),n.row(e));return s.set_entry(t,e,i),s.set_entry(e,t,i),i}return i}_make_minimum_spanning_tree(t=e){const r=this._N,s=[...this.X];let n=new p(s);const i=[];let o=[];for(let e=0;e<r;++e)for(let s=e+1;s<r;++s)o.push([e,s,this.__lazy_distance_matrix(e,s,t)]);o=o.sort(((t,e)=>t[2]-e[2]));for(const[t,e,r]of o){const o=n.find(s[t]),a=n.find(s[e]);o!==a&&(i.push([t,e,r]),n.union(o,a))}return i.sort(((t,e)=>t[2]-e[2]))}init(){const{metric:t}=this._parameters;return this.Y=new _(this._N,2,0),this._Emst=this._make_minimum_spanning_tree(t),this._is_initialized=!0,this}__hull_cross([t,e],[r,s],[n,i]){return(r-t)*(i-e)-(s-e)*(n-t)<=0}__hull(t){const e=t.sort((([t,e],[r,s])=>e-s||t-r)),r=e.length;if(r<=2)return e;const s=[];for(let t=0;t<r;++t){for(;s.length>=2&&this.__hull_cross(s[s.length-2],s[s.length-1],e[t]);)s.pop();s.push(e[t])}const n=[];for(let t=r-1;t>=0;--t){for(;n.length>=2&&this.__hull_cross(n[n.length-2],n[n.length-1],e[t]);)n.pop();n.push(e[t])}return n.pop(),s.pop(),s.concat(n)}__findAngle([t,r],[s,n]){const i=e([t,r],[s,n]);if(0===i)return{sin:0,cos:1};const o=[(s-t)/i,(n-r)/i],a=o[0];let h=Math.sqrt(1-a*a);return h=o[1]>=0?-h:h,{sin:h,cos:a}}__align_hull(t,r,s){let n,i,o,a=-1;for(let s=0;s<t.length;++s){const i=e(t[s],r);(-1===a||n>i)&&(n=i,a=s)}s?(i=t[a],o=t[(a+1)%t.length]):(0==a&&(a=t.length-1),i=t[a],o=t[(a-1)%t.length]);const h={tx:-t[a][0],ty:-t[a][1]};if(t.length>=2){const{sin:t,cos:e}=this.__findAngle(i,o);h.sin=t,h.cos=e}else h.sin=0,h.cos=1;return h}__transform([t,e],{tx:r,ty:s,sin:n,cos:i}){let o=t+r,a=e+s;return[o*i-a*n,o*n+a*i]}__transform_component(t,e,r){const s=t.length;for(let n=0;n<s;++n){const s=t[n],[i,o]=this.__transform(s,e);s[0]=i,s[1]=o+r}}__align_components(t,e,r){const s=[...t.__disjoint_set.children],n=[...e.__disjoint_set.children],i=this.__hull(s),o=this.__hull(n),a=this.__align_hull(i,t,!1),h=this.__align_hull(o,e,!0);this.__transform_component(s,a,0),this.__transform_component(n,h,r)}transform(){this._is_initialized||this.init();const t=this._Emst,e=this.Y.to2dArray,r=new p(e.map(((t,e)=>(t.i=e,t))));for(const[s,n,i]of t){const t=r.find(e[s]),o=r.find(e[n]);t!==o&&(this.__align_components(t,o,i),r.union(t,o))}return this.projection}*generator(){this._is_initialized||this.init();const t=this._Emst,e=this.Y.to2dArray,r=new p(e.map(((t,e)=>(t.i=e,t))));for(const[s,n,i]of t){const t=r.find(e[s]),o=r.find(e[n]);t!==o&&(this.__align_components(t,o,i),r.union(t,o),yield this.projection)}return this.projection}},t.TriMap=class extends g{constructor(t,r){return super(t,{weight_adj:500,c:5,d:2,metric:e,tol:1e-8,seed:1212},r),this}init(t=null,e=null){const r=this.X,s=r.shape[0],{d:n,metric:i,c:o}=this._parameters;this.n_inliers=2*o,this.n_outliers=1*o,this.n_random=1*o,this.Y=t||new w(r,n).transform(),this.knn=e||new m(r.to2dArray,i);const{triplets:a,weights:h}=this._generate_triplets(this.n_inliers,this.n_outliers,this.n_random);return this.triplets=a,this.weights=h,this.lr=1e3*s/a.shape[0],this.C=1/0,this.vel=new _(s,n,0),this.gain=new _(s,n,1),this}_generate_triplets(t,e,r){const{metric:s,weight_adj:n}=this._parameters,i=this.X,o=i.shape[0],a=this.knn,h=Math.min(t+20,o),l=new _(o,h),c=new _(o,h);for(let t=0;t<o;++t)a.search(i.row(t),h+1).raw_data().filter((t=>0!=t.value)).sort(((t,e)=>t.value-e.value)).forEach(((e,r)=>{l.set_entry(t,r,e.element.index),c.set_entry(t,r,e.value)}));const u=new Float64Array(o);for(let t=0;t<o;++t)u[t]=Math.max((c.entry(t,3)+c.entry(t,4)+c.entry(t,5)+c.entry(t,6))/4,1e-10);const f=this._find_p(c,u,l);let d=this._sample_knn_triplets(f,l,t,e),p=d.shape[0];const m=new Float64Array(p);for(let t=0;t<p;++t){const e=d.entry(t,0),r=d.entry(t,2);m[t]=s(i.row(e),i.row(r))}let y=this._find_weights(d,f,l,m,u);if(r>0){const{random_triplets:t,random_weights:e}=this._sample_random_triplets(i,r,u);d=d.concat(t,"vertical"),y=Float64Array.from([...y,...e])}p=d.shape[0];let g=-1/0;for(let t=0;t<p;++t)isNaN(y[t])&&(y[t]=0),g<y[t]&&(g=y[t]);let w=-1/0;for(let t=0;t<p;++t)y[t]/=g,y[t]+=1e-4,y[t]=Math.log(1+n*y[t]),w<y[t]&&(w=y[t]);for(let t=0;t<p;++t)y[t]/=w;return{triplets:d,weights:y}}_find_p(t,e,r){const[s,n]=t.shape;return new _(s,n,((s,n)=>Math.exp(-(t.entry(s,n)**2)/e[s]/e[r.entry(s,n)])))}_sample_knn_triplets(t,e,r,s){const n=e.shape[0],i=new _(n*r*s,3);for(let o=0;o<n;++o){let a=o*r*s;const h=this.__argsort(t.row(o).map((t=>-t)));for(let t=0;t<r;++t){let r=t*s;const l=e.entry(o,h[t]),_=this._rejection_sample(s,n,h.slice(0,t+1));for(let t=0;t<s;++t){const e=a+r+t,s=_[t];i.set_entry(e,0,o),i.set_entry(e,1,l),i.set_entry(e,2,s)}}}return i}__argsort(t){return t.map(((t,e)=>({d:t,i:e}))).sort(((t,e)=>t.d-e.d)).map((t=>t.i))}_rejection_sample(t,e,r){const s=this._randomizer,n=o(0,e-1).filter((t=>r.indexOf(t)<0));return s.choice(n,Math.min(t,n.length-2))}_find_weights(t,e,r,s,n){const i=t.shape[0],o=new Float64Array(i);for(let a=0;a<i;++a){const i=t.entry(a,0),h=r.row(i).indexOf(t.entry(a,1)),l=e.entry(i,h);let _=Math.exp(-(s[a]**2)/(n[i]*n[t.entry(a,2)]));_<1e-20&&(_=1e-20),o[a]=l/_}return o}_sample_random_triplets(t,e,r){const s=this.parameter("metric"),n=this._randomizer,i=t.shape[0],a=new _(i*e,3),h=new Float64Array(i*e);for(let l=0;l<i;++l){const _=l*e,c=[...o(0,l-1),...o(l+1,i-1)];for(let i=0;i<e;++i){let[e,o]=n.choice(c,2),u=Math.exp(-(s(t.row(l),t.row(e))**2)/(r[l]*r[e]));u<1e-20&&(u=1e-20);let f=Math.exp(-(s(t.row(l),t.row(o))**2)/(r[l]*r[o]));f<1e-20&&(f=1e-20),u<f&&([e,o]=[o,e],[u,f]=[f,u]);const d=_+i;a.set_entry(d,0,l),a.set_entry(d,1,e),a.set_entry(d,2,o),h[d]=u/f}}return{random_triplets:a,random_weights:h}}_grad(t){const e=this.n_inliers,r=this.n_outliers,s=this.triplets,n=this.weights,[i,o]=t.shape,a=s.shape[0],h=new _(i,o,0);let l=new Float64Array(o),c=new Float64Array(o),u=1,f=1,d=0,p=0;const m=i*e*r;for(let e=0;e<a;++e){const[i,a,_]=s.row(e);if(e%r==0||e>=m){u=1,f=1;for(let e=0;e<o;++e){const r=t.entry(i,e),s=t.entry(a,e),n=t.entry(_,e);l[e]=r-s,c[e]=r-n,u+=l[e]**2,f+=c[e]**2}}else{f=1;for(let e=0;e<o;++e){const r=t.entry(i,e),s=t.entry(_,e);c[e]=r-s,f+=c[e]**2}}u>f&&++d,p+=n[e]/(1+f/u);const y=(n[e]/(u+f))**2;for(let t=0;t<o;++t){const e=l[t]*f*y,r=c[t]*u*y;h.set_entry(i,t,h.entry(i,t)+e-r),h.set_entry(a,t,h.entry(a,t)-e),h.set_entry(_,t,h.entry(_,t)+r)}}return{grad:h,loss:p,n_viol:d}}transform(t=400){this.check_init();for(let e=0;e<t;++e)this._next(e);return this.projection}*generator(t=800){this.check_init();for(let e=0;e<t;++e)this._next(e),yield this.projection;return this.projection}_next(t){const e=t>150?.5:.3,r=this.C,s=this.vel,n=this.Y.add(s.mult(e)),{grad:i,loss:o,n_viol:a}=this._grad(n);return this.C=o,this.Y=this._update_embedding(n,t,i),this.lr*=r>o+this._parameters.tol?1.01:.9,this.Y}_update_embedding(t,e,r){const[s,n]=t.shape,i=e>150?.9:.5,o=this.gain,a=this.vel,h=this.lr;for(let e=0;e<s;++e)for(let s=0;s<n;++s){const n=Math.sign(a.entry(e,s))!=Math.sign(r.entry(e,s))?o.entry(e,s)+.2:Math.max(.8*o.entry(e,s),.01);o.set_entry(e,s,n),a.set_entry(e,s,i*a.entry(e,s)-h*o.entry(e,s)*r.entry(e,s)),t.set_entry(e,s,t.entry(e,s)+a.entry(e,s))}return t}},t.UMAP=class extends g{constructor(t,r){if(super(t,{n_neighbors:15,local_connectivity:1,min_dist:1,d:2,metric:e,seed:1212,_spread:1,_set_op_mix_ratio:1,_repulsion_strength:1,_negative_sample_rate:5,_n_epochs:350,_initial_alpha:1},r),[this._N,this._D]=this.X.shape,this.parameter("n_neighbors")>this._N)throw new Error(`Parameter n_neighbors (=${this.parameter("n_neighbors")}) needs to be smaller than dataset size (N=${this._N})!`);if(this.parameter("local_connectivity")>this.parameter("n_neighbors"))throw new Error(`Parameter local_connectivity (=${this.parameter("local_connectivity")}) needs to be smaller than parameter n_neighbors (=${this.parameter("n_neighbors")})`);this._iter=0;const s=this._randomizer;return this.Y=new _(this._N,this.parameter("d"),(()=>s.random)),this}_find_ab_params(t,e){const s=o(0,3*t,300),n=o(0,3*t,300);for(let r=0,i=s.length;r<i;++r){const i=s[r];n[r]=i<e?1:Math.exp(-(i-e)/t)}return x((t=>{const e=o(1,300).map(((e,r)=>{return n[r]-(i=s[r],o=t[0],a=t[1],1/(1+o*Math.pow(i,2*a)));var i,o,a}));return Math.sqrt(r(e.map((t=>t*t))))}),[1,1])}_compute_membership_strengths(t,e,r){for(let s=0,n=t.length;s<n;++s)for(let n=0,i=t[s].length;n<i;++n){const i=t[s][n].value-r[s];t[s][n].value=i>0?Math.exp(-i/e[s]):1}return t}_smooth_knn_dist(t,e){const r=1e-5,s=.001,{local_connectivity:n,metric:i}=this._parameters,o=Math.log2(e),a=[],h=[],l=this.X,_=l.shape[0],c=[];if("precomputed"===i)for(let r=0;r<_;++r)c.push(t.search(r,e).reverse());else for(const r of l)c.push(t.search(r,e).raw_data().reverse());for(let t=0;t<_;++t){let i=0,l=1/0,_=1;const u=c[t],f=u.filter((t=>t.value>0)),d=f.length;if(d>=n){const e=Math.floor(n),s=n-e;e>0?(a.push(f[e-1]),s>r&&(a[t].value+=s*(f[e].value-f[e-1]))):a[t].value=s*f[0].value}else d>0&&(a[t]=f[d-1].value);for(let s=0;s<64;++s){let s=0;for(let r=0;r<e;++r){const e=u[r].value-a[t];s+=e>0?Math.exp(-e/_):1}if(Math.abs(s-o)<r)break;s>o?[l,_]=[_,(i+l)/2]:[i,_]=l===1/0?[_,2*_]:[_,(i+l)/2]}h[t]=_;const p=u.reduce(((t,e)=>t+e.value),0)/u.length;if(a[t]>0)h[t]<s*p&&(h[t]=s*p);else{const e=c.reduce(((t,e)=>t+e.reduce(((t,e)=>t+e.value),0)/e.length));h[t]>s*e&&(h[t]=s*e)}}return{distances:c,sigmas:h,rhos:a}}_fuzzy_simplicial_set(t,e){const r=t.shape[0],{metric:s,_set_op_mix_ratio:n}=this._parameters,i="precomputed"===s?new y(t,"precomputed"):new m(t.to2dArray,s);let{distances:o,sigmas:a,rhos:h}=this._smooth_knn_dist(i,e);o=this._compute_membership_strengths(o,a,h);const l=new _(r,r,"zeros");for(let t=0;t<r;++t){const e=o[t];for(let r=0;r<e.length;++r)l.set_entry(t,e[r].element.index,e[r].value)}const c=l.T,u=l.mult(c);return l.add(c).sub(u).mult(n).add(u.mult(1-n))}_make_epochs_per_sample(t){const e=this._weights,r=new Float32Array(e.length).fill(-1),s=u(e),n=e.map((e=>t*(e/s)));for(let e=0;e<r.length;++e)n[e]>0&&(r[e]=Math.round(t/n[e]));return r}_tocoo(t){const e=[],r=[],s=[],[n,i]=t.shape;for(let o=0;o<n;++o)for(let n=0;n<i;++n){const i=t.entry(o,n);0!==i&&(e.push(o),r.push(n),s.push(i))}return{rows:e,cols:r,data:s}}init(){const{_spread:t,min_dist:e,n_neighbors:r,_n_epochs:s,_negative_sample_rate:n}=this._parameters,[i,o]=this._find_ab_params(t,e);this._a=i,this._b=o,this._graph=this._fuzzy_simplicial_set(this.X,r);const{rows:a,cols:h,data:l}=this._tocoo(this._graph);return this._head=a,this._tail=h,this._weights=l,this._epochs_per_sample=this._make_epochs_per_sample(s),this._epochs_per_negative_sample=this._epochs_per_sample.map((t=>t*n)),this._epoch_of_next_sample=this._epochs_per_sample.slice(),this._epoch_of_next_negative_sample=this._epochs_per_negative_sample.slice(),this}graph(){return this.check_init(),{cols:this._head,rows:this._tail,weights:this._weights}}transform(t=350){this.parameter("_n_epochs")!=t&&(this.parameter("_n_epochs",t),this.init()),this.check_init();for(let e=0;e<t;++e)this.next();return this.projection}*generator(t=350){this.parameter("_n_epochs")!=t&&(this.parameter("_n_epochs",t),this.init()),this.check_init();for(let e=0;e<t;++e)this.next(),yield this.projection;return this.projection}_clip(t){return t>4?4:t<-4?-4:t}_optimize_layout(t,e,r,n){const i=this._randomizer,{_repulsion_strength:o,d:a}=this._parameters,{_alpha:h,_a:l,_b:_,_epochs_per_sample:c,_epochs_per_negative_sample:u,_epoch_of_next_negative_sample:f,_epoch_of_next_sample:d,_clip:p}=this,m=n.length;for(let y=0,g=c.length;y<g;++y)if(d[y]<=this._iter){const g=r[y],w=n[y],A=t.row(g),x=e.row(w),b=s(A,x);let M=0;b>0&&(M=-2*l*_*Math.pow(b,_-1)/(l*Math.pow(b,_)+1));for(let r=0;r<a;++r){const s=p(M*(A[r]-x[r]))*h,n=A[r]+s,i=x[r]-s;A[r]=n,x[r]=i,t.set_entry(g,r,n),e.set_entry(w,r,i)}d[y]+=c[y];const v=(this._iter-f[y])/u[y];for(let r=0;r<v;++r){const r=i.random_int%m,c=e.row(n[r]),u=s(A,c);let f=0;if(u>0)f=2*o*_/((.01+u)*(l*Math.pow(u,_)+1));else if(g===r)continue;for(let s=0;s<a;++s){const i=p(f*(A[s]-c[s]))*h,o=A[s]+i,a=c[s]-i;A[s]=o,c[s]=a,t.set_entry(g,s,o),e.set_entry(n[r],s,a)}}f[y]+=v*u[y]}return t}next(){const t=++this._iter,e=this.Y,{_initial_alpha:r,_n_epochs:s}=this._parameters;return this._alpha=r*(1-t/s),this.Y=this._optimize_layout(e,e,this._head,this._tail),this.Y}},t.canberra=function(t,e){if(t.length!==e.length)return;let r=t.length,s=0;for(let n=0;n<r;++n)s+=Math.abs(t[n]-e[n])/(Math.abs(t[n])+Math.abs(e[n]));return s},t.chebyshev=function(t,e){if(t.length!=e.length)return;let r=t.length,s=[];for(let n=0;n<r;++n)s.push(Math.abs(t[n]-e[n]));return Math.max(...s)},t.cosine=function(t,e){if(t.length!==e.length)return;let r=t.length,s=0,n=0,i=0;for(let o=0;o<r;++o)s+=t[o]*e[o],n+=t[o]*t[o],i+=e[o]*e[o];return Math.acos(s/(Math.sqrt(n)*Math.sqrt(i)))},t.distance_matrix=i,t.euclidean=e,t.euclidean_squared=s,t.hamming=function(t,e){if(t.length!=e.length)return;const r=t.length;let s=0;for(let n=0;n<r;++n){s+=t[n]!=e[n]}return s/r},t.inner_product=function(t,e){const r=t.length;if(r!=e.length)throw new Error("Array a and b must have the same length!");let s=0;for(let n=0;n<r;++n)s+=t*e;return s},t.jaccard=function(t,e){if(t.length!=e.length)return;const r=t.length;let s=0,n=0;for(let i=0;i<r;++i){const r=0!=t[i],o=0!=e[i];s+=r||o,n+=r&&o}return(s-n)/s},t.k_nearest_neighbors=n,t.kahan_sum=function(t){let e,r,s=t.length,n=0,i=0;for(let o=0;o<s;++o)e=t[o]-i,r=n+e,i=r-n-e,n=r;return n},t.linspace=o,t.manhattan=function(t,e){if(t.length!=e.length)return;let r=t.length,s=0;for(let n=0;n<r;++n)s+=Math.abs(t[n]-e[n]);return s},t.max=u,t.min=f,t.neumair_sum=r,t.norm=a,t.normalize=function(t,r=e){const s=a(t,r);return t.map((t=>t/s))},t.powell=x,t.qr=h,t.qr_householder=function(t){const[e,r]=t.shape,s=new _(e,e,"I"),n=t.clone();for(let t=0;t<r;++t){const e=_.from(n.col(t).slice(t)),r=a(e),i=e.entry(0,0),o=-Math.sign(i),h=i-o*r,l=e.divide(h).set_entry(0,0,1),c=-o*h/r,u=l.outer(l),f=n.get_block(t,0),d=f.sub(u.dot(f).mult(c)),p=s.get_block(0,t),m=p.sub(p.dot(u).mult(c));n.set_block(t,0,d),s.set_block(0,t,m)}return{R:n,Q:s}},t.simultaneous_poweriteration=l,t.sokal_michener=function(t,e){if(t.length!=e.length)return;const r=t.length;let s=0;for(let n=0;n<r;++n){s+=0!=t[n]!=(0!=e[n])}return 2*s/(r+s)},t.version="0.5.1",t.yule=function(t,e){if(t.length!=e.length)return;const r=t.length;let s=0,n=0,i=0;for(let o=0;o<r;++o){const r=0!=t[o],a=0!=e[o];s+=r&&a,n+=r&&!a,i+=!r&&r}return 0==n||0==i?0:2*n*i/(s*(r-s-n-i)+n*i)},Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
